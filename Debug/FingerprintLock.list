
FingerprintLock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000988c  0800d588  0800d588  0001d588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016e14  08016e14  0003021c  2**0
                  CONTENTS
  4 .ARM          00000008  08016e14  08016e14  00026e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016e1c  08016e1c  0003021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016e1c  08016e1c  00026e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016e20  08016e20  00026e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  08016e24  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003021c  2**0
                  CONTENTS
 10 .bss          0000066c  2000021c  2000021c  0003021c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000888  20000888  0003021c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030246  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ee5a  00000000  00000000  00030289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000244d  00000000  00000000  0004f0e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a30  00000000  00000000  00051530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007ea  00000000  00000000  00051f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002a48  00000000  00000000  0005274a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000df05  00000000  00000000  00055192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000191d4  00000000  00000000  00063097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003c68  00000000  00000000  0007c26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000021c 	.word	0x2000021c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d56c 	.word	0x0800d56c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000220 	.word	0x20000220
 80001cc:	0800d56c 	.word	0x0800d56c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_frsub>:
 8000be8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bec:	e002      	b.n	8000bf4 <__addsf3>
 8000bee:	bf00      	nop

08000bf0 <__aeabi_fsub>:
 8000bf0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bf4 <__addsf3>:
 8000bf4:	0042      	lsls	r2, r0, #1
 8000bf6:	bf1f      	itttt	ne
 8000bf8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bfc:	ea92 0f03 	teqne	r2, r3
 8000c00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c08:	d06a      	beq.n	8000ce0 <__addsf3+0xec>
 8000c0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c12:	bfc1      	itttt	gt
 8000c14:	18d2      	addgt	r2, r2, r3
 8000c16:	4041      	eorgt	r1, r0
 8000c18:	4048      	eorgt	r0, r1
 8000c1a:	4041      	eorgt	r1, r0
 8000c1c:	bfb8      	it	lt
 8000c1e:	425b      	neglt	r3, r3
 8000c20:	2b19      	cmp	r3, #25
 8000c22:	bf88      	it	hi
 8000c24:	4770      	bxhi	lr
 8000c26:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c32:	bf18      	it	ne
 8000c34:	4240      	negne	r0, r0
 8000c36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c3a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4249      	negne	r1, r1
 8000c46:	ea92 0f03 	teq	r2, r3
 8000c4a:	d03f      	beq.n	8000ccc <__addsf3+0xd8>
 8000c4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c50:	fa41 fc03 	asr.w	ip, r1, r3
 8000c54:	eb10 000c 	adds.w	r0, r0, ip
 8000c58:	f1c3 0320 	rsb	r3, r3, #32
 8000c5c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c60:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__addsf3+0x78>
 8000c66:	4249      	negs	r1, r1
 8000c68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c70:	d313      	bcc.n	8000c9a <__addsf3+0xa6>
 8000c72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c76:	d306      	bcc.n	8000c86 <__addsf3+0x92>
 8000c78:	0840      	lsrs	r0, r0, #1
 8000c7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c7e:	f102 0201 	add.w	r2, r2, #1
 8000c82:	2afe      	cmp	r2, #254	; 0xfe
 8000c84:	d251      	bcs.n	8000d2a <__addsf3+0x136>
 8000c86:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c8e:	bf08      	it	eq
 8000c90:	f020 0001 	biceq.w	r0, r0, #1
 8000c94:	ea40 0003 	orr.w	r0, r0, r3
 8000c98:	4770      	bx	lr
 8000c9a:	0049      	lsls	r1, r1, #1
 8000c9c:	eb40 0000 	adc.w	r0, r0, r0
 8000ca0:	3a01      	subs	r2, #1
 8000ca2:	bf28      	it	cs
 8000ca4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ca8:	d2ed      	bcs.n	8000c86 <__addsf3+0x92>
 8000caa:	fab0 fc80 	clz	ip, r0
 8000cae:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cb2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cb6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cba:	bfaa      	itet	ge
 8000cbc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc0:	4252      	neglt	r2, r2
 8000cc2:	4318      	orrge	r0, r3
 8000cc4:	bfbc      	itt	lt
 8000cc6:	40d0      	lsrlt	r0, r2
 8000cc8:	4318      	orrlt	r0, r3
 8000cca:	4770      	bx	lr
 8000ccc:	f092 0f00 	teq	r2, #0
 8000cd0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cd4:	bf06      	itte	eq
 8000cd6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cda:	3201      	addeq	r2, #1
 8000cdc:	3b01      	subne	r3, #1
 8000cde:	e7b5      	b.n	8000c4c <__addsf3+0x58>
 8000ce0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ce4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ce8:	bf18      	it	ne
 8000cea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cee:	d021      	beq.n	8000d34 <__addsf3+0x140>
 8000cf0:	ea92 0f03 	teq	r2, r3
 8000cf4:	d004      	beq.n	8000d00 <__addsf3+0x10c>
 8000cf6:	f092 0f00 	teq	r2, #0
 8000cfa:	bf08      	it	eq
 8000cfc:	4608      	moveq	r0, r1
 8000cfe:	4770      	bx	lr
 8000d00:	ea90 0f01 	teq	r0, r1
 8000d04:	bf1c      	itt	ne
 8000d06:	2000      	movne	r0, #0
 8000d08:	4770      	bxne	lr
 8000d0a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d0e:	d104      	bne.n	8000d1a <__addsf3+0x126>
 8000d10:	0040      	lsls	r0, r0, #1
 8000d12:	bf28      	it	cs
 8000d14:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d18:	4770      	bx	lr
 8000d1a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d1e:	bf3c      	itt	cc
 8000d20:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d24:	4770      	bxcc	lr
 8000d26:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d2a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d32:	4770      	bx	lr
 8000d34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d38:	bf16      	itet	ne
 8000d3a:	4608      	movne	r0, r1
 8000d3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d40:	4601      	movne	r1, r0
 8000d42:	0242      	lsls	r2, r0, #9
 8000d44:	bf06      	itte	eq
 8000d46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d4a:	ea90 0f01 	teqeq	r0, r1
 8000d4e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d52:	4770      	bx	lr

08000d54 <__aeabi_ui2f>:
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	e004      	b.n	8000d64 <__aeabi_i2f+0x8>
 8000d5a:	bf00      	nop

08000d5c <__aeabi_i2f>:
 8000d5c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d60:	bf48      	it	mi
 8000d62:	4240      	negmi	r0, r0
 8000d64:	ea5f 0c00 	movs.w	ip, r0
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d70:	4601      	mov	r1, r0
 8000d72:	f04f 0000 	mov.w	r0, #0
 8000d76:	e01c      	b.n	8000db2 <__aeabi_l2f+0x2a>

08000d78 <__aeabi_ul2f>:
 8000d78:	ea50 0201 	orrs.w	r2, r0, r1
 8000d7c:	bf08      	it	eq
 8000d7e:	4770      	bxeq	lr
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	e00a      	b.n	8000d9c <__aeabi_l2f+0x14>
 8000d86:	bf00      	nop

08000d88 <__aeabi_l2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d94:	d502      	bpl.n	8000d9c <__aeabi_l2f+0x14>
 8000d96:	4240      	negs	r0, r0
 8000d98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d9c:	ea5f 0c01 	movs.w	ip, r1
 8000da0:	bf02      	ittt	eq
 8000da2:	4684      	moveq	ip, r0
 8000da4:	4601      	moveq	r1, r0
 8000da6:	2000      	moveq	r0, #0
 8000da8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dac:	bf08      	it	eq
 8000dae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000db2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000db6:	fabc f28c 	clz	r2, ip
 8000dba:	3a08      	subs	r2, #8
 8000dbc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc0:	db10      	blt.n	8000de4 <__aeabi_l2f+0x5c>
 8000dc2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dcc:	f1c2 0220 	rsb	r2, r2, #32
 8000dd0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd8:	eb43 0002 	adc.w	r0, r3, r2
 8000ddc:	bf08      	it	eq
 8000dde:	f020 0001 	biceq.w	r0, r0, #1
 8000de2:	4770      	bx	lr
 8000de4:	f102 0220 	add.w	r2, r2, #32
 8000de8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dec:	f1c2 0220 	rsb	r2, r2, #32
 8000df0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000df4:	fa21 f202 	lsr.w	r2, r1, r2
 8000df8:	eb43 0002 	adc.w	r0, r3, r2
 8000dfc:	bf08      	it	eq
 8000dfe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_uldivmod>:
 8000e04:	b953      	cbnz	r3, 8000e1c <__aeabi_uldivmod+0x18>
 8000e06:	b94a      	cbnz	r2, 8000e1c <__aeabi_uldivmod+0x18>
 8000e08:	2900      	cmp	r1, #0
 8000e0a:	bf08      	it	eq
 8000e0c:	2800      	cmpeq	r0, #0
 8000e0e:	bf1c      	itt	ne
 8000e10:	f04f 31ff 	movne.w	r1, #4294967295
 8000e14:	f04f 30ff 	movne.w	r0, #4294967295
 8000e18:	f000 b970 	b.w	80010fc <__aeabi_idiv0>
 8000e1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e24:	f000 f806 	bl	8000e34 <__udivmoddi4>
 8000e28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e30:	b004      	add	sp, #16
 8000e32:	4770      	bx	lr

08000e34 <__udivmoddi4>:
 8000e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e38:	9e08      	ldr	r6, [sp, #32]
 8000e3a:	460d      	mov	r5, r1
 8000e3c:	4604      	mov	r4, r0
 8000e3e:	460f      	mov	r7, r1
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d14a      	bne.n	8000eda <__udivmoddi4+0xa6>
 8000e44:	428a      	cmp	r2, r1
 8000e46:	4694      	mov	ip, r2
 8000e48:	d965      	bls.n	8000f16 <__udivmoddi4+0xe2>
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	b143      	cbz	r3, 8000e62 <__udivmoddi4+0x2e>
 8000e50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e54:	f1c3 0220 	rsb	r2, r3, #32
 8000e58:	409f      	lsls	r7, r3
 8000e5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5e:	4317      	orrs	r7, r2
 8000e60:	409c      	lsls	r4, r3
 8000e62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e66:	fa1f f58c 	uxth.w	r5, ip
 8000e6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e6e:	0c22      	lsrs	r2, r4, #16
 8000e70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e78:	fb01 f005 	mul.w	r0, r1, r5
 8000e7c:	4290      	cmp	r0, r2
 8000e7e:	d90a      	bls.n	8000e96 <__udivmoddi4+0x62>
 8000e80:	eb1c 0202 	adds.w	r2, ip, r2
 8000e84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e88:	f080 811b 	bcs.w	80010c2 <__udivmoddi4+0x28e>
 8000e8c:	4290      	cmp	r0, r2
 8000e8e:	f240 8118 	bls.w	80010c2 <__udivmoddi4+0x28e>
 8000e92:	3902      	subs	r1, #2
 8000e94:	4462      	add	r2, ip
 8000e96:	1a12      	subs	r2, r2, r0
 8000e98:	b2a4      	uxth	r4, r4
 8000e9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ea2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea6:	fb00 f505 	mul.w	r5, r0, r5
 8000eaa:	42a5      	cmp	r5, r4
 8000eac:	d90a      	bls.n	8000ec4 <__udivmoddi4+0x90>
 8000eae:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb6:	f080 8106 	bcs.w	80010c6 <__udivmoddi4+0x292>
 8000eba:	42a5      	cmp	r5, r4
 8000ebc:	f240 8103 	bls.w	80010c6 <__udivmoddi4+0x292>
 8000ec0:	4464      	add	r4, ip
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ec8:	1b64      	subs	r4, r4, r5
 8000eca:	2100      	movs	r1, #0
 8000ecc:	b11e      	cbz	r6, 8000ed6 <__udivmoddi4+0xa2>
 8000ece:	40dc      	lsrs	r4, r3
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0xbc>
 8000ede:	2e00      	cmp	r6, #0
 8000ee0:	f000 80ec 	beq.w	80010bc <__udivmoddi4+0x288>
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eea:	4608      	mov	r0, r1
 8000eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef0:	fab3 f183 	clz	r1, r3
 8000ef4:	2900      	cmp	r1, #0
 8000ef6:	d149      	bne.n	8000f8c <__udivmoddi4+0x158>
 8000ef8:	42ab      	cmp	r3, r5
 8000efa:	d302      	bcc.n	8000f02 <__udivmoddi4+0xce>
 8000efc:	4282      	cmp	r2, r0
 8000efe:	f200 80f7 	bhi.w	80010f0 <__udivmoddi4+0x2bc>
 8000f02:	1a84      	subs	r4, r0, r2
 8000f04:	eb65 0203 	sbc.w	r2, r5, r3
 8000f08:	2001      	movs	r0, #1
 8000f0a:	4617      	mov	r7, r2
 8000f0c:	2e00      	cmp	r6, #0
 8000f0e:	d0e2      	beq.n	8000ed6 <__udivmoddi4+0xa2>
 8000f10:	e9c6 4700 	strd	r4, r7, [r6]
 8000f14:	e7df      	b.n	8000ed6 <__udivmoddi4+0xa2>
 8000f16:	b902      	cbnz	r2, 8000f1a <__udivmoddi4+0xe6>
 8000f18:	deff      	udf	#255	; 0xff
 8000f1a:	fab2 f382 	clz	r3, r2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f040 808f 	bne.w	8001042 <__udivmoddi4+0x20e>
 8000f24:	1a8a      	subs	r2, r1, r2
 8000f26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f2a:	fa1f fe8c 	uxth.w	lr, ip
 8000f2e:	2101      	movs	r1, #1
 8000f30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f34:	fb07 2015 	mls	r0, r7, r5, r2
 8000f38:	0c22      	lsrs	r2, r4, #16
 8000f3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f3e:	fb0e f005 	mul.w	r0, lr, r5
 8000f42:	4290      	cmp	r0, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x124>
 8000f46:	eb1c 0202 	adds.w	r2, ip, r2
 8000f4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f4e:	d202      	bcs.n	8000f56 <__udivmoddi4+0x122>
 8000f50:	4290      	cmp	r0, r2
 8000f52:	f200 80ca 	bhi.w	80010ea <__udivmoddi4+0x2b6>
 8000f56:	4645      	mov	r5, r8
 8000f58:	1a12      	subs	r2, r2, r0
 8000f5a:	b2a4      	uxth	r4, r4
 8000f5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f60:	fb07 2210 	mls	r2, r7, r0, r2
 8000f64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f68:	fb0e fe00 	mul.w	lr, lr, r0
 8000f6c:	45a6      	cmp	lr, r4
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x14e>
 8000f70:	eb1c 0404 	adds.w	r4, ip, r4
 8000f74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f78:	d202      	bcs.n	8000f80 <__udivmoddi4+0x14c>
 8000f7a:	45a6      	cmp	lr, r4
 8000f7c:	f200 80ba 	bhi.w	80010f4 <__udivmoddi4+0x2c0>
 8000f80:	4610      	mov	r0, r2
 8000f82:	eba4 040e 	sub.w	r4, r4, lr
 8000f86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f8a:	e79f      	b.n	8000ecc <__udivmoddi4+0x98>
 8000f8c:	f1c1 0720 	rsb	r7, r1, #32
 8000f90:	408b      	lsls	r3, r1
 8000f92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000fa2:	40fd      	lsrs	r5, r7
 8000fa4:	4323      	orrs	r3, r4
 8000fa6:	fa00 f901 	lsl.w	r9, r0, r1
 8000faa:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000fae:	fa1f fe8c 	uxth.w	lr, ip
 8000fb2:	fbb5 f8f0 	udiv	r8, r5, r0
 8000fb6:	0c1c      	lsrs	r4, r3, #16
 8000fb8:	fb00 5518 	mls	r5, r0, r8, r5
 8000fbc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000fc0:	fb08 f50e 	mul.w	r5, r8, lr
 8000fc4:	42a5      	cmp	r5, r4
 8000fc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000fca:	d90b      	bls.n	8000fe4 <__udivmoddi4+0x1b0>
 8000fcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fd4:	f080 8087 	bcs.w	80010e6 <__udivmoddi4+0x2b2>
 8000fd8:	42a5      	cmp	r5, r4
 8000fda:	f240 8084 	bls.w	80010e6 <__udivmoddi4+0x2b2>
 8000fde:	f1a8 0802 	sub.w	r8, r8, #2
 8000fe2:	4464      	add	r4, ip
 8000fe4:	1b64      	subs	r4, r4, r5
 8000fe6:	b29d      	uxth	r5, r3
 8000fe8:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fec:	fb00 4413 	mls	r4, r0, r3, r4
 8000ff0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ff4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ff8:	45a6      	cmp	lr, r4
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x1da>
 8000ffc:	eb1c 0404 	adds.w	r4, ip, r4
 8001000:	f103 30ff 	add.w	r0, r3, #4294967295
 8001004:	d26b      	bcs.n	80010de <__udivmoddi4+0x2aa>
 8001006:	45a6      	cmp	lr, r4
 8001008:	d969      	bls.n	80010de <__udivmoddi4+0x2aa>
 800100a:	3b02      	subs	r3, #2
 800100c:	4464      	add	r4, ip
 800100e:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001012:	fba0 8302 	umull	r8, r3, r0, r2
 8001016:	eba4 040e 	sub.w	r4, r4, lr
 800101a:	429c      	cmp	r4, r3
 800101c:	46c6      	mov	lr, r8
 800101e:	461d      	mov	r5, r3
 8001020:	d355      	bcc.n	80010ce <__udivmoddi4+0x29a>
 8001022:	d052      	beq.n	80010ca <__udivmoddi4+0x296>
 8001024:	b156      	cbz	r6, 800103c <__udivmoddi4+0x208>
 8001026:	ebb9 030e 	subs.w	r3, r9, lr
 800102a:	eb64 0405 	sbc.w	r4, r4, r5
 800102e:	fa04 f707 	lsl.w	r7, r4, r7
 8001032:	40cb      	lsrs	r3, r1
 8001034:	40cc      	lsrs	r4, r1
 8001036:	431f      	orrs	r7, r3
 8001038:	e9c6 7400 	strd	r7, r4, [r6]
 800103c:	2100      	movs	r1, #0
 800103e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001042:	f1c3 0120 	rsb	r1, r3, #32
 8001046:	fa02 fc03 	lsl.w	ip, r2, r3
 800104a:	fa20 f201 	lsr.w	r2, r0, r1
 800104e:	fa25 f101 	lsr.w	r1, r5, r1
 8001052:	409d      	lsls	r5, r3
 8001054:	432a      	orrs	r2, r5
 8001056:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800105a:	fa1f fe8c 	uxth.w	lr, ip
 800105e:	fbb1 f0f7 	udiv	r0, r1, r7
 8001062:	fb07 1510 	mls	r5, r7, r0, r1
 8001066:	0c11      	lsrs	r1, r2, #16
 8001068:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800106c:	fb00 f50e 	mul.w	r5, r0, lr
 8001070:	428d      	cmp	r5, r1
 8001072:	fa04 f403 	lsl.w	r4, r4, r3
 8001076:	d908      	bls.n	800108a <__udivmoddi4+0x256>
 8001078:	eb1c 0101 	adds.w	r1, ip, r1
 800107c:	f100 38ff 	add.w	r8, r0, #4294967295
 8001080:	d22f      	bcs.n	80010e2 <__udivmoddi4+0x2ae>
 8001082:	428d      	cmp	r5, r1
 8001084:	d92d      	bls.n	80010e2 <__udivmoddi4+0x2ae>
 8001086:	3802      	subs	r0, #2
 8001088:	4461      	add	r1, ip
 800108a:	1b49      	subs	r1, r1, r5
 800108c:	b292      	uxth	r2, r2
 800108e:	fbb1 f5f7 	udiv	r5, r1, r7
 8001092:	fb07 1115 	mls	r1, r7, r5, r1
 8001096:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800109a:	fb05 f10e 	mul.w	r1, r5, lr
 800109e:	4291      	cmp	r1, r2
 80010a0:	d908      	bls.n	80010b4 <__udivmoddi4+0x280>
 80010a2:	eb1c 0202 	adds.w	r2, ip, r2
 80010a6:	f105 38ff 	add.w	r8, r5, #4294967295
 80010aa:	d216      	bcs.n	80010da <__udivmoddi4+0x2a6>
 80010ac:	4291      	cmp	r1, r2
 80010ae:	d914      	bls.n	80010da <__udivmoddi4+0x2a6>
 80010b0:	3d02      	subs	r5, #2
 80010b2:	4462      	add	r2, ip
 80010b4:	1a52      	subs	r2, r2, r1
 80010b6:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80010ba:	e739      	b.n	8000f30 <__udivmoddi4+0xfc>
 80010bc:	4631      	mov	r1, r6
 80010be:	4630      	mov	r0, r6
 80010c0:	e709      	b.n	8000ed6 <__udivmoddi4+0xa2>
 80010c2:	4639      	mov	r1, r7
 80010c4:	e6e7      	b.n	8000e96 <__udivmoddi4+0x62>
 80010c6:	4610      	mov	r0, r2
 80010c8:	e6fc      	b.n	8000ec4 <__udivmoddi4+0x90>
 80010ca:	45c1      	cmp	r9, r8
 80010cc:	d2aa      	bcs.n	8001024 <__udivmoddi4+0x1f0>
 80010ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80010d2:	eb63 050c 	sbc.w	r5, r3, ip
 80010d6:	3801      	subs	r0, #1
 80010d8:	e7a4      	b.n	8001024 <__udivmoddi4+0x1f0>
 80010da:	4645      	mov	r5, r8
 80010dc:	e7ea      	b.n	80010b4 <__udivmoddi4+0x280>
 80010de:	4603      	mov	r3, r0
 80010e0:	e795      	b.n	800100e <__udivmoddi4+0x1da>
 80010e2:	4640      	mov	r0, r8
 80010e4:	e7d1      	b.n	800108a <__udivmoddi4+0x256>
 80010e6:	46d0      	mov	r8, sl
 80010e8:	e77c      	b.n	8000fe4 <__udivmoddi4+0x1b0>
 80010ea:	3d02      	subs	r5, #2
 80010ec:	4462      	add	r2, ip
 80010ee:	e733      	b.n	8000f58 <__udivmoddi4+0x124>
 80010f0:	4608      	mov	r0, r1
 80010f2:	e70b      	b.n	8000f0c <__udivmoddi4+0xd8>
 80010f4:	4464      	add	r4, ip
 80010f6:	3802      	subs	r0, #2
 80010f8:	e743      	b.n	8000f82 <__udivmoddi4+0x14e>
 80010fa:	bf00      	nop

080010fc <__aeabi_idiv0>:
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop

08001100 <GPIO_PeriphClockControl>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void GPIO_PeriphClockControl(GPIO_RegDef_t *pGPIOx, uint8_t state)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	70fb      	strb	r3, [r7, #3]
		if(pGPIOx == GPIOA)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a40      	ldr	r2, [pc, #256]	; (8001210 <GPIO_PeriphClockControl+0x110>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d109      	bne.n	8001128 <GPIO_PeriphClockControl+0x28>
		{
			RCC->AHB1ENR.bit.gpioaen = state;
 8001114:	4a3f      	ldr	r2, [pc, #252]	; (8001214 <GPIO_PeriphClockControl+0x114>)
 8001116:	78fb      	ldrb	r3, [r7, #3]
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	b2d9      	uxtb	r1, r3
 800111e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001120:	f361 0300 	bfi	r3, r1, #0, #1
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
			RCC->AHB1ENR.bit.gpiohen = state;
		}else if(pGPIOx == GPIOI)
		{
			RCC->AHB1ENR.bit.gpioien = state;
		}
}
 8001126:	e06e      	b.n	8001206 <GPIO_PeriphClockControl+0x106>
		}else if(pGPIOx == GPIOB)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a3b      	ldr	r2, [pc, #236]	; (8001218 <GPIO_PeriphClockControl+0x118>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d109      	bne.n	8001144 <GPIO_PeriphClockControl+0x44>
			RCC->AHB1ENR.bit.gpioben = state;
 8001130:	4a38      	ldr	r2, [pc, #224]	; (8001214 <GPIO_PeriphClockControl+0x114>)
 8001132:	78fb      	ldrb	r3, [r7, #3]
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	b2d9      	uxtb	r1, r3
 800113a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800113c:	f361 0341 	bfi	r3, r1, #1, #1
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001142:	e060      	b.n	8001206 <GPIO_PeriphClockControl+0x106>
		}else if(pGPIOx == GPIOC)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a35      	ldr	r2, [pc, #212]	; (800121c <GPIO_PeriphClockControl+0x11c>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d109      	bne.n	8001160 <GPIO_PeriphClockControl+0x60>
			RCC->AHB1ENR.bit.gpiocen = state;
 800114c:	4a31      	ldr	r2, [pc, #196]	; (8001214 <GPIO_PeriphClockControl+0x114>)
 800114e:	78fb      	ldrb	r3, [r7, #3]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	b2d9      	uxtb	r1, r3
 8001156:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001158:	f361 0382 	bfi	r3, r1, #2, #1
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800115e:	e052      	b.n	8001206 <GPIO_PeriphClockControl+0x106>
		}else if(pGPIOx == GPIOD)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a2f      	ldr	r2, [pc, #188]	; (8001220 <GPIO_PeriphClockControl+0x120>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d109      	bne.n	800117c <GPIO_PeriphClockControl+0x7c>
			RCC->AHB1ENR.bit.gpioden = state;
 8001168:	4a2a      	ldr	r2, [pc, #168]	; (8001214 <GPIO_PeriphClockControl+0x114>)
 800116a:	78fb      	ldrb	r3, [r7, #3]
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	b2d9      	uxtb	r1, r3
 8001172:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001174:	f361 03c3 	bfi	r3, r1, #3, #1
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
}
 800117a:	e044      	b.n	8001206 <GPIO_PeriphClockControl+0x106>
		}else if(pGPIOx == GPIOE)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a29      	ldr	r2, [pc, #164]	; (8001224 <GPIO_PeriphClockControl+0x124>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d109      	bne.n	8001198 <GPIO_PeriphClockControl+0x98>
			RCC->AHB1ENR.bit.gpioeen = state;
 8001184:	4a23      	ldr	r2, [pc, #140]	; (8001214 <GPIO_PeriphClockControl+0x114>)
 8001186:	78fb      	ldrb	r3, [r7, #3]
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	b2d9      	uxtb	r1, r3
 800118e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001190:	f361 1304 	bfi	r3, r1, #4, #1
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001196:	e036      	b.n	8001206 <GPIO_PeriphClockControl+0x106>
		}else if(pGPIOx == GPIOF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a23      	ldr	r2, [pc, #140]	; (8001228 <GPIO_PeriphClockControl+0x128>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d109      	bne.n	80011b4 <GPIO_PeriphClockControl+0xb4>
			RCC->AHB1ENR.bit.gpiofen = state;
 80011a0:	4a1c      	ldr	r2, [pc, #112]	; (8001214 <GPIO_PeriphClockControl+0x114>)
 80011a2:	78fb      	ldrb	r3, [r7, #3]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	b2d9      	uxtb	r1, r3
 80011aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011ac:	f361 1345 	bfi	r3, r1, #5, #1
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80011b2:	e028      	b.n	8001206 <GPIO_PeriphClockControl+0x106>
		}else if(pGPIOx == GPIOG)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a1d      	ldr	r2, [pc, #116]	; (800122c <GPIO_PeriphClockControl+0x12c>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d109      	bne.n	80011d0 <GPIO_PeriphClockControl+0xd0>
			RCC->AHB1ENR.bit.gpiogen = state;
 80011bc:	4a15      	ldr	r2, [pc, #84]	; (8001214 <GPIO_PeriphClockControl+0x114>)
 80011be:	78fb      	ldrb	r3, [r7, #3]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	b2d9      	uxtb	r1, r3
 80011c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011c8:	f361 1386 	bfi	r3, r1, #6, #1
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80011ce:	e01a      	b.n	8001206 <GPIO_PeriphClockControl+0x106>
		}else if(pGPIOx == GPIOH)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a17      	ldr	r2, [pc, #92]	; (8001230 <GPIO_PeriphClockControl+0x130>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d109      	bne.n	80011ec <GPIO_PeriphClockControl+0xec>
			RCC->AHB1ENR.bit.gpiohen = state;
 80011d8:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <GPIO_PeriphClockControl+0x114>)
 80011da:	78fb      	ldrb	r3, [r7, #3]
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	b2d9      	uxtb	r1, r3
 80011e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011e4:	f361 13c7 	bfi	r3, r1, #7, #1
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80011ea:	e00c      	b.n	8001206 <GPIO_PeriphClockControl+0x106>
		}else if(pGPIOx == GPIOI)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a11      	ldr	r2, [pc, #68]	; (8001234 <GPIO_PeriphClockControl+0x134>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d108      	bne.n	8001206 <GPIO_PeriphClockControl+0x106>
			RCC->AHB1ENR.bit.gpioien = state;
 80011f4:	4a07      	ldr	r2, [pc, #28]	; (8001214 <GPIO_PeriphClockControl+0x114>)
 80011f6:	78fb      	ldrb	r3, [r7, #3]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	b2d9      	uxtb	r1, r3
 80011fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001200:	f361 2308 	bfi	r3, r1, #8, #1
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	40020000 	.word	0x40020000
 8001214:	40023800 	.word	0x40023800
 8001218:	40020400 	.word	0x40020400
 800121c:	40020800 	.word	0x40020800
 8001220:	40020c00 	.word	0x40020c00
 8001224:	40021000 	.word	0x40021000
 8001228:	40021400 	.word	0x40021400
 800122c:	40021800 	.word	0x40021800
 8001230:	40021c00 	.word	0x40021c00
 8001234:	40022000 	.word	0x40022000

08001238 <GPIO_Init>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;		//temporary register var
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]

	//enable peripheral clock
	GPIO_PeriphClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2101      	movs	r1, #1
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ff58 	bl	8001100 <GPIO_PeriphClockControl>

	if(pGPIOHandle->GPIO_Config.PinMode <= GPIO_MODE_ANALOG)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	7a1b      	ldrb	r3, [r3, #8]
 8001254:	2b03      	cmp	r3, #3
 8001256:	d81f      	bhi.n	8001298 <GPIO_Init+0x60>
	{
		temp = pGPIOHandle->GPIO_Config.PinMode << (2 * pGPIOHandle->GPIO_Config.PinNumber); /*< shift to left by 2 bits because
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	7a1b      	ldrb	r3, [r3, #8]
 800125c:	461a      	mov	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	617b      	str	r3, [r7, #20]
																							 each pin in MODER is two bits >*/
		pGPIOHandle->pGPIOx->MODER.reg &= ~(0x3 << pGPIOHandle->GPIO_Config.PinNumber);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2103      	movs	r1, #3
 8001276:	fa01 f303 	lsl.w	r3, r1, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	4619      	mov	r1, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	400a      	ands	r2, r1
 8001284:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER.reg |= temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6819      	ldr	r1, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	430a      	orrs	r2, r1
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	e111      	b.n	80014bc <GPIO_Init+0x284>
	}else
	{
		//interrupt mode
		if(GPIO_MODE_IT_FT == pGPIOHandle->GPIO_Config.PinMode)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7a1b      	ldrb	r3, [r3, #8]
 800129c:	2b06      	cmp	r3, #6
 800129e:	d117      	bne.n	80012d0 <GPIO_Init+0x98>
		{
			//configure FTSR
			EXTI->FTSR.reg |= (1 << pGPIOHandle->GPIO_Config.PinNumber);	 	//set bit in FTSR
 80012a0:	4b6b      	ldr	r3, [pc, #428]	; (8001450 <GPIO_Init+0x218>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	6852      	ldr	r2, [r2, #4]
 80012a8:	2101      	movs	r1, #1
 80012aa:	fa01 f202 	lsl.w	r2, r1, r2
 80012ae:	4611      	mov	r1, r2
 80012b0:	4a67      	ldr	r2, [pc, #412]	; (8001450 <GPIO_Init+0x218>)
 80012b2:	430b      	orrs	r3, r1
 80012b4:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR.reg &= ~(1 << pGPIOHandle->GPIO_Config.PinNumber); 	//clear bit in RTSR just in case it is not reset
 80012b6:	4b66      	ldr	r3, [pc, #408]	; (8001450 <GPIO_Init+0x218>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	6852      	ldr	r2, [r2, #4]
 80012be:	2101      	movs	r1, #1
 80012c0:	fa01 f202 	lsl.w	r2, r1, r2
 80012c4:	43d2      	mvns	r2, r2
 80012c6:	4611      	mov	r1, r2
 80012c8:	4a61      	ldr	r2, [pc, #388]	; (8001450 <GPIO_Init+0x218>)
 80012ca:	400b      	ands	r3, r1
 80012cc:	6093      	str	r3, [r2, #8]
 80012ce:	e035      	b.n	800133c <GPIO_Init+0x104>
		}else if(GPIO_MODE_IT_RT == pGPIOHandle->GPIO_Config.PinMode)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	7a1b      	ldrb	r3, [r3, #8]
 80012d4:	2b05      	cmp	r3, #5
 80012d6:	d117      	bne.n	8001308 <GPIO_Init+0xd0>
		{
			//configure RTSR
			EXTI->RTSR.reg |= (1 << pGPIOHandle->GPIO_Config.PinNumber);	 	//set bit in RTSR
 80012d8:	4b5d      	ldr	r3, [pc, #372]	; (8001450 <GPIO_Init+0x218>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	6852      	ldr	r2, [r2, #4]
 80012e0:	2101      	movs	r1, #1
 80012e2:	fa01 f202 	lsl.w	r2, r1, r2
 80012e6:	4611      	mov	r1, r2
 80012e8:	4a59      	ldr	r2, [pc, #356]	; (8001450 <GPIO_Init+0x218>)
 80012ea:	430b      	orrs	r3, r1
 80012ec:	6093      	str	r3, [r2, #8]
			EXTI->FTSR.reg &= ~(1 << pGPIOHandle->GPIO_Config.PinNumber); 	//clear bit in FTSR just in case it is not reset
 80012ee:	4b58      	ldr	r3, [pc, #352]	; (8001450 <GPIO_Init+0x218>)
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	6852      	ldr	r2, [r2, #4]
 80012f6:	2101      	movs	r1, #1
 80012f8:	fa01 f202 	lsl.w	r2, r1, r2
 80012fc:	43d2      	mvns	r2, r2
 80012fe:	4611      	mov	r1, r2
 8001300:	4a53      	ldr	r2, [pc, #332]	; (8001450 <GPIO_Init+0x218>)
 8001302:	400b      	ands	r3, r1
 8001304:	60d3      	str	r3, [r2, #12]
 8001306:	e019      	b.n	800133c <GPIO_Init+0x104>
		}else if (GPIO_MODE_IT_RFT == pGPIOHandle->GPIO_Config.PinMode)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	7a1b      	ldrb	r3, [r3, #8]
 800130c:	2b07      	cmp	r3, #7
 800130e:	d115      	bne.n	800133c <GPIO_Init+0x104>
		{
			//configure both FTSR and RTSR registers
			EXTI->RTSR.reg |= (1 << pGPIOHandle->GPIO_Config.PinNumber);	 	//set bit in RTSR
 8001310:	4b4f      	ldr	r3, [pc, #316]	; (8001450 <GPIO_Init+0x218>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	6852      	ldr	r2, [r2, #4]
 8001318:	2101      	movs	r1, #1
 800131a:	fa01 f202 	lsl.w	r2, r1, r2
 800131e:	4611      	mov	r1, r2
 8001320:	4a4b      	ldr	r2, [pc, #300]	; (8001450 <GPIO_Init+0x218>)
 8001322:	430b      	orrs	r3, r1
 8001324:	6093      	str	r3, [r2, #8]
			EXTI->FTSR.reg |= (1 << pGPIOHandle->GPIO_Config.PinNumber); 	//set bit in FTSR
 8001326:	4b4a      	ldr	r3, [pc, #296]	; (8001450 <GPIO_Init+0x218>)
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6852      	ldr	r2, [r2, #4]
 800132e:	2101      	movs	r1, #1
 8001330:	fa01 f202 	lsl.w	r2, r1, r2
 8001334:	4611      	mov	r1, r2
 8001336:	4a46      	ldr	r2, [pc, #280]	; (8001450 <GPIO_Init+0x218>)
 8001338:	430b      	orrs	r3, r1
 800133a:	60d3      	str	r3, [r2, #12]
		}

		uint8_t temp1 = pGPIOHandle->GPIO_Config.PinNumber / 4;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	089b      	lsrs	r3, r3, #2
 8001342:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_Config.PinNumber % 4;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	74bb      	strb	r3, [r7, #18]

		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a3f      	ldr	r2, [pc, #252]	; (8001454 <GPIO_Init+0x21c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d02b      	beq.n	80013b2 <GPIO_Init+0x17a>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a3e      	ldr	r2, [pc, #248]	; (8001458 <GPIO_Init+0x220>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d024      	beq.n	80013ae <GPIO_Init+0x176>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a3c      	ldr	r2, [pc, #240]	; (800145c <GPIO_Init+0x224>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d01d      	beq.n	80013aa <GPIO_Init+0x172>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a3b      	ldr	r2, [pc, #236]	; (8001460 <GPIO_Init+0x228>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d016      	beq.n	80013a6 <GPIO_Init+0x16e>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a39      	ldr	r2, [pc, #228]	; (8001464 <GPIO_Init+0x22c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d00f      	beq.n	80013a2 <GPIO_Init+0x16a>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a38      	ldr	r2, [pc, #224]	; (8001468 <GPIO_Init+0x230>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d008      	beq.n	800139e <GPIO_Init+0x166>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a36      	ldr	r2, [pc, #216]	; (800146c <GPIO_Init+0x234>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d101      	bne.n	800139a <GPIO_Init+0x162>
 8001396:	2308      	movs	r3, #8
 8001398:	e00c      	b.n	80013b4 <GPIO_Init+0x17c>
 800139a:	2300      	movs	r3, #0
 800139c:	e00a      	b.n	80013b4 <GPIO_Init+0x17c>
 800139e:	2307      	movs	r3, #7
 80013a0:	e008      	b.n	80013b4 <GPIO_Init+0x17c>
 80013a2:	2304      	movs	r3, #4
 80013a4:	e006      	b.n	80013b4 <GPIO_Init+0x17c>
 80013a6:	2303      	movs	r3, #3
 80013a8:	e004      	b.n	80013b4 <GPIO_Init+0x17c>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e002      	b.n	80013b4 <GPIO_Init+0x17c>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <GPIO_Init+0x17c>
 80013b2:	2300      	movs	r3, #0
 80013b4:	747b      	strb	r3, [r7, #17]
		RCC->APB2ENR.bit.syscfgen = RCC_APB2ENR_SYSCFGEN; 											// enable SYSCFG peripheral clock
 80013b6:	4a2e      	ldr	r2, [pc, #184]	; (8001470 <GPIO_Init+0x238>)
 80013b8:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80013ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013be:	6453      	str	r3, [r2, #68]	; 0x44
		if((0 == temp1) || (1/4 == temp1) || (2/4 == temp1) || (3/4 == temp1))
 80013c0:	7cfb      	ldrb	r3, [r7, #19]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d008      	beq.n	80013d8 <GPIO_Init+0x1a0>
 80013c6:	7cfb      	ldrb	r3, [r7, #19]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d005      	beq.n	80013d8 <GPIO_Init+0x1a0>
 80013cc:	7cfb      	ldrb	r3, [r7, #19]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d002      	beq.n	80013d8 <GPIO_Init+0x1a0>
 80013d2:	7cfb      	ldrb	r3, [r7, #19]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d10b      	bne.n	80013f0 <GPIO_Init+0x1b8>
		{
			SYSCFG->EXTICR1.reg |= portcode << (temp2 * 4);
 80013d8:	4b26      	ldr	r3, [pc, #152]	; (8001474 <GPIO_Init+0x23c>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	7c79      	ldrb	r1, [r7, #17]
 80013de:	7cba      	ldrb	r2, [r7, #18]
 80013e0:	0092      	lsls	r2, r2, #2
 80013e2:	fa01 f202 	lsl.w	r2, r1, r2
 80013e6:	4611      	mov	r1, r2
 80013e8:	4a22      	ldr	r2, [pc, #136]	; (8001474 <GPIO_Init+0x23c>)
 80013ea:	430b      	orrs	r3, r1
 80013ec:	6093      	str	r3, [r2, #8]
 80013ee:	e05a      	b.n	80014a6 <GPIO_Init+0x26e>
		}
		else if((1 == temp1) || (5/4 == temp1) || (6/4 == temp1) || (7/4 == temp1))
 80013f0:	7cfb      	ldrb	r3, [r7, #19]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d008      	beq.n	8001408 <GPIO_Init+0x1d0>
 80013f6:	7cfb      	ldrb	r3, [r7, #19]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d005      	beq.n	8001408 <GPIO_Init+0x1d0>
 80013fc:	7cfb      	ldrb	r3, [r7, #19]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d002      	beq.n	8001408 <GPIO_Init+0x1d0>
 8001402:	7cfb      	ldrb	r3, [r7, #19]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d10b      	bne.n	8001420 <GPIO_Init+0x1e8>
		{
			SYSCFG->EXTICR2.reg |= portcode << (temp2 * 4);
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <GPIO_Init+0x23c>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	7c79      	ldrb	r1, [r7, #17]
 800140e:	7cba      	ldrb	r2, [r7, #18]
 8001410:	0092      	lsls	r2, r2, #2
 8001412:	fa01 f202 	lsl.w	r2, r1, r2
 8001416:	4611      	mov	r1, r2
 8001418:	4a16      	ldr	r2, [pc, #88]	; (8001474 <GPIO_Init+0x23c>)
 800141a:	430b      	orrs	r3, r1
 800141c:	60d3      	str	r3, [r2, #12]
 800141e:	e042      	b.n	80014a6 <GPIO_Init+0x26e>
		}
		else if((2 == temp1) || (9/4 == temp1) || (10/4 == temp1) || (11/4 == temp1))
 8001420:	7cfb      	ldrb	r3, [r7, #19]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d008      	beq.n	8001438 <GPIO_Init+0x200>
 8001426:	7cfb      	ldrb	r3, [r7, #19]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d005      	beq.n	8001438 <GPIO_Init+0x200>
 800142c:	7cfb      	ldrb	r3, [r7, #19]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d002      	beq.n	8001438 <GPIO_Init+0x200>
 8001432:	7cfb      	ldrb	r3, [r7, #19]
 8001434:	2b02      	cmp	r3, #2
 8001436:	d11f      	bne.n	8001478 <GPIO_Init+0x240>
		{
			SYSCFG->EXTICR3.reg |= portcode << (temp2 * 4);
 8001438:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <GPIO_Init+0x23c>)
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	7c79      	ldrb	r1, [r7, #17]
 800143e:	7cba      	ldrb	r2, [r7, #18]
 8001440:	0092      	lsls	r2, r2, #2
 8001442:	fa01 f202 	lsl.w	r2, r1, r2
 8001446:	4611      	mov	r1, r2
 8001448:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <GPIO_Init+0x23c>)
 800144a:	430b      	orrs	r3, r1
 800144c:	6113      	str	r3, [r2, #16]
 800144e:	e02a      	b.n	80014a6 <GPIO_Init+0x26e>
 8001450:	40013c00 	.word	0x40013c00
 8001454:	40020000 	.word	0x40020000
 8001458:	40020400 	.word	0x40020400
 800145c:	40020800 	.word	0x40020800
 8001460:	40020c00 	.word	0x40020c00
 8001464:	40021000 	.word	0x40021000
 8001468:	40021c00 	.word	0x40021c00
 800146c:	40022000 	.word	0x40022000
 8001470:	40023800 	.word	0x40023800
 8001474:	40013800 	.word	0x40013800
		}
		else if((3 == temp1) || (13/4 == temp1) || (14/4 == temp1) || (15/4 == temp1))
 8001478:	7cfb      	ldrb	r3, [r7, #19]
 800147a:	2b03      	cmp	r3, #3
 800147c:	d008      	beq.n	8001490 <GPIO_Init+0x258>
 800147e:	7cfb      	ldrb	r3, [r7, #19]
 8001480:	2b03      	cmp	r3, #3
 8001482:	d005      	beq.n	8001490 <GPIO_Init+0x258>
 8001484:	7cfb      	ldrb	r3, [r7, #19]
 8001486:	2b03      	cmp	r3, #3
 8001488:	d002      	beq.n	8001490 <GPIO_Init+0x258>
 800148a:	7cfb      	ldrb	r3, [r7, #19]
 800148c:	2b03      	cmp	r3, #3
 800148e:	d10a      	bne.n	80014a6 <GPIO_Init+0x26e>
		{
			SYSCFG->EXTICR4.reg |= portcode << (temp2 * 4);
 8001490:	4b7a      	ldr	r3, [pc, #488]	; (800167c <GPIO_Init+0x444>)
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	7c79      	ldrb	r1, [r7, #17]
 8001496:	7cba      	ldrb	r2, [r7, #18]
 8001498:	0092      	lsls	r2, r2, #2
 800149a:	fa01 f202 	lsl.w	r2, r1, r2
 800149e:	4611      	mov	r1, r2
 80014a0:	4a76      	ldr	r2, [pc, #472]	; (800167c <GPIO_Init+0x444>)
 80014a2:	430b      	orrs	r3, r1
 80014a4:	6153      	str	r3, [r2, #20]
		}

		EXTI->IMR.reg |= 1 << pGPIOHandle->GPIO_Config.PinNumber;			//enable the EXTI interrupt delivery using IMR
 80014a6:	4b76      	ldr	r3, [pc, #472]	; (8001680 <GPIO_Init+0x448>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6852      	ldr	r2, [r2, #4]
 80014ae:	2101      	movs	r1, #1
 80014b0:	fa01 f202 	lsl.w	r2, r1, r2
 80014b4:	4611      	mov	r1, r2
 80014b6:	4a72      	ldr	r2, [pc, #456]	; (8001680 <GPIO_Init+0x448>)
 80014b8:	430b      	orrs	r3, r1
 80014ba:	6013      	str	r3, [r2, #0]
	}

	temp = pGPIOHandle->GPIO_Config.PinSpeed << (2 * pGPIOHandle->GPIO_Config.PinNumber);//shift to left by 2 bits
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	7a5b      	ldrb	r3, [r3, #9]
 80014c0:	461a      	mov	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR.reg &= ~(0x3 <<(2 * pGPIOHandle->GPIO_Config.PinNumber));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2103      	movs	r1, #3
 80014dc:	fa01 f303 	lsl.w	r3, r1, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	4619      	mov	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	400a      	ands	r2, r1
 80014ea:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR.reg |= temp;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6899      	ldr	r1, [r3, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	430a      	orrs	r2, r1
 80014fa:	609a      	str	r2, [r3, #8]

	temp = pGPIOHandle->GPIO_Config.PinPuPdControl << (2 * pGPIOHandle->GPIO_Config.PinNumber);//shift to left by 2 bits because
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	7a9b      	ldrb	r3, [r3, #10]
 8001500:	461a      	mov	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR.reg &= ~(0x3 <<( 2 * pGPIOHandle->GPIO_Config.PinNumber));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68da      	ldr	r2, [r3, #12]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2103      	movs	r1, #3
 800151c:	fa01 f303 	lsl.w	r3, r1, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	4619      	mov	r1, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	400a      	ands	r2, r1
 800152a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR.reg |= temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68d9      	ldr	r1, [r3, #12]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	430a      	orrs	r2, r1
 800153a:	60da      	str	r2, [r3, #12]

	temp = pGPIOHandle->GPIO_Config.PinOPType << pGPIOHandle->GPIO_Config.PinNumber;//shift to left by 2 bits
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7adb      	ldrb	r3, [r3, #11]
 8001540:	461a      	mov	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER.reg &= ~(0x1 << pGPIOHandle->GPIO_Config.PinNumber);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2101      	movs	r1, #1
 8001558:	fa01 f303 	lsl.w	r3, r1, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	4619      	mov	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	400a      	ands	r2, r1
 8001566:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER.reg |= temp;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6859      	ldr	r1, [r3, #4]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	430a      	orrs	r2, r1
 8001576:	605a      	str	r2, [r3, #4]

	if(GPIO_MODE_AF == pGPIOHandle->GPIO_Config.PinMode)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	7a1b      	ldrb	r3, [r3, #8]
 800157c:	2b02      	cmp	r3, #2
 800157e:	d178      	bne.n	8001672 <GPIO_Init+0x43a>
	{
		uint8_t temp1 = 0, temp2 = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	743b      	strb	r3, [r7, #16]
 8001584:	2300      	movs	r3, #0
 8001586:	73fb      	strb	r3, [r7, #15]

		temp1 = pGPIOHandle->GPIO_Config.PinNumber/8;	//AFRL = AFR[0]. Any integer smaller than 8 will be 0 after division
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	08db      	lsrs	r3, r3, #3
 800158e:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_Config.PinNumber%8;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	73fb      	strb	r3, [r7, #15]
		if((0 == temp1) || (1/8 == temp1) || (2/8 == temp1) || (3/8 == temp1) ||
 800159c:	7c3b      	ldrb	r3, [r7, #16]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d014      	beq.n	80015cc <GPIO_Init+0x394>
 80015a2:	7c3b      	ldrb	r3, [r7, #16]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d011      	beq.n	80015cc <GPIO_Init+0x394>
 80015a8:	7c3b      	ldrb	r3, [r7, #16]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00e      	beq.n	80015cc <GPIO_Init+0x394>
 80015ae:	7c3b      	ldrb	r3, [r7, #16]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00b      	beq.n	80015cc <GPIO_Init+0x394>
 80015b4:	7c3b      	ldrb	r3, [r7, #16]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d008      	beq.n	80015cc <GPIO_Init+0x394>
			(4/8 == temp1 ) || (5/8 == temp1) || (6/8 == temp1) || (7/8 == temp1))
 80015ba:	7c3b      	ldrb	r3, [r7, #16]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <GPIO_Init+0x394>
 80015c0:	7c3b      	ldrb	r3, [r7, #16]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d002      	beq.n	80015cc <GPIO_Init+0x394>
 80015c6:	7c3b      	ldrb	r3, [r7, #16]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d11d      	bne.n	8001608 <GPIO_Init+0x3d0>
		{
			pGPIOHandle->pGPIOx->AFRL.reg &= ~(0xF << (4* temp2));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6a1a      	ldr	r2, [r3, #32]
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	210f      	movs	r1, #15
 80015d8:	fa01 f303 	lsl.w	r3, r1, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	4619      	mov	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	400a      	ands	r2, r1
 80015e6:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL.reg |= pGPIOHandle->GPIO_Config.PinAltFuncMode << (4* temp2);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6a1a      	ldr	r2, [r3, #32]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	7b1b      	ldrb	r3, [r3, #12]
 80015f2:	4619      	mov	r1, r3
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	fa01 f303 	lsl.w	r3, r1, r3
 80015fc:	4619      	mov	r1, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	621a      	str	r2, [r3, #32]
		{
			pGPIOHandle->pGPIOx->AFRH.reg &= ~(0xF << (4* temp2));
			pGPIOHandle->pGPIOx->AFRH.reg |= pGPIOHandle->GPIO_Config.PinAltFuncMode << (4* temp2);
		}
	}
}
 8001606:	e034      	b.n	8001672 <GPIO_Init+0x43a>
		else if((1 == temp1) || (9/8 == temp1) || (10/8 == temp1) || (11/8 == temp1) ||
 8001608:	7c3b      	ldrb	r3, [r7, #16]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d014      	beq.n	8001638 <GPIO_Init+0x400>
 800160e:	7c3b      	ldrb	r3, [r7, #16]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d011      	beq.n	8001638 <GPIO_Init+0x400>
 8001614:	7c3b      	ldrb	r3, [r7, #16]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d00e      	beq.n	8001638 <GPIO_Init+0x400>
 800161a:	7c3b      	ldrb	r3, [r7, #16]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d00b      	beq.n	8001638 <GPIO_Init+0x400>
 8001620:	7c3b      	ldrb	r3, [r7, #16]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d008      	beq.n	8001638 <GPIO_Init+0x400>
				(12/8 == temp1 ) || (13/8 == temp1) || (14/8 == temp1) || (15/8 == temp1))
 8001626:	7c3b      	ldrb	r3, [r7, #16]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d005      	beq.n	8001638 <GPIO_Init+0x400>
 800162c:	7c3b      	ldrb	r3, [r7, #16]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d002      	beq.n	8001638 <GPIO_Init+0x400>
 8001632:	7c3b      	ldrb	r3, [r7, #16]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d11c      	bne.n	8001672 <GPIO_Init+0x43a>
			pGPIOHandle->pGPIOx->AFRH.reg &= ~(0xF << (4* temp2));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	210f      	movs	r1, #15
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	4619      	mov	r1, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	400a      	ands	r2, r1
 8001652:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOx->AFRH.reg |= pGPIOHandle->GPIO_Config.PinAltFuncMode << (4* temp2);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7b1b      	ldrb	r3, [r3, #12]
 800165e:	4619      	mov	r1, r3
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	fa01 f303 	lsl.w	r3, r1, r3
 8001668:	4619      	mov	r1, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001672:	bf00      	nop
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40013800 	.word	0x40013800
 8001680:	40013c00 	.word	0x40013c00

08001684 <GPIO_ReadPin>:
/* @return				- 0 or 1																		*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
uint8_t GPIO_ReadPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	70fb      	strb	r3, [r7, #3]
	uint8_t temp = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	73fb      	strb	r3, [r7, #15]
	temp = (uint8_t)((pGPIOx->IDR.reg >> PinNumber) & 0x1);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691a      	ldr	r2, [r3, #16]
 8001698:	78fb      	ldrb	r3, [r7, #3]
 800169a:	fa22 f303 	lsr.w	r3, r2, r3
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	73fb      	strb	r3, [r7, #15]
	return temp;
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr

080016b2 <GPIO_WritePin>:
/* @return				-	none																		*/
/*																										*/
/* @Note				-	none																		*/
/********************************************************************************************************/
void GPIO_WritePin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t val)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	460b      	mov	r3, r1
 80016bc:	70fb      	strb	r3, [r7, #3]
 80016be:	4613      	mov	r3, r2
 80016c0:	70bb      	strb	r3, [r7, #2]
	if(SET == val)
 80016c2:	78bb      	ldrb	r3, [r7, #2]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d109      	bne.n	80016dc <GPIO_WritePin+0x2a>
	{
		pGPIOx->ODR.reg |= (1 << PinNumber);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	78fa      	ldrb	r2, [r7, #3]
 80016ce:	2101      	movs	r1, #1
 80016d0:	fa01 f202 	lsl.w	r2, r1, r2
 80016d4:	431a      	orrs	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	615a      	str	r2, [r3, #20]
	}else
	{
		pGPIOx->ODR.reg &= ~(1 << PinNumber);
	}
}
 80016da:	e009      	b.n	80016f0 <GPIO_WritePin+0x3e>
		pGPIOx->ODR.reg &= ~(1 << PinNumber);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	78fa      	ldrb	r2, [r7, #3]
 80016e2:	2101      	movs	r1, #1
 80016e4:	fa01 f202 	lsl.w	r2, r1, r2
 80016e8:	43d2      	mvns	r2, r2
 80016ea:	401a      	ands	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	615a      	str	r2, [r3, #20]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr
	...

080016fc <RCC_OscConfig>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void RCC_OscConfig(RCC_OscInit_t *pRCC_Osc)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	if(NULL == pRCC_Osc)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 80b9 	beq.w	800187e <RCC_OscConfig+0x182>
	{
		return;
	}
	//configure HSE
	if(RCC_OSCILLATORTYPE_HSE == pRCC_Osc->OscillatorType)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d126      	bne.n	8001762 <RCC_OscConfig+0x66>
	{
		switch(pRCC_Osc->HSEState)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d006      	beq.n	800172a <RCC_OscConfig+0x2e>
 800171c:	2b02      	cmp	r3, #2
 800171e:	d81f      	bhi.n	8001760 <RCC_OscConfig+0x64>
 8001720:	2b00      	cmp	r3, #0
 8001722:	d018      	beq.n	8001756 <RCC_OscConfig+0x5a>
 8001724:	2b01      	cmp	r3, #1
 8001726:	d010      	beq.n	800174a <RCC_OscConfig+0x4e>
			case RCC_HSE_OFF:
			{
				RCC->CR.bit.hseon = RESET;
			}
			default:
				break;
 8001728:	e01a      	b.n	8001760 <RCC_OscConfig+0x64>
				RCC->CR.bit.hseon = RESET;
 800172a:	4a57      	ldr	r2, [pc, #348]	; (8001888 <RCC_OscConfig+0x18c>)
 800172c:	6813      	ldr	r3, [r2, #0]
 800172e:	f36f 4310 	bfc	r3, #16, #1
 8001732:	6013      	str	r3, [r2, #0]
				RCC->CR.bit.hsebyp = RCC_CR_HSEBYP;
 8001734:	4a54      	ldr	r2, [pc, #336]	; (8001888 <RCC_OscConfig+0x18c>)
 8001736:	6813      	ldr	r3, [r2, #0]
 8001738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800173c:	6013      	str	r3, [r2, #0]
				RCC->CR.bit.hseon = RCC_CR_HSEON;
 800173e:	4a52      	ldr	r2, [pc, #328]	; (8001888 <RCC_OscConfig+0x18c>)
 8001740:	6813      	ldr	r3, [r2, #0]
 8001742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001746:	6013      	str	r3, [r2, #0]
				break;
 8001748:	e00b      	b.n	8001762 <RCC_OscConfig+0x66>
				RCC->CR.bit.hseon = RCC_CR_HSEON;
 800174a:	4a4f      	ldr	r2, [pc, #316]	; (8001888 <RCC_OscConfig+0x18c>)
 800174c:	6813      	ldr	r3, [r2, #0]
 800174e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001752:	6013      	str	r3, [r2, #0]
				break;
 8001754:	e005      	b.n	8001762 <RCC_OscConfig+0x66>
				RCC->CR.bit.hseon = RESET;
 8001756:	4a4c      	ldr	r2, [pc, #304]	; (8001888 <RCC_OscConfig+0x18c>)
 8001758:	6813      	ldr	r3, [r2, #0]
 800175a:	f36f 4310 	bfc	r3, #16, #1
 800175e:	6013      	str	r3, [r2, #0]
				break;
 8001760:	bf00      	nop
		}
	}
	//configure HSI
	if(RCC_OSCILLATORTYPE_HSI == pRCC_Osc->OscillatorType)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d112      	bne.n	8001790 <RCC_OscConfig+0x94>
	{
		switch(pRCC_Osc->HSIState)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d007      	beq.n	8001782 <RCC_OscConfig+0x86>
 8001772:	2b01      	cmp	r3, #1
 8001774:	d10b      	bne.n	800178e <RCC_OscConfig+0x92>
		{
			case RCC_HSI_ON:
			{
				RCC->CR.bit.hsion = RCC_CR_HSION;
 8001776:	4a44      	ldr	r2, [pc, #272]	; (8001888 <RCC_OscConfig+0x18c>)
 8001778:	6813      	ldr	r3, [r2, #0]
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6013      	str	r3, [r2, #0]
				break;
 8001780:	e006      	b.n	8001790 <RCC_OscConfig+0x94>
			}
			case RCC_HSI_OFF:
			{
				RCC->CR.bit.hsion = RESET;
 8001782:	4a41      	ldr	r2, [pc, #260]	; (8001888 <RCC_OscConfig+0x18c>)
 8001784:	6813      	ldr	r3, [r2, #0]
 8001786:	f36f 0300 	bfc	r3, #0, #1
 800178a:	6013      	str	r3, [r2, #0]
				break;
 800178c:	e000      	b.n	8001790 <RCC_OscConfig+0x94>
			}
			default:
				break;
 800178e:	bf00      	nop
		}
	}
	//configure LSE
	if(RCC_OSCILLATORTYPE_LSE == pRCC_Osc->OscillatorType)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b04      	cmp	r3, #4
 8001796:	d112      	bne.n	80017be <RCC_OscConfig+0xc2>
	{
		switch(pRCC_Osc->LSEState)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d007      	beq.n	80017b0 <RCC_OscConfig+0xb4>
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d10b      	bne.n	80017bc <RCC_OscConfig+0xc0>
		{
			case RCC_LSE_ON:
			{
				RCC->BDCR.bit.lseon = RCC_BDCR_RTCSEL_LSE;
 80017a4:	4a38      	ldr	r2, [pc, #224]	; (8001888 <RCC_OscConfig+0x18c>)
 80017a6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6713      	str	r3, [r2, #112]	; 0x70
				break;
 80017ae:	e006      	b.n	80017be <RCC_OscConfig+0xc2>
			}
			case RCC_LSE_OFF:
			{
				RCC->BDCR.bit.lseon = RESET;
 80017b0:	4a35      	ldr	r2, [pc, #212]	; (8001888 <RCC_OscConfig+0x18c>)
 80017b2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80017b4:	f36f 0300 	bfc	r3, #0, #1
 80017b8:	6713      	str	r3, [r2, #112]	; 0x70
				break;
 80017ba:	e000      	b.n	80017be <RCC_OscConfig+0xc2>
			}
			default:
				break;
 80017bc:	bf00      	nop
		}
	}
	//configure LSI
	if(RCC_OSCILLATORTYPE_LSI == pRCC_Osc->OscillatorType)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d112      	bne.n	80017ec <RCC_OscConfig+0xf0>
		{
			switch(pRCC_Osc->LSIState)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d007      	beq.n	80017de <RCC_OscConfig+0xe2>
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d10b      	bne.n	80017ea <RCC_OscConfig+0xee>
			{
				case RCC_LSI_ON:
				{
					RCC->CSR.bit.lsion = SET;
 80017d2:	4a2d      	ldr	r2, [pc, #180]	; (8001888 <RCC_OscConfig+0x18c>)
 80017d4:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	6753      	str	r3, [r2, #116]	; 0x74
					break;
 80017dc:	e006      	b.n	80017ec <RCC_OscConfig+0xf0>
				}
				case RCC_LSI_OFF:
				{
					RCC->CSR.bit.lsion = RESET;
 80017de:	4a2a      	ldr	r2, [pc, #168]	; (8001888 <RCC_OscConfig+0x18c>)
 80017e0:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80017e2:	f36f 0300 	bfc	r3, #0, #1
 80017e6:	6753      	str	r3, [r2, #116]	; 0x74
					break;
 80017e8:	e000      	b.n	80017ec <RCC_OscConfig+0xf0>
				}
				default:
					break;
 80017ea:	bf00      	nop
			}
		}
	//configure PLL
	if(RCC_PLL_NONE != pRCC_Osc->PLL.State)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d045      	beq.n	8001880 <RCC_OscConfig+0x184>
	{
		switch(pRCC_Osc->PLL.State)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d002      	beq.n	8001802 <RCC_OscConfig+0x106>
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d006      	beq.n	800180e <RCC_OscConfig+0x112>
				RCC->PLLCFGR.bit.pllq = pRCC_Osc->PLL.Q;
				RCC->CR.bit.pllon = RCC_CR_PLLON;
				break;
			}
			default:
				break;
 8001800:	e03e      	b.n	8001880 <RCC_OscConfig+0x184>
				RCC->CR.bit.pllon = RESET;
 8001802:	4a21      	ldr	r2, [pc, #132]	; (8001888 <RCC_OscConfig+0x18c>)
 8001804:	6813      	ldr	r3, [r2, #0]
 8001806:	f36f 6318 	bfc	r3, #24, #1
 800180a:	6013      	str	r3, [r2, #0]
				break;
 800180c:	e038      	b.n	8001880 <RCC_OscConfig+0x184>
				RCC->PLLCFGR.bit.pllsrc = pRCC_Osc->PLL.Source;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	4a1d      	ldr	r2, [pc, #116]	; (8001888 <RCC_OscConfig+0x18c>)
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	b2d9      	uxtb	r1, r3
 800181a:	6853      	ldr	r3, [r2, #4]
 800181c:	f361 5396 	bfi	r3, r1, #22, #1
 8001820:	6053      	str	r3, [r2, #4]
				RCC->PLLCFGR.bit.pllm = pRCC_Osc->PLL.M;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	4a18      	ldr	r2, [pc, #96]	; (8001888 <RCC_OscConfig+0x18c>)
 8001828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800182c:	b2d9      	uxtb	r1, r3
 800182e:	6853      	ldr	r3, [r2, #4]
 8001830:	f361 0305 	bfi	r3, r1, #0, #6
 8001834:	6053      	str	r3, [r2, #4]
				RCC->PLLCFGR.bit.pllp = pRCC_Osc->PLL.P;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183a:	4a13      	ldr	r2, [pc, #76]	; (8001888 <RCC_OscConfig+0x18c>)
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	b2d9      	uxtb	r1, r3
 8001842:	6853      	ldr	r3, [r2, #4]
 8001844:	f361 4311 	bfi	r3, r1, #16, #2
 8001848:	6053      	str	r3, [r2, #4]
				RCC->PLLCFGR.bit.plln = pRCC_Osc->PLL.N;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184e:	4a0e      	ldr	r2, [pc, #56]	; (8001888 <RCC_OscConfig+0x18c>)
 8001850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001854:	b299      	uxth	r1, r3
 8001856:	6853      	ldr	r3, [r2, #4]
 8001858:	f361 138e 	bfi	r3, r1, #6, #9
 800185c:	6053      	str	r3, [r2, #4]
				RCC->PLLCFGR.bit.pllq = pRCC_Osc->PLL.Q;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001862:	4a09      	ldr	r2, [pc, #36]	; (8001888 <RCC_OscConfig+0x18c>)
 8001864:	f003 030f 	and.w	r3, r3, #15
 8001868:	b2d9      	uxtb	r1, r3
 800186a:	6853      	ldr	r3, [r2, #4]
 800186c:	f361 631b 	bfi	r3, r1, #24, #4
 8001870:	6053      	str	r3, [r2, #4]
				RCC->CR.bit.pllon = RCC_CR_PLLON;
 8001872:	4a05      	ldr	r2, [pc, #20]	; (8001888 <RCC_OscConfig+0x18c>)
 8001874:	6813      	ldr	r3, [r2, #0]
 8001876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800187a:	6013      	str	r3, [r2, #0]
				break;
 800187c:	e000      	b.n	8001880 <RCC_OscConfig+0x184>
		return;
 800187e:	bf00      	nop
		}

	}
}
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	40023800 	.word	0x40023800

0800188c <RCC_ClockConfig>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void RCC_ClockConfig(RCC_ClkInit_t  *pRCC_Clk)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	if(NULL == pRCC_Clk)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 8083 	beq.w	80019a2 <RCC_ClockConfig+0x116>
	{
	    return;
	}
	// Set flash latency based on new system clock frequency
	FLASH->ACR.bit.latency = 0x5U; //5WS for 150 < HCLK ≤ 168
 800189c:	4a43      	ldr	r2, [pc, #268]	; (80019ac <RCC_ClockConfig+0x120>)
 800189e:	6813      	ldr	r3, [r2, #0]
 80018a0:	2105      	movs	r1, #5
 80018a2:	f361 0302 	bfi	r3, r1, #0, #3
 80018a6:	6013      	str	r3, [r2, #0]
	while(!(FLASH->ACR.bit.latency = 0x5U))
 80018a8:	bf00      	nop
 80018aa:	4a40      	ldr	r2, [pc, #256]	; (80019ac <RCC_ClockConfig+0x120>)
 80018ac:	6813      	ldr	r3, [r2, #0]
 80018ae:	2105      	movs	r1, #5
 80018b0:	f361 0302 	bfi	r3, r1, #0, #3
 80018b4:	6013      	str	r3, [r2, #0]

	}

	//HCLK Configuration

	if(RCC_CLOCKTYPE_HCLK == ((pRCC_Clk->ClockType) & RCC_CLOCKTYPE_HCLK))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d013      	beq.n	80018ea <RCC_ClockConfig+0x5e>
	{
		RCC->CFGR.bit.ppre1 = 0x7U;
 80018c2:	4a3b      	ldr	r2, [pc, #236]	; (80019b0 <RCC_ClockConfig+0x124>)
 80018c4:	6893      	ldr	r3, [r2, #8]
 80018c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018ca:	6093      	str	r3, [r2, #8]
		RCC->CFGR.bit.ppre2 = 0x7U;
 80018cc:	4a38      	ldr	r2, [pc, #224]	; (80019b0 <RCC_ClockConfig+0x124>)
 80018ce:	6893      	ldr	r3, [r2, #8]
 80018d0:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018d4:	6093      	str	r3, [r2, #8]
		RCC->CFGR.bit.hpre = pRCC_Clk->AHBCLKDivider;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	4a35      	ldr	r2, [pc, #212]	; (80019b0 <RCC_ClockConfig+0x124>)
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	b2d9      	uxtb	r1, r3
 80018e2:	6893      	ldr	r3, [r2, #8]
 80018e4:	f361 1307 	bfi	r3, r1, #4, #4
 80018e8:	6093      	str	r3, [r2, #8]
	}

	//SYSCLK Configuration

	if(RCC_CLOCKTYPE_SYSCLK == ((pRCC_Clk->ClockType) & RCC_CLOCKTYPE_SYSCLK))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d02f      	beq.n	8001956 <RCC_ClockConfig+0xca>
	{
		//HSE is selected as System Clock Source
		if(RCC_SYSCLKSOURCE_HSE == pRCC_Clk->SYSCLKSource)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d108      	bne.n	8001910 <RCC_ClockConfig+0x84>
		{
			//wait HSE ready flag off
			while(!(RESET == RCC->CR.bit.hserdy))
 80018fe:	bf00      	nop
 8001900:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <RCC_ClockConfig+0x124>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f8      	bne.n	8001900 <RCC_ClockConfig+0x74>
 800190e:	e018      	b.n	8001942 <RCC_ClockConfig+0xb6>
			{

			}
		}
		//PLL is selected as System Clock Source
		else if((RCC_SYSCLKSOURCE_PLLCLK == pRCC_Clk->SYSCLKSource) ||
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b02      	cmp	r3, #2
 8001916:	d003      	beq.n	8001920 <RCC_ClockConfig+0x94>
				(RCC_SYSCLKSOURCE_PLLRCLK == pRCC_Clk->SYSCLKSource))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
		else if((RCC_SYSCLKSOURCE_PLLCLK == pRCC_Clk->SYSCLKSource) ||
 800191c:	2b03      	cmp	r3, #3
 800191e:	d108      	bne.n	8001932 <RCC_ClockConfig+0xa6>
		{
			//wait PLL ready flag
			while(!(SET == RCC->CR.bit.pllrdy))
 8001920:	bf00      	nop
 8001922:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <RCC_ClockConfig+0x124>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f3c3 6340 	ubfx	r3, r3, #25, #1
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b01      	cmp	r3, #1
 800192e:	d1f8      	bne.n	8001922 <RCC_ClockConfig+0x96>
		else if((RCC_SYSCLKSOURCE_PLLCLK == pRCC_Clk->SYSCLKSource) ||
 8001930:	e007      	b.n	8001942 <RCC_ClockConfig+0xb6>
			}
		}
		else
		{
			//wait for HSI ready flag
			while(!(SET == RCC->CR.bit.hsirdy))
 8001932:	bf00      	nop
 8001934:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <RCC_ClockConfig+0x124>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b01      	cmp	r3, #1
 8001940:	d1f8      	bne.n	8001934 <RCC_ClockConfig+0xa8>
			{

			}
		}

		RCC->CFGR.bit.sw = pRCC_Clk->SYSCLKSource;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	4a1a      	ldr	r2, [pc, #104]	; (80019b0 <RCC_ClockConfig+0x124>)
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	b2d9      	uxtb	r1, r3
 800194e:	6893      	ldr	r3, [r2, #8]
 8001950:	f361 0301 	bfi	r3, r1, #0, #2
 8001954:	6093      	str	r3, [r2, #8]
	}

	//PCLK1 Configuration
	if(RCC_CLOCKTYPE_PCLK1 == ((pRCC_Clk->ClockType) & RCC_CLOCKTYPE_PCLK1))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	2b00      	cmp	r3, #0
 8001960:	d009      	beq.n	8001976 <RCC_ClockConfig+0xea>
	{
		RCC->CFGR.bit.ppre1 = pRCC_Clk->APB1CLKDivider;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <RCC_ClockConfig+0x124>)
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	b2d9      	uxtb	r1, r3
 800196e:	6893      	ldr	r3, [r2, #8]
 8001970:	f361 238c 	bfi	r3, r1, #10, #3
 8001974:	6093      	str	r3, [r2, #8]
	}

	//PCLK2 Configuration
	if(RCC_CLOCKTYPE_PCLK2 == ((pRCC_Clk->ClockType) & RCC_CLOCKTYPE_PCLK2))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	2b00      	cmp	r3, #0
 8001980:	d009      	beq.n	8001996 <RCC_ClockConfig+0x10a>
	{
		RCC->CFGR.bit.ppre2 = pRCC_Clk->APB2CLKDivider;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <RCC_ClockConfig+0x124>)
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	b2d9      	uxtb	r1, r3
 800198e:	6893      	ldr	r3, [r2, #8]
 8001990:	f361 334f 	bfi	r3, r1, #13, #3
 8001994:	6093      	str	r3, [r2, #8]
	}

	//Update the SystemCoreClock global variable
	SystemCoreClock = RCC_GetSysClockFreq();
 8001996:	f000 f80f 	bl	80019b8 <RCC_GetSysClockFreq>
 800199a:	4603      	mov	r3, r0
 800199c:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <RCC_ClockConfig+0x128>)
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	e000      	b.n	80019a4 <RCC_ClockConfig+0x118>
	    return;
 80019a2:	bf00      	nop
}
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023c00 	.word	0x40023c00
 80019b0:	40023800 	.word	0x40023800
 80019b4:	20000000 	.word	0x20000000

080019b8 <RCC_GetSysClockFreq>:
/* @return				- System clock frequency														*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
uint32_t RCC_GetSysClockFreq(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
    uint32_t sys_clk_freq = 0, clk_src = 0, temp = 0, ahb_prescaler = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	2300      	movs	r3, #0
 80019c8:	603b      	str	r3, [r7, #0]
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]

    // Get the clock source used for the system clock
    clk_src = RCC->CFGR.bit.sws;
 80019ce:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <RCC_GetSysClockFreq+0x80>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	607b      	str	r3, [r7, #4]

    if(RCC_SYSCLKSOURCE_HSI == clk_src)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d102      	bne.n	80019e6 <RCC_GetSysClockFreq+0x2e>
    {
        sys_clk_freq = 16000000; // HSI
 80019e0:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <RCC_GetSysClockFreq+0x84>)
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	e00b      	b.n	80019fe <RCC_GetSysClockFreq+0x46>
    }
    else if(RCC_SYSCLKSOURCE_HSE == clk_src)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d102      	bne.n	80019f2 <RCC_GetSysClockFreq+0x3a>
    {
        sys_clk_freq = 8000000; // HSE
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <RCC_GetSysClockFreq+0x88>)
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	e005      	b.n	80019fe <RCC_GetSysClockFreq+0x46>
    }
    else if(RCC_SYSCLKSOURCE_PLLCLK == clk_src)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d102      	bne.n	80019fe <RCC_GetSysClockFreq+0x46>
    {
        sys_clk_freq = RCC_GetPLLOutputClock(); // PLL
 80019f8:	f000 f826 	bl	8001a48 <RCC_GetPLLOutputClock>
 80019fc:	60f8      	str	r0, [r7, #12]
    }

    // Get the AHB prescaler
    temp = RCC->CFGR.bit.hpre;
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <RCC_GetSysClockFreq+0x80>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	603b      	str	r3, [r7, #0]

    if(temp < 8)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	2b07      	cmp	r3, #7
 8001a0e:	d802      	bhi.n	8001a16 <RCC_GetSysClockFreq+0x5e>
    {
        ahb_prescaler = 1;
 8001a10:	2301      	movs	r3, #1
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	e005      	b.n	8001a22 <RCC_GetSysClockFreq+0x6a>
    }
    else
    {
        ahb_prescaler = a_AHB_Prescaler[temp-8];
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	3b08      	subs	r3, #8
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <RCC_GetSysClockFreq+0x8c>)
 8001a1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a20:	60bb      	str	r3, [r7, #8]
    }

    sys_clk_freq /= ahb_prescaler;
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2a:	60fb      	str	r3, [r7, #12]

    return sys_clk_freq;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	00f42400 	.word	0x00f42400
 8001a40:	007a1200 	.word	0x007a1200
 8001a44:	20000004 	.word	0x20000004

08001a48 <RCC_GetPLLOutputClock>:
/* @return				- PLL output frequency															*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
uint32_t RCC_GetPLLOutputClock(void)
{
 8001a48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
    uint32_t pll_clk_src;
    uint64_t pll_input_freq, pll_output_freq;

    // Calculate the PLL input frequency
    pll_clk_src = RCC->PLLCFGR.bit.pllsrc;
 8001a50:	4c36      	ldr	r4, [pc, #216]	; (8001b2c <RCC_GetPLLOutputClock+0xe4>)
 8001a52:	6864      	ldr	r4, [r4, #4]
 8001a54:	f3c4 5480 	ubfx	r4, r4, #22, #1
 8001a58:	b2e4      	uxtb	r4, r4
 8001a5a:	60bc      	str	r4, [r7, #8]

    /* Determine the input frequency for the PLL */
    if (RCC_PLLCFGR_PLLSRC_HSI == pll_clk_src)
 8001a5c:	68bc      	ldr	r4, [r7, #8]
 8001a5e:	2c00      	cmp	r4, #0
 8001a60:	d105      	bne.n	8001a6e <RCC_GetPLLOutputClock+0x26>
    {	//HSI = 0
        pll_input_freq = HSI_VALUE;
 8001a62:	4c33      	ldr	r4, [pc, #204]	; (8001b30 <RCC_GetPLLOutputClock+0xe8>)
 8001a64:	f04f 0500 	mov.w	r5, #0
 8001a68:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8001a6c:	e00e      	b.n	8001a8c <RCC_GetPLLOutputClock+0x44>
    }
    else if (RCC_PLLCFGR_PLLSRC_HSE == pll_clk_src)
 8001a6e:	68bc      	ldr	r4, [r7, #8]
 8001a70:	2c01      	cmp	r4, #1
 8001a72:	d105      	bne.n	8001a80 <RCC_GetPLLOutputClock+0x38>
    {
       /* Get the HSE oscillator frequency */
       pll_input_freq = HSE_VALUE;
 8001a74:	4c2f      	ldr	r4, [pc, #188]	; (8001b34 <RCC_GetPLLOutputClock+0xec>)
 8001a76:	f04f 0500 	mov.w	r5, #0
 8001a7a:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8001a7e:	e005      	b.n	8001a8c <RCC_GetPLLOutputClock+0x44>
    }
    else
    {
       /* Invalid PLL source, set frequency to 0 */
       pll_input_freq = 0;
 8001a80:	f04f 0400 	mov.w	r4, #0
 8001a84:	f04f 0500 	mov.w	r5, #0
 8001a88:	e9c7 4504 	strd	r4, r5, [r7, #16]
    }

    uint32_t pllp_val;
    switch (RCC->PLLCFGR.bit.pllp)
 8001a8c:	4c27      	ldr	r4, [pc, #156]	; (8001b2c <RCC_GetPLLOutputClock+0xe4>)
 8001a8e:	6864      	ldr	r4, [r4, #4]
 8001a90:	f3c4 4401 	ubfx	r4, r4, #16, #2
 8001a94:	b2e4      	uxtb	r4, r4
 8001a96:	2c03      	cmp	r4, #3
 8001a98:	d816      	bhi.n	8001ac8 <RCC_GetPLLOutputClock+0x80>
 8001a9a:	a501      	add	r5, pc, #4	; (adr r5, 8001aa0 <RCC_GetPLLOutputClock+0x58>)
 8001a9c:	f855 f024 	ldr.w	pc, [r5, r4, lsl #2]
 8001aa0:	08001ab1 	.word	0x08001ab1
 8001aa4:	08001ab7 	.word	0x08001ab7
 8001aa8:	08001abd 	.word	0x08001abd
 8001aac:	08001ac3 	.word	0x08001ac3
    {
		case 0:
		{
			pllp_val = 2; break;
 8001ab0:	2402      	movs	r4, #2
 8001ab2:	60fc      	str	r4, [r7, #12]
 8001ab4:	e00a      	b.n	8001acc <RCC_GetPLLOutputClock+0x84>
		}
		case 1:
		{
			pllp_val = 4; break;
 8001ab6:	2404      	movs	r4, #4
 8001ab8:	60fc      	str	r4, [r7, #12]
 8001aba:	e007      	b.n	8001acc <RCC_GetPLLOutputClock+0x84>
		}
		case 2:
		{
			pllp_val = 6; break;
 8001abc:	2406      	movs	r4, #6
 8001abe:	60fc      	str	r4, [r7, #12]
 8001ac0:	e004      	b.n	8001acc <RCC_GetPLLOutputClock+0x84>
		}
		case 3:
		{
			pllp_val = 8; break;
 8001ac2:	2408      	movs	r4, #8
 8001ac4:	60fc      	str	r4, [r7, #12]
 8001ac6:	e001      	b.n	8001acc <RCC_GetPLLOutputClock+0x84>
		}
		default: pllp_val = 2; // default case, should not happen
 8001ac8:	2402      	movs	r4, #2
 8001aca:	60fc      	str	r4, [r7, #12]
    }

    // Calculate the PLL output frequency
    pll_output_freq = (pll_input_freq * (RCC->PLLCFGR.bit.plln)) / ((RCC->PLLCFGR.bit.pllm) * pllp_val);
 8001acc:	4c17      	ldr	r4, [pc, #92]	; (8001b2c <RCC_GetPLLOutputClock+0xe4>)
 8001ace:	6864      	ldr	r4, [r4, #4]
 8001ad0:	f3c4 1488 	ubfx	r4, r4, #6, #9
 8001ad4:	b2a4      	uxth	r4, r4
 8001ad6:	b2a4      	uxth	r4, r4
 8001ad8:	2500      	movs	r5, #0
 8001ada:	4622      	mov	r2, r4
 8001adc:	462b      	mov	r3, r5
 8001ade:	693c      	ldr	r4, [r7, #16]
 8001ae0:	fb03 f504 	mul.w	r5, r3, r4
 8001ae4:	697c      	ldr	r4, [r7, #20]
 8001ae6:	fb02 f404 	mul.w	r4, r2, r4
 8001aea:	442c      	add	r4, r5
 8001aec:	693d      	ldr	r5, [r7, #16]
 8001aee:	fba5 0102 	umull	r0, r1, r5, r2
 8001af2:	1863      	adds	r3, r4, r1
 8001af4:	4619      	mov	r1, r3
 8001af6:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <RCC_GetPLLOutputClock+0xe4>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	fb02 f303 	mul.w	r3, r2, r3
 8001b08:	2200      	movs	r2, #0
 8001b0a:	4698      	mov	r8, r3
 8001b0c:	4691      	mov	r9, r2
 8001b0e:	4642      	mov	r2, r8
 8001b10:	464b      	mov	r3, r9
 8001b12:	f7ff f977 	bl	8000e04 <__aeabi_uldivmod>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	e9c7 2300 	strd	r2, r3, [r7]


    return pll_output_freq;
 8001b1e:	683b      	ldr	r3, [r7, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	00f42400 	.word	0x00f42400
 8001b34:	007a1200 	.word	0x007a1200

08001b38 <RCC_GetPCLK1Freq>:
/* @return				- PCLK1 frequency																*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
uint32_t RCC_GetPCLK1Freq(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
	uint32_t pclk1;
	uint8_t clk_src = 0, temp = 0, ahb_prescaler = 0, apb1_prescaler = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	717b      	strb	r3, [r7, #5]
 8001b42:	2300      	movs	r3, #0
 8001b44:	713b      	strb	r3, [r7, #4]
 8001b46:	2300      	movs	r3, #0
 8001b48:	71fb      	strb	r3, [r7, #7]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	71bb      	strb	r3, [r7, #6]

	// Get the clock source used for the system clock
	clk_src = RCC->CFGR.bit.sws;
 8001b4e:	4b27      	ldr	r3, [pc, #156]	; (8001bec <RCC_GetPCLK1Freq+0xb4>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	717b      	strb	r3, [r7, #5]

	if(RCC_SYSCLKSOURCE_HSI == clk_src)
 8001b5a:	797b      	ldrb	r3, [r7, #5]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d103      	bne.n	8001b68 <RCC_GetPCLK1Freq+0x30>
	{
		SystemCoreClock = 16000000; // HSI
 8001b60:	4b23      	ldr	r3, [pc, #140]	; (8001bf0 <RCC_GetPCLK1Freq+0xb8>)
 8001b62:	4a24      	ldr	r2, [pc, #144]	; (8001bf4 <RCC_GetPCLK1Freq+0xbc>)
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	e00e      	b.n	8001b86 <RCC_GetPCLK1Freq+0x4e>
	}
	else if(RCC_SYSCLKSOURCE_HSE == clk_src)
 8001b68:	797b      	ldrb	r3, [r7, #5]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d103      	bne.n	8001b76 <RCC_GetPCLK1Freq+0x3e>
	{
		SystemCoreClock = 8000000; // HSE
 8001b6e:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <RCC_GetPCLK1Freq+0xb8>)
 8001b70:	4a21      	ldr	r2, [pc, #132]	; (8001bf8 <RCC_GetPCLK1Freq+0xc0>)
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	e007      	b.n	8001b86 <RCC_GetPCLK1Freq+0x4e>
	}
	else if(RCC_SYSCLKSOURCE_PLLCLK == clk_src)
 8001b76:	797b      	ldrb	r3, [r7, #5]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d104      	bne.n	8001b86 <RCC_GetPCLK1Freq+0x4e>
	{
		SystemCoreClock = RCC_GetPLLOutputClock(); // PLL
 8001b7c:	f7ff ff64 	bl	8001a48 <RCC_GetPLLOutputClock>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4a1b      	ldr	r2, [pc, #108]	; (8001bf0 <RCC_GetPCLK1Freq+0xb8>)
 8001b84:	6013      	str	r3, [r2, #0]
	}

	// For AHB
	temp = RCC->CFGR.bit.hpre;
 8001b86:	4b19      	ldr	r3, [pc, #100]	; (8001bec <RCC_GetPCLK1Freq+0xb4>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	713b      	strb	r3, [r7, #4]

	if(temp < 8)
 8001b92:	793b      	ldrb	r3, [r7, #4]
 8001b94:	2b07      	cmp	r3, #7
 8001b96:	d802      	bhi.n	8001b9e <RCC_GetPCLK1Freq+0x66>
	{
		ahb_prescaler = 1;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	71fb      	strb	r3, [r7, #7]
 8001b9c:	e005      	b.n	8001baa <RCC_GetPCLK1Freq+0x72>
	}
	else
	{
		ahb_prescaler = a_AHB_Prescaler[temp-8];
 8001b9e:	793b      	ldrb	r3, [r7, #4]
 8001ba0:	3b08      	subs	r3, #8
 8001ba2:	4a16      	ldr	r2, [pc, #88]	; (8001bfc <RCC_GetPCLK1Freq+0xc4>)
 8001ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ba8:	71fb      	strb	r3, [r7, #7]
	}

	// For APB1
	temp = RCC->CFGR.bit.ppre1;
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <RCC_GetPCLK1Freq+0xb4>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	713b      	strb	r3, [r7, #4]

	if(temp < 4)
 8001bb6:	793b      	ldrb	r3, [r7, #4]
 8001bb8:	2b03      	cmp	r3, #3
 8001bba:	d802      	bhi.n	8001bc2 <RCC_GetPCLK1Freq+0x8a>
	{
		apb1_prescaler = 1;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	71bb      	strb	r3, [r7, #6]
 8001bc0:	e005      	b.n	8001bce <RCC_GetPCLK1Freq+0x96>
	} else
	{
		apb1_prescaler = a_APB1_Prescaler[temp-4];
 8001bc2:	793b      	ldrb	r3, [r7, #4]
 8001bc4:	3b04      	subs	r3, #4
 8001bc6:	4a0e      	ldr	r2, [pc, #56]	; (8001c00 <RCC_GetPCLK1Freq+0xc8>)
 8001bc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bcc:	71bb      	strb	r3, [r7, #6]
	}

	pclk1 = (SystemCoreClock / ahb_prescaler) / apb1_prescaler;
 8001bce:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <RCC_GetPCLK1Freq+0xb8>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bd8:	79bb      	ldrb	r3, [r7, #6]
 8001bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bde:	603b      	str	r3, [r7, #0]

	return pclk1;
 8001be0:	683b      	ldr	r3, [r7, #0]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	00f42400 	.word	0x00f42400
 8001bf8:	007a1200 	.word	0x007a1200
 8001bfc:	20000004 	.word	0x20000004
 8001c00:	20000014 	.word	0x20000014

08001c04 <RCC_GetPCLK2Freq>:
/* @return				- PCLK2 frequency																*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
uint32_t RCC_GetPCLK2Freq(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
	uint32_t pclk2;
	uint8_t clk_src, temp, ahb_prescaler, apb2_prescaler = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	71bb      	strb	r3, [r7, #6]

	// Get the clock source used for the system clock
	clk_src = RCC->CFGR.bit.sws;
 8001c0e:	4b27      	ldr	r3, [pc, #156]	; (8001cac <RCC_GetPCLK2Freq+0xa8>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	717b      	strb	r3, [r7, #5]

	if(RCC_SYSCLKSOURCE_HSI == clk_src)
 8001c1a:	797b      	ldrb	r3, [r7, #5]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d103      	bne.n	8001c28 <RCC_GetPCLK2Freq+0x24>
	{
		SystemCoreClock = 16000000; //HSI
 8001c20:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <RCC_GetPCLK2Freq+0xac>)
 8001c22:	4a24      	ldr	r2, [pc, #144]	; (8001cb4 <RCC_GetPCLK2Freq+0xb0>)
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	e00e      	b.n	8001c46 <RCC_GetPCLK2Freq+0x42>
	}else if(RCC_SYSCLKSOURCE_HSE == clk_src)
 8001c28:	797b      	ldrb	r3, [r7, #5]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d103      	bne.n	8001c36 <RCC_GetPCLK2Freq+0x32>
	{
		SystemCoreClock = 8000000;    //HSE
 8001c2e:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <RCC_GetPCLK2Freq+0xac>)
 8001c30:	4a21      	ldr	r2, [pc, #132]	; (8001cb8 <RCC_GetPCLK2Freq+0xb4>)
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	e007      	b.n	8001c46 <RCC_GetPCLK2Freq+0x42>
	}else if(RCC_SYSCLKSOURCE_PLLCLK == clk_src)
 8001c36:	797b      	ldrb	r3, [r7, #5]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d104      	bne.n	8001c46 <RCC_GetPCLK2Freq+0x42>
	{
		SystemCoreClock = RCC_GetPLLOutputClock();    //PLL
 8001c3c:	f7ff ff04 	bl	8001a48 <RCC_GetPLLOutputClock>
 8001c40:	4603      	mov	r3, r0
 8001c42:	4a1b      	ldr	r2, [pc, #108]	; (8001cb0 <RCC_GetPCLK2Freq+0xac>)
 8001c44:	6013      	str	r3, [r2, #0]
	}

	//for AHB
	temp = RCC->CFGR.bit.hpre;
 8001c46:	4b19      	ldr	r3, [pc, #100]	; (8001cac <RCC_GetPCLK2Freq+0xa8>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	713b      	strb	r3, [r7, #4]

	if(temp < 8)
 8001c52:	793b      	ldrb	r3, [r7, #4]
 8001c54:	2b07      	cmp	r3, #7
 8001c56:	d802      	bhi.n	8001c5e <RCC_GetPCLK2Freq+0x5a>
	{
		ahb_prescaler = 1;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	71fb      	strb	r3, [r7, #7]
 8001c5c:	e005      	b.n	8001c6a <RCC_GetPCLK2Freq+0x66>
	}else
	{
		ahb_prescaler = a_AHB_Prescaler[temp-8];
 8001c5e:	793b      	ldrb	r3, [r7, #4]
 8001c60:	3b08      	subs	r3, #8
 8001c62:	4a16      	ldr	r2, [pc, #88]	; (8001cbc <RCC_GetPCLK2Freq+0xb8>)
 8001c64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c68:	71fb      	strb	r3, [r7, #7]
	}

	//for APB2
	temp = RCC->CFGR.bit.ppre2;
 8001c6a:	4b10      	ldr	r3, [pc, #64]	; (8001cac <RCC_GetPCLK2Freq+0xa8>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	713b      	strb	r3, [r7, #4]

	if(temp < 4)
 8001c76:	793b      	ldrb	r3, [r7, #4]
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d802      	bhi.n	8001c82 <RCC_GetPCLK2Freq+0x7e>
	{
		apb2_prescaler = 1;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	71bb      	strb	r3, [r7, #6]
 8001c80:	e005      	b.n	8001c8e <RCC_GetPCLK2Freq+0x8a>
	}else
	{
		apb2_prescaler = a_APB2_Prescaler[temp-4];
 8001c82:	793b      	ldrb	r3, [r7, #4]
 8001c84:	3b04      	subs	r3, #4
 8001c86:	4a0e      	ldr	r2, [pc, #56]	; (8001cc0 <RCC_GetPCLK2Freq+0xbc>)
 8001c88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c8c:	71bb      	strb	r3, [r7, #6]
	}

	pclk2 = SystemCoreClock / (ahb_prescaler * apb2_prescaler);
 8001c8e:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <RCC_GetPCLK2Freq+0xac>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	79fa      	ldrb	r2, [r7, #7]
 8001c94:	79b9      	ldrb	r1, [r7, #6]
 8001c96:	fb01 f202 	mul.w	r2, r1, r2
 8001c9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c9e:	603b      	str	r3, [r7, #0]

	return pclk2;
 8001ca0:	683b      	ldr	r3, [r7, #0]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	00f42400 	.word	0x00f42400
 8001cb8:	007a1200 	.word	0x007a1200
 8001cbc:	20000004 	.word	0x20000004
 8001cc0:	2000001c 	.word	0x2000001c

08001cc4 <SPI_PeriphClockControl>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void SPI_PeriphClockControl(SPI_RegDef_t *pSPIx, uint8_t state)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	70fb      	strb	r3, [r7, #3]
		if(pSPIx == SPI1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a16      	ldr	r2, [pc, #88]	; (8001d2c <SPI_PeriphClockControl+0x68>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d109      	bne.n	8001cec <SPI_PeriphClockControl+0x28>
		{
			//enable SPI1 clock
			RCC->APB2ENR.bit.spi1en = state;
 8001cd8:	4a15      	ldr	r2, [pc, #84]	; (8001d30 <SPI_PeriphClockControl+0x6c>)
 8001cda:	78fb      	ldrb	r3, [r7, #3]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	b2d9      	uxtb	r1, r3
 8001ce2:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001ce4:	f361 330c 	bfi	r3, r1, #12, #1
 8001ce8:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pSPIx == SPI3)
		{
			//enable SPI3 clock
			RCC->APB1ENR.bit.spi3en = state;
		}
}
 8001cea:	e01a      	b.n	8001d22 <SPI_PeriphClockControl+0x5e>
		else if(pSPIx == SPI2)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a11      	ldr	r2, [pc, #68]	; (8001d34 <SPI_PeriphClockControl+0x70>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d109      	bne.n	8001d08 <SPI_PeriphClockControl+0x44>
			RCC->APB1ENR.bit.spi2en = state;
 8001cf4:	4a0e      	ldr	r2, [pc, #56]	; (8001d30 <SPI_PeriphClockControl+0x6c>)
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	b2d9      	uxtb	r1, r3
 8001cfe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001d00:	f361 338e 	bfi	r3, r1, #14, #1
 8001d04:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001d06:	e00c      	b.n	8001d22 <SPI_PeriphClockControl+0x5e>
		else if(pSPIx == SPI3)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a0b      	ldr	r2, [pc, #44]	; (8001d38 <SPI_PeriphClockControl+0x74>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d108      	bne.n	8001d22 <SPI_PeriphClockControl+0x5e>
			RCC->APB1ENR.bit.spi3en = state;
 8001d10:	4a07      	ldr	r2, [pc, #28]	; (8001d30 <SPI_PeriphClockControl+0x6c>)
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	b2d9      	uxtb	r1, r3
 8001d1a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001d1c:	f361 33cf 	bfi	r3, r1, #15, #1
 8001d20:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	40013000 	.word	0x40013000
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40003800 	.word	0x40003800
 8001d38:	40003c00 	.word	0x40003c00

08001d3c <SPI_Init>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	SPI_CR1_Reg_t CR1_temp = {0};
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]

	//enable SPI clock
	SPI_PeriphClockControl(pSPIHandle->pSPIx, ENABLE);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ffb8 	bl	8001cc4 <SPI_PeriphClockControl>

	CR1_temp.bit.mstr = pSPIHandle->SPIConfig.SPI_DeviceMode;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	791b      	ldrb	r3, [r3, #4]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	89bb      	ldrh	r3, [r7, #12]
 8001d60:	f362 0382 	bfi	r3, r2, #2, #1
 8001d64:	81bb      	strh	r3, [r7, #12]

	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_FD)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	795b      	ldrb	r3, [r3, #5]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d104      	bne.n	8001d78 <SPI_Init+0x3c>
	{
		//BIDI mode should be off
		CR1_temp.bit.bidimode = DISABLE;
 8001d6e:	89bb      	ldrh	r3, [r7, #12]
 8001d70:	f36f 33cf 	bfc	r3, #15, #1
 8001d74:	81bb      	strh	r3, [r7, #12]
 8001d76:	e014      	b.n	8001da2 <SPI_Init+0x66>

	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_HD)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	795b      	ldrb	r3, [r3, #5]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d104      	bne.n	8001d8a <SPI_Init+0x4e>
	{
		//enable BIDI
		CR1_temp.bit.bidimode = ENABLE;
 8001d80:	89bb      	ldrh	r3, [r7, #12]
 8001d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d86:	81bb      	strh	r3, [r7, #12]
 8001d88:	e00b      	b.n	8001da2 <SPI_Init+0x66>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_SIMPLEX_RXONLY)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	795b      	ldrb	r3, [r3, #5]
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d107      	bne.n	8001da2 <SPI_Init+0x66>
	{
		//BIDI mode should be off
		CR1_temp.bit.bidimode = DISABLE;
 8001d92:	89bb      	ldrh	r3, [r7, #12]
 8001d94:	f36f 33cf 	bfc	r3, #15, #1
 8001d98:	81bb      	strh	r3, [r7, #12]
		//set RXONLY bit
		CR1_temp.bit.rxonly = ENABLE;
 8001d9a:	89bb      	ldrh	r3, [r7, #12]
 8001d9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001da0:	81bb      	strh	r3, [r7, #12]
	}

	// baudrate is CR1's third bit
	CR1_temp.bit.br   = pSPIHandle->SPIConfig.SPI_SclkSpeed;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	799b      	ldrb	r3, [r3, #6]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	89bb      	ldrh	r3, [r7, #12]
 8001dae:	f362 03c5 	bfi	r3, r2, #3, #3
 8001db2:	81bb      	strh	r3, [r7, #12]
	CR1_temp.bit.dff  = pSPIHandle->SPIConfig.SPI_DFF;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	79db      	ldrb	r3, [r3, #7]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	89bb      	ldrh	r3, [r7, #12]
 8001dc0:	f362 23cb 	bfi	r3, r2, #11, #1
 8001dc4:	81bb      	strh	r3, [r7, #12]
	CR1_temp.bit.cpol = pSPIHandle->SPIConfig.SPI_CPOL;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	7a1b      	ldrb	r3, [r3, #8]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	89bb      	ldrh	r3, [r7, #12]
 8001dd2:	f362 0341 	bfi	r3, r2, #1, #1
 8001dd6:	81bb      	strh	r3, [r7, #12]
	CR1_temp.bit.cpha = pSPIHandle->SPIConfig.SPI_CPHA;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	7a5b      	ldrb	r3, [r3, #9]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	89bb      	ldrh	r3, [r7, #12]
 8001de4:	f362 0300 	bfi	r3, r2, #0, #1
 8001de8:	81bb      	strh	r3, [r7, #12]
	CR1_temp.bit.ssm  = pSPIHandle->SPIConfig.SPI_SSM;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7a9b      	ldrb	r3, [r3, #10]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	89bb      	ldrh	r3, [r7, #12]
 8001df6:	f362 2349 	bfi	r3, r2, #9, #1
 8001dfa:	81bb      	strh	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1.reg = CR1_temp.reg;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	601a      	str	r2, [r3, #0]

	if((ENABLE == pSPIHandle->pSPIx->CR1.bit.mstr) && (ENABLE == pSPIHandle->pSPIx->CR1.bit.ssm))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d10d      	bne.n	8001e30 <SPI_Init+0xf4>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d105      	bne.n	8001e30 <SPI_Init+0xf4>
	{
		SPI_SSIConfig(pSPIHandle->pSPIx, ENABLE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2101      	movs	r1, #1
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 f878 	bl	8001f20 <SPI_SSIConfig>
	}
	//enable SPIx peripheral
	SPI_PeripheralControl(pSPIHandle->pSPIx, ENABLE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2101      	movs	r1, #1
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 f85e 	bl	8001ef8 <SPI_PeripheralControl>

}
 8001e3c:	bf00      	nop
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <SPI_GetFLagStatus>:
/* @return				- flag state																	*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
uint8_t SPI_GetFLagStatus(SPI_RegDef_t *pSPIx, SPI_SR_flag_t StatusFlagName)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	70fb      	strb	r3, [r7, #3]
	switch(StatusFlagName)
 8001e50:	78fb      	ldrb	r3, [r7, #3]
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d84a      	bhi.n	8001eec <SPI_GetFLagStatus+0xa8>
 8001e56:	a201      	add	r2, pc, #4	; (adr r2, 8001e5c <SPI_GetFLagStatus+0x18>)
 8001e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e5c:	08001e81 	.word	0x08001e81
 8001e60:	08001e8d 	.word	0x08001e8d
 8001e64:	08001e99 	.word	0x08001e99
 8001e68:	08001ea5 	.word	0x08001ea5
 8001e6c:	08001eb1 	.word	0x08001eb1
 8001e70:	08001ebd 	.word	0x08001ebd
 8001e74:	08001ec9 	.word	0x08001ec9
 8001e78:	08001ed5 	.word	0x08001ed5
 8001e7c:	08001ee1 	.word	0x08001ee1
	{
		case SPI_SR_RXNE:
		{
			return pSPIx->SR.bit.rxne;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	e030      	b.n	8001eee <SPI_GetFLagStatus+0xaa>
			break;
		}
		case SPI_SR_TXE:
		{
			return pSPIx->SR.bit.txe;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	e02a      	b.n	8001eee <SPI_GetFLagStatus+0xaa>
			break;
		}
		case SPI_SR_CHSIDE:
		{
			return pSPIx->SR.bit.chside;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	e024      	b.n	8001eee <SPI_GetFLagStatus+0xaa>
			break;
		}
		case SPI_SR_UDR:
		{
			return pSPIx->SR.bit.udr;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	e01e      	b.n	8001eee <SPI_GetFLagStatus+0xaa>
			break;
		}
		case SPI_SR_CRCERR:
		{
			return pSPIx->SR.bit.crcerr;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	e018      	b.n	8001eee <SPI_GetFLagStatus+0xaa>
			break;
		}
		case SPI_SR_MODF:
		{
			return pSPIx->SR.bit.modf;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	e012      	b.n	8001eee <SPI_GetFLagStatus+0xaa>
			break;
		}
		case SPI_SR_OVR:
		{
			return pSPIx->SR.bit.ovr;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	e00c      	b.n	8001eee <SPI_GetFLagStatus+0xaa>
			break;
		}
		case SPI_SR_BSY:
		{
			return pSPIx->SR.bit.bsy;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	e006      	b.n	8001eee <SPI_GetFLagStatus+0xaa>
			break;
		}
		case SPI_SR_FRE:
		{
			return pSPIx->SR.bit.fre;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f3c3 2300 	ubfx	r3, r3, #8, #1
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	e000      	b.n	8001eee <SPI_GetFLagStatus+0xaa>
			break;
		}
		default:
			return RESET;
 8001eec:	2300      	movs	r3, #0
	}
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <SPI_PeripheralControl>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t state)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	70fb      	strb	r3, [r7, #3]
	pSPIx->CR1.bit.spe = state;
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	b2d9      	uxtb	r1, r3
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	8813      	ldrh	r3, [r2, #0]
 8001f10:	f361 1386 	bfi	r3, r1, #6, #1
 8001f14:	8013      	strh	r3, [r2, #0]
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <SPI_SSIConfig>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t state)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	70fb      	strb	r3, [r7, #3]
	pSPIx->CR1.bit.ssi = state;
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	b2d9      	uxtb	r1, r3
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	8813      	ldrh	r3, [r2, #0]
 8001f38:	f361 2308 	bfi	r3, r1, #8, #1
 8001f3c:	8013      	strh	r3, [r2, #0]
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <SPI_SendData>:
/* @return				- none																			*/
/*																										*/
/* @Note				- This is blocking call															*/
/********************************************************************************************************/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8001f54:	e028      	b.n	8001fa8 <SPI_SendData+0x60>
	{
		while(RESET == SPI_GetFLagStatus(pSPIx, SPI_SR_TXE))
 8001f56:	bf00      	nop
 8001f58:	2101      	movs	r1, #1
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f7ff ff72 	bl	8001e44 <SPI_GetFLagStatus>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f8      	beq.n	8001f58 <SPI_SendData+0x10>
		{

		}

		if(SET == pSPIx->CR1.bit.dff)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d10e      	bne.n	8001f92 <SPI_SendData+0x4a>
		{
			//16 bit DFF
			pSPIx->DR = *((uint16_t *)pTxBuffer);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	60da      	str	r2, [r3, #12]
			Len--;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	607b      	str	r3, [r7, #4]
			Len--;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	e00a      	b.n	8001fa8 <SPI_SendData+0x60>
		}else
		{
			//8 bit DFF
			pSPIx->DR = *pTxBuffer;
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	60da      	str	r2, [r3, #12]
			Len--;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1d3      	bne.n	8001f56 <SPI_SendData+0xe>
		}
	}
}
 8001fae:	bf00      	nop
 8001fb0:	bf00      	nop
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	db0a      	blt.n	8001fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	490c      	ldr	r1, [pc, #48]	; (8002004 <__NVIC_SetPriority+0x4c>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	0112      	lsls	r2, r2, #4
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	440b      	add	r3, r1
 8001fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe0:	e00a      	b.n	8001ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4908      	ldr	r1, [pc, #32]	; (8002008 <__NVIC_SetPriority+0x50>)
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	3b04      	subs	r3, #4
 8001ff0:	0112      	lsls	r2, r2, #4
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	761a      	strb	r2, [r3, #24]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000e100 	.word	0xe000e100
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3b01      	subs	r3, #1
 8002018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800201c:	d301      	bcc.n	8002022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201e:	2301      	movs	r3, #1
 8002020:	e00f      	b.n	8002042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002022:	4a0a      	ldr	r2, [pc, #40]	; (800204c <SysTick_Config+0x40>)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800202a:	210f      	movs	r1, #15
 800202c:	f04f 30ff 	mov.w	r0, #4294967295
 8002030:	f7ff ffc2 	bl	8001fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <SysTick_Config+0x40>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800203a:	4b04      	ldr	r3, [pc, #16]	; (800204c <SysTick_Config+0x40>)
 800203c:	2207      	movs	r2, #7
 800203e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	e000e010 	.word	0xe000e010

08002050 <SysTick_Init>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void SysTick_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
    SysTick_Config(SystemCoreClock / 1000);  // Generate interrupt every 1ms
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <SysTick_Init+0x1c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a05      	ldr	r2, [pc, #20]	; (8002070 <SysTick_Init+0x20>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	099b      	lsrs	r3, r3, #6
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ffd3 	bl	800200c <SysTick_Config>
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000000 	.word	0x20000000
 8002070:	10624dd3 	.word	0x10624dd3

08002074 <SysTick_Handler>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void SysTick_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
    millis++;
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <SysTick_Handler+0x18>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	3301      	adds	r3, #1
 800207e:	4a03      	ldr	r2, [pc, #12]	; (800208c <SysTick_Handler+0x18>)
 8002080:	6013      	str	r3, [r2, #0]
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20000238 	.word	0x20000238

08002090 <GetTick>:
/* @return				- millisecond value																*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
uint32_t GetTick(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
    return millis;
 8002094:	4b02      	ldr	r3, [pc, #8]	; (80020a0 <GetTick+0x10>)
 8002096:	681b      	ldr	r3, [r3, #0]
}
 8002098:	4618      	mov	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr
 80020a0:	20000238 	.word	0x20000238

080020a4 <TIM_PeriphControl>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void TIM_PeriphControl(TIM_Handle_t *pTIMHandle, uint8_t state)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	70fb      	strb	r3, [r7, #3]
	switch(pTIMHandle->TIMx)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	2b13      	cmp	r3, #19
 80020b8:	f200 80b9 	bhi.w	800222e <TIM_PeriphControl+0x18a>
 80020bc:	a201      	add	r2, pc, #4	; (adr r2, 80020c4 <TIM_PeriphControl+0x20>)
 80020be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c2:	bf00      	nop
 80020c4:	08002115 	.word	0x08002115
 80020c8:	08002129 	.word	0x08002129
 80020cc:	0800213f 	.word	0x0800213f
 80020d0:	08002153 	.word	0x08002153
 80020d4:	08002167 	.word	0x08002167
 80020d8:	0800217b 	.word	0x0800217b
 80020dc:	0800218f 	.word	0x0800218f
 80020e0:	080021a3 	.word	0x080021a3
 80020e4:	080021b7 	.word	0x080021b7
 80020e8:	0800222f 	.word	0x0800222f
 80020ec:	0800222f 	.word	0x0800222f
 80020f0:	0800222f 	.word	0x0800222f
 80020f4:	0800222f 	.word	0x0800222f
 80020f8:	0800222f 	.word	0x0800222f
 80020fc:	0800222f 	.word	0x0800222f
 8002100:	080021cb 	.word	0x080021cb
 8002104:	080021df 	.word	0x080021df
 8002108:	080021f3 	.word	0x080021f3
 800210c:	08002207 	.word	0x08002207
 8002110:	0800221b 	.word	0x0800221b
	{
		case TIM_1:
		{
			TIM1->CR1.bit.cen = state;
 8002114:	4a48      	ldr	r2, [pc, #288]	; (8002238 <TIM_PeriphControl+0x194>)
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	b2d9      	uxtb	r1, r3
 800211e:	8813      	ldrh	r3, [r2, #0]
 8002120:	f361 0300 	bfi	r3, r1, #0, #1
 8002124:	8013      	strh	r3, [r2, #0]
			break;
 8002126:	e083      	b.n	8002230 <TIM_PeriphControl+0x18c>
		}
		case TIM_2:
		{
			TIM2->CR1.bit.cen = state;
 8002128:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	b2d9      	uxtb	r1, r3
 8002134:	8813      	ldrh	r3, [r2, #0]
 8002136:	f361 0300 	bfi	r3, r1, #0, #1
 800213a:	8013      	strh	r3, [r2, #0]
			break;
 800213c:	e078      	b.n	8002230 <TIM_PeriphControl+0x18c>
		}
		case TIM_3:
		{
			TIM3->CR1.bit.cen = state;
 800213e:	4a3f      	ldr	r2, [pc, #252]	; (800223c <TIM_PeriphControl+0x198>)
 8002140:	78fb      	ldrb	r3, [r7, #3]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	b2d9      	uxtb	r1, r3
 8002148:	8813      	ldrh	r3, [r2, #0]
 800214a:	f361 0300 	bfi	r3, r1, #0, #1
 800214e:	8013      	strh	r3, [r2, #0]
			break;
 8002150:	e06e      	b.n	8002230 <TIM_PeriphControl+0x18c>
		}
		case TIM_4:
		{
			TIM4->CR1.bit.cen = state;
 8002152:	4a3b      	ldr	r2, [pc, #236]	; (8002240 <TIM_PeriphControl+0x19c>)
 8002154:	78fb      	ldrb	r3, [r7, #3]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	b2d9      	uxtb	r1, r3
 800215c:	8813      	ldrh	r3, [r2, #0]
 800215e:	f361 0300 	bfi	r3, r1, #0, #1
 8002162:	8013      	strh	r3, [r2, #0]
			break;
 8002164:	e064      	b.n	8002230 <TIM_PeriphControl+0x18c>
		}
		case TIM_5:
		{
			TIM5->CR1.bit.cen = state;
 8002166:	4a37      	ldr	r2, [pc, #220]	; (8002244 <TIM_PeriphControl+0x1a0>)
 8002168:	78fb      	ldrb	r3, [r7, #3]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	b2d9      	uxtb	r1, r3
 8002170:	8813      	ldrh	r3, [r2, #0]
 8002172:	f361 0300 	bfi	r3, r1, #0, #1
 8002176:	8013      	strh	r3, [r2, #0]
			break;
 8002178:	e05a      	b.n	8002230 <TIM_PeriphControl+0x18c>
		}
		case TIM_6:
		{
			TIM6->CR1.bit.cen = state;
 800217a:	4a33      	ldr	r2, [pc, #204]	; (8002248 <TIM_PeriphControl+0x1a4>)
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	b2d9      	uxtb	r1, r3
 8002184:	8813      	ldrh	r3, [r2, #0]
 8002186:	f361 0300 	bfi	r3, r1, #0, #1
 800218a:	8013      	strh	r3, [r2, #0]
			break;
 800218c:	e050      	b.n	8002230 <TIM_PeriphControl+0x18c>
		}
		case TIM_7:
		{
			TIM7->CR1.bit.cen = state;
 800218e:	4a2f      	ldr	r2, [pc, #188]	; (800224c <TIM_PeriphControl+0x1a8>)
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	b2d9      	uxtb	r1, r3
 8002198:	8813      	ldrh	r3, [r2, #0]
 800219a:	f361 0300 	bfi	r3, r1, #0, #1
 800219e:	8013      	strh	r3, [r2, #0]
			break;
 80021a0:	e046      	b.n	8002230 <TIM_PeriphControl+0x18c>
		}
		case TIM_8:
		{
			TIM8->CR1.bit.cen = state;
 80021a2:	4a2b      	ldr	r2, [pc, #172]	; (8002250 <TIM_PeriphControl+0x1ac>)
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	b2d9      	uxtb	r1, r3
 80021ac:	8813      	ldrh	r3, [r2, #0]
 80021ae:	f361 0300 	bfi	r3, r1, #0, #1
 80021b2:	8013      	strh	r3, [r2, #0]
			break;
 80021b4:	e03c      	b.n	8002230 <TIM_PeriphControl+0x18c>
		}
		case TIM_9:
		{
			TIM9->CR1.bit.cen = state;
 80021b6:	4a27      	ldr	r2, [pc, #156]	; (8002254 <TIM_PeriphControl+0x1b0>)
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	b2d9      	uxtb	r1, r3
 80021c0:	8813      	ldrh	r3, [r2, #0]
 80021c2:	f361 0300 	bfi	r3, r1, #0, #1
 80021c6:	8013      	strh	r3, [r2, #0]
			break;
 80021c8:	e032      	b.n	8002230 <TIM_PeriphControl+0x18c>
		}
		case TIM_10:
		{
			TIM10->CR1.bit.cen = state;
 80021ca:	4a23      	ldr	r2, [pc, #140]	; (8002258 <TIM_PeriphControl+0x1b4>)
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	b2d9      	uxtb	r1, r3
 80021d4:	8813      	ldrh	r3, [r2, #0]
 80021d6:	f361 0300 	bfi	r3, r1, #0, #1
 80021da:	8013      	strh	r3, [r2, #0]
			break;
 80021dc:	e028      	b.n	8002230 <TIM_PeriphControl+0x18c>
		}
		case TIM_11:
		{
			TIM11->CR1.bit.cen = state;
 80021de:	4a1f      	ldr	r2, [pc, #124]	; (800225c <TIM_PeriphControl+0x1b8>)
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	b2d9      	uxtb	r1, r3
 80021e8:	8813      	ldrh	r3, [r2, #0]
 80021ea:	f361 0300 	bfi	r3, r1, #0, #1
 80021ee:	8013      	strh	r3, [r2, #0]
			break;
 80021f0:	e01e      	b.n	8002230 <TIM_PeriphControl+0x18c>
		}
		case TIM_12:
		{
			TIM12->CR1.bit.cen = state;
 80021f2:	4a1b      	ldr	r2, [pc, #108]	; (8002260 <TIM_PeriphControl+0x1bc>)
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	b2d9      	uxtb	r1, r3
 80021fc:	8813      	ldrh	r3, [r2, #0]
 80021fe:	f361 0300 	bfi	r3, r1, #0, #1
 8002202:	8013      	strh	r3, [r2, #0]
			break;
 8002204:	e014      	b.n	8002230 <TIM_PeriphControl+0x18c>
		}
		case TIM_13:
		{
			TIM13->CR1.bit.cen = state;
 8002206:	4a17      	ldr	r2, [pc, #92]	; (8002264 <TIM_PeriphControl+0x1c0>)
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	b2d9      	uxtb	r1, r3
 8002210:	8813      	ldrh	r3, [r2, #0]
 8002212:	f361 0300 	bfi	r3, r1, #0, #1
 8002216:	8013      	strh	r3, [r2, #0]
			break;
 8002218:	e00a      	b.n	8002230 <TIM_PeriphControl+0x18c>
		}
		case TIM_14:
		{
			TIM14->CR1.bit.cen = state;
 800221a:	4a13      	ldr	r2, [pc, #76]	; (8002268 <TIM_PeriphControl+0x1c4>)
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	b2d9      	uxtb	r1, r3
 8002224:	8813      	ldrh	r3, [r2, #0]
 8002226:	f361 0300 	bfi	r3, r1, #0, #1
 800222a:	8013      	strh	r3, [r2, #0]
			break;
 800222c:	e000      	b.n	8002230 <TIM_PeriphControl+0x18c>
		}
		default:
			return;
 800222e:	bf00      	nop
	}
}
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	40010000 	.word	0x40010000
 800223c:	40000400 	.word	0x40000400
 8002240:	40000800 	.word	0x40000800
 8002244:	40000c00 	.word	0x40000c00
 8002248:	40001000 	.word	0x40001000
 800224c:	40001400 	.word	0x40001400
 8002250:	40010400 	.word	0x40010400
 8002254:	40014000 	.word	0x40014000
 8002258:	40014400 	.word	0x40014400
 800225c:	40014800 	.word	0x40014800
 8002260:	40001800 	.word	0x40001800
 8002264:	40001c00 	.word	0x40001c00
 8002268:	40002000 	.word	0x40002000

0800226c <TIM_Base_Init>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void TIM_Base_Init(TIM_Handle_t *pTIMHandle)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	//set TIM state
	pTIMHandle->State = TIM_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	tim_base_setConfig(pTIMHandle);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f9eb 	bl	8002658 <tim_base_setConfig>

	// initialize the DMA burst operation state
	pTIMHandle->DMABurstState = DMA_BURST_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	// initialize the TIM channels state
	tim_channel_state_set(pTIMHandle, TIM_CHANNEL_ALL, TIM_CH_STATE_READY);
 800228a:	2201      	movs	r2, #1
 800228c:	213c      	movs	r1, #60	; 0x3c
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f001 f9b0 	bl	80035f4 <tim_channel_state_set>
	tim_channel_n_state_set(pTIMHandle, TIM_CHANNEL_ALL, TIM_CH_STATE_READY);
 8002294:	2201      	movs	r2, #1
 8002296:	213c      	movs	r1, #60	; 0x3c
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f001 f9f2 	bl	8003682 <tim_channel_n_state_set>

	// initialize the TIM state
	pTIMHandle->State = TIM_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <TIM_Base_StartIT>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void TIM_Base_StartIT(TIM_Handle_t *pTIMHandle)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
	// set state busy
	pTIMHandle->State = TIM_STATE_BUSY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2202      	movs	r2, #2
 80022ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	// enable the TIM update interrupt
	tim_it_control(pTIMHandle, TIM_IT_UPDATE, ENABLE);
 80022be:	2201      	movs	r2, #1
 80022c0:	2100      	movs	r1, #0
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f001 fa24 	bl	8003710 <tim_it_control>

	TIM_PeriphControl(pTIMHandle, ENABLE);
 80022c8:	2101      	movs	r1, #1
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff feea 	bl	80020a4 <TIM_PeriphControl>

}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <TIM_PWM_Init>:
/* @return				- none																			*/
/*																										*/
/* @Note				- reset timer after switching between center aligned mode and edge counter mode	*/
/********************************************************************************************************/
void TIM_PWM_Init(TIM_Handle_t *pTIMHandle)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
	//set TIM state
	pTIMHandle->State = TIM_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	// initialize base time for PWM
	tim_base_setConfig(pTIMHandle);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f9b5 	bl	8002658 <tim_base_setConfig>

	//initialize DMA burst operation state
	pTIMHandle->DMABurstState = DMA_BURST_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	//initialize TIM channel state
	tim_channel_state_set(pTIMHandle, TIM_CHANNEL_ALL, TIM_CH_STATE_READY);
 80022f6:	2201      	movs	r2, #1
 80022f8:	213c      	movs	r1, #60	; 0x3c
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f001 f97a 	bl	80035f4 <tim_channel_state_set>
	tim_channel_n_state_set(pTIMHandle, TIM_CHANNEL_ALL, TIM_CH_STATE_READY);
 8002300:	2201      	movs	r2, #1
 8002302:	213c      	movs	r1, #60	; 0x3c
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f001 f9bc 	bl	8003682 <tim_channel_n_state_set>

	// initialize TIM state
	pTIMHandle->State = TIM_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <TIM_PWM_Start>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void TIM_PWM_Start(TIM_Handle_t *pTIMHandle, uint8_t Channel)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	70fb      	strb	r3, [r7, #3]
	//set channel state
	tim_channel_state_set(pTIMHandle, Channel, TIM_CH_STATE_BUSY);
 8002328:	78fb      	ldrb	r3, [r7, #3]
 800232a:	2202      	movs	r2, #2
 800232c:	4619      	mov	r1, r3
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f001 f960 	bl	80035f4 <tim_channel_state_set>

	//enable capture compare mode
	tim_CCxChannelCmd(pTIMHandle, Channel, ENABLE);
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	2201      	movs	r2, #1
 8002338:	4619      	mov	r1, r3
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 fc88 	bl	8002c50 <tim_CCxChannelCmd>

	if((TIM_1 == pTIMHandle->TIMx) || (TIM_8 == pTIMHandle->TIMx))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d003      	beq.n	8002350 <TIM_PWM_Start+0x34>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b08      	cmp	r3, #8
 800234e:	d116      	bne.n	800237e <TIM_PWM_Start+0x62>
	{
		//enable main output
		switch(pTIMHandle->TIMx)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d002      	beq.n	800235e <TIM_PWM_Start+0x42>
 8002358:	2b08      	cmp	r3, #8
 800235a:	d008      	beq.n	800236e <TIM_PWM_Start+0x52>
 800235c:	e00f      	b.n	800237e <TIM_PWM_Start+0x62>
		{
			case TIM_1:
			{
				TIM1->BDTR.bit.moe = ENABLE;
 800235e:	4a0c      	ldr	r2, [pc, #48]	; (8002390 <TIM_PWM_Start+0x74>)
 8002360:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002368:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
				break;
 800236c:	e007      	b.n	800237e <TIM_PWM_Start+0x62>
			}
			case TIM_8:
			{
				TIM8->BDTR.bit.moe = ENABLE;
 800236e:	4a09      	ldr	r2, [pc, #36]	; (8002394 <TIM_PWM_Start+0x78>)
 8002370:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002378:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
				break;
 800237c:	bf00      	nop
			}
		}
	}

	// enable timer
	TIM_PeriphControl(pTIMHandle, ENABLE);
 800237e:	2101      	movs	r1, #1
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff fe8f 	bl	80020a4 <TIM_PeriphControl>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40010000 	.word	0x40010000
 8002394:	40010400 	.word	0x40010400

08002398 <TIM_PWM_ConfigChannel>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void TIM_PWM_ConfigChannel(TIM_Handle_t *pTIMHandle, TIM_OC_Config_t *sConfig, uint8_t Channel)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	4613      	mov	r3, r2
 80023a4:	71fb      	strb	r3, [r7, #7]
	TIM_1_8_CCMR1_Reg_t CCMR1temp = {0};
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
	TIM_1_8_CCMR2_Reg_t CCMR2temp = {0};
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]

	switch(Channel)
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	2b0c      	cmp	r3, #12
 80023b2:	f200 8095 	bhi.w	80024e0 <TIM_PWM_ConfigChannel+0x148>
 80023b6:	a201      	add	r2, pc, #4	; (adr r2, 80023bc <TIM_PWM_ConfigChannel+0x24>)
 80023b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023bc:	080023f1 	.word	0x080023f1
 80023c0:	080024e1 	.word	0x080024e1
 80023c4:	080024e1 	.word	0x080024e1
 80023c8:	080024e1 	.word	0x080024e1
 80023cc:	0800242d 	.word	0x0800242d
 80023d0:	080024e1 	.word	0x080024e1
 80023d4:	080024e1 	.word	0x080024e1
 80023d8:	080024e1 	.word	0x080024e1
 80023dc:	08002469 	.word	0x08002469
 80023e0:	080024e1 	.word	0x080024e1
 80023e4:	080024e1 	.word	0x080024e1
 80023e8:	080024e1 	.word	0x080024e1
 80023ec:	080024a5 	.word	0x080024a5
	{
		case TIM_CHANNEL_1:
		{
			// configure TIM Channel 1 in output compare
			tim_oc1_set_config(pTIMHandle, sConfig);
 80023f0:	68b9      	ldr	r1, [r7, #8]
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f002 fcf6 	bl	8004de4 <tim_oc1_set_config>

			CCMR1temp.reg = tim_read_ccmrx(pTIMHandle, TIM_CCMR1);
 80023f8:	2100      	movs	r1, #0
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f001 ffc4 	bl	8004388 <tim_read_ccmrx>
 8002400:	4603      	mov	r3, r0
 8002402:	617b      	str	r3, [r7, #20]

			// set Preload enable bit
			CCMR1temp.bit.oc1pe = SET;
 8002404:	8abb      	ldrh	r3, [r7, #20]
 8002406:	f043 0308 	orr.w	r3, r3, #8
 800240a:	82bb      	strh	r3, [r7, #20]

			// configure the output fast mode
			CCMR1temp.bit.oc1fe = sConfig->OCFastMode;
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	b2da      	uxtb	r2, r3
 8002416:	8abb      	ldrh	r3, [r7, #20]
 8002418:	f362 0382 	bfi	r3, r2, #2, #1
 800241c:	82bb      	strh	r3, [r7, #20]

			tim_write_to_ccmrx(pTIMHandle, TIM_CCMR1, CCMR1temp.reg);
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	461a      	mov	r2, r3
 8002422:	2100      	movs	r1, #0
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f002 fa77 	bl	8004918 <tim_write_to_ccmrx>
			break;
 800242a:	e05a      	b.n	80024e2 <TIM_PWM_ConfigChannel+0x14a>
		}
		case TIM_CHANNEL_2:
		{
			// configure TIM Channel 2 in output compare
			tim_oc2_set_config(pTIMHandle, sConfig);
 800242c:	68b9      	ldr	r1, [r7, #8]
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f002 fd98 	bl	8004f64 <tim_oc2_set_config>

			CCMR1temp.reg = tim_read_ccmrx(pTIMHandle, TIM_CCMR1);
 8002434:	2100      	movs	r1, #0
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f001 ffa6 	bl	8004388 <tim_read_ccmrx>
 800243c:	4603      	mov	r3, r0
 800243e:	617b      	str	r3, [r7, #20]

			// set Preload enable bit
			CCMR1temp.bit.oc2pe = SET;
 8002440:	8abb      	ldrh	r3, [r7, #20]
 8002442:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002446:	82bb      	strh	r3, [r7, #20]

			// configure the output fast mode
			CCMR1temp.bit.oc2fe = sConfig->OCFastMode;
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	b2da      	uxtb	r2, r3
 8002452:	8abb      	ldrh	r3, [r7, #20]
 8002454:	f362 238a 	bfi	r3, r2, #10, #1
 8002458:	82bb      	strh	r3, [r7, #20]

			tim_write_to_ccmrx(pTIMHandle, TIM_CCMR1, CCMR1temp.reg);
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	461a      	mov	r2, r3
 800245e:	2100      	movs	r1, #0
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f002 fa59 	bl	8004918 <tim_write_to_ccmrx>
			break;
 8002466:	e03c      	b.n	80024e2 <TIM_PWM_ConfigChannel+0x14a>
		}
		case TIM_CHANNEL_3:
		{
			// configure TIM Channel 2 in output compare
			tim_oc3_set_config(pTIMHandle, sConfig);
 8002468:	68b9      	ldr	r1, [r7, #8]
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f002 fe3a 	bl	80050e4 <tim_oc3_set_config>

			CCMR2temp.reg = tim_read_ccmrx(pTIMHandle, TIM_CCMR2);
 8002470:	2101      	movs	r1, #1
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f001 ff88 	bl	8004388 <tim_read_ccmrx>
 8002478:	4603      	mov	r3, r0
 800247a:	613b      	str	r3, [r7, #16]

			// set Preload enable bit
			CCMR2temp.bit.oc3pe = SET;
 800247c:	8a3b      	ldrh	r3, [r7, #16]
 800247e:	f043 0308 	orr.w	r3, r3, #8
 8002482:	823b      	strh	r3, [r7, #16]

			// configure the output fast mode
			CCMR2temp.bit.oc3fe = sConfig->OCFastMode;
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	b2da      	uxtb	r2, r3
 800248e:	8a3b      	ldrh	r3, [r7, #16]
 8002490:	f362 0382 	bfi	r3, r2, #2, #1
 8002494:	823b      	strh	r3, [r7, #16]

			tim_write_to_ccmrx(pTIMHandle, TIM_CCMR2, CCMR2temp.reg);
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	461a      	mov	r2, r3
 800249a:	2101      	movs	r1, #1
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f002 fa3b 	bl	8004918 <tim_write_to_ccmrx>
			break;
 80024a2:	e01e      	b.n	80024e2 <TIM_PWM_ConfigChannel+0x14a>
		}
		case TIM_CHANNEL_4:
		{
			// configure TIM Channel 2 in output compare
			tim_oc4_set_config(pTIMHandle, sConfig);
 80024a4:	68b9      	ldr	r1, [r7, #8]
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f002 fedc 	bl	8005264 <tim_oc4_set_config>

			CCMR2temp.reg = tim_read_ccmrx(pTIMHandle, TIM_CCMR2);
 80024ac:	2101      	movs	r1, #1
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f001 ff6a 	bl	8004388 <tim_read_ccmrx>
 80024b4:	4603      	mov	r3, r0
 80024b6:	613b      	str	r3, [r7, #16]

			// set Preload enable bit
			CCMR2temp.bit.oc4pe = SET;
 80024b8:	8a3b      	ldrh	r3, [r7, #16]
 80024ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024be:	823b      	strh	r3, [r7, #16]

			// configure the output fast mode
			CCMR2temp.bit.oc4fe = sConfig->OCFastMode;
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	8a3b      	ldrh	r3, [r7, #16]
 80024cc:	f362 238a 	bfi	r3, r2, #10, #1
 80024d0:	823b      	strh	r3, [r7, #16]

			tim_write_to_ccmrx(pTIMHandle, TIM_CCMR2, CCMR2temp.reg);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	461a      	mov	r2, r3
 80024d6:	2101      	movs	r1, #1
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f002 fa1d 	bl	8004918 <tim_write_to_ccmrx>
			break;
 80024de:	e000      	b.n	80024e2 <TIM_PWM_ConfigChannel+0x14a>
		}
		default:
			break;
 80024e0:	bf00      	nop
	}
}
 80024e2:	bf00      	nop
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop

080024ec <TIM_ConfigClockSource>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void TIM_ConfigClockSource(TIM_Handle_t *pTIMHandle, TIM_Clock_Config_t *sClockSourceConfig)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
	TIM_1_8_SMCR_Reg_t SMCRtemp = {0};
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]

	pTIMHandle->State = TIM_STATE_BUSY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2202      	movs	r2, #2
 80024fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	// reset the SMS, TS, ECE, ETPS and ETRF bits
	SMCRtemp.bit.sms = RESET;
 8002502:	89bb      	ldrh	r3, [r7, #12]
 8002504:	f36f 0302 	bfc	r3, #0, #3
 8002508:	81bb      	strh	r3, [r7, #12]
	SMCRtemp.bit.ts = RESET;
 800250a:	89bb      	ldrh	r3, [r7, #12]
 800250c:	f36f 1306 	bfc	r3, #4, #3
 8002510:	81bb      	strh	r3, [r7, #12]
	SMCRtemp.bit.ece = RESET;
 8002512:	89bb      	ldrh	r3, [r7, #12]
 8002514:	f36f 338e 	bfc	r3, #14, #1
 8002518:	81bb      	strh	r3, [r7, #12]
	SMCRtemp.bit.etps = RESET;
 800251a:	89bb      	ldrh	r3, [r7, #12]
 800251c:	f36f 330d 	bfc	r3, #12, #2
 8002520:	81bb      	strh	r3, [r7, #12]
	SMCRtemp.bit.etf = RESET;
 8002522:	89bb      	ldrh	r3, [r7, #12]
 8002524:	f36f 230b 	bfc	r3, #8, #4
 8002528:	81bb      	strh	r3, [r7, #12]
	SMCRtemp.bit.etp = RESET;
 800252a:	89bb      	ldrh	r3, [r7, #12]
 800252c:	f36f 33cf 	bfc	r3, #15, #1
 8002530:	81bb      	strh	r3, [r7, #12]

	tim_write_to_smcr(pTIMHandle, SMCRtemp.reg);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4619      	mov	r1, r3
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f002 fbf2 	bl	8004d20 <tim_write_to_smcr>

	SMCRtemp.reg = tim_read_smcr(pTIMHandle);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f002 f8ad 	bl	800469c <tim_read_smcr>
 8002542:	4603      	mov	r3, r0
 8002544:	60fb      	str	r3, [r7, #12]

	switch(sClockSourceConfig->ClockSource)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	3b01      	subs	r3, #1
 800254c:	2b10      	cmp	r3, #16
 800254e:	d87d      	bhi.n	800264c <TIM_ConfigClockSource+0x160>
 8002550:	a201      	add	r2, pc, #4	; (adr r2, 8002558 <TIM_ConfigClockSource+0x6c>)
 8002552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002556:	bf00      	nop
 8002558:	0800264d 	.word	0x0800264d
 800255c:	080025cb 	.word	0x080025cb
 8002560:	0800264d 	.word	0x0800264d
 8002564:	08002625 	.word	0x08002625
 8002568:	080025f1 	.word	0x080025f1
 800256c:	0800260b 	.word	0x0800260b
 8002570:	0800259d 	.word	0x0800259d
 8002574:	0800263f 	.word	0x0800263f
 8002578:	0800263f 	.word	0x0800263f
 800257c:	0800264d 	.word	0x0800264d
 8002580:	0800264d 	.word	0x0800264d
 8002584:	0800264d 	.word	0x0800264d
 8002588:	0800264d 	.word	0x0800264d
 800258c:	0800264d 	.word	0x0800264d
 8002590:	0800264d 	.word	0x0800264d
 8002594:	0800263f 	.word	0x0800263f
 8002598:	0800263f 	.word	0x0800263f
			break;
		}
		case TIM_CLOCKSOURCE_ETRMODE1:
		{
			// configure the ETR Clock source
			tim_etr_set_config(pTIMHandle,
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	6899      	ldr	r1, [r3, #8]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f002 ff0a 	bl	80053c2 <tim_etr_set_config>
					sClockSourceConfig->ClockPrescaler,
                    sClockSourceConfig->ClockPolarity,
                    sClockSourceConfig->ClockFilter);

			// select the external clock mode1 and the ETRF trigger
			SMCRtemp.bit.sms = 0x7U;  // External Clock Mode 1
 80025ae:	89bb      	ldrh	r3, [r7, #12]
 80025b0:	f043 0307 	orr.w	r3, r3, #7
 80025b4:	81bb      	strh	r3, [r7, #12]
			SMCRtemp.bit.ts = 0x7U;	  // 111: External Trigger input (ETRF)
 80025b6:	89bb      	ldrh	r3, [r7, #12]
 80025b8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80025bc:	81bb      	strh	r3, [r7, #12]

			// write to SMCR
			tim_write_to_smcr(pTIMHandle, SMCRtemp.reg);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4619      	mov	r1, r3
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f002 fbac 	bl	8004d20 <tim_write_to_smcr>
			break;
 80025c8:	e041      	b.n	800264e <TIM_ConfigClockSource+0x162>
		}
		case TIM_CLOCKSOURCE_ETRMODE2:
		{
			// configure the ETR Clock source
			tim_etr_set_config(pTIMHandle,
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	6899      	ldr	r1, [r3, #8]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f002 fef3 	bl	80053c2 <tim_etr_set_config>
							   sClockSourceConfig->ClockPrescaler,
							   sClockSourceConfig->ClockPolarity,
							   sClockSourceConfig->ClockFilter);

			// enable the External clock mode2
			SMCRtemp.bit.ece = SET;
 80025dc:	89bb      	ldrh	r3, [r7, #12]
 80025de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e2:	81bb      	strh	r3, [r7, #12]

			tim_write_to_smcr(pTIMHandle, SMCRtemp.reg);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4619      	mov	r1, r3
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f002 fb99 	bl	8004d20 <tim_write_to_smcr>
			break;
 80025ee:	e02e      	b.n	800264e <TIM_ConfigClockSource+0x162>
		}
		case TIM_CLOCKSOURCE_TI1:
		{
			tim_ti1_config_input_stage(pTIMHandle,
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	6859      	ldr	r1, [r3, #4]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	461a      	mov	r2, r3
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f002 ff45 	bl	800548a <tim_ti1_config_input_stage>
                    sClockSourceConfig->ClockPolarity,
                    sClockSourceConfig->ClockFilter);
			tim_itrx_set_config(pTIMHandle, TIM_CLOCKSOURCE_TI1);
 8002600:	2105      	movs	r1, #5
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f002 ff1c 	bl	8005440 <tim_itrx_set_config>
			break;
 8002608:	e021      	b.n	800264e <TIM_ConfigClockSource+0x162>
		}
		case TIM_CLOCKSOURCE_TI2:
		{
			tim_ti2_config_input_stage(pTIMHandle, sClockSourceConfig->ClockPolarity, sClockSourceConfig->ClockFilter);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	6859      	ldr	r1, [r3, #4]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	461a      	mov	r2, r3
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f002 ff84 	bl	8005522 <tim_ti2_config_input_stage>

			tim_itrx_set_config(pTIMHandle, TIM_CLOCKSOURCE_TI2);
 800261a:	2106      	movs	r1, #6
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f002 ff0f 	bl	8005440 <tim_itrx_set_config>
			break;
 8002622:	e014      	b.n	800264e <TIM_ConfigClockSource+0x162>
		}
		case TIM_CLOCKSOURCE_TI1ED:
		{
			tim_ti1_config_input_stage(pTIMHandle,
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	6859      	ldr	r1, [r3, #4]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	461a      	mov	r2, r3
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f002 ff2b 	bl	800548a <tim_ti1_config_input_stage>
			                    sClockSourceConfig->ClockPolarity,
			                    sClockSourceConfig->ClockFilter);
			tim_itrx_set_config(pTIMHandle, TIM_CLOCKSOURCE_TI1ED);
 8002634:	2104      	movs	r1, #4
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f002 ff02 	bl	8005440 <tim_itrx_set_config>
			break;
 800263c:	e007      	b.n	800264e <TIM_ConfigClockSource+0x162>
		case TIM_CLOCKSOURCE_ITR0:
		case TIM_CLOCKSOURCE_ITR1:
		case TIM_CLOCKSOURCE_ITR2:
		case TIM_CLOCKSOURCE_ITR3:
		{
			tim_itrx_set_config(pTIMHandle, sClockSourceConfig->ClockSource);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4619      	mov	r1, r3
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f002 fefb 	bl	8005440 <tim_itrx_set_config>
			break;
 800264a:	e000      	b.n	800264e <TIM_ConfigClockSource+0x162>
		}
		default:
		{
			break;
 800264c:	bf00      	nop
		}
		pTIMHandle->State = TIM_STATE_READY;
	}
}
 800264e:	bf00      	nop
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop

08002658 <tim_base_setConfig>:



//API helper functions
static void tim_base_setConfig(TIM_Handle_t *pTIMHandle)
{
 8002658:	b480      	push	{r7}
 800265a:	b091      	sub	sp, #68	; 0x44
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
/******************************** Configuration of TIM Base ******************************************/
	if(TIM_1 == pTIMHandle->TIMx)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d141      	bne.n	80026ec <tim_base_setConfig+0x94>
	{
		TIM_1_8_CR1_Reg_t TIM1_CR1_temp = {0};
 8002668:	2300      	movs	r3, #0
 800266a:	63fb      	str	r3, [r7, #60]	; 0x3c

		TIM1_CR1_temp.reg = TIM1->CR1.reg;
 800266c:	4b7f      	ldr	r3, [pc, #508]	; (800286c <tim_base_setConfig+0x214>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	63fb      	str	r3, [r7, #60]	; 0x3c

		//set TIM time base unit parameters
		TIM1_CR1_temp.bit.dir = pTIMHandle->TIM_Config.CounterMode;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	b2da      	uxtb	r2, r3
 800267c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800267e:	f362 1304 	bfi	r3, r2, #4, #1
 8002682:	87bb      	strh	r3, [r7, #60]	; 0x3c
		TIM1_CR1_temp.bit.cms = pTIMHandle->TIM_Config.CenterAlignedMode;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	b2da      	uxtb	r2, r3
 800268e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002690:	f362 1346 	bfi	r3, r2, #5, #2
 8002694:	87bb      	strh	r3, [r7, #60]	; 0x3c
		TIM1_CR1_temp.bit.ckd = pTIMHandle->TIM_Config.ClockDivision;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80026a2:	f362 2309 	bfi	r3, r2, #8, #2
 80026a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
		TIM1_CR1_temp.bit.arpe = pTIMHandle->TIM_Config.AutoReloadPreload;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80026b4:	f362 13c7 	bfi	r3, r2, #7, #1
 80026b8:	87bb      	strh	r3, [r7, #60]	; 0x3c

		TIM1->CR1.reg = TIM1_CR1_temp.reg;
 80026ba:	4a6c      	ldr	r2, [pc, #432]	; (800286c <tim_base_setConfig+0x214>)
 80026bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026be:	6013      	str	r3, [r2, #0]

		TIM1->ARR = (uint32_t)pTIMHandle->TIM_Config.Period;
 80026c0:	4a6a      	ldr	r2, [pc, #424]	; (800286c <tim_base_setConfig+0x214>)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM1->PSC = pTIMHandle->TIM_Config.Prescaler;
 80026c8:	4a68      	ldr	r2, [pc, #416]	; (800286c <tim_base_setConfig+0x214>)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	6293      	str	r3, [r2, #40]	; 0x28

		TIM1->RCR.bit.rep = pTIMHandle->TIM_Config.RepetitionCounter;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	4a65      	ldr	r2, [pc, #404]	; (800286c <tim_base_setConfig+0x214>)
 80026d6:	b2d9      	uxtb	r1, r3
 80026d8:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 80026da:	f361 0307 	bfi	r3, r1, #0, #8
 80026de:	8613      	strh	r3, [r2, #48]	; 0x30
		TIM1->EGR.bit.ug = ENABLE;
 80026e0:	4a62      	ldr	r2, [pc, #392]	; (800286c <tim_base_setConfig+0x214>)
 80026e2:	8a93      	ldrh	r3, [r2, #20]
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	8293      	strh	r3, [r2, #20]
 80026ea:	e2a4      	b.n	8002c36 <tim_base_setConfig+0x5de>
	}else if(TIM_2 == pTIMHandle->TIMx)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d13e      	bne.n	8002772 <tim_base_setConfig+0x11a>
	{
		TIM_2_5_CR1_Reg_t TIM2_CR1_temp = {0};
 80026f4:	2300      	movs	r3, #0
 80026f6:	63bb      	str	r3, [r7, #56]	; 0x38

		TIM2_CR1_temp.reg = TIM2->CR1.reg;
 80026f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	63bb      	str	r3, [r7, #56]	; 0x38

		//set TIM time base unit parameters
		TIM2_CR1_temp.bit.dir = pTIMHandle->TIM_Config.CounterMode;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	b2da      	uxtb	r2, r3
 800270a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800270c:	f362 1304 	bfi	r3, r2, #4, #1
 8002710:	873b      	strh	r3, [r7, #56]	; 0x38
		TIM2_CR1_temp.bit.cms = pTIMHandle->TIM_Config.CenterAlignedMode;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	b2da      	uxtb	r2, r3
 800271c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800271e:	f362 1346 	bfi	r3, r2, #5, #2
 8002722:	873b      	strh	r3, [r7, #56]	; 0x38
		TIM2_CR1_temp.bit.ckd = pTIMHandle->TIM_Config.ClockDivision;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	b2da      	uxtb	r2, r3
 800272e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002730:	f362 2309 	bfi	r3, r2, #8, #2
 8002734:	873b      	strh	r3, [r7, #56]	; 0x38
		TIM2_CR1_temp.bit.arpe = pTIMHandle->TIM_Config.AutoReloadPreload;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	b2da      	uxtb	r2, r3
 8002740:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002742:	f362 13c7 	bfi	r3, r2, #7, #1
 8002746:	873b      	strh	r3, [r7, #56]	; 0x38

		TIM2->CR1.reg = TIM2_CR1_temp.reg;
 8002748:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800274c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274e:	6013      	str	r3, [r2, #0]

		TIM2->ARR = (uint32_t)pTIMHandle->TIM_Config.Period;
 8002750:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM2->PSC = pTIMHandle->TIM_Config.Prescaler;
 800275a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	6293      	str	r3, [r2, #40]	; 0x28


		TIM2->EGR.bit.ug = ENABLE;
 8002764:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002768:	8a93      	ldrh	r3, [r2, #20]
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	8293      	strh	r3, [r2, #20]
 8002770:	e261      	b.n	8002c36 <tim_base_setConfig+0x5de>
	}else if(TIM_3 == pTIMHandle->TIMx)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b03      	cmp	r3, #3
 8002778:	d139      	bne.n	80027ee <tim_base_setConfig+0x196>
	{
		TIM_2_5_CR1_Reg_t TIM3_CR1_temp = {0};
 800277a:	2300      	movs	r3, #0
 800277c:	637b      	str	r3, [r7, #52]	; 0x34

		TIM3_CR1_temp.reg = TIM3->CR1.reg;
 800277e:	4b3c      	ldr	r3, [pc, #240]	; (8002870 <tim_base_setConfig+0x218>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	637b      	str	r3, [r7, #52]	; 0x34

		//set TIM time base unit parameters
		TIM3_CR1_temp.bit.dir = pTIMHandle->TIM_Config.CounterMode;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	b2da      	uxtb	r2, r3
 800278e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002790:	f362 1304 	bfi	r3, r2, #4, #1
 8002794:	86bb      	strh	r3, [r7, #52]	; 0x34
		TIM3_CR1_temp.bit.cms = pTIMHandle->TIM_Config.CenterAlignedMode;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80027a2:	f362 1346 	bfi	r3, r2, #5, #2
 80027a6:	86bb      	strh	r3, [r7, #52]	; 0x34
		TIM3_CR1_temp.bit.ckd = pTIMHandle->TIM_Config.ClockDivision;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80027b4:	f362 2309 	bfi	r3, r2, #8, #2
 80027b8:	86bb      	strh	r3, [r7, #52]	; 0x34
		TIM3_CR1_temp.bit.arpe = pTIMHandle->TIM_Config.AutoReloadPreload;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80027c6:	f362 13c7 	bfi	r3, r2, #7, #1
 80027ca:	86bb      	strh	r3, [r7, #52]	; 0x34

		TIM3->CR1.reg = TIM3_CR1_temp.reg;
 80027cc:	4a28      	ldr	r2, [pc, #160]	; (8002870 <tim_base_setConfig+0x218>)
 80027ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d0:	6013      	str	r3, [r2, #0]

		TIM3->ARR = (uint32_t)pTIMHandle->TIM_Config.Period;
 80027d2:	4a27      	ldr	r2, [pc, #156]	; (8002870 <tim_base_setConfig+0x218>)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM3->PSC = pTIMHandle->TIM_Config.Prescaler;
 80027da:	4a25      	ldr	r2, [pc, #148]	; (8002870 <tim_base_setConfig+0x218>)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	6293      	str	r3, [r2, #40]	; 0x28

		TIM3->EGR.bit.ug = ENABLE;
 80027e2:	4a23      	ldr	r2, [pc, #140]	; (8002870 <tim_base_setConfig+0x218>)
 80027e4:	8a93      	ldrh	r3, [r2, #20]
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	8293      	strh	r3, [r2, #20]
 80027ec:	e223      	b.n	8002c36 <tim_base_setConfig+0x5de>
	}else if(TIM_4 == pTIMHandle->TIMx)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d140      	bne.n	8002878 <tim_base_setConfig+0x220>
	{
		TIM_2_5_CR1_Reg_t TIM4_CR1_temp = {0};
 80027f6:	2300      	movs	r3, #0
 80027f8:	633b      	str	r3, [r7, #48]	; 0x30

		TIM4_CR1_temp.reg = TIM4->CR1.reg;
 80027fa:	4b1e      	ldr	r3, [pc, #120]	; (8002874 <tim_base_setConfig+0x21c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	633b      	str	r3, [r7, #48]	; 0x30

		//set TIM time base unit parameters
		TIM4_CR1_temp.bit.dir = pTIMHandle->TIM_Config.CounterMode;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	b2da      	uxtb	r2, r3
 800280a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800280c:	f362 1304 	bfi	r3, r2, #4, #1
 8002810:	863b      	strh	r3, [r7, #48]	; 0x30
		TIM4_CR1_temp.bit.cms = pTIMHandle->TIM_Config.CenterAlignedMode;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	b2da      	uxtb	r2, r3
 800281c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800281e:	f362 1346 	bfi	r3, r2, #5, #2
 8002822:	863b      	strh	r3, [r7, #48]	; 0x30
		TIM4_CR1_temp.bit.ckd = pTIMHandle->TIM_Config.ClockDivision;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	b2da      	uxtb	r2, r3
 800282e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002830:	f362 2309 	bfi	r3, r2, #8, #2
 8002834:	863b      	strh	r3, [r7, #48]	; 0x30
		TIM4_CR1_temp.bit.arpe = pTIMHandle->TIM_Config.AutoReloadPreload;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	b2da      	uxtb	r2, r3
 8002840:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002842:	f362 13c7 	bfi	r3, r2, #7, #1
 8002846:	863b      	strh	r3, [r7, #48]	; 0x30

		TIM4->CR1.reg = TIM4_CR1_temp.reg;
 8002848:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <tim_base_setConfig+0x21c>)
 800284a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284c:	6013      	str	r3, [r2, #0]

		TIM4->ARR = (uint32_t)pTIMHandle->TIM_Config.Period;
 800284e:	4a09      	ldr	r2, [pc, #36]	; (8002874 <tim_base_setConfig+0x21c>)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM4->PSC = pTIMHandle->TIM_Config.Prescaler;
 8002856:	4a07      	ldr	r2, [pc, #28]	; (8002874 <tim_base_setConfig+0x21c>)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	6293      	str	r3, [r2, #40]	; 0x28

		TIM4->EGR.bit.ug = ENABLE;
 800285e:	4a05      	ldr	r2, [pc, #20]	; (8002874 <tim_base_setConfig+0x21c>)
 8002860:	8a93      	ldrh	r3, [r2, #20]
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	8293      	strh	r3, [r2, #20]
 8002868:	e1e5      	b.n	8002c36 <tim_base_setConfig+0x5de>
 800286a:	bf00      	nop
 800286c:	40010000 	.word	0x40010000
 8002870:	40000400 	.word	0x40000400
 8002874:	40000800 	.word	0x40000800
	}else if(TIM_5 == pTIMHandle->TIMx)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b05      	cmp	r3, #5
 800287e:	d139      	bne.n	80028f4 <tim_base_setConfig+0x29c>
	{
		TIM_2_5_CR1_Reg_t TIM5_CR1_temp = {0};
 8002880:	2300      	movs	r3, #0
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c

		TIM5_CR1_temp.reg = TIM5->CR1.reg;
 8002884:	4b8d      	ldr	r3, [pc, #564]	; (8002abc <tim_base_setConfig+0x464>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c

		//set TIM time base unit parameters
		TIM5_CR1_temp.bit.dir = pTIMHandle->TIM_Config.CounterMode;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	b2da      	uxtb	r2, r3
 8002894:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002896:	f362 1304 	bfi	r3, r2, #4, #1
 800289a:	85bb      	strh	r3, [r7, #44]	; 0x2c
		TIM5_CR1_temp.bit.cms = pTIMHandle->TIM_Config.CenterAlignedMode;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80028a8:	f362 1346 	bfi	r3, r2, #5, #2
 80028ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
		TIM5_CR1_temp.bit.ckd = pTIMHandle->TIM_Config.ClockDivision;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80028ba:	f362 2309 	bfi	r3, r2, #8, #2
 80028be:	85bb      	strh	r3, [r7, #44]	; 0x2c
		TIM5_CR1_temp.bit.arpe = pTIMHandle->TIM_Config.AutoReloadPreload;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80028cc:	f362 13c7 	bfi	r3, r2, #7, #1
 80028d0:	85bb      	strh	r3, [r7, #44]	; 0x2c

		TIM5->CR1.reg = TIM5_CR1_temp.reg;
 80028d2:	4a7a      	ldr	r2, [pc, #488]	; (8002abc <tim_base_setConfig+0x464>)
 80028d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d6:	6013      	str	r3, [r2, #0]

		TIM5->ARR = (uint32_t)pTIMHandle->TIM_Config.Period;
 80028d8:	4a78      	ldr	r2, [pc, #480]	; (8002abc <tim_base_setConfig+0x464>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM5->PSC = pTIMHandle->TIM_Config.Prescaler;
 80028e0:	4a76      	ldr	r2, [pc, #472]	; (8002abc <tim_base_setConfig+0x464>)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	6293      	str	r3, [r2, #40]	; 0x28

		TIM5->EGR.bit.ug = ENABLE;
 80028e8:	4a74      	ldr	r2, [pc, #464]	; (8002abc <tim_base_setConfig+0x464>)
 80028ea:	8a93      	ldrh	r3, [r2, #20]
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	8293      	strh	r3, [r2, #20]
 80028f2:	e1a0      	b.n	8002c36 <tim_base_setConfig+0x5de>
	}else if(TIM_6 == pTIMHandle->TIMx)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b06      	cmp	r3, #6
 80028fa:	d11e      	bne.n	800293a <tim_base_setConfig+0x2e2>
	{
		TIM_6_7_CR1_Reg_t TIM6_CR1_temp = {0};
 80028fc:	2300      	movs	r3, #0
 80028fe:	62bb      	str	r3, [r7, #40]	; 0x28

		TIM6_CR1_temp.reg = TIM6->CR1.reg;
 8002900:	4b6f      	ldr	r3, [pc, #444]	; (8002ac0 <tim_base_setConfig+0x468>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	62bb      	str	r3, [r7, #40]	; 0x28

		//set TIM time base unit parameters
		TIM6_CR1_temp.bit.arpe = pTIMHandle->TIM_Config.AutoReloadPreload;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	b2da      	uxtb	r2, r3
 8002910:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002912:	f362 13c7 	bfi	r3, r2, #7, #1
 8002916:	853b      	strh	r3, [r7, #40]	; 0x28

		TIM6->CR1.reg = TIM6_CR1_temp.reg;
 8002918:	4a69      	ldr	r2, [pc, #420]	; (8002ac0 <tim_base_setConfig+0x468>)
 800291a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291c:	6013      	str	r3, [r2, #0]

		TIM6->ARR = (uint32_t)pTIMHandle->TIM_Config.Period;
 800291e:	4a68      	ldr	r2, [pc, #416]	; (8002ac0 <tim_base_setConfig+0x468>)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM6->PSC = pTIMHandle->TIM_Config.Prescaler;
 8002926:	4a66      	ldr	r2, [pc, #408]	; (8002ac0 <tim_base_setConfig+0x468>)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	6293      	str	r3, [r2, #40]	; 0x28

		TIM6->EGR.bit.ug = ENABLE;
 800292e:	4a64      	ldr	r2, [pc, #400]	; (8002ac0 <tim_base_setConfig+0x468>)
 8002930:	8a93      	ldrh	r3, [r2, #20]
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	8293      	strh	r3, [r2, #20]
 8002938:	e17d      	b.n	8002c36 <tim_base_setConfig+0x5de>
	}else if(TIM_7 == pTIMHandle->TIMx)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b07      	cmp	r3, #7
 8002940:	d11e      	bne.n	8002980 <tim_base_setConfig+0x328>
	{
		TIM_6_7_CR1_Reg_t TIM7_CR1_temp = {0};
 8002942:	2300      	movs	r3, #0
 8002944:	627b      	str	r3, [r7, #36]	; 0x24

		TIM7_CR1_temp.reg = TIM7->CR1.reg;
 8002946:	4b5f      	ldr	r3, [pc, #380]	; (8002ac4 <tim_base_setConfig+0x46c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	627b      	str	r3, [r7, #36]	; 0x24

		//set TIM time base unit parameters
		TIM7_CR1_temp.bit.arpe = pTIMHandle->TIM_Config.AutoReloadPreload;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	b2da      	uxtb	r2, r3
 8002956:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002958:	f362 13c7 	bfi	r3, r2, #7, #1
 800295c:	84bb      	strh	r3, [r7, #36]	; 0x24

		TIM7->CR1.reg = TIM7_CR1_temp.reg;
 800295e:	4a59      	ldr	r2, [pc, #356]	; (8002ac4 <tim_base_setConfig+0x46c>)
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	6013      	str	r3, [r2, #0]

		TIM7->ARR = (uint32_t)pTIMHandle->TIM_Config.Period;
 8002964:	4a57      	ldr	r2, [pc, #348]	; (8002ac4 <tim_base_setConfig+0x46c>)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM7->PSC = pTIMHandle->TIM_Config.Prescaler;
 800296c:	4a55      	ldr	r2, [pc, #340]	; (8002ac4 <tim_base_setConfig+0x46c>)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	6293      	str	r3, [r2, #40]	; 0x28

		TIM7->EGR.bit.ug = ENABLE;
 8002974:	4a53      	ldr	r2, [pc, #332]	; (8002ac4 <tim_base_setConfig+0x46c>)
 8002976:	8a93      	ldrh	r3, [r2, #20]
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	8293      	strh	r3, [r2, #20]
 800297e:	e15a      	b.n	8002c36 <tim_base_setConfig+0x5de>
	}else if(TIM_8 == pTIMHandle->TIMx)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b08      	cmp	r3, #8
 8002986:	d141      	bne.n	8002a0c <tim_base_setConfig+0x3b4>
	{
		TIM_1_8_CR1_Reg_t TIM8_CR1_temp = {0};
 8002988:	2300      	movs	r3, #0
 800298a:	623b      	str	r3, [r7, #32]

		TIM8_CR1_temp.reg = TIM8->CR1.reg;
 800298c:	4b4e      	ldr	r3, [pc, #312]	; (8002ac8 <tim_base_setConfig+0x470>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	623b      	str	r3, [r7, #32]

		//set TIM time base unit parameters
		TIM8_CR1_temp.bit.dir = pTIMHandle->TIM_Config.CounterMode;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	b2da      	uxtb	r2, r3
 800299c:	8c3b      	ldrh	r3, [r7, #32]
 800299e:	f362 1304 	bfi	r3, r2, #4, #1
 80029a2:	843b      	strh	r3, [r7, #32]
		TIM8_CR1_temp.bit.cms = pTIMHandle->TIM_Config.CenterAlignedMode;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	f003 0303 	and.w	r3, r3, #3
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	8c3b      	ldrh	r3, [r7, #32]
 80029b0:	f362 1346 	bfi	r3, r2, #5, #2
 80029b4:	843b      	strh	r3, [r7, #32]
		TIM8_CR1_temp.bit.ckd = pTIMHandle->TIM_Config.ClockDivision;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	8c3b      	ldrh	r3, [r7, #32]
 80029c2:	f362 2309 	bfi	r3, r2, #8, #2
 80029c6:	843b      	strh	r3, [r7, #32]
		TIM8_CR1_temp.bit.arpe = pTIMHandle->TIM_Config.AutoReloadPreload;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	8c3b      	ldrh	r3, [r7, #32]
 80029d4:	f362 13c7 	bfi	r3, r2, #7, #1
 80029d8:	843b      	strh	r3, [r7, #32]

		TIM8->CR1.reg = TIM8_CR1_temp.reg;
 80029da:	4a3b      	ldr	r2, [pc, #236]	; (8002ac8 <tim_base_setConfig+0x470>)
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	6013      	str	r3, [r2, #0]

		TIM8->ARR = (uint32_t)pTIMHandle->TIM_Config.Period;
 80029e0:	4a39      	ldr	r2, [pc, #228]	; (8002ac8 <tim_base_setConfig+0x470>)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM8->PSC = pTIMHandle->TIM_Config.Prescaler;
 80029e8:	4a37      	ldr	r2, [pc, #220]	; (8002ac8 <tim_base_setConfig+0x470>)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	6293      	str	r3, [r2, #40]	; 0x28

		TIM8->RCR.bit.rep = pTIMHandle->TIM_Config.RepetitionCounter;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	4a34      	ldr	r2, [pc, #208]	; (8002ac8 <tim_base_setConfig+0x470>)
 80029f6:	b2d9      	uxtb	r1, r3
 80029f8:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 80029fa:	f361 0307 	bfi	r3, r1, #0, #8
 80029fe:	8613      	strh	r3, [r2, #48]	; 0x30
		TIM8->EGR.bit.ug = ENABLE;
 8002a00:	4a31      	ldr	r2, [pc, #196]	; (8002ac8 <tim_base_setConfig+0x470>)
 8002a02:	8a93      	ldrh	r3, [r2, #20]
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	8293      	strh	r3, [r2, #20]
 8002a0a:	e114      	b.n	8002c36 <tim_base_setConfig+0x5de>
	}else if(TIM_9 == pTIMHandle->TIMx)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b09      	cmp	r3, #9
 8002a12:	d127      	bne.n	8002a64 <tim_base_setConfig+0x40c>
	{
		TIM_9_12_CR1_Reg_t TIM9_CR1_temp = {0};
 8002a14:	2300      	movs	r3, #0
 8002a16:	61fb      	str	r3, [r7, #28]

		TIM9_CR1_temp.reg = TIM9->CR1.reg;
 8002a18:	4b2c      	ldr	r3, [pc, #176]	; (8002acc <tim_base_setConfig+0x474>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	61fb      	str	r3, [r7, #28]

		//set TIM time base unit parameters
		TIM9_CR1_temp.bit.ckd = pTIMHandle->TIM_Config.ClockDivision;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	8bbb      	ldrh	r3, [r7, #28]
 8002a2a:	f362 2309 	bfi	r3, r2, #8, #2
 8002a2e:	83bb      	strh	r3, [r7, #28]
		TIM9_CR1_temp.bit.arpe = pTIMHandle->TIM_Config.AutoReloadPreload;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	8bbb      	ldrh	r3, [r7, #28]
 8002a3c:	f362 13c7 	bfi	r3, r2, #7, #1
 8002a40:	83bb      	strh	r3, [r7, #28]

		TIM9->CR1.reg = TIM9_CR1_temp.reg;
 8002a42:	4a22      	ldr	r2, [pc, #136]	; (8002acc <tim_base_setConfig+0x474>)
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	6013      	str	r3, [r2, #0]

		TIM9->ARR = (uint32_t)pTIMHandle->TIM_Config.Period;
 8002a48:	4a20      	ldr	r2, [pc, #128]	; (8002acc <tim_base_setConfig+0x474>)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM9->PSC = pTIMHandle->TIM_Config.Prescaler;
 8002a50:	4a1e      	ldr	r2, [pc, #120]	; (8002acc <tim_base_setConfig+0x474>)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	6293      	str	r3, [r2, #40]	; 0x28

		TIM9->EGR.bit.ug = ENABLE;
 8002a58:	4a1c      	ldr	r2, [pc, #112]	; (8002acc <tim_base_setConfig+0x474>)
 8002a5a:	8a93      	ldrh	r3, [r2, #20]
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	8293      	strh	r3, [r2, #20]
 8002a62:	e0e8      	b.n	8002c36 <tim_base_setConfig+0x5de>
	}else if(TIM_10 == pTIMHandle->TIMx)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b10      	cmp	r3, #16
 8002a6a:	d133      	bne.n	8002ad4 <tim_base_setConfig+0x47c>
	{
		TIM_10_14_CR1_Reg_t TIM10_CR1_temp = {0};
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	61bb      	str	r3, [r7, #24]

		TIM10_CR1_temp.reg = TIM10->CR1.reg;
 8002a70:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <tim_base_setConfig+0x478>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	61bb      	str	r3, [r7, #24]

		//set TIM time base unit parameters
		TIM10_CR1_temp.bit.ckd = pTIMHandle->TIM_Config.ClockDivision;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	8b3b      	ldrh	r3, [r7, #24]
 8002a82:	f362 2309 	bfi	r3, r2, #8, #2
 8002a86:	833b      	strh	r3, [r7, #24]
		TIM10_CR1_temp.bit.arpe = pTIMHandle->TIM_Config.AutoReloadPreload;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	8b3b      	ldrh	r3, [r7, #24]
 8002a94:	f362 13c7 	bfi	r3, r2, #7, #1
 8002a98:	833b      	strh	r3, [r7, #24]

		TIM10->CR1.reg = TIM10_CR1_temp.reg;
 8002a9a:	4a0d      	ldr	r2, [pc, #52]	; (8002ad0 <tim_base_setConfig+0x478>)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	6013      	str	r3, [r2, #0]

		TIM10->ARR = (uint32_t)pTIMHandle->TIM_Config.Period;
 8002aa0:	4a0b      	ldr	r2, [pc, #44]	; (8002ad0 <tim_base_setConfig+0x478>)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM10->PSC = pTIMHandle->TIM_Config.Prescaler;
 8002aa8:	4a09      	ldr	r2, [pc, #36]	; (8002ad0 <tim_base_setConfig+0x478>)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	6293      	str	r3, [r2, #40]	; 0x28

		TIM10->EGR.bit.ug = ENABLE;
 8002ab0:	4a07      	ldr	r2, [pc, #28]	; (8002ad0 <tim_base_setConfig+0x478>)
 8002ab2:	8a93      	ldrh	r3, [r2, #20]
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	8293      	strh	r3, [r2, #20]
 8002aba:	e0bc      	b.n	8002c36 <tim_base_setConfig+0x5de>
 8002abc:	40000c00 	.word	0x40000c00
 8002ac0:	40001000 	.word	0x40001000
 8002ac4:	40001400 	.word	0x40001400
 8002ac8:	40010400 	.word	0x40010400
 8002acc:	40014000 	.word	0x40014000
 8002ad0:	40014400 	.word	0x40014400
	}else if(TIM_11 == pTIMHandle->TIMx)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b11      	cmp	r3, #17
 8002ada:	d127      	bne.n	8002b2c <tim_base_setConfig+0x4d4>
	{
		TIM_10_14_CR1_Reg_t TIM11_CR1_temp = {0};
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]

		TIM11_CR1_temp.reg = TIM11->CR1.reg;
 8002ae0:	4b57      	ldr	r3, [pc, #348]	; (8002c40 <tim_base_setConfig+0x5e8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	617b      	str	r3, [r7, #20]

		//set TIM time base unit parameters
		TIM11_CR1_temp.bit.ckd = pTIMHandle->TIM_Config.ClockDivision;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	8abb      	ldrh	r3, [r7, #20]
 8002af2:	f362 2309 	bfi	r3, r2, #8, #2
 8002af6:	82bb      	strh	r3, [r7, #20]
		TIM11_CR1_temp.bit.arpe = pTIMHandle->TIM_Config.AutoReloadPreload;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	8abb      	ldrh	r3, [r7, #20]
 8002b04:	f362 13c7 	bfi	r3, r2, #7, #1
 8002b08:	82bb      	strh	r3, [r7, #20]

		TIM11->CR1.reg = TIM11_CR1_temp.reg;
 8002b0a:	4a4d      	ldr	r2, [pc, #308]	; (8002c40 <tim_base_setConfig+0x5e8>)
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	6013      	str	r3, [r2, #0]

		TIM11->ARR = (uint32_t)pTIMHandle->TIM_Config.Period;
 8002b10:	4a4b      	ldr	r2, [pc, #300]	; (8002c40 <tim_base_setConfig+0x5e8>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM11->PSC = pTIMHandle->TIM_Config.Prescaler;
 8002b18:	4a49      	ldr	r2, [pc, #292]	; (8002c40 <tim_base_setConfig+0x5e8>)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	6293      	str	r3, [r2, #40]	; 0x28

		TIM11->EGR.bit.ug = ENABLE;
 8002b20:	4a47      	ldr	r2, [pc, #284]	; (8002c40 <tim_base_setConfig+0x5e8>)
 8002b22:	8a93      	ldrh	r3, [r2, #20]
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	8293      	strh	r3, [r2, #20]
 8002b2a:	e084      	b.n	8002c36 <tim_base_setConfig+0x5de>
	}else if(TIM_12 == pTIMHandle->TIMx)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b12      	cmp	r3, #18
 8002b32:	d127      	bne.n	8002b84 <tim_base_setConfig+0x52c>
	{
		TIM_9_12_CR1_Reg_t TIM12_CR1_temp = {0};
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]

		TIM12_CR1_temp.reg = TIM12->CR1.reg;
 8002b38:	4b42      	ldr	r3, [pc, #264]	; (8002c44 <tim_base_setConfig+0x5ec>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	613b      	str	r3, [r7, #16]

		//set TIM time base unit parameters
		TIM12_CR1_temp.bit.ckd = pTIMHandle->TIM_Config.ClockDivision;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	8a3b      	ldrh	r3, [r7, #16]
 8002b4a:	f362 2309 	bfi	r3, r2, #8, #2
 8002b4e:	823b      	strh	r3, [r7, #16]
		TIM12_CR1_temp.bit.arpe = pTIMHandle->TIM_Config.AutoReloadPreload;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	8a3b      	ldrh	r3, [r7, #16]
 8002b5c:	f362 13c7 	bfi	r3, r2, #7, #1
 8002b60:	823b      	strh	r3, [r7, #16]

		TIM12->CR1.reg = TIM12_CR1_temp.reg;
 8002b62:	4a38      	ldr	r2, [pc, #224]	; (8002c44 <tim_base_setConfig+0x5ec>)
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	6013      	str	r3, [r2, #0]

		TIM12->ARR = (uint32_t)pTIMHandle->TIM_Config.Period;
 8002b68:	4a36      	ldr	r2, [pc, #216]	; (8002c44 <tim_base_setConfig+0x5ec>)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM12->PSC = pTIMHandle->TIM_Config.Prescaler;
 8002b70:	4a34      	ldr	r2, [pc, #208]	; (8002c44 <tim_base_setConfig+0x5ec>)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	6293      	str	r3, [r2, #40]	; 0x28

		TIM12->EGR.bit.ug = ENABLE;
 8002b78:	4a32      	ldr	r2, [pc, #200]	; (8002c44 <tim_base_setConfig+0x5ec>)
 8002b7a:	8a93      	ldrh	r3, [r2, #20]
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	8293      	strh	r3, [r2, #20]
 8002b82:	e058      	b.n	8002c36 <tim_base_setConfig+0x5de>
	}else if(TIM_13 == pTIMHandle->TIMx)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b13      	cmp	r3, #19
 8002b8a:	d127      	bne.n	8002bdc <tim_base_setConfig+0x584>
	{
		TIM_10_14_CR1_Reg_t TIM13_CR1_temp = {0};
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]

		TIM13_CR1_temp.reg = TIM13->CR1.reg;
 8002b90:	4b2d      	ldr	r3, [pc, #180]	; (8002c48 <tim_base_setConfig+0x5f0>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	60fb      	str	r3, [r7, #12]

		//set TIM time base unit parameters
		TIM13_CR1_temp.bit.ckd = pTIMHandle->TIM_Config.ClockDivision;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	89bb      	ldrh	r3, [r7, #12]
 8002ba2:	f362 2309 	bfi	r3, r2, #8, #2
 8002ba6:	81bb      	strh	r3, [r7, #12]
		TIM13_CR1_temp.bit.arpe = pTIMHandle->TIM_Config.AutoReloadPreload;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	89bb      	ldrh	r3, [r7, #12]
 8002bb4:	f362 13c7 	bfi	r3, r2, #7, #1
 8002bb8:	81bb      	strh	r3, [r7, #12]

		TIM13->CR1.reg = TIM13_CR1_temp.reg;
 8002bba:	4a23      	ldr	r2, [pc, #140]	; (8002c48 <tim_base_setConfig+0x5f0>)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6013      	str	r3, [r2, #0]

		TIM13->ARR = (uint32_t)pTIMHandle->TIM_Config.Period;
 8002bc0:	4a21      	ldr	r2, [pc, #132]	; (8002c48 <tim_base_setConfig+0x5f0>)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM13->PSC = pTIMHandle->TIM_Config.Prescaler;
 8002bc8:	4a1f      	ldr	r2, [pc, #124]	; (8002c48 <tim_base_setConfig+0x5f0>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	6293      	str	r3, [r2, #40]	; 0x28

		TIM13->EGR.bit.ug = ENABLE;
 8002bd0:	4a1d      	ldr	r2, [pc, #116]	; (8002c48 <tim_base_setConfig+0x5f0>)
 8002bd2:	8a93      	ldrh	r3, [r2, #20]
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	8293      	strh	r3, [r2, #20]
 8002bda:	e02c      	b.n	8002c36 <tim_base_setConfig+0x5de>
	}else if(TIM_14 == pTIMHandle->TIMx)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b14      	cmp	r3, #20
 8002be2:	d127      	bne.n	8002c34 <tim_base_setConfig+0x5dc>
	{
		TIM_10_14_CR1_Reg_t TIM14_CR1_temp = {0};
 8002be4:	2300      	movs	r3, #0
 8002be6:	60bb      	str	r3, [r7, #8]

		TIM14_CR1_temp.reg = TIM14->CR1.reg;
 8002be8:	4b18      	ldr	r3, [pc, #96]	; (8002c4c <tim_base_setConfig+0x5f4>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	60bb      	str	r3, [r7, #8]

		//set TIM time base unit parameters
		TIM14_CR1_temp.bit.ckd = pTIMHandle->TIM_Config.ClockDivision;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	893b      	ldrh	r3, [r7, #8]
 8002bfa:	f362 2309 	bfi	r3, r2, #8, #2
 8002bfe:	813b      	strh	r3, [r7, #8]
		TIM14_CR1_temp.bit.arpe = pTIMHandle->TIM_Config.AutoReloadPreload;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	893b      	ldrh	r3, [r7, #8]
 8002c0c:	f362 13c7 	bfi	r3, r2, #7, #1
 8002c10:	813b      	strh	r3, [r7, #8]

		TIM14->CR1.reg = TIM14_CR1_temp.reg;
 8002c12:	4a0e      	ldr	r2, [pc, #56]	; (8002c4c <tim_base_setConfig+0x5f4>)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	6013      	str	r3, [r2, #0]

		TIM14->ARR = (uint32_t)pTIMHandle->TIM_Config.Period;
 8002c18:	4a0c      	ldr	r2, [pc, #48]	; (8002c4c <tim_base_setConfig+0x5f4>)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM14->PSC = pTIMHandle->TIM_Config.Prescaler;
 8002c20:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <tim_base_setConfig+0x5f4>)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	6293      	str	r3, [r2, #40]	; 0x28

		TIM14->EGR.bit.ug = ENABLE;
 8002c28:	4a08      	ldr	r2, [pc, #32]	; (8002c4c <tim_base_setConfig+0x5f4>)
 8002c2a:	8a93      	ldrh	r3, [r2, #20]
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	8293      	strh	r3, [r2, #20]
 8002c32:	e000      	b.n	8002c36 <tim_base_setConfig+0x5de>
	}
	else return;
 8002c34:	bf00      	nop
}
 8002c36:	3744      	adds	r7, #68	; 0x44
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40014800 	.word	0x40014800
 8002c44:	40001800 	.word	0x40001800
 8002c48:	40001c00 	.word	0x40001c00
 8002c4c:	40002000 	.word	0x40002000

08002c50 <tim_CCxChannelCmd>:

static void tim_CCxChannelCmd(TIM_Handle_t *pTIMHandle, uint8_t Channel, uint32_t ChannelStateEnorDi)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	72fb      	strb	r3, [r7, #11]
	if(TIM_1 == pTIMHandle->TIMx)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d17c      	bne.n	8002d60 <tim_CCxChannelCmd+0x110>
	{
		switch(Channel)
 8002c66:	7afb      	ldrb	r3, [r7, #11]
 8002c68:	2b0c      	cmp	r3, #12
 8002c6a:	dc23      	bgt.n	8002cb4 <tim_CCxChannelCmd+0x64>
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f2c0 84a4 	blt.w	80035ba <tim_CCxChannelCmd+0x96a>
 8002c72:	2b0c      	cmp	r3, #12
 8002c74:	f200 84a1 	bhi.w	80035ba <tim_CCxChannelCmd+0x96a>
 8002c78:	a201      	add	r2, pc, #4	; (adr r2, 8002c80 <tim_CCxChannelCmd+0x30>)
 8002c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7e:	bf00      	nop
 8002c80:	08002cbd 	.word	0x08002cbd
 8002c84:	080035bb 	.word	0x080035bb
 8002c88:	080035bb 	.word	0x080035bb
 8002c8c:	080035bb 	.word	0x080035bb
 8002c90:	08002cd3 	.word	0x08002cd3
 8002c94:	080035bb 	.word	0x080035bb
 8002c98:	080035bb 	.word	0x080035bb
 8002c9c:	080035bb 	.word	0x080035bb
 8002ca0:	08002ce9 	.word	0x08002ce9
 8002ca4:	080035bb 	.word	0x080035bb
 8002ca8:	080035bb 	.word	0x080035bb
 8002cac:	080035bb 	.word	0x080035bb
 8002cb0:	08002cff 	.word	0x08002cff
 8002cb4:	2b3c      	cmp	r3, #60	; 0x3c
 8002cb6:	d02d      	beq.n	8002d14 <tim_CCxChannelCmd+0xc4>
				TIM1->CCER.bit.cc3e = ChannelStateEnorDi;
				TIM1->CCER.bit.cc4e = ChannelStateEnorDi;
				break;
			}
			default:
				return;
 8002cb8:	f000 bc7f 	b.w	80035ba <tim_CCxChannelCmd+0x96a>
				TIM1->CCER.bit.cc1e = ChannelStateEnorDi;
 8002cbc:	4aa7      	ldr	r2, [pc, #668]	; (8002f5c <tim_CCxChannelCmd+0x30c>)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	b2d9      	uxtb	r1, r3
 8002cc6:	8c13      	ldrh	r3, [r2, #32]
 8002cc8:	f361 0300 	bfi	r3, r1, #0, #1
 8002ccc:	8413      	strh	r3, [r2, #32]
				break;
 8002cce:	f000 bc8b 	b.w	80035e8 <tim_CCxChannelCmd+0x998>
				TIM1->CCER.bit.cc2e = ChannelStateEnorDi;
 8002cd2:	4aa2      	ldr	r2, [pc, #648]	; (8002f5c <tim_CCxChannelCmd+0x30c>)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	b2d9      	uxtb	r1, r3
 8002cdc:	8c13      	ldrh	r3, [r2, #32]
 8002cde:	f361 1304 	bfi	r3, r1, #4, #1
 8002ce2:	8413      	strh	r3, [r2, #32]
				break;
 8002ce4:	f000 bc80 	b.w	80035e8 <tim_CCxChannelCmd+0x998>
				TIM1->CCER.bit.cc3e = ChannelStateEnorDi;
 8002ce8:	4a9c      	ldr	r2, [pc, #624]	; (8002f5c <tim_CCxChannelCmd+0x30c>)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	b2d9      	uxtb	r1, r3
 8002cf2:	8c13      	ldrh	r3, [r2, #32]
 8002cf4:	f361 2308 	bfi	r3, r1, #8, #1
 8002cf8:	8413      	strh	r3, [r2, #32]
				break;
 8002cfa:	f000 bc75 	b.w	80035e8 <tim_CCxChannelCmd+0x998>
				TIM1->CCER.bit.cc4e = ChannelStateEnorDi;
 8002cfe:	4a97      	ldr	r2, [pc, #604]	; (8002f5c <tim_CCxChannelCmd+0x30c>)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	b2d9      	uxtb	r1, r3
 8002d08:	8c13      	ldrh	r3, [r2, #32]
 8002d0a:	f361 330c 	bfi	r3, r1, #12, #1
 8002d0e:	8413      	strh	r3, [r2, #32]
				break;
 8002d10:	f000 bc6a 	b.w	80035e8 <tim_CCxChannelCmd+0x998>
				TIM1->CCER.bit.cc1e = ChannelStateEnorDi;
 8002d14:	4a91      	ldr	r2, [pc, #580]	; (8002f5c <tim_CCxChannelCmd+0x30c>)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	b2d9      	uxtb	r1, r3
 8002d1e:	8c13      	ldrh	r3, [r2, #32]
 8002d20:	f361 0300 	bfi	r3, r1, #0, #1
 8002d24:	8413      	strh	r3, [r2, #32]
				TIM1->CCER.bit.cc2e = ChannelStateEnorDi;
 8002d26:	4a8d      	ldr	r2, [pc, #564]	; (8002f5c <tim_CCxChannelCmd+0x30c>)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	b2d9      	uxtb	r1, r3
 8002d30:	8c13      	ldrh	r3, [r2, #32]
 8002d32:	f361 1304 	bfi	r3, r1, #4, #1
 8002d36:	8413      	strh	r3, [r2, #32]
				TIM1->CCER.bit.cc3e = ChannelStateEnorDi;
 8002d38:	4a88      	ldr	r2, [pc, #544]	; (8002f5c <tim_CCxChannelCmd+0x30c>)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	b2d9      	uxtb	r1, r3
 8002d42:	8c13      	ldrh	r3, [r2, #32]
 8002d44:	f361 2308 	bfi	r3, r1, #8, #1
 8002d48:	8413      	strh	r3, [r2, #32]
				TIM1->CCER.bit.cc4e = ChannelStateEnorDi;
 8002d4a:	4a84      	ldr	r2, [pc, #528]	; (8002f5c <tim_CCxChannelCmd+0x30c>)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	b2d9      	uxtb	r1, r3
 8002d54:	8c13      	ldrh	r3, [r2, #32]
 8002d56:	f361 330c 	bfi	r3, r1, #12, #1
 8002d5a:	8413      	strh	r3, [r2, #32]
				break;
 8002d5c:	f000 bc44 	b.w	80035e8 <tim_CCxChannelCmd+0x998>
		}
	}else if(TIM_2 == pTIMHandle->TIMx)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d17f      	bne.n	8002e68 <tim_CCxChannelCmd+0x218>
	{
		switch(Channel)
 8002d68:	7afb      	ldrb	r3, [r7, #11]
 8002d6a:	2b0c      	cmp	r3, #12
 8002d6c:	dc22      	bgt.n	8002db4 <tim_CCxChannelCmd+0x164>
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f2c0 8425 	blt.w	80035be <tim_CCxChannelCmd+0x96e>
 8002d74:	2b0c      	cmp	r3, #12
 8002d76:	f200 8422 	bhi.w	80035be <tim_CCxChannelCmd+0x96e>
 8002d7a:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <tim_CCxChannelCmd+0x130>)
 8002d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d80:	08002dbd 	.word	0x08002dbd
 8002d84:	080035bf 	.word	0x080035bf
 8002d88:	080035bf 	.word	0x080035bf
 8002d8c:	080035bf 	.word	0x080035bf
 8002d90:	08002dd5 	.word	0x08002dd5
 8002d94:	080035bf 	.word	0x080035bf
 8002d98:	080035bf 	.word	0x080035bf
 8002d9c:	080035bf 	.word	0x080035bf
 8002da0:	08002deb 	.word	0x08002deb
 8002da4:	080035bf 	.word	0x080035bf
 8002da8:	080035bf 	.word	0x080035bf
 8002dac:	080035bf 	.word	0x080035bf
 8002db0:	08002e01 	.word	0x08002e01
 8002db4:	2b3c      	cmp	r3, #60	; 0x3c
 8002db6:	d02e      	beq.n	8002e16 <tim_CCxChannelCmd+0x1c6>
				TIM2->CCER.bit.cc3e = ChannelStateEnorDi;
				TIM2->CCER.bit.cc4e = ChannelStateEnorDi;
				break;
			}
			default:
				return;
 8002db8:	f000 bc01 	b.w	80035be <tim_CCxChannelCmd+0x96e>
				TIM2->CCER.bit.cc1e = ChannelStateEnorDi;
 8002dbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	b2d9      	uxtb	r1, r3
 8002dc8:	8c13      	ldrh	r3, [r2, #32]
 8002dca:	f361 0300 	bfi	r3, r1, #0, #1
 8002dce:	8413      	strh	r3, [r2, #32]
				break;
 8002dd0:	f000 bc0a 	b.w	80035e8 <tim_CCxChannelCmd+0x998>
				TIM2->CCER.bit.cc2e = ChannelStateEnorDi;
 8002dd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	b2d9      	uxtb	r1, r3
 8002de0:	8c13      	ldrh	r3, [r2, #32]
 8002de2:	f361 1304 	bfi	r3, r1, #4, #1
 8002de6:	8413      	strh	r3, [r2, #32]
				break;
 8002de8:	e3fe      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				TIM2->CCER.bit.cc3e = ChannelStateEnorDi;
 8002dea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	b2d9      	uxtb	r1, r3
 8002df6:	8c13      	ldrh	r3, [r2, #32]
 8002df8:	f361 2308 	bfi	r3, r1, #8, #1
 8002dfc:	8413      	strh	r3, [r2, #32]
				break;
 8002dfe:	e3f3      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				TIM2->CCER.bit.cc4e = ChannelStateEnorDi;
 8002e00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	b2d9      	uxtb	r1, r3
 8002e0c:	8c13      	ldrh	r3, [r2, #32]
 8002e0e:	f361 330c 	bfi	r3, r1, #12, #1
 8002e12:	8413      	strh	r3, [r2, #32]
				break;
 8002e14:	e3e8      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				TIM2->CCER.bit.cc1e = ChannelStateEnorDi;
 8002e16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	b2d9      	uxtb	r1, r3
 8002e22:	8c13      	ldrh	r3, [r2, #32]
 8002e24:	f361 0300 	bfi	r3, r1, #0, #1
 8002e28:	8413      	strh	r3, [r2, #32]
				TIM2->CCER.bit.cc2e = ChannelStateEnorDi;
 8002e2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	b2d9      	uxtb	r1, r3
 8002e36:	8c13      	ldrh	r3, [r2, #32]
 8002e38:	f361 1304 	bfi	r3, r1, #4, #1
 8002e3c:	8413      	strh	r3, [r2, #32]
				TIM2->CCER.bit.cc3e = ChannelStateEnorDi;
 8002e3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	b2d9      	uxtb	r1, r3
 8002e4a:	8c13      	ldrh	r3, [r2, #32]
 8002e4c:	f361 2308 	bfi	r3, r1, #8, #1
 8002e50:	8413      	strh	r3, [r2, #32]
				TIM2->CCER.bit.cc4e = ChannelStateEnorDi;
 8002e52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	b2d9      	uxtb	r1, r3
 8002e5e:	8c13      	ldrh	r3, [r2, #32]
 8002e60:	f361 330c 	bfi	r3, r1, #12, #1
 8002e64:	8413      	strh	r3, [r2, #32]
				break;
 8002e66:	e3bf      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
		}
	}else if(TIM_3 == pTIMHandle->TIMx)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	d179      	bne.n	8002f64 <tim_CCxChannelCmd+0x314>
	{
		switch(Channel)
 8002e70:	7afb      	ldrb	r3, [r7, #11]
 8002e72:	2b0c      	cmp	r3, #12
 8002e74:	dc22      	bgt.n	8002ebc <tim_CCxChannelCmd+0x26c>
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f2c0 83a3 	blt.w	80035c2 <tim_CCxChannelCmd+0x972>
 8002e7c:	2b0c      	cmp	r3, #12
 8002e7e:	f200 83a0 	bhi.w	80035c2 <tim_CCxChannelCmd+0x972>
 8002e82:	a201      	add	r2, pc, #4	; (adr r2, 8002e88 <tim_CCxChannelCmd+0x238>)
 8002e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e88:	08002ec3 	.word	0x08002ec3
 8002e8c:	080035c3 	.word	0x080035c3
 8002e90:	080035c3 	.word	0x080035c3
 8002e94:	080035c3 	.word	0x080035c3
 8002e98:	08002ed7 	.word	0x08002ed7
 8002e9c:	080035c3 	.word	0x080035c3
 8002ea0:	080035c3 	.word	0x080035c3
 8002ea4:	080035c3 	.word	0x080035c3
 8002ea8:	08002eeb 	.word	0x08002eeb
 8002eac:	080035c3 	.word	0x080035c3
 8002eb0:	080035c3 	.word	0x080035c3
 8002eb4:	080035c3 	.word	0x080035c3
 8002eb8:	08002eff 	.word	0x08002eff
 8002ebc:	2b3c      	cmp	r3, #60	; 0x3c
 8002ebe:	d028      	beq.n	8002f12 <tim_CCxChannelCmd+0x2c2>
				TIM3->CCER.bit.cc3e = ChannelStateEnorDi;
				TIM3->CCER.bit.cc4e = ChannelStateEnorDi;
				break;
			}
			default:
				return;
 8002ec0:	e37f      	b.n	80035c2 <tim_CCxChannelCmd+0x972>
				TIM3->CCER.bit.cc1e = ChannelStateEnorDi;
 8002ec2:	4a27      	ldr	r2, [pc, #156]	; (8002f60 <tim_CCxChannelCmd+0x310>)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	b2d9      	uxtb	r1, r3
 8002ecc:	8c13      	ldrh	r3, [r2, #32]
 8002ece:	f361 0300 	bfi	r3, r1, #0, #1
 8002ed2:	8413      	strh	r3, [r2, #32]
				break;
 8002ed4:	e388      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				TIM3->CCER.bit.cc2e = ChannelStateEnorDi;
 8002ed6:	4a22      	ldr	r2, [pc, #136]	; (8002f60 <tim_CCxChannelCmd+0x310>)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	b2d9      	uxtb	r1, r3
 8002ee0:	8c13      	ldrh	r3, [r2, #32]
 8002ee2:	f361 1304 	bfi	r3, r1, #4, #1
 8002ee6:	8413      	strh	r3, [r2, #32]
				break;
 8002ee8:	e37e      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				TIM3->CCER.bit.cc3e = ChannelStateEnorDi;
 8002eea:	4a1d      	ldr	r2, [pc, #116]	; (8002f60 <tim_CCxChannelCmd+0x310>)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	b2d9      	uxtb	r1, r3
 8002ef4:	8c13      	ldrh	r3, [r2, #32]
 8002ef6:	f361 2308 	bfi	r3, r1, #8, #1
 8002efa:	8413      	strh	r3, [r2, #32]
				break;
 8002efc:	e374      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				TIM3->CCER.bit.cc4e = ChannelStateEnorDi;
 8002efe:	4a18      	ldr	r2, [pc, #96]	; (8002f60 <tim_CCxChannelCmd+0x310>)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	b2d9      	uxtb	r1, r3
 8002f08:	8c13      	ldrh	r3, [r2, #32]
 8002f0a:	f361 330c 	bfi	r3, r1, #12, #1
 8002f0e:	8413      	strh	r3, [r2, #32]
				break;
 8002f10:	e36a      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				TIM3->CCER.bit.cc1e = ChannelStateEnorDi;
 8002f12:	4a13      	ldr	r2, [pc, #76]	; (8002f60 <tim_CCxChannelCmd+0x310>)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	b2d9      	uxtb	r1, r3
 8002f1c:	8c13      	ldrh	r3, [r2, #32]
 8002f1e:	f361 0300 	bfi	r3, r1, #0, #1
 8002f22:	8413      	strh	r3, [r2, #32]
				TIM3->CCER.bit.cc2e = ChannelStateEnorDi;
 8002f24:	4a0e      	ldr	r2, [pc, #56]	; (8002f60 <tim_CCxChannelCmd+0x310>)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	b2d9      	uxtb	r1, r3
 8002f2e:	8c13      	ldrh	r3, [r2, #32]
 8002f30:	f361 1304 	bfi	r3, r1, #4, #1
 8002f34:	8413      	strh	r3, [r2, #32]
				TIM3->CCER.bit.cc3e = ChannelStateEnorDi;
 8002f36:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <tim_CCxChannelCmd+0x310>)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	b2d9      	uxtb	r1, r3
 8002f40:	8c13      	ldrh	r3, [r2, #32]
 8002f42:	f361 2308 	bfi	r3, r1, #8, #1
 8002f46:	8413      	strh	r3, [r2, #32]
				TIM3->CCER.bit.cc4e = ChannelStateEnorDi;
 8002f48:	4a05      	ldr	r2, [pc, #20]	; (8002f60 <tim_CCxChannelCmd+0x310>)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	b2d9      	uxtb	r1, r3
 8002f52:	8c13      	ldrh	r3, [r2, #32]
 8002f54:	f361 330c 	bfi	r3, r1, #12, #1
 8002f58:	8413      	strh	r3, [r2, #32]
				break;
 8002f5a:	e345      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
 8002f5c:	40010000 	.word	0x40010000
 8002f60:	40000400 	.word	0x40000400
		}
	}else if(TIM_4 == pTIMHandle->TIMx)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d175      	bne.n	8003058 <tim_CCxChannelCmd+0x408>
	{
		switch(Channel)
 8002f6c:	7afb      	ldrb	r3, [r7, #11]
 8002f6e:	2b0c      	cmp	r3, #12
 8002f70:	dc22      	bgt.n	8002fb8 <tim_CCxChannelCmd+0x368>
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f2c0 8327 	blt.w	80035c6 <tim_CCxChannelCmd+0x976>
 8002f78:	2b0c      	cmp	r3, #12
 8002f7a:	f200 8324 	bhi.w	80035c6 <tim_CCxChannelCmd+0x976>
 8002f7e:	a201      	add	r2, pc, #4	; (adr r2, 8002f84 <tim_CCxChannelCmd+0x334>)
 8002f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f84:	08002fbf 	.word	0x08002fbf
 8002f88:	080035c7 	.word	0x080035c7
 8002f8c:	080035c7 	.word	0x080035c7
 8002f90:	080035c7 	.word	0x080035c7
 8002f94:	08002fd3 	.word	0x08002fd3
 8002f98:	080035c7 	.word	0x080035c7
 8002f9c:	080035c7 	.word	0x080035c7
 8002fa0:	080035c7 	.word	0x080035c7
 8002fa4:	08002fe7 	.word	0x08002fe7
 8002fa8:	080035c7 	.word	0x080035c7
 8002fac:	080035c7 	.word	0x080035c7
 8002fb0:	080035c7 	.word	0x080035c7
 8002fb4:	08002ffb 	.word	0x08002ffb
 8002fb8:	2b3c      	cmp	r3, #60	; 0x3c
 8002fba:	d028      	beq.n	800300e <tim_CCxChannelCmd+0x3be>
				TIM4->CCER.bit.cc3e = ChannelStateEnorDi;
				TIM4->CCER.bit.cc4e = ChannelStateEnorDi;
				break;
			}
			default:
				return;
 8002fbc:	e303      	b.n	80035c6 <tim_CCxChannelCmd+0x976>
				TIM4->CCER.bit.cc1e = ChannelStateEnorDi;
 8002fbe:	4aa0      	ldr	r2, [pc, #640]	; (8003240 <tim_CCxChannelCmd+0x5f0>)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	b2d9      	uxtb	r1, r3
 8002fc8:	8c13      	ldrh	r3, [r2, #32]
 8002fca:	f361 0300 	bfi	r3, r1, #0, #1
 8002fce:	8413      	strh	r3, [r2, #32]
				break;
 8002fd0:	e30a      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				TIM4->CCER.bit.cc2e = ChannelStateEnorDi;
 8002fd2:	4a9b      	ldr	r2, [pc, #620]	; (8003240 <tim_CCxChannelCmd+0x5f0>)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	b2d9      	uxtb	r1, r3
 8002fdc:	8c13      	ldrh	r3, [r2, #32]
 8002fde:	f361 1304 	bfi	r3, r1, #4, #1
 8002fe2:	8413      	strh	r3, [r2, #32]
				break;
 8002fe4:	e300      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				TIM4->CCER.bit.cc3e = ChannelStateEnorDi;
 8002fe6:	4a96      	ldr	r2, [pc, #600]	; (8003240 <tim_CCxChannelCmd+0x5f0>)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	b2d9      	uxtb	r1, r3
 8002ff0:	8c13      	ldrh	r3, [r2, #32]
 8002ff2:	f361 2308 	bfi	r3, r1, #8, #1
 8002ff6:	8413      	strh	r3, [r2, #32]
				break;
 8002ff8:	e2f6      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				TIM4->CCER.bit.cc4e = ChannelStateEnorDi;
 8002ffa:	4a91      	ldr	r2, [pc, #580]	; (8003240 <tim_CCxChannelCmd+0x5f0>)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	b2d9      	uxtb	r1, r3
 8003004:	8c13      	ldrh	r3, [r2, #32]
 8003006:	f361 330c 	bfi	r3, r1, #12, #1
 800300a:	8413      	strh	r3, [r2, #32]
				break;
 800300c:	e2ec      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				TIM4->CCER.bit.cc1e = ChannelStateEnorDi;
 800300e:	4a8c      	ldr	r2, [pc, #560]	; (8003240 <tim_CCxChannelCmd+0x5f0>)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	b2d9      	uxtb	r1, r3
 8003018:	8c13      	ldrh	r3, [r2, #32]
 800301a:	f361 0300 	bfi	r3, r1, #0, #1
 800301e:	8413      	strh	r3, [r2, #32]
				TIM4->CCER.bit.cc2e = ChannelStateEnorDi;
 8003020:	4a87      	ldr	r2, [pc, #540]	; (8003240 <tim_CCxChannelCmd+0x5f0>)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	b2d9      	uxtb	r1, r3
 800302a:	8c13      	ldrh	r3, [r2, #32]
 800302c:	f361 1304 	bfi	r3, r1, #4, #1
 8003030:	8413      	strh	r3, [r2, #32]
				TIM4->CCER.bit.cc3e = ChannelStateEnorDi;
 8003032:	4a83      	ldr	r2, [pc, #524]	; (8003240 <tim_CCxChannelCmd+0x5f0>)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	b2d9      	uxtb	r1, r3
 800303c:	8c13      	ldrh	r3, [r2, #32]
 800303e:	f361 2308 	bfi	r3, r1, #8, #1
 8003042:	8413      	strh	r3, [r2, #32]
				TIM4->CCER.bit.cc4e = ChannelStateEnorDi;
 8003044:	4a7e      	ldr	r2, [pc, #504]	; (8003240 <tim_CCxChannelCmd+0x5f0>)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	b2d9      	uxtb	r1, r3
 800304e:	8c13      	ldrh	r3, [r2, #32]
 8003050:	f361 330c 	bfi	r3, r1, #12, #1
 8003054:	8413      	strh	r3, [r2, #32]
				break;
 8003056:	e2c7      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
		}
	}else if(TIM_5 == pTIMHandle->TIMx)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b05      	cmp	r3, #5
 800305e:	d175      	bne.n	800314c <tim_CCxChannelCmd+0x4fc>
	{
		switch(Channel)
 8003060:	7afb      	ldrb	r3, [r7, #11]
 8003062:	2b0c      	cmp	r3, #12
 8003064:	dc22      	bgt.n	80030ac <tim_CCxChannelCmd+0x45c>
 8003066:	2b00      	cmp	r3, #0
 8003068:	f2c0 82af 	blt.w	80035ca <tim_CCxChannelCmd+0x97a>
 800306c:	2b0c      	cmp	r3, #12
 800306e:	f200 82ac 	bhi.w	80035ca <tim_CCxChannelCmd+0x97a>
 8003072:	a201      	add	r2, pc, #4	; (adr r2, 8003078 <tim_CCxChannelCmd+0x428>)
 8003074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003078:	080030b3 	.word	0x080030b3
 800307c:	080035cb 	.word	0x080035cb
 8003080:	080035cb 	.word	0x080035cb
 8003084:	080035cb 	.word	0x080035cb
 8003088:	080030c7 	.word	0x080030c7
 800308c:	080035cb 	.word	0x080035cb
 8003090:	080035cb 	.word	0x080035cb
 8003094:	080035cb 	.word	0x080035cb
 8003098:	080030db 	.word	0x080030db
 800309c:	080035cb 	.word	0x080035cb
 80030a0:	080035cb 	.word	0x080035cb
 80030a4:	080035cb 	.word	0x080035cb
 80030a8:	080030ef 	.word	0x080030ef
 80030ac:	2b3c      	cmp	r3, #60	; 0x3c
 80030ae:	d028      	beq.n	8003102 <tim_CCxChannelCmd+0x4b2>
				TIM5->CCER.bit.cc3e = ChannelStateEnorDi;
				TIM5->CCER.bit.cc4e = ChannelStateEnorDi;
				break;
			}
			default:
				return;
 80030b0:	e28b      	b.n	80035ca <tim_CCxChannelCmd+0x97a>
				TIM5->CCER.bit.cc1e = ChannelStateEnorDi;
 80030b2:	4a64      	ldr	r2, [pc, #400]	; (8003244 <tim_CCxChannelCmd+0x5f4>)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	b2d9      	uxtb	r1, r3
 80030bc:	8c13      	ldrh	r3, [r2, #32]
 80030be:	f361 0300 	bfi	r3, r1, #0, #1
 80030c2:	8413      	strh	r3, [r2, #32]
				break;
 80030c4:	e290      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				TIM5->CCER.bit.cc2e = ChannelStateEnorDi;
 80030c6:	4a5f      	ldr	r2, [pc, #380]	; (8003244 <tim_CCxChannelCmd+0x5f4>)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	b2d9      	uxtb	r1, r3
 80030d0:	8c13      	ldrh	r3, [r2, #32]
 80030d2:	f361 1304 	bfi	r3, r1, #4, #1
 80030d6:	8413      	strh	r3, [r2, #32]
				break;
 80030d8:	e286      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				TIM5->CCER.bit.cc3e = ChannelStateEnorDi;
 80030da:	4a5a      	ldr	r2, [pc, #360]	; (8003244 <tim_CCxChannelCmd+0x5f4>)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	b2d9      	uxtb	r1, r3
 80030e4:	8c13      	ldrh	r3, [r2, #32]
 80030e6:	f361 2308 	bfi	r3, r1, #8, #1
 80030ea:	8413      	strh	r3, [r2, #32]
				break;
 80030ec:	e27c      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				TIM5->CCER.bit.cc4e = ChannelStateEnorDi;
 80030ee:	4a55      	ldr	r2, [pc, #340]	; (8003244 <tim_CCxChannelCmd+0x5f4>)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	b2d9      	uxtb	r1, r3
 80030f8:	8c13      	ldrh	r3, [r2, #32]
 80030fa:	f361 330c 	bfi	r3, r1, #12, #1
 80030fe:	8413      	strh	r3, [r2, #32]
				break;
 8003100:	e272      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				TIM5->CCER.bit.cc1e = ChannelStateEnorDi;
 8003102:	4a50      	ldr	r2, [pc, #320]	; (8003244 <tim_CCxChannelCmd+0x5f4>)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	b2d9      	uxtb	r1, r3
 800310c:	8c13      	ldrh	r3, [r2, #32]
 800310e:	f361 0300 	bfi	r3, r1, #0, #1
 8003112:	8413      	strh	r3, [r2, #32]
				TIM5->CCER.bit.cc2e = ChannelStateEnorDi;
 8003114:	4a4b      	ldr	r2, [pc, #300]	; (8003244 <tim_CCxChannelCmd+0x5f4>)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	b2d9      	uxtb	r1, r3
 800311e:	8c13      	ldrh	r3, [r2, #32]
 8003120:	f361 1304 	bfi	r3, r1, #4, #1
 8003124:	8413      	strh	r3, [r2, #32]
				TIM5->CCER.bit.cc3e = ChannelStateEnorDi;
 8003126:	4a47      	ldr	r2, [pc, #284]	; (8003244 <tim_CCxChannelCmd+0x5f4>)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	b2d9      	uxtb	r1, r3
 8003130:	8c13      	ldrh	r3, [r2, #32]
 8003132:	f361 2308 	bfi	r3, r1, #8, #1
 8003136:	8413      	strh	r3, [r2, #32]
				TIM5->CCER.bit.cc4e = ChannelStateEnorDi;
 8003138:	4a42      	ldr	r2, [pc, #264]	; (8003244 <tim_CCxChannelCmd+0x5f4>)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	b2d9      	uxtb	r1, r3
 8003142:	8c13      	ldrh	r3, [r2, #32]
 8003144:	f361 330c 	bfi	r3, r1, #12, #1
 8003148:	8413      	strh	r3, [r2, #32]
				break;
 800314a:	e24d      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
		}
	}else if(TIM_8 == pTIMHandle->TIMx)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b08      	cmp	r3, #8
 8003152:	d17b      	bne.n	800324c <tim_CCxChannelCmd+0x5fc>
	{
		switch(Channel)
 8003154:	7afb      	ldrb	r3, [r7, #11]
 8003156:	2b0c      	cmp	r3, #12
 8003158:	dc22      	bgt.n	80031a0 <tim_CCxChannelCmd+0x550>
 800315a:	2b00      	cmp	r3, #0
 800315c:	f2c0 8237 	blt.w	80035ce <tim_CCxChannelCmd+0x97e>
 8003160:	2b0c      	cmp	r3, #12
 8003162:	f200 8234 	bhi.w	80035ce <tim_CCxChannelCmd+0x97e>
 8003166:	a201      	add	r2, pc, #4	; (adr r2, 800316c <tim_CCxChannelCmd+0x51c>)
 8003168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316c:	080031a7 	.word	0x080031a7
 8003170:	080035cf 	.word	0x080035cf
 8003174:	080035cf 	.word	0x080035cf
 8003178:	080035cf 	.word	0x080035cf
 800317c:	080031bb 	.word	0x080031bb
 8003180:	080035cf 	.word	0x080035cf
 8003184:	080035cf 	.word	0x080035cf
 8003188:	080035cf 	.word	0x080035cf
 800318c:	080031cf 	.word	0x080031cf
 8003190:	080035cf 	.word	0x080035cf
 8003194:	080035cf 	.word	0x080035cf
 8003198:	080035cf 	.word	0x080035cf
 800319c:	080031e3 	.word	0x080031e3
 80031a0:	2b3c      	cmp	r3, #60	; 0x3c
 80031a2:	d028      	beq.n	80031f6 <tim_CCxChannelCmd+0x5a6>
				TIM8->CCER.bit.cc3e = ChannelStateEnorDi;
				TIM8->CCER.bit.cc4e = ChannelStateEnorDi;
				break;
			}
			default:
				return;
 80031a4:	e213      	b.n	80035ce <tim_CCxChannelCmd+0x97e>
				TIM8->CCER.bit.cc1e = ChannelStateEnorDi;
 80031a6:	4a28      	ldr	r2, [pc, #160]	; (8003248 <tim_CCxChannelCmd+0x5f8>)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	b2d9      	uxtb	r1, r3
 80031b0:	8c13      	ldrh	r3, [r2, #32]
 80031b2:	f361 0300 	bfi	r3, r1, #0, #1
 80031b6:	8413      	strh	r3, [r2, #32]
				break;
 80031b8:	e216      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				TIM8->CCER.bit.cc2e = ChannelStateEnorDi;
 80031ba:	4a23      	ldr	r2, [pc, #140]	; (8003248 <tim_CCxChannelCmd+0x5f8>)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	b2d9      	uxtb	r1, r3
 80031c4:	8c13      	ldrh	r3, [r2, #32]
 80031c6:	f361 1304 	bfi	r3, r1, #4, #1
 80031ca:	8413      	strh	r3, [r2, #32]
				break;
 80031cc:	e20c      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				TIM8->CCER.bit.cc3e = ChannelStateEnorDi;
 80031ce:	4a1e      	ldr	r2, [pc, #120]	; (8003248 <tim_CCxChannelCmd+0x5f8>)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	b2d9      	uxtb	r1, r3
 80031d8:	8c13      	ldrh	r3, [r2, #32]
 80031da:	f361 2308 	bfi	r3, r1, #8, #1
 80031de:	8413      	strh	r3, [r2, #32]
				break;
 80031e0:	e202      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				TIM8->CCER.bit.cc4e = ChannelStateEnorDi;
 80031e2:	4a19      	ldr	r2, [pc, #100]	; (8003248 <tim_CCxChannelCmd+0x5f8>)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	b2d9      	uxtb	r1, r3
 80031ec:	8c13      	ldrh	r3, [r2, #32]
 80031ee:	f361 330c 	bfi	r3, r1, #12, #1
 80031f2:	8413      	strh	r3, [r2, #32]
				break;
 80031f4:	e1f8      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				TIM8->CCER.bit.cc1e = ChannelStateEnorDi;
 80031f6:	4a14      	ldr	r2, [pc, #80]	; (8003248 <tim_CCxChannelCmd+0x5f8>)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	b2d9      	uxtb	r1, r3
 8003200:	8c13      	ldrh	r3, [r2, #32]
 8003202:	f361 0300 	bfi	r3, r1, #0, #1
 8003206:	8413      	strh	r3, [r2, #32]
				TIM8->CCER.bit.cc2e = ChannelStateEnorDi;
 8003208:	4a0f      	ldr	r2, [pc, #60]	; (8003248 <tim_CCxChannelCmd+0x5f8>)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	b2d9      	uxtb	r1, r3
 8003212:	8c13      	ldrh	r3, [r2, #32]
 8003214:	f361 1304 	bfi	r3, r1, #4, #1
 8003218:	8413      	strh	r3, [r2, #32]
				TIM8->CCER.bit.cc3e = ChannelStateEnorDi;
 800321a:	4a0b      	ldr	r2, [pc, #44]	; (8003248 <tim_CCxChannelCmd+0x5f8>)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	b2d9      	uxtb	r1, r3
 8003224:	8c13      	ldrh	r3, [r2, #32]
 8003226:	f361 2308 	bfi	r3, r1, #8, #1
 800322a:	8413      	strh	r3, [r2, #32]
				TIM8->CCER.bit.cc4e = ChannelStateEnorDi;
 800322c:	4a06      	ldr	r2, [pc, #24]	; (8003248 <tim_CCxChannelCmd+0x5f8>)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	b2d9      	uxtb	r1, r3
 8003236:	8c13      	ldrh	r3, [r2, #32]
 8003238:	f361 330c 	bfi	r3, r1, #12, #1
 800323c:	8413      	strh	r3, [r2, #32]
				break;
 800323e:	e1d3      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
 8003240:	40000800 	.word	0x40000800
 8003244:	40000c00 	.word	0x40000c00
 8003248:	40010400 	.word	0x40010400
		}
	}else if(TIM_9 == pTIMHandle->TIMx)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b09      	cmp	r3, #9
 8003252:	d14f      	bne.n	80032f4 <tim_CCxChannelCmd+0x6a4>
	{
		switch(Channel)
 8003254:	7afb      	ldrb	r3, [r7, #11]
 8003256:	2b0c      	cmp	r3, #12
 8003258:	dc22      	bgt.n	80032a0 <tim_CCxChannelCmd+0x650>
 800325a:	2b00      	cmp	r3, #0
 800325c:	f2c0 81b9 	blt.w	80035d2 <tim_CCxChannelCmd+0x982>
 8003260:	2b0c      	cmp	r3, #12
 8003262:	f200 81b6 	bhi.w	80035d2 <tim_CCxChannelCmd+0x982>
 8003266:	a201      	add	r2, pc, #4	; (adr r2, 800326c <tim_CCxChannelCmd+0x61c>)
 8003268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326c:	080032a7 	.word	0x080032a7
 8003270:	080035d3 	.word	0x080035d3
 8003274:	080035d3 	.word	0x080035d3
 8003278:	080035d3 	.word	0x080035d3
 800327c:	080032bb 	.word	0x080032bb
 8003280:	080035d3 	.word	0x080035d3
 8003284:	080035d3 	.word	0x080035d3
 8003288:	080035d3 	.word	0x080035d3
 800328c:	080035d3 	.word	0x080035d3
 8003290:	080035d3 	.word	0x080035d3
 8003294:	080035d3 	.word	0x080035d3
 8003298:	080035d3 	.word	0x080035d3
 800329c:	080035d3 	.word	0x080035d3
 80032a0:	2b3c      	cmp	r3, #60	; 0x3c
 80032a2:	d014      	beq.n	80032ce <tim_CCxChannelCmd+0x67e>
				TIM9->CCER.bit.cc1e = ChannelStateEnorDi;
				TIM9->CCER.bit.cc2e = ChannelStateEnorDi;
				break;
			}
			default:
				return;
 80032a4:	e195      	b.n	80035d2 <tim_CCxChannelCmd+0x982>
				TIM9->CCER.bit.cc1e = ChannelStateEnorDi;
 80032a6:	4aa0      	ldr	r2, [pc, #640]	; (8003528 <tim_CCxChannelCmd+0x8d8>)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	b2d9      	uxtb	r1, r3
 80032b0:	8c13      	ldrh	r3, [r2, #32]
 80032b2:	f361 0300 	bfi	r3, r1, #0, #1
 80032b6:	8413      	strh	r3, [r2, #32]
				break;
 80032b8:	e196      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				TIM9->CCER.bit.cc2e = ChannelStateEnorDi;
 80032ba:	4a9b      	ldr	r2, [pc, #620]	; (8003528 <tim_CCxChannelCmd+0x8d8>)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	b2d9      	uxtb	r1, r3
 80032c4:	8c13      	ldrh	r3, [r2, #32]
 80032c6:	f361 1304 	bfi	r3, r1, #4, #1
 80032ca:	8413      	strh	r3, [r2, #32]
				break;
 80032cc:	e18c      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				TIM9->CCER.bit.cc1e = ChannelStateEnorDi;
 80032ce:	4a96      	ldr	r2, [pc, #600]	; (8003528 <tim_CCxChannelCmd+0x8d8>)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	b2d9      	uxtb	r1, r3
 80032d8:	8c13      	ldrh	r3, [r2, #32]
 80032da:	f361 0300 	bfi	r3, r1, #0, #1
 80032de:	8413      	strh	r3, [r2, #32]
				TIM9->CCER.bit.cc2e = ChannelStateEnorDi;
 80032e0:	4a91      	ldr	r2, [pc, #580]	; (8003528 <tim_CCxChannelCmd+0x8d8>)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	b2d9      	uxtb	r1, r3
 80032ea:	8c13      	ldrh	r3, [r2, #32]
 80032ec:	f361 1304 	bfi	r3, r1, #4, #1
 80032f0:	8413      	strh	r3, [r2, #32]
				break;
 80032f2:	e179      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
		}
	}else if(TIM_10 == pTIMHandle->TIMx)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b10      	cmp	r3, #16
 80032fa:	d13c      	bne.n	8003376 <tim_CCxChannelCmd+0x726>
	{
		switch(Channel)
 80032fc:	7afb      	ldrb	r3, [r7, #11]
 80032fe:	2b0c      	cmp	r3, #12
 8003300:	dc22      	bgt.n	8003348 <tim_CCxChannelCmd+0x6f8>
 8003302:	2b00      	cmp	r3, #0
 8003304:	f2c0 8167 	blt.w	80035d6 <tim_CCxChannelCmd+0x986>
 8003308:	2b0c      	cmp	r3, #12
 800330a:	f200 8164 	bhi.w	80035d6 <tim_CCxChannelCmd+0x986>
 800330e:	a201      	add	r2, pc, #4	; (adr r2, 8003314 <tim_CCxChannelCmd+0x6c4>)
 8003310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003314:	0800334f 	.word	0x0800334f
 8003318:	080035d7 	.word	0x080035d7
 800331c:	080035d7 	.word	0x080035d7
 8003320:	080035d7 	.word	0x080035d7
 8003324:	080035d7 	.word	0x080035d7
 8003328:	080035d7 	.word	0x080035d7
 800332c:	080035d7 	.word	0x080035d7
 8003330:	080035d7 	.word	0x080035d7
 8003334:	080035d7 	.word	0x080035d7
 8003338:	080035d7 	.word	0x080035d7
 800333c:	080035d7 	.word	0x080035d7
 8003340:	080035d7 	.word	0x080035d7
 8003344:	080035d7 	.word	0x080035d7
 8003348:	2b3c      	cmp	r3, #60	; 0x3c
 800334a:	d00a      	beq.n	8003362 <tim_CCxChannelCmd+0x712>
			{
				TIM10->CCER.bit.cc1e = ChannelStateEnorDi;
				break;
			}
			default:
				return;
 800334c:	e143      	b.n	80035d6 <tim_CCxChannelCmd+0x986>
				TIM10->CCER.bit.cc1e = ChannelStateEnorDi;
 800334e:	4a77      	ldr	r2, [pc, #476]	; (800352c <tim_CCxChannelCmd+0x8dc>)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	b2d9      	uxtb	r1, r3
 8003358:	8c13      	ldrh	r3, [r2, #32]
 800335a:	f361 0300 	bfi	r3, r1, #0, #1
 800335e:	8413      	strh	r3, [r2, #32]
				break;
 8003360:	e142      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				TIM10->CCER.bit.cc1e = ChannelStateEnorDi;
 8003362:	4a72      	ldr	r2, [pc, #456]	; (800352c <tim_CCxChannelCmd+0x8dc>)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	b2d9      	uxtb	r1, r3
 800336c:	8c13      	ldrh	r3, [r2, #32]
 800336e:	f361 0300 	bfi	r3, r1, #0, #1
 8003372:	8413      	strh	r3, [r2, #32]
				break;
 8003374:	e138      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
		}
	}else if(TIM_11 == pTIMHandle->TIMx)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b11      	cmp	r3, #17
 800337c:	d13d      	bne.n	80033fa <tim_CCxChannelCmd+0x7aa>
	{
		switch(Channel)
 800337e:	7afb      	ldrb	r3, [r7, #11]
 8003380:	2b0c      	cmp	r3, #12
 8003382:	dc23      	bgt.n	80033cc <tim_CCxChannelCmd+0x77c>
 8003384:	2b00      	cmp	r3, #0
 8003386:	f2c0 8128 	blt.w	80035da <tim_CCxChannelCmd+0x98a>
 800338a:	2b0c      	cmp	r3, #12
 800338c:	f200 8125 	bhi.w	80035da <tim_CCxChannelCmd+0x98a>
 8003390:	a201      	add	r2, pc, #4	; (adr r2, 8003398 <tim_CCxChannelCmd+0x748>)
 8003392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003396:	bf00      	nop
 8003398:	080033d3 	.word	0x080033d3
 800339c:	080035db 	.word	0x080035db
 80033a0:	080035db 	.word	0x080035db
 80033a4:	080035db 	.word	0x080035db
 80033a8:	080035db 	.word	0x080035db
 80033ac:	080035db 	.word	0x080035db
 80033b0:	080035db 	.word	0x080035db
 80033b4:	080035db 	.word	0x080035db
 80033b8:	080035db 	.word	0x080035db
 80033bc:	080035db 	.word	0x080035db
 80033c0:	080035db 	.word	0x080035db
 80033c4:	080035db 	.word	0x080035db
 80033c8:	080035db 	.word	0x080035db
 80033cc:	2b3c      	cmp	r3, #60	; 0x3c
 80033ce:	d00a      	beq.n	80033e6 <tim_CCxChannelCmd+0x796>
			{
				TIM11->CCER.bit.cc1e = ChannelStateEnorDi;
				break;
			}
			default:
				return;
 80033d0:	e103      	b.n	80035da <tim_CCxChannelCmd+0x98a>
				TIM11->CCER.bit.cc1e = ChannelStateEnorDi;
 80033d2:	4a57      	ldr	r2, [pc, #348]	; (8003530 <tim_CCxChannelCmd+0x8e0>)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	b2d9      	uxtb	r1, r3
 80033dc:	8c13      	ldrh	r3, [r2, #32]
 80033de:	f361 0300 	bfi	r3, r1, #0, #1
 80033e2:	8413      	strh	r3, [r2, #32]
				break;
 80033e4:	e100      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				TIM11->CCER.bit.cc1e = ChannelStateEnorDi;
 80033e6:	4a52      	ldr	r2, [pc, #328]	; (8003530 <tim_CCxChannelCmd+0x8e0>)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	b2d9      	uxtb	r1, r3
 80033f0:	8c13      	ldrh	r3, [r2, #32]
 80033f2:	f361 0300 	bfi	r3, r1, #0, #1
 80033f6:	8413      	strh	r3, [r2, #32]
				break;
 80033f8:	e0f6      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
		}
	}else if(TIM_12 == pTIMHandle->TIMx)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b12      	cmp	r3, #18
 8003400:	d150      	bne.n	80034a4 <tim_CCxChannelCmd+0x854>
	{
		switch(Channel)
 8003402:	7afb      	ldrb	r3, [r7, #11]
 8003404:	2b0c      	cmp	r3, #12
 8003406:	dc23      	bgt.n	8003450 <tim_CCxChannelCmd+0x800>
 8003408:	2b00      	cmp	r3, #0
 800340a:	f2c0 80e8 	blt.w	80035de <tim_CCxChannelCmd+0x98e>
 800340e:	2b0c      	cmp	r3, #12
 8003410:	f200 80e5 	bhi.w	80035de <tim_CCxChannelCmd+0x98e>
 8003414:	a201      	add	r2, pc, #4	; (adr r2, 800341c <tim_CCxChannelCmd+0x7cc>)
 8003416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341a:	bf00      	nop
 800341c:	08003457 	.word	0x08003457
 8003420:	080035df 	.word	0x080035df
 8003424:	080035df 	.word	0x080035df
 8003428:	080035df 	.word	0x080035df
 800342c:	0800346b 	.word	0x0800346b
 8003430:	080035df 	.word	0x080035df
 8003434:	080035df 	.word	0x080035df
 8003438:	080035df 	.word	0x080035df
 800343c:	080035df 	.word	0x080035df
 8003440:	080035df 	.word	0x080035df
 8003444:	080035df 	.word	0x080035df
 8003448:	080035df 	.word	0x080035df
 800344c:	080035df 	.word	0x080035df
 8003450:	2b3c      	cmp	r3, #60	; 0x3c
 8003452:	d014      	beq.n	800347e <tim_CCxChannelCmd+0x82e>
				TIM12->CCER.bit.cc1e = ChannelStateEnorDi;
				TIM12->CCER.bit.cc2e = ChannelStateEnorDi;
				break;
			}
			default:
				return;
 8003454:	e0c3      	b.n	80035de <tim_CCxChannelCmd+0x98e>
				TIM12->CCER.bit.cc1e = ChannelStateEnorDi;
 8003456:	4a37      	ldr	r2, [pc, #220]	; (8003534 <tim_CCxChannelCmd+0x8e4>)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	b2d9      	uxtb	r1, r3
 8003460:	8c13      	ldrh	r3, [r2, #32]
 8003462:	f361 0300 	bfi	r3, r1, #0, #1
 8003466:	8413      	strh	r3, [r2, #32]
				break;
 8003468:	e0be      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				TIM12->CCER.bit.cc2e = ChannelStateEnorDi;
 800346a:	4a32      	ldr	r2, [pc, #200]	; (8003534 <tim_CCxChannelCmd+0x8e4>)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	b2d9      	uxtb	r1, r3
 8003474:	8c13      	ldrh	r3, [r2, #32]
 8003476:	f361 1304 	bfi	r3, r1, #4, #1
 800347a:	8413      	strh	r3, [r2, #32]
				break;
 800347c:	e0b4      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				TIM12->CCER.bit.cc1e = ChannelStateEnorDi;
 800347e:	4a2d      	ldr	r2, [pc, #180]	; (8003534 <tim_CCxChannelCmd+0x8e4>)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	b2d9      	uxtb	r1, r3
 8003488:	8c13      	ldrh	r3, [r2, #32]
 800348a:	f361 0300 	bfi	r3, r1, #0, #1
 800348e:	8413      	strh	r3, [r2, #32]
				TIM12->CCER.bit.cc2e = ChannelStateEnorDi;
 8003490:	4a28      	ldr	r2, [pc, #160]	; (8003534 <tim_CCxChannelCmd+0x8e4>)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	b2d9      	uxtb	r1, r3
 800349a:	8c13      	ldrh	r3, [r2, #32]
 800349c:	f361 1304 	bfi	r3, r1, #4, #1
 80034a0:	8413      	strh	r3, [r2, #32]
				break;
 80034a2:	e0a1      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
		}
	}else if(TIM_13 == pTIMHandle->TIMx)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b13      	cmp	r3, #19
 80034aa:	d147      	bne.n	800353c <tim_CCxChannelCmd+0x8ec>
	{
		switch(Channel)
 80034ac:	7afb      	ldrb	r3, [r7, #11]
 80034ae:	2b0c      	cmp	r3, #12
 80034b0:	dc22      	bgt.n	80034f8 <tim_CCxChannelCmd+0x8a8>
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f2c0 8095 	blt.w	80035e2 <tim_CCxChannelCmd+0x992>
 80034b8:	2b0c      	cmp	r3, #12
 80034ba:	f200 8092 	bhi.w	80035e2 <tim_CCxChannelCmd+0x992>
 80034be:	a201      	add	r2, pc, #4	; (adr r2, 80034c4 <tim_CCxChannelCmd+0x874>)
 80034c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c4:	080034ff 	.word	0x080034ff
 80034c8:	080035e3 	.word	0x080035e3
 80034cc:	080035e3 	.word	0x080035e3
 80034d0:	080035e3 	.word	0x080035e3
 80034d4:	080035e3 	.word	0x080035e3
 80034d8:	080035e3 	.word	0x080035e3
 80034dc:	080035e3 	.word	0x080035e3
 80034e0:	080035e3 	.word	0x080035e3
 80034e4:	080035e3 	.word	0x080035e3
 80034e8:	080035e3 	.word	0x080035e3
 80034ec:	080035e3 	.word	0x080035e3
 80034f0:	080035e3 	.word	0x080035e3
 80034f4:	080035e3 	.word	0x080035e3
 80034f8:	2b3c      	cmp	r3, #60	; 0x3c
 80034fa:	d00a      	beq.n	8003512 <tim_CCxChannelCmd+0x8c2>
			{
				TIM13->CCER.bit.cc1e = ChannelStateEnorDi;
				break;
			}
			default:
				return;
 80034fc:	e071      	b.n	80035e2 <tim_CCxChannelCmd+0x992>
				TIM13->CCER.bit.cc1e = ChannelStateEnorDi;
 80034fe:	4a0e      	ldr	r2, [pc, #56]	; (8003538 <tim_CCxChannelCmd+0x8e8>)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	b2d9      	uxtb	r1, r3
 8003508:	8c13      	ldrh	r3, [r2, #32]
 800350a:	f361 0300 	bfi	r3, r1, #0, #1
 800350e:	8413      	strh	r3, [r2, #32]
				break;
 8003510:	e06a      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				TIM13->CCER.bit.cc1e = ChannelStateEnorDi;
 8003512:	4a09      	ldr	r2, [pc, #36]	; (8003538 <tim_CCxChannelCmd+0x8e8>)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	b2d9      	uxtb	r1, r3
 800351c:	8c13      	ldrh	r3, [r2, #32]
 800351e:	f361 0300 	bfi	r3, r1, #0, #1
 8003522:	8413      	strh	r3, [r2, #32]
				break;
 8003524:	e060      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
 8003526:	bf00      	nop
 8003528:	40014000 	.word	0x40014000
 800352c:	40014400 	.word	0x40014400
 8003530:	40014800 	.word	0x40014800
 8003534:	40001800 	.word	0x40001800
 8003538:	40001c00 	.word	0x40001c00
		}
	}else if(TIM_14 == pTIMHandle->TIMx)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b14      	cmp	r3, #20
 8003542:	d151      	bne.n	80035e8 <tim_CCxChannelCmd+0x998>
	{
		switch(Channel)
 8003544:	7afb      	ldrb	r3, [r7, #11]
 8003546:	2b0c      	cmp	r3, #12
 8003548:	dc20      	bgt.n	800358c <tim_CCxChannelCmd+0x93c>
 800354a:	2b00      	cmp	r3, #0
 800354c:	db4b      	blt.n	80035e6 <tim_CCxChannelCmd+0x996>
 800354e:	2b0c      	cmp	r3, #12
 8003550:	d849      	bhi.n	80035e6 <tim_CCxChannelCmd+0x996>
 8003552:	a201      	add	r2, pc, #4	; (adr r2, 8003558 <tim_CCxChannelCmd+0x908>)
 8003554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003558:	08003593 	.word	0x08003593
 800355c:	080035e7 	.word	0x080035e7
 8003560:	080035e7 	.word	0x080035e7
 8003564:	080035e7 	.word	0x080035e7
 8003568:	080035e7 	.word	0x080035e7
 800356c:	080035e7 	.word	0x080035e7
 8003570:	080035e7 	.word	0x080035e7
 8003574:	080035e7 	.word	0x080035e7
 8003578:	080035e7 	.word	0x080035e7
 800357c:	080035e7 	.word	0x080035e7
 8003580:	080035e7 	.word	0x080035e7
 8003584:	080035e7 	.word	0x080035e7
 8003588:	080035e7 	.word	0x080035e7
 800358c:	2b3c      	cmp	r3, #60	; 0x3c
 800358e:	d00a      	beq.n	80035a6 <tim_CCxChannelCmd+0x956>
			{
				TIM14->CCER.bit.cc1e = ChannelStateEnorDi;
				break;
			}
			default:
				return;
 8003590:	e029      	b.n	80035e6 <tim_CCxChannelCmd+0x996>
				TIM14->CCER.bit.cc1e = ChannelStateEnorDi;
 8003592:	4a17      	ldr	r2, [pc, #92]	; (80035f0 <tim_CCxChannelCmd+0x9a0>)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	b2d9      	uxtb	r1, r3
 800359c:	8c13      	ldrh	r3, [r2, #32]
 800359e:	f361 0300 	bfi	r3, r1, #0, #1
 80035a2:	8413      	strh	r3, [r2, #32]
				break;
 80035a4:	e020      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				TIM14->CCER.bit.cc1e = ChannelStateEnorDi;
 80035a6:	4a12      	ldr	r2, [pc, #72]	; (80035f0 <tim_CCxChannelCmd+0x9a0>)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	b2d9      	uxtb	r1, r3
 80035b0:	8c13      	ldrh	r3, [r2, #32]
 80035b2:	f361 0300 	bfi	r3, r1, #0, #1
 80035b6:	8413      	strh	r3, [r2, #32]
				break;
 80035b8:	e016      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				return;
 80035ba:	bf00      	nop
 80035bc:	e014      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				return;
 80035be:	bf00      	nop
 80035c0:	e012      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				return;
 80035c2:	bf00      	nop
 80035c4:	e010      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				return;
 80035c6:	bf00      	nop
 80035c8:	e00e      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				return;
 80035ca:	bf00      	nop
 80035cc:	e00c      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				return;
 80035ce:	bf00      	nop
 80035d0:	e00a      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				return;
 80035d2:	bf00      	nop
 80035d4:	e008      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				return;
 80035d6:	bf00      	nop
 80035d8:	e006      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				return;
 80035da:	bf00      	nop
 80035dc:	e004      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				return;
 80035de:	bf00      	nop
 80035e0:	e002      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				return;
 80035e2:	bf00      	nop
 80035e4:	e000      	b.n	80035e8 <tim_CCxChannelCmd+0x998>
				return;
 80035e6:	bf00      	nop
		}
	}
}
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr
 80035f0:	40002000 	.word	0x40002000

080035f4 <tim_channel_state_set>:


static void tim_channel_state_set(TIM_Handle_t *pTIMHandle, uint8_t Channel, uint32_t ChannelState)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	460b      	mov	r3, r1
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	72fb      	strb	r3, [r7, #11]
	if(TIM_CHANNEL_1 == Channel)
 8003602:	7afb      	ldrb	r3, [r7, #11]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d105      	bne.n	8003614 <tim_channel_state_set+0x20>
	{
		pTIMHandle->ChannelState[0] = ChannelState;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	b2da      	uxtb	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		pTIMHandle->ChannelState[0] = ChannelState;
		pTIMHandle->ChannelState[1] = ChannelState;
		pTIMHandle->ChannelState[2] = ChannelState;
		pTIMHandle->ChannelState[3] = ChannelState;
	}
}
 8003612:	e031      	b.n	8003678 <tim_channel_state_set+0x84>
	}else if(TIM_CHANNEL_2 == Channel)
 8003614:	7afb      	ldrb	r3, [r7, #11]
 8003616:	2b04      	cmp	r3, #4
 8003618:	d105      	bne.n	8003626 <tim_channel_state_set+0x32>
		pTIMHandle->ChannelState[1] = ChannelState;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	b2da      	uxtb	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 8003624:	e028      	b.n	8003678 <tim_channel_state_set+0x84>
	}else if(TIM_CHANNEL_3 == Channel)
 8003626:	7afb      	ldrb	r3, [r7, #11]
 8003628:	2b08      	cmp	r3, #8
 800362a:	d105      	bne.n	8003638 <tim_channel_state_set+0x44>
		pTIMHandle->ChannelState[2] = ChannelState;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	b2da      	uxtb	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8003636:	e01f      	b.n	8003678 <tim_channel_state_set+0x84>
	}else if(TIM_CHANNEL_4 == Channel)
 8003638:	7afb      	ldrb	r3, [r7, #11]
 800363a:	2b0c      	cmp	r3, #12
 800363c:	d105      	bne.n	800364a <tim_channel_state_set+0x56>
		pTIMHandle->ChannelState[3] = ChannelState;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8003648:	e016      	b.n	8003678 <tim_channel_state_set+0x84>
	}else if(TIM_CHANNEL_ALL == Channel)
 800364a:	7afb      	ldrb	r3, [r7, #11]
 800364c:	2b3c      	cmp	r3, #60	; 0x3c
 800364e:	d113      	bne.n	8003678 <tim_channel_state_set+0x84>
		pTIMHandle->ChannelState[0] = ChannelState;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	b2da      	uxtb	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		pTIMHandle->ChannelState[1] = ChannelState;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	b2da      	uxtb	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		pTIMHandle->ChannelState[2] = ChannelState;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	b2da      	uxtb	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		pTIMHandle->ChannelState[3] = ChannelState;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	b2da      	uxtb	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8003678:	bf00      	nop
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	bc80      	pop	{r7}
 8003680:	4770      	bx	lr

08003682 <tim_channel_n_state_set>:

static void tim_channel_n_state_set(TIM_Handle_t *pTIMHandle, uint8_t Channel, uint32_t ChannelNState)
{
 8003682:	b480      	push	{r7}
 8003684:	b085      	sub	sp, #20
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	460b      	mov	r3, r1
 800368c:	607a      	str	r2, [r7, #4]
 800368e:	72fb      	strb	r3, [r7, #11]
	if(TIM_CHANNEL_1 == Channel)
 8003690:	7afb      	ldrb	r3, [r7, #11]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d105      	bne.n	80036a2 <tim_channel_n_state_set+0x20>
	{
		pTIMHandle->ChannelNState[0] = ChannelNState;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	b2da      	uxtb	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		pTIMHandle->ChannelNState[0] = ChannelNState;
		pTIMHandle->ChannelNState[1] = ChannelNState;
		pTIMHandle->ChannelNState[2] = ChannelNState;
		pTIMHandle->ChannelNState[3] = ChannelNState;
	}
}
 80036a0:	e031      	b.n	8003706 <tim_channel_n_state_set+0x84>
	}else if(TIM_CHANNEL_2 == Channel)
 80036a2:	7afb      	ldrb	r3, [r7, #11]
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d105      	bne.n	80036b4 <tim_channel_n_state_set+0x32>
		pTIMHandle->ChannelNState[1] = ChannelNState;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80036b2:	e028      	b.n	8003706 <tim_channel_n_state_set+0x84>
	}else if(TIM_CHANNEL_3 == Channel)
 80036b4:	7afb      	ldrb	r3, [r7, #11]
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d105      	bne.n	80036c6 <tim_channel_n_state_set+0x44>
		pTIMHandle->ChannelNState[2] = ChannelNState;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80036c4:	e01f      	b.n	8003706 <tim_channel_n_state_set+0x84>
	}else if(TIM_CHANNEL_4 == Channel)
 80036c6:	7afb      	ldrb	r3, [r7, #11]
 80036c8:	2b0c      	cmp	r3, #12
 80036ca:	d105      	bne.n	80036d8 <tim_channel_n_state_set+0x56>
		pTIMHandle->ChannelNState[3] = ChannelNState;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 80036d6:	e016      	b.n	8003706 <tim_channel_n_state_set+0x84>
	}else if(TIM_CHANNEL_ALL == Channel)
 80036d8:	7afb      	ldrb	r3, [r7, #11]
 80036da:	2b3c      	cmp	r3, #60	; 0x3c
 80036dc:	d113      	bne.n	8003706 <tim_channel_n_state_set+0x84>
		pTIMHandle->ChannelNState[0] = ChannelNState;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		pTIMHandle->ChannelNState[1] = ChannelNState;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		pTIMHandle->ChannelNState[2] = ChannelNState;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		pTIMHandle->ChannelNState[3] = ChannelNState;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8003706:	bf00      	nop
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr

08003710 <tim_it_control>:

static void tim_it_control(TIM_Handle_t *pTIMHandle, uint8_t Interrupt, uint8_t State)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	70fb      	strb	r3, [r7, #3]
 800371c:	4613      	mov	r3, r2
 800371e:	70bb      	strb	r3, [r7, #2]
	if(TIM_IT_UPDATE == Interrupt)
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	2b00      	cmp	r3, #0
 8003724:	f040 80cd 	bne.w	80038c2 <tim_it_control+0x1b2>
	{
		switch(pTIMHandle->TIMx)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	3b01      	subs	r3, #1
 800372e:	2b13      	cmp	r3, #19
 8003730:	f200 8601 	bhi.w	8004336 <tim_it_control+0xc26>
 8003734:	a201      	add	r2, pc, #4	; (adr r2, 800373c <tim_it_control+0x2c>)
 8003736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373a:	bf00      	nop
 800373c:	0800378d 	.word	0x0800378d
 8003740:	080037a3 	.word	0x080037a3
 8003744:	080037bb 	.word	0x080037bb
 8003748:	080037d1 	.word	0x080037d1
 800374c:	080037e7 	.word	0x080037e7
 8003750:	080037fd 	.word	0x080037fd
 8003754:	08003813 	.word	0x08003813
 8003758:	08003829 	.word	0x08003829
 800375c:	0800383f 	.word	0x0800383f
 8003760:	08004337 	.word	0x08004337
 8003764:	08004337 	.word	0x08004337
 8003768:	08004337 	.word	0x08004337
 800376c:	08004337 	.word	0x08004337
 8003770:	08004337 	.word	0x08004337
 8003774:	08004337 	.word	0x08004337
 8003778:	08003855 	.word	0x08003855
 800377c:	0800386b 	.word	0x0800386b
 8003780:	08003881 	.word	0x08003881
 8003784:	08003897 	.word	0x08003897
 8003788:	080038ad 	.word	0x080038ad
		{
			case TIM_1:
			{
				TIM1->DIER.bit.uie = State;
 800378c:	4ac2      	ldr	r2, [pc, #776]	; (8003a98 <tim_it_control+0x388>)
 800378e:	78bb      	ldrb	r3, [r7, #2]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	b2d9      	uxtb	r1, r3
 8003796:	8993      	ldrh	r3, [r2, #12]
 8003798:	f361 0300 	bfi	r3, r1, #0, #1
 800379c:	8193      	strh	r3, [r2, #12]
				break;
 800379e:	f000 bdec 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_2:
			{
				TIM2->DIER.bit.uie = State;
 80037a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037a6:	78bb      	ldrb	r3, [r7, #2]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	b2d9      	uxtb	r1, r3
 80037ae:	8993      	ldrh	r3, [r2, #12]
 80037b0:	f361 0300 	bfi	r3, r1, #0, #1
 80037b4:	8193      	strh	r3, [r2, #12]
				break;
 80037b6:	f000 bde0 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_3:
			{
				TIM3->DIER.bit.uie = State;
 80037ba:	4ab8      	ldr	r2, [pc, #736]	; (8003a9c <tim_it_control+0x38c>)
 80037bc:	78bb      	ldrb	r3, [r7, #2]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	b2d9      	uxtb	r1, r3
 80037c4:	8993      	ldrh	r3, [r2, #12]
 80037c6:	f361 0300 	bfi	r3, r1, #0, #1
 80037ca:	8193      	strh	r3, [r2, #12]
				break;
 80037cc:	f000 bdd5 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_4:
			{
				TIM4->DIER.bit.uie = State;
 80037d0:	4ab3      	ldr	r2, [pc, #716]	; (8003aa0 <tim_it_control+0x390>)
 80037d2:	78bb      	ldrb	r3, [r7, #2]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	b2d9      	uxtb	r1, r3
 80037da:	8993      	ldrh	r3, [r2, #12]
 80037dc:	f361 0300 	bfi	r3, r1, #0, #1
 80037e0:	8193      	strh	r3, [r2, #12]
				break;
 80037e2:	f000 bdca 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_5:
			{
				TIM5->DIER.bit.uie = State;
 80037e6:	4aaf      	ldr	r2, [pc, #700]	; (8003aa4 <tim_it_control+0x394>)
 80037e8:	78bb      	ldrb	r3, [r7, #2]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	b2d9      	uxtb	r1, r3
 80037f0:	8993      	ldrh	r3, [r2, #12]
 80037f2:	f361 0300 	bfi	r3, r1, #0, #1
 80037f6:	8193      	strh	r3, [r2, #12]
				break;
 80037f8:	f000 bdbf 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_6:
			{
				TIM6->DIER.bit.uie = State;
 80037fc:	4aaa      	ldr	r2, [pc, #680]	; (8003aa8 <tim_it_control+0x398>)
 80037fe:	78bb      	ldrb	r3, [r7, #2]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	b2d9      	uxtb	r1, r3
 8003806:	8993      	ldrh	r3, [r2, #12]
 8003808:	f361 0300 	bfi	r3, r1, #0, #1
 800380c:	8193      	strh	r3, [r2, #12]
				break;
 800380e:	f000 bdb4 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_7:
			{
				TIM7->DIER.bit.uie = State;
 8003812:	4aa6      	ldr	r2, [pc, #664]	; (8003aac <tim_it_control+0x39c>)
 8003814:	78bb      	ldrb	r3, [r7, #2]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	b2d9      	uxtb	r1, r3
 800381c:	8993      	ldrh	r3, [r2, #12]
 800381e:	f361 0300 	bfi	r3, r1, #0, #1
 8003822:	8193      	strh	r3, [r2, #12]
				break;
 8003824:	f000 bda9 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_8:
			{
				TIM8->DIER.bit.uie = State;
 8003828:	4aa1      	ldr	r2, [pc, #644]	; (8003ab0 <tim_it_control+0x3a0>)
 800382a:	78bb      	ldrb	r3, [r7, #2]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	b2d9      	uxtb	r1, r3
 8003832:	8993      	ldrh	r3, [r2, #12]
 8003834:	f361 0300 	bfi	r3, r1, #0, #1
 8003838:	8193      	strh	r3, [r2, #12]
				break;
 800383a:	f000 bd9e 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_9:
			{
				TIM9->DIER.bit.uie = State;
 800383e:	4a9d      	ldr	r2, [pc, #628]	; (8003ab4 <tim_it_control+0x3a4>)
 8003840:	78bb      	ldrb	r3, [r7, #2]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	b2d9      	uxtb	r1, r3
 8003848:	8993      	ldrh	r3, [r2, #12]
 800384a:	f361 0300 	bfi	r3, r1, #0, #1
 800384e:	8193      	strh	r3, [r2, #12]
				break;
 8003850:	f000 bd93 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_10:
			{
				TIM10->DIER.bit.uie = State;
 8003854:	4a98      	ldr	r2, [pc, #608]	; (8003ab8 <tim_it_control+0x3a8>)
 8003856:	78bb      	ldrb	r3, [r7, #2]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	b2d9      	uxtb	r1, r3
 800385e:	8993      	ldrh	r3, [r2, #12]
 8003860:	f361 0300 	bfi	r3, r1, #0, #1
 8003864:	8193      	strh	r3, [r2, #12]
				break;
 8003866:	f000 bd88 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_11:
			{
				TIM11->DIER.bit.uie = State;
 800386a:	4a94      	ldr	r2, [pc, #592]	; (8003abc <tim_it_control+0x3ac>)
 800386c:	78bb      	ldrb	r3, [r7, #2]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	b2d9      	uxtb	r1, r3
 8003874:	8993      	ldrh	r3, [r2, #12]
 8003876:	f361 0300 	bfi	r3, r1, #0, #1
 800387a:	8193      	strh	r3, [r2, #12]
				break;
 800387c:	f000 bd7d 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_12:
			{
				TIM12->DIER.bit.uie = State;
 8003880:	4a8f      	ldr	r2, [pc, #572]	; (8003ac0 <tim_it_control+0x3b0>)
 8003882:	78bb      	ldrb	r3, [r7, #2]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	b2d9      	uxtb	r1, r3
 800388a:	8993      	ldrh	r3, [r2, #12]
 800388c:	f361 0300 	bfi	r3, r1, #0, #1
 8003890:	8193      	strh	r3, [r2, #12]
				break;
 8003892:	f000 bd72 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_13:
			{
				TIM13->DIER.bit.uie = State;
 8003896:	4a8b      	ldr	r2, [pc, #556]	; (8003ac4 <tim_it_control+0x3b4>)
 8003898:	78bb      	ldrb	r3, [r7, #2]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	b2d9      	uxtb	r1, r3
 80038a0:	8993      	ldrh	r3, [r2, #12]
 80038a2:	f361 0300 	bfi	r3, r1, #0, #1
 80038a6:	8193      	strh	r3, [r2, #12]
				break;
 80038a8:	f000 bd67 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_14:
			{
				TIM14->DIER.bit.uie = State;
 80038ac:	4a86      	ldr	r2, [pc, #536]	; (8003ac8 <tim_it_control+0x3b8>)
 80038ae:	78bb      	ldrb	r3, [r7, #2]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	b2d9      	uxtb	r1, r3
 80038b6:	8993      	ldrh	r3, [r2, #12]
 80038b8:	f361 0300 	bfi	r3, r1, #0, #1
 80038bc:	8193      	strh	r3, [r2, #12]
				break;
 80038be:	f000 bd5c 	b.w	800437a <tim_it_control+0xc6a>
			}
			default:
				break;
		}
	}else if(TIM_IT_CC1 == Interrupt)
 80038c2:	78fb      	ldrb	r3, [r7, #3]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	f040 80b6 	bne.w	8003a36 <tim_it_control+0x326>
	{
		switch(pTIMHandle->TIMx)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	2b13      	cmp	r3, #19
 80038d2:	f200 8532 	bhi.w	800433a <tim_it_control+0xc2a>
 80038d6:	a201      	add	r2, pc, #4	; (adr r2, 80038dc <tim_it_control+0x1cc>)
 80038d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038dc:	0800392d 	.word	0x0800392d
 80038e0:	08003943 	.word	0x08003943
 80038e4:	0800395b 	.word	0x0800395b
 80038e8:	08003971 	.word	0x08003971
 80038ec:	08003987 	.word	0x08003987
 80038f0:	0800433b 	.word	0x0800433b
 80038f4:	0800433b 	.word	0x0800433b
 80038f8:	0800399d 	.word	0x0800399d
 80038fc:	080039b3 	.word	0x080039b3
 8003900:	0800433b 	.word	0x0800433b
 8003904:	0800433b 	.word	0x0800433b
 8003908:	0800433b 	.word	0x0800433b
 800390c:	0800433b 	.word	0x0800433b
 8003910:	0800433b 	.word	0x0800433b
 8003914:	0800433b 	.word	0x0800433b
 8003918:	080039c9 	.word	0x080039c9
 800391c:	080039df 	.word	0x080039df
 8003920:	080039f5 	.word	0x080039f5
 8003924:	08003a0b 	.word	0x08003a0b
 8003928:	08003a21 	.word	0x08003a21
		{
			case TIM_1:
			{
				TIM1->DIER.bit.cc1ie = State;
 800392c:	4a5a      	ldr	r2, [pc, #360]	; (8003a98 <tim_it_control+0x388>)
 800392e:	78bb      	ldrb	r3, [r7, #2]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	b2d9      	uxtb	r1, r3
 8003936:	8993      	ldrh	r3, [r2, #12]
 8003938:	f361 0341 	bfi	r3, r1, #1, #1
 800393c:	8193      	strh	r3, [r2, #12]
				break;
 800393e:	f000 bd1c 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_2:
			{
				TIM2->DIER.bit.cc1ie = State;
 8003942:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003946:	78bb      	ldrb	r3, [r7, #2]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	b2d9      	uxtb	r1, r3
 800394e:	8993      	ldrh	r3, [r2, #12]
 8003950:	f361 0341 	bfi	r3, r1, #1, #1
 8003954:	8193      	strh	r3, [r2, #12]
				break;
 8003956:	f000 bd10 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_3:
			{
				TIM3->DIER.bit.cc1ie = State;
 800395a:	4a50      	ldr	r2, [pc, #320]	; (8003a9c <tim_it_control+0x38c>)
 800395c:	78bb      	ldrb	r3, [r7, #2]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	b2d9      	uxtb	r1, r3
 8003964:	8993      	ldrh	r3, [r2, #12]
 8003966:	f361 0341 	bfi	r3, r1, #1, #1
 800396a:	8193      	strh	r3, [r2, #12]
				break;
 800396c:	f000 bd05 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_4:
			{
				TIM4->DIER.bit.cc1ie = State;
 8003970:	4a4b      	ldr	r2, [pc, #300]	; (8003aa0 <tim_it_control+0x390>)
 8003972:	78bb      	ldrb	r3, [r7, #2]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	b2d9      	uxtb	r1, r3
 800397a:	8993      	ldrh	r3, [r2, #12]
 800397c:	f361 0341 	bfi	r3, r1, #1, #1
 8003980:	8193      	strh	r3, [r2, #12]
				break;
 8003982:	f000 bcfa 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_5:
			{
				TIM5->DIER.bit.cc1ie = State;
 8003986:	4a47      	ldr	r2, [pc, #284]	; (8003aa4 <tim_it_control+0x394>)
 8003988:	78bb      	ldrb	r3, [r7, #2]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	b2d9      	uxtb	r1, r3
 8003990:	8993      	ldrh	r3, [r2, #12]
 8003992:	f361 0341 	bfi	r3, r1, #1, #1
 8003996:	8193      	strh	r3, [r2, #12]
				break;
 8003998:	f000 bcef 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_8:
			{
				TIM8->DIER.bit.cc1ie = State;
 800399c:	4a44      	ldr	r2, [pc, #272]	; (8003ab0 <tim_it_control+0x3a0>)
 800399e:	78bb      	ldrb	r3, [r7, #2]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	b2d9      	uxtb	r1, r3
 80039a6:	8993      	ldrh	r3, [r2, #12]
 80039a8:	f361 0341 	bfi	r3, r1, #1, #1
 80039ac:	8193      	strh	r3, [r2, #12]
				break;
 80039ae:	f000 bce4 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_9:
			{
				TIM9->DIER.bit.cc1ie = State;
 80039b2:	4a40      	ldr	r2, [pc, #256]	; (8003ab4 <tim_it_control+0x3a4>)
 80039b4:	78bb      	ldrb	r3, [r7, #2]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	b2d9      	uxtb	r1, r3
 80039bc:	8993      	ldrh	r3, [r2, #12]
 80039be:	f361 0341 	bfi	r3, r1, #1, #1
 80039c2:	8193      	strh	r3, [r2, #12]
				break;
 80039c4:	f000 bcd9 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_10:
			{
				TIM10->DIER.bit.cc1ie = State;
 80039c8:	4a3b      	ldr	r2, [pc, #236]	; (8003ab8 <tim_it_control+0x3a8>)
 80039ca:	78bb      	ldrb	r3, [r7, #2]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	b2d9      	uxtb	r1, r3
 80039d2:	8993      	ldrh	r3, [r2, #12]
 80039d4:	f361 0341 	bfi	r3, r1, #1, #1
 80039d8:	8193      	strh	r3, [r2, #12]
				break;
 80039da:	f000 bcce 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_11:
			{
				TIM11->DIER.bit.cc1ie = State;
 80039de:	4a37      	ldr	r2, [pc, #220]	; (8003abc <tim_it_control+0x3ac>)
 80039e0:	78bb      	ldrb	r3, [r7, #2]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	b2d9      	uxtb	r1, r3
 80039e8:	8993      	ldrh	r3, [r2, #12]
 80039ea:	f361 0341 	bfi	r3, r1, #1, #1
 80039ee:	8193      	strh	r3, [r2, #12]
				break;
 80039f0:	f000 bcc3 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_12:
			{
				TIM12->DIER.bit.cc1ie = State;
 80039f4:	4a32      	ldr	r2, [pc, #200]	; (8003ac0 <tim_it_control+0x3b0>)
 80039f6:	78bb      	ldrb	r3, [r7, #2]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	b2d9      	uxtb	r1, r3
 80039fe:	8993      	ldrh	r3, [r2, #12]
 8003a00:	f361 0341 	bfi	r3, r1, #1, #1
 8003a04:	8193      	strh	r3, [r2, #12]
				break;
 8003a06:	f000 bcb8 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_13:
			{
				TIM13->DIER.bit.cc1ie = State;
 8003a0a:	4a2e      	ldr	r2, [pc, #184]	; (8003ac4 <tim_it_control+0x3b4>)
 8003a0c:	78bb      	ldrb	r3, [r7, #2]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	b2d9      	uxtb	r1, r3
 8003a14:	8993      	ldrh	r3, [r2, #12]
 8003a16:	f361 0341 	bfi	r3, r1, #1, #1
 8003a1a:	8193      	strh	r3, [r2, #12]
				break;
 8003a1c:	f000 bcad 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_14:
			{
				TIM14->DIER.bit.cc1ie = State;
 8003a20:	4a29      	ldr	r2, [pc, #164]	; (8003ac8 <tim_it_control+0x3b8>)
 8003a22:	78bb      	ldrb	r3, [r7, #2]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	b2d9      	uxtb	r1, r3
 8003a2a:	8993      	ldrh	r3, [r2, #12]
 8003a2c:	f361 0341 	bfi	r3, r1, #1, #1
 8003a30:	8193      	strh	r3, [r2, #12]
				break;
 8003a32:	f000 bca2 	b.w	800437a <tim_it_control+0xc6a>
			}
			default:
				break;
		}
	}else if(TIM_IT_CC2 == Interrupt)
 8003a36:	78fb      	ldrb	r3, [r7, #3]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	f040 809f 	bne.w	8003b7c <tim_it_control+0x46c>
	{
		switch(pTIMHandle->TIMx)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	2b11      	cmp	r3, #17
 8003a46:	f200 847a 	bhi.w	800433e <tim_it_control+0xc2e>
 8003a4a:	a201      	add	r2, pc, #4	; (adr r2, 8003a50 <tim_it_control+0x340>)
 8003a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a50:	08003acd 	.word	0x08003acd
 8003a54:	08003ae3 	.word	0x08003ae3
 8003a58:	08003afb 	.word	0x08003afb
 8003a5c:	08003b11 	.word	0x08003b11
 8003a60:	08003b27 	.word	0x08003b27
 8003a64:	0800433f 	.word	0x0800433f
 8003a68:	0800433f 	.word	0x0800433f
 8003a6c:	08003b3d 	.word	0x08003b3d
 8003a70:	08003b53 	.word	0x08003b53
 8003a74:	0800433f 	.word	0x0800433f
 8003a78:	0800433f 	.word	0x0800433f
 8003a7c:	0800433f 	.word	0x0800433f
 8003a80:	0800433f 	.word	0x0800433f
 8003a84:	0800433f 	.word	0x0800433f
 8003a88:	0800433f 	.word	0x0800433f
 8003a8c:	0800433f 	.word	0x0800433f
 8003a90:	0800433f 	.word	0x0800433f
 8003a94:	08003b69 	.word	0x08003b69
 8003a98:	40010000 	.word	0x40010000
 8003a9c:	40000400 	.word	0x40000400
 8003aa0:	40000800 	.word	0x40000800
 8003aa4:	40000c00 	.word	0x40000c00
 8003aa8:	40001000 	.word	0x40001000
 8003aac:	40001400 	.word	0x40001400
 8003ab0:	40010400 	.word	0x40010400
 8003ab4:	40014000 	.word	0x40014000
 8003ab8:	40014400 	.word	0x40014400
 8003abc:	40014800 	.word	0x40014800
 8003ac0:	40001800 	.word	0x40001800
 8003ac4:	40001c00 	.word	0x40001c00
 8003ac8:	40002000 	.word	0x40002000
		{
			case TIM_1:
			{
				TIM1->DIER.bit.cc2ie = State;
 8003acc:	4ab7      	ldr	r2, [pc, #732]	; (8003dac <tim_it_control+0x69c>)
 8003ace:	78bb      	ldrb	r3, [r7, #2]
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	b2d9      	uxtb	r1, r3
 8003ad6:	8993      	ldrh	r3, [r2, #12]
 8003ad8:	f361 0382 	bfi	r3, r1, #2, #1
 8003adc:	8193      	strh	r3, [r2, #12]
				break;
 8003ade:	f000 bc4c 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_2:
			{
				TIM2->DIER.bit.cc2ie = State;
 8003ae2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ae6:	78bb      	ldrb	r3, [r7, #2]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	b2d9      	uxtb	r1, r3
 8003aee:	8993      	ldrh	r3, [r2, #12]
 8003af0:	f361 0382 	bfi	r3, r1, #2, #1
 8003af4:	8193      	strh	r3, [r2, #12]
				break;
 8003af6:	f000 bc40 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_3:
			{
				TIM3->DIER.bit.cc2ie = State;
 8003afa:	4aad      	ldr	r2, [pc, #692]	; (8003db0 <tim_it_control+0x6a0>)
 8003afc:	78bb      	ldrb	r3, [r7, #2]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	b2d9      	uxtb	r1, r3
 8003b04:	8993      	ldrh	r3, [r2, #12]
 8003b06:	f361 0382 	bfi	r3, r1, #2, #1
 8003b0a:	8193      	strh	r3, [r2, #12]
				break;
 8003b0c:	f000 bc35 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_4:
			{
				TIM4->DIER.bit.cc2ie = State;
 8003b10:	4aa8      	ldr	r2, [pc, #672]	; (8003db4 <tim_it_control+0x6a4>)
 8003b12:	78bb      	ldrb	r3, [r7, #2]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	b2d9      	uxtb	r1, r3
 8003b1a:	8993      	ldrh	r3, [r2, #12]
 8003b1c:	f361 0382 	bfi	r3, r1, #2, #1
 8003b20:	8193      	strh	r3, [r2, #12]
				break;
 8003b22:	f000 bc2a 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_5:
			{
				TIM5->DIER.bit.cc2ie = State;
 8003b26:	4aa4      	ldr	r2, [pc, #656]	; (8003db8 <tim_it_control+0x6a8>)
 8003b28:	78bb      	ldrb	r3, [r7, #2]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	b2d9      	uxtb	r1, r3
 8003b30:	8993      	ldrh	r3, [r2, #12]
 8003b32:	f361 0382 	bfi	r3, r1, #2, #1
 8003b36:	8193      	strh	r3, [r2, #12]
				break;
 8003b38:	f000 bc1f 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_8:
			{
				TIM8->DIER.bit.cc2ie = State;
 8003b3c:	4a9f      	ldr	r2, [pc, #636]	; (8003dbc <tim_it_control+0x6ac>)
 8003b3e:	78bb      	ldrb	r3, [r7, #2]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	b2d9      	uxtb	r1, r3
 8003b46:	8993      	ldrh	r3, [r2, #12]
 8003b48:	f361 0382 	bfi	r3, r1, #2, #1
 8003b4c:	8193      	strh	r3, [r2, #12]
				break;
 8003b4e:	f000 bc14 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_9:
			{
				TIM9->DIER.bit.cc2ie = State;
 8003b52:	4a9b      	ldr	r2, [pc, #620]	; (8003dc0 <tim_it_control+0x6b0>)
 8003b54:	78bb      	ldrb	r3, [r7, #2]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	b2d9      	uxtb	r1, r3
 8003b5c:	8993      	ldrh	r3, [r2, #12]
 8003b5e:	f361 0382 	bfi	r3, r1, #2, #1
 8003b62:	8193      	strh	r3, [r2, #12]
				break;
 8003b64:	f000 bc09 	b.w	800437a <tim_it_control+0xc6a>
			}
			case TIM_12:
			{
				TIM12->DIER.bit.cc2ie = State;
 8003b68:	4a96      	ldr	r2, [pc, #600]	; (8003dc4 <tim_it_control+0x6b4>)
 8003b6a:	78bb      	ldrb	r3, [r7, #2]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	b2d9      	uxtb	r1, r3
 8003b72:	8993      	ldrh	r3, [r2, #12]
 8003b74:	f361 0382 	bfi	r3, r1, #2, #1
 8003b78:	8193      	strh	r3, [r2, #12]
				break;
 8003b7a:	e3fe      	b.n	800437a <tim_it_control+0xc6a>
			}
			default:
				break;
		}
	}else if(TIM_IT_CC3 == Interrupt)
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	2b03      	cmp	r3, #3
 8003b80:	d155      	bne.n	8003c2e <tim_it_control+0x51e>
	{
		switch(pTIMHandle->TIMx)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	2b07      	cmp	r3, #7
 8003b8a:	f200 83da 	bhi.w	8004342 <tim_it_control+0xc32>
 8003b8e:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <tim_it_control+0x484>)
 8003b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b94:	08003bb5 	.word	0x08003bb5
 8003b98:	08003bc9 	.word	0x08003bc9
 8003b9c:	08003bdf 	.word	0x08003bdf
 8003ba0:	08003bf3 	.word	0x08003bf3
 8003ba4:	08003c07 	.word	0x08003c07
 8003ba8:	08004343 	.word	0x08004343
 8003bac:	08004343 	.word	0x08004343
 8003bb0:	08003c1b 	.word	0x08003c1b
		{
			case TIM_1:
			{
				TIM1->DIER.bit.cc3ie = State;
 8003bb4:	4a7d      	ldr	r2, [pc, #500]	; (8003dac <tim_it_control+0x69c>)
 8003bb6:	78bb      	ldrb	r3, [r7, #2]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	b2d9      	uxtb	r1, r3
 8003bbe:	8993      	ldrh	r3, [r2, #12]
 8003bc0:	f361 03c3 	bfi	r3, r1, #3, #1
 8003bc4:	8193      	strh	r3, [r2, #12]
				break;
 8003bc6:	e3d8      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_2:
			{
				TIM2->DIER.bit.cc3ie = State;
 8003bc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003bcc:	78bb      	ldrb	r3, [r7, #2]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	b2d9      	uxtb	r1, r3
 8003bd4:	8993      	ldrh	r3, [r2, #12]
 8003bd6:	f361 03c3 	bfi	r3, r1, #3, #1
 8003bda:	8193      	strh	r3, [r2, #12]
				break;
 8003bdc:	e3cd      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_3:
			{
				TIM3->DIER.bit.cc3ie = State;
 8003bde:	4a74      	ldr	r2, [pc, #464]	; (8003db0 <tim_it_control+0x6a0>)
 8003be0:	78bb      	ldrb	r3, [r7, #2]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	b2d9      	uxtb	r1, r3
 8003be8:	8993      	ldrh	r3, [r2, #12]
 8003bea:	f361 03c3 	bfi	r3, r1, #3, #1
 8003bee:	8193      	strh	r3, [r2, #12]
				break;
 8003bf0:	e3c3      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_4:
			{
				TIM4->DIER.bit.cc3ie = State;
 8003bf2:	4a70      	ldr	r2, [pc, #448]	; (8003db4 <tim_it_control+0x6a4>)
 8003bf4:	78bb      	ldrb	r3, [r7, #2]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	b2d9      	uxtb	r1, r3
 8003bfc:	8993      	ldrh	r3, [r2, #12]
 8003bfe:	f361 03c3 	bfi	r3, r1, #3, #1
 8003c02:	8193      	strh	r3, [r2, #12]
				break;
 8003c04:	e3b9      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_5:
			{
				TIM5->DIER.bit.cc3ie = State;
 8003c06:	4a6c      	ldr	r2, [pc, #432]	; (8003db8 <tim_it_control+0x6a8>)
 8003c08:	78bb      	ldrb	r3, [r7, #2]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	b2d9      	uxtb	r1, r3
 8003c10:	8993      	ldrh	r3, [r2, #12]
 8003c12:	f361 03c3 	bfi	r3, r1, #3, #1
 8003c16:	8193      	strh	r3, [r2, #12]
				break;
 8003c18:	e3af      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_8:
			{
				TIM8->DIER.bit.cc3ie = State;
 8003c1a:	4a68      	ldr	r2, [pc, #416]	; (8003dbc <tim_it_control+0x6ac>)
 8003c1c:	78bb      	ldrb	r3, [r7, #2]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	b2d9      	uxtb	r1, r3
 8003c24:	8993      	ldrh	r3, [r2, #12]
 8003c26:	f361 03c3 	bfi	r3, r1, #3, #1
 8003c2a:	8193      	strh	r3, [r2, #12]
				break;
 8003c2c:	e3a5      	b.n	800437a <tim_it_control+0xc6a>
			}
			default:
				break;
		}
	}else if(TIM_IT_CC4 == Interrupt)
 8003c2e:	78fb      	ldrb	r3, [r7, #3]
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d156      	bne.n	8003ce2 <tim_it_control+0x5d2>
	{
		switch(pTIMHandle->TIMx)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	2b07      	cmp	r3, #7
 8003c3c:	f200 8383 	bhi.w	8004346 <tim_it_control+0xc36>
 8003c40:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <tim_it_control+0x538>)
 8003c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c46:	bf00      	nop
 8003c48:	08003c69 	.word	0x08003c69
 8003c4c:	08003c7d 	.word	0x08003c7d
 8003c50:	08003c93 	.word	0x08003c93
 8003c54:	08003ca7 	.word	0x08003ca7
 8003c58:	08003cbb 	.word	0x08003cbb
 8003c5c:	08004347 	.word	0x08004347
 8003c60:	08004347 	.word	0x08004347
 8003c64:	08003ccf 	.word	0x08003ccf
		{
			case TIM_1:
			{
				TIM1->DIER.bit.cc4ie = State;
 8003c68:	4a50      	ldr	r2, [pc, #320]	; (8003dac <tim_it_control+0x69c>)
 8003c6a:	78bb      	ldrb	r3, [r7, #2]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	b2d9      	uxtb	r1, r3
 8003c72:	8993      	ldrh	r3, [r2, #12]
 8003c74:	f361 1304 	bfi	r3, r1, #4, #1
 8003c78:	8193      	strh	r3, [r2, #12]
				break;
 8003c7a:	e37e      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_2:
			{
				TIM2->DIER.bit.cc4ie = State;
 8003c7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c80:	78bb      	ldrb	r3, [r7, #2]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	b2d9      	uxtb	r1, r3
 8003c88:	8993      	ldrh	r3, [r2, #12]
 8003c8a:	f361 1304 	bfi	r3, r1, #4, #1
 8003c8e:	8193      	strh	r3, [r2, #12]
				break;
 8003c90:	e373      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_3:
			{
				TIM3->DIER.bit.cc4ie = State;
 8003c92:	4a47      	ldr	r2, [pc, #284]	; (8003db0 <tim_it_control+0x6a0>)
 8003c94:	78bb      	ldrb	r3, [r7, #2]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	b2d9      	uxtb	r1, r3
 8003c9c:	8993      	ldrh	r3, [r2, #12]
 8003c9e:	f361 1304 	bfi	r3, r1, #4, #1
 8003ca2:	8193      	strh	r3, [r2, #12]
				break;
 8003ca4:	e369      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_4:
			{
				TIM4->DIER.bit.cc4ie = State;
 8003ca6:	4a43      	ldr	r2, [pc, #268]	; (8003db4 <tim_it_control+0x6a4>)
 8003ca8:	78bb      	ldrb	r3, [r7, #2]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	b2d9      	uxtb	r1, r3
 8003cb0:	8993      	ldrh	r3, [r2, #12]
 8003cb2:	f361 1304 	bfi	r3, r1, #4, #1
 8003cb6:	8193      	strh	r3, [r2, #12]
				break;
 8003cb8:	e35f      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_5:
			{
				TIM5->DIER.bit.cc4ie = State;
 8003cba:	4a3f      	ldr	r2, [pc, #252]	; (8003db8 <tim_it_control+0x6a8>)
 8003cbc:	78bb      	ldrb	r3, [r7, #2]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	b2d9      	uxtb	r1, r3
 8003cc4:	8993      	ldrh	r3, [r2, #12]
 8003cc6:	f361 1304 	bfi	r3, r1, #4, #1
 8003cca:	8193      	strh	r3, [r2, #12]
				break;
 8003ccc:	e355      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_8:
			{
				TIM8->DIER.bit.cc4ie = State;
 8003cce:	4a3b      	ldr	r2, [pc, #236]	; (8003dbc <tim_it_control+0x6ac>)
 8003cd0:	78bb      	ldrb	r3, [r7, #2]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	b2d9      	uxtb	r1, r3
 8003cd8:	8993      	ldrh	r3, [r2, #12]
 8003cda:	f361 1304 	bfi	r3, r1, #4, #1
 8003cde:	8193      	strh	r3, [r2, #12]
				break;
 8003ce0:	e34b      	b.n	800437a <tim_it_control+0xc6a>
			}
			default:
				break;
		}
	}else if(TIM_IT_COM == Interrupt)
 8003ce2:	78fb      	ldrb	r3, [r7, #3]
 8003ce4:	2b05      	cmp	r3, #5
 8003ce6:	d11a      	bne.n	8003d1e <tim_it_control+0x60e>
	{
		switch(pTIMHandle->TIMx)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d002      	beq.n	8003cf6 <tim_it_control+0x5e6>
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d00a      	beq.n	8003d0a <tim_it_control+0x5fa>
			{
				TIM8->DIER.bit.comie = State;
				break;
			}
			default:
				break;
 8003cf4:	e341      	b.n	800437a <tim_it_control+0xc6a>
				TIM1->DIER.bit.comie = State;
 8003cf6:	4a2d      	ldr	r2, [pc, #180]	; (8003dac <tim_it_control+0x69c>)
 8003cf8:	78bb      	ldrb	r3, [r7, #2]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	b2d9      	uxtb	r1, r3
 8003d00:	8993      	ldrh	r3, [r2, #12]
 8003d02:	f361 1345 	bfi	r3, r1, #5, #1
 8003d06:	8193      	strh	r3, [r2, #12]
				break;
 8003d08:	e337      	b.n	800437a <tim_it_control+0xc6a>
				TIM8->DIER.bit.comie = State;
 8003d0a:	4a2c      	ldr	r2, [pc, #176]	; (8003dbc <tim_it_control+0x6ac>)
 8003d0c:	78bb      	ldrb	r3, [r7, #2]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	b2d9      	uxtb	r1, r3
 8003d14:	8993      	ldrh	r3, [r2, #12]
 8003d16:	f361 1345 	bfi	r3, r1, #5, #1
 8003d1a:	8193      	strh	r3, [r2, #12]
				break;
 8003d1c:	e32d      	b.n	800437a <tim_it_control+0xc6a>
		}
	}else if(TIM_IT_TRIGGER == Interrupt)
 8003d1e:	78fb      	ldrb	r3, [r7, #3]
 8003d20:	2b06      	cmp	r3, #6
 8003d22:	f040 808d 	bne.w	8003e40 <tim_it_control+0x730>
	{
		switch(pTIMHandle->TIMx)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	2b11      	cmp	r3, #17
 8003d2e:	f200 830c 	bhi.w	800434a <tim_it_control+0xc3a>
 8003d32:	a201      	add	r2, pc, #4	; (adr r2, 8003d38 <tim_it_control+0x628>)
 8003d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d38:	08003d81 	.word	0x08003d81
 8003d3c:	08003d95 	.word	0x08003d95
 8003d40:	08003dc9 	.word	0x08003dc9
 8003d44:	08003ddd 	.word	0x08003ddd
 8003d48:	08003df1 	.word	0x08003df1
 8003d4c:	0800434b 	.word	0x0800434b
 8003d50:	0800434b 	.word	0x0800434b
 8003d54:	08003e05 	.word	0x08003e05
 8003d58:	08003e19 	.word	0x08003e19
 8003d5c:	0800434b 	.word	0x0800434b
 8003d60:	0800434b 	.word	0x0800434b
 8003d64:	0800434b 	.word	0x0800434b
 8003d68:	0800434b 	.word	0x0800434b
 8003d6c:	0800434b 	.word	0x0800434b
 8003d70:	0800434b 	.word	0x0800434b
 8003d74:	0800434b 	.word	0x0800434b
 8003d78:	0800434b 	.word	0x0800434b
 8003d7c:	08003e2d 	.word	0x08003e2d
		{
			case TIM_1:
			{
				TIM1->DIER.bit.tie = State;
 8003d80:	4a0a      	ldr	r2, [pc, #40]	; (8003dac <tim_it_control+0x69c>)
 8003d82:	78bb      	ldrb	r3, [r7, #2]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	b2d9      	uxtb	r1, r3
 8003d8a:	8993      	ldrh	r3, [r2, #12]
 8003d8c:	f361 1386 	bfi	r3, r1, #6, #1
 8003d90:	8193      	strh	r3, [r2, #12]
				break;
 8003d92:	e2f2      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_2:
			{
				TIM2->DIER.bit.tie = State;
 8003d94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d98:	78bb      	ldrb	r3, [r7, #2]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	b2d9      	uxtb	r1, r3
 8003da0:	8993      	ldrh	r3, [r2, #12]
 8003da2:	f361 1386 	bfi	r3, r1, #6, #1
 8003da6:	8193      	strh	r3, [r2, #12]
				break;
 8003da8:	e2e7      	b.n	800437a <tim_it_control+0xc6a>
 8003daa:	bf00      	nop
 8003dac:	40010000 	.word	0x40010000
 8003db0:	40000400 	.word	0x40000400
 8003db4:	40000800 	.word	0x40000800
 8003db8:	40000c00 	.word	0x40000c00
 8003dbc:	40010400 	.word	0x40010400
 8003dc0:	40014000 	.word	0x40014000
 8003dc4:	40001800 	.word	0x40001800
			}
			case TIM_3:
			{
				TIM3->DIER.bit.tie = State;
 8003dc8:	4aae      	ldr	r2, [pc, #696]	; (8004084 <tim_it_control+0x974>)
 8003dca:	78bb      	ldrb	r3, [r7, #2]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	b2d9      	uxtb	r1, r3
 8003dd2:	8993      	ldrh	r3, [r2, #12]
 8003dd4:	f361 1386 	bfi	r3, r1, #6, #1
 8003dd8:	8193      	strh	r3, [r2, #12]
				break;
 8003dda:	e2ce      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_4:
			{
				TIM4->DIER.bit.tie = State;
 8003ddc:	4aaa      	ldr	r2, [pc, #680]	; (8004088 <tim_it_control+0x978>)
 8003dde:	78bb      	ldrb	r3, [r7, #2]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	b2d9      	uxtb	r1, r3
 8003de6:	8993      	ldrh	r3, [r2, #12]
 8003de8:	f361 1386 	bfi	r3, r1, #6, #1
 8003dec:	8193      	strh	r3, [r2, #12]
				break;
 8003dee:	e2c4      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_5:
			{
				TIM5->DIER.bit.tie = State;
 8003df0:	4aa6      	ldr	r2, [pc, #664]	; (800408c <tim_it_control+0x97c>)
 8003df2:	78bb      	ldrb	r3, [r7, #2]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	b2d9      	uxtb	r1, r3
 8003dfa:	8993      	ldrh	r3, [r2, #12]
 8003dfc:	f361 1386 	bfi	r3, r1, #6, #1
 8003e00:	8193      	strh	r3, [r2, #12]
				break;
 8003e02:	e2ba      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_8:
			{
				TIM8->DIER.bit.tie = State;
 8003e04:	4aa2      	ldr	r2, [pc, #648]	; (8004090 <tim_it_control+0x980>)
 8003e06:	78bb      	ldrb	r3, [r7, #2]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	b2d9      	uxtb	r1, r3
 8003e0e:	8993      	ldrh	r3, [r2, #12]
 8003e10:	f361 1386 	bfi	r3, r1, #6, #1
 8003e14:	8193      	strh	r3, [r2, #12]
				break;
 8003e16:	e2b0      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_9:
			{
				TIM9->DIER.bit.tie = State;
 8003e18:	4a9e      	ldr	r2, [pc, #632]	; (8004094 <tim_it_control+0x984>)
 8003e1a:	78bb      	ldrb	r3, [r7, #2]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	b2d9      	uxtb	r1, r3
 8003e22:	8993      	ldrh	r3, [r2, #12]
 8003e24:	f361 1386 	bfi	r3, r1, #6, #1
 8003e28:	8193      	strh	r3, [r2, #12]
				break;
 8003e2a:	e2a6      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_12:
			{
				TIM12->DIER.bit.tie = State;
 8003e2c:	4a9a      	ldr	r2, [pc, #616]	; (8004098 <tim_it_control+0x988>)
 8003e2e:	78bb      	ldrb	r3, [r7, #2]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	b2d9      	uxtb	r1, r3
 8003e36:	8993      	ldrh	r3, [r2, #12]
 8003e38:	f361 1386 	bfi	r3, r1, #6, #1
 8003e3c:	8193      	strh	r3, [r2, #12]
				break;
 8003e3e:	e29c      	b.n	800437a <tim_it_control+0xc6a>
			}
			default:
				break;
		}
	}else if(TIM_IT_BREAK == Interrupt)
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	2b07      	cmp	r3, #7
 8003e44:	d11a      	bne.n	8003e7c <tim_it_control+0x76c>
	{
		switch(pTIMHandle->TIMx)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d002      	beq.n	8003e54 <tim_it_control+0x744>
 8003e4e:	2b08      	cmp	r3, #8
 8003e50:	d00a      	beq.n	8003e68 <tim_it_control+0x758>
			{
				TIM8->DIER.bit.bie = State;
				break;
			}
			default:
				break;
 8003e52:	e292      	b.n	800437a <tim_it_control+0xc6a>
				TIM1->DIER.bit.bie = State;
 8003e54:	4a91      	ldr	r2, [pc, #580]	; (800409c <tim_it_control+0x98c>)
 8003e56:	78bb      	ldrb	r3, [r7, #2]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	b2d9      	uxtb	r1, r3
 8003e5e:	8993      	ldrh	r3, [r2, #12]
 8003e60:	f361 13c7 	bfi	r3, r1, #7, #1
 8003e64:	8193      	strh	r3, [r2, #12]
				break;
 8003e66:	e288      	b.n	800437a <tim_it_control+0xc6a>
				TIM8->DIER.bit.bie = State;
 8003e68:	4a89      	ldr	r2, [pc, #548]	; (8004090 <tim_it_control+0x980>)
 8003e6a:	78bb      	ldrb	r3, [r7, #2]
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	b2d9      	uxtb	r1, r3
 8003e72:	8993      	ldrh	r3, [r2, #12]
 8003e74:	f361 13c7 	bfi	r3, r1, #7, #1
 8003e78:	8193      	strh	r3, [r2, #12]
				break;
 8003e7a:	e27e      	b.n	800437a <tim_it_control+0xc6a>
		}
	}else if(TIM_IT_DMA_UPDATE == Interrupt)
 8003e7c:	78fb      	ldrb	r3, [r7, #3]
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d169      	bne.n	8003f56 <tim_it_control+0x846>
	{
		switch(pTIMHandle->TIMx)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	2b07      	cmp	r3, #7
 8003e8a:	f200 8260 	bhi.w	800434e <tim_it_control+0xc3e>
 8003e8e:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <tim_it_control+0x784>)
 8003e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e94:	08003eb5 	.word	0x08003eb5
 8003e98:	08003ec9 	.word	0x08003ec9
 8003e9c:	08003edf 	.word	0x08003edf
 8003ea0:	08003ef3 	.word	0x08003ef3
 8003ea4:	08003f07 	.word	0x08003f07
 8003ea8:	08003f1b 	.word	0x08003f1b
 8003eac:	08003f2f 	.word	0x08003f2f
 8003eb0:	08003f43 	.word	0x08003f43
		{
			case TIM_1:
			{
				TIM1->DIER.bit.ude = State;
 8003eb4:	4a79      	ldr	r2, [pc, #484]	; (800409c <tim_it_control+0x98c>)
 8003eb6:	78bb      	ldrb	r3, [r7, #2]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	b2d9      	uxtb	r1, r3
 8003ebe:	8993      	ldrh	r3, [r2, #12]
 8003ec0:	f361 2308 	bfi	r3, r1, #8, #1
 8003ec4:	8193      	strh	r3, [r2, #12]
				break;
 8003ec6:	e258      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_2:
			{
				TIM2->DIER.bit.ude = State;
 8003ec8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ecc:	78bb      	ldrb	r3, [r7, #2]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	b2d9      	uxtb	r1, r3
 8003ed4:	8993      	ldrh	r3, [r2, #12]
 8003ed6:	f361 2308 	bfi	r3, r1, #8, #1
 8003eda:	8193      	strh	r3, [r2, #12]
				break;
 8003edc:	e24d      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_3:
			{
				TIM3->DIER.bit.ude = State;
 8003ede:	4a69      	ldr	r2, [pc, #420]	; (8004084 <tim_it_control+0x974>)
 8003ee0:	78bb      	ldrb	r3, [r7, #2]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	b2d9      	uxtb	r1, r3
 8003ee8:	8993      	ldrh	r3, [r2, #12]
 8003eea:	f361 2308 	bfi	r3, r1, #8, #1
 8003eee:	8193      	strh	r3, [r2, #12]
				break;
 8003ef0:	e243      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_4:
			{
				TIM4->DIER.bit.ude = State;
 8003ef2:	4a65      	ldr	r2, [pc, #404]	; (8004088 <tim_it_control+0x978>)
 8003ef4:	78bb      	ldrb	r3, [r7, #2]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	b2d9      	uxtb	r1, r3
 8003efc:	8993      	ldrh	r3, [r2, #12]
 8003efe:	f361 2308 	bfi	r3, r1, #8, #1
 8003f02:	8193      	strh	r3, [r2, #12]
				break;
 8003f04:	e239      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_5:
			{
				TIM5->DIER.bit.ude = State;
 8003f06:	4a61      	ldr	r2, [pc, #388]	; (800408c <tim_it_control+0x97c>)
 8003f08:	78bb      	ldrb	r3, [r7, #2]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	b2d9      	uxtb	r1, r3
 8003f10:	8993      	ldrh	r3, [r2, #12]
 8003f12:	f361 2308 	bfi	r3, r1, #8, #1
 8003f16:	8193      	strh	r3, [r2, #12]
				break;
 8003f18:	e22f      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_6:
			{
				TIM6->DIER.bit.ude = State;
 8003f1a:	4a61      	ldr	r2, [pc, #388]	; (80040a0 <tim_it_control+0x990>)
 8003f1c:	78bb      	ldrb	r3, [r7, #2]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	b2d9      	uxtb	r1, r3
 8003f24:	8993      	ldrh	r3, [r2, #12]
 8003f26:	f361 2308 	bfi	r3, r1, #8, #1
 8003f2a:	8193      	strh	r3, [r2, #12]
				break;
 8003f2c:	e225      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_7:
			{
				TIM7->DIER.bit.ude = State;
 8003f2e:	4a5d      	ldr	r2, [pc, #372]	; (80040a4 <tim_it_control+0x994>)
 8003f30:	78bb      	ldrb	r3, [r7, #2]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	b2d9      	uxtb	r1, r3
 8003f38:	8993      	ldrh	r3, [r2, #12]
 8003f3a:	f361 2308 	bfi	r3, r1, #8, #1
 8003f3e:	8193      	strh	r3, [r2, #12]
				break;
 8003f40:	e21b      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_8:
			{
				TIM8->DIER.bit.ude = State;
 8003f42:	4a53      	ldr	r2, [pc, #332]	; (8004090 <tim_it_control+0x980>)
 8003f44:	78bb      	ldrb	r3, [r7, #2]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	b2d9      	uxtb	r1, r3
 8003f4c:	8993      	ldrh	r3, [r2, #12]
 8003f4e:	f361 2308 	bfi	r3, r1, #8, #1
 8003f52:	8193      	strh	r3, [r2, #12]
				break;
 8003f54:	e211      	b.n	800437a <tim_it_control+0xc6a>
			}
			default:
				break;
		}
	}else if(TIM_IT_DMA_CC1 == Interrupt)
 8003f56:	78fb      	ldrb	r3, [r7, #3]
 8003f58:	2b09      	cmp	r3, #9
 8003f5a:	d156      	bne.n	800400a <tim_it_control+0x8fa>
	{
		switch(pTIMHandle->TIMx)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	3b01      	subs	r3, #1
 8003f62:	2b07      	cmp	r3, #7
 8003f64:	f200 81f5 	bhi.w	8004352 <tim_it_control+0xc42>
 8003f68:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <tim_it_control+0x860>)
 8003f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6e:	bf00      	nop
 8003f70:	08003f91 	.word	0x08003f91
 8003f74:	08003fa5 	.word	0x08003fa5
 8003f78:	08003fbb 	.word	0x08003fbb
 8003f7c:	08003fcf 	.word	0x08003fcf
 8003f80:	08003fe3 	.word	0x08003fe3
 8003f84:	08004353 	.word	0x08004353
 8003f88:	08004353 	.word	0x08004353
 8003f8c:	08003ff7 	.word	0x08003ff7
		{
			case TIM_1:
			{
				TIM1->DIER.bit.cc1de = State;
 8003f90:	4a42      	ldr	r2, [pc, #264]	; (800409c <tim_it_control+0x98c>)
 8003f92:	78bb      	ldrb	r3, [r7, #2]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	b2d9      	uxtb	r1, r3
 8003f9a:	8993      	ldrh	r3, [r2, #12]
 8003f9c:	f361 2349 	bfi	r3, r1, #9, #1
 8003fa0:	8193      	strh	r3, [r2, #12]
				break;
 8003fa2:	e1ea      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_2:
			{
				TIM2->DIER.bit.cc1de = State;
 8003fa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003fa8:	78bb      	ldrb	r3, [r7, #2]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	b2d9      	uxtb	r1, r3
 8003fb0:	8993      	ldrh	r3, [r2, #12]
 8003fb2:	f361 2349 	bfi	r3, r1, #9, #1
 8003fb6:	8193      	strh	r3, [r2, #12]
				break;
 8003fb8:	e1df      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_3:
			{
				TIM3->DIER.bit.cc1de = State;
 8003fba:	4a32      	ldr	r2, [pc, #200]	; (8004084 <tim_it_control+0x974>)
 8003fbc:	78bb      	ldrb	r3, [r7, #2]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	b2d9      	uxtb	r1, r3
 8003fc4:	8993      	ldrh	r3, [r2, #12]
 8003fc6:	f361 2349 	bfi	r3, r1, #9, #1
 8003fca:	8193      	strh	r3, [r2, #12]
				break;
 8003fcc:	e1d5      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_4:
			{
				TIM4->DIER.bit.cc1de = State;
 8003fce:	4a2e      	ldr	r2, [pc, #184]	; (8004088 <tim_it_control+0x978>)
 8003fd0:	78bb      	ldrb	r3, [r7, #2]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	b2d9      	uxtb	r1, r3
 8003fd8:	8993      	ldrh	r3, [r2, #12]
 8003fda:	f361 2349 	bfi	r3, r1, #9, #1
 8003fde:	8193      	strh	r3, [r2, #12]
				break;
 8003fe0:	e1cb      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_5:
			{
				TIM5->DIER.bit.cc1de = State;
 8003fe2:	4a2a      	ldr	r2, [pc, #168]	; (800408c <tim_it_control+0x97c>)
 8003fe4:	78bb      	ldrb	r3, [r7, #2]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	b2d9      	uxtb	r1, r3
 8003fec:	8993      	ldrh	r3, [r2, #12]
 8003fee:	f361 2349 	bfi	r3, r1, #9, #1
 8003ff2:	8193      	strh	r3, [r2, #12]
				break;
 8003ff4:	e1c1      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_8:
			{
				TIM8->DIER.bit.cc1de = State;
 8003ff6:	4a26      	ldr	r2, [pc, #152]	; (8004090 <tim_it_control+0x980>)
 8003ff8:	78bb      	ldrb	r3, [r7, #2]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	b2d9      	uxtb	r1, r3
 8004000:	8993      	ldrh	r3, [r2, #12]
 8004002:	f361 2349 	bfi	r3, r1, #9, #1
 8004006:	8193      	strh	r3, [r2, #12]
				break;
 8004008:	e1b7      	b.n	800437a <tim_it_control+0xc6a>
			}
			default:
				break;
		}
	}else if(TIM_IT_DMA_CC2 == Interrupt)
 800400a:	78fb      	ldrb	r3, [r7, #3]
 800400c:	2b10      	cmp	r3, #16
 800400e:	d169      	bne.n	80040e4 <tim_it_control+0x9d4>
	{
		switch(pTIMHandle->TIMx)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	3b01      	subs	r3, #1
 8004016:	2b07      	cmp	r3, #7
 8004018:	f200 819d 	bhi.w	8004356 <tim_it_control+0xc46>
 800401c:	a201      	add	r2, pc, #4	; (adr r2, 8004024 <tim_it_control+0x914>)
 800401e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004022:	bf00      	nop
 8004024:	08004045 	.word	0x08004045
 8004028:	08004059 	.word	0x08004059
 800402c:	0800406f 	.word	0x0800406f
 8004030:	080040a9 	.word	0x080040a9
 8004034:	080040bd 	.word	0x080040bd
 8004038:	08004357 	.word	0x08004357
 800403c:	08004357 	.word	0x08004357
 8004040:	080040d1 	.word	0x080040d1
		{
			case TIM_1:
			{
				TIM1->DIER.bit.cc2de = State;
 8004044:	4a15      	ldr	r2, [pc, #84]	; (800409c <tim_it_control+0x98c>)
 8004046:	78bb      	ldrb	r3, [r7, #2]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	b2d9      	uxtb	r1, r3
 800404e:	8993      	ldrh	r3, [r2, #12]
 8004050:	f361 238a 	bfi	r3, r1, #10, #1
 8004054:	8193      	strh	r3, [r2, #12]
				break;
 8004056:	e190      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_2:
			{
				TIM2->DIER.bit.cc2de = State;
 8004058:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800405c:	78bb      	ldrb	r3, [r7, #2]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	b2d9      	uxtb	r1, r3
 8004064:	8993      	ldrh	r3, [r2, #12]
 8004066:	f361 238a 	bfi	r3, r1, #10, #1
 800406a:	8193      	strh	r3, [r2, #12]
				break;
 800406c:	e185      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_3:
			{
				TIM3->DIER.bit.cc2de = State;
 800406e:	4a05      	ldr	r2, [pc, #20]	; (8004084 <tim_it_control+0x974>)
 8004070:	78bb      	ldrb	r3, [r7, #2]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	b2d9      	uxtb	r1, r3
 8004078:	8993      	ldrh	r3, [r2, #12]
 800407a:	f361 238a 	bfi	r3, r1, #10, #1
 800407e:	8193      	strh	r3, [r2, #12]
				break;
 8004080:	e17b      	b.n	800437a <tim_it_control+0xc6a>
 8004082:	bf00      	nop
 8004084:	40000400 	.word	0x40000400
 8004088:	40000800 	.word	0x40000800
 800408c:	40000c00 	.word	0x40000c00
 8004090:	40010400 	.word	0x40010400
 8004094:	40014000 	.word	0x40014000
 8004098:	40001800 	.word	0x40001800
 800409c:	40010000 	.word	0x40010000
 80040a0:	40001000 	.word	0x40001000
 80040a4:	40001400 	.word	0x40001400
			}
			case TIM_4:
			{
				TIM4->DIER.bit.cc2de = State;
 80040a8:	4aae      	ldr	r2, [pc, #696]	; (8004364 <tim_it_control+0xc54>)
 80040aa:	78bb      	ldrb	r3, [r7, #2]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	b2d9      	uxtb	r1, r3
 80040b2:	8993      	ldrh	r3, [r2, #12]
 80040b4:	f361 238a 	bfi	r3, r1, #10, #1
 80040b8:	8193      	strh	r3, [r2, #12]
				break;
 80040ba:	e15e      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_5:
			{
				TIM5->DIER.bit.cc2de = State;
 80040bc:	4aaa      	ldr	r2, [pc, #680]	; (8004368 <tim_it_control+0xc58>)
 80040be:	78bb      	ldrb	r3, [r7, #2]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	b2d9      	uxtb	r1, r3
 80040c6:	8993      	ldrh	r3, [r2, #12]
 80040c8:	f361 238a 	bfi	r3, r1, #10, #1
 80040cc:	8193      	strh	r3, [r2, #12]
				break;
 80040ce:	e154      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_8:
			{
				TIM8->DIER.bit.cc2de = State;
 80040d0:	4aa6      	ldr	r2, [pc, #664]	; (800436c <tim_it_control+0xc5c>)
 80040d2:	78bb      	ldrb	r3, [r7, #2]
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	b2d9      	uxtb	r1, r3
 80040da:	8993      	ldrh	r3, [r2, #12]
 80040dc:	f361 238a 	bfi	r3, r1, #10, #1
 80040e0:	8193      	strh	r3, [r2, #12]
				break;
 80040e2:	e14a      	b.n	800437a <tim_it_control+0xc6a>
			}
			default:
				break;
		}
	}else if(TIM_IT_DMA_CC3 == Interrupt)
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	2b11      	cmp	r3, #17
 80040e8:	d155      	bne.n	8004196 <tim_it_control+0xa86>
	{
		switch(pTIMHandle->TIMx)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	2b07      	cmp	r3, #7
 80040f2:	f200 8132 	bhi.w	800435a <tim_it_control+0xc4a>
 80040f6:	a201      	add	r2, pc, #4	; (adr r2, 80040fc <tim_it_control+0x9ec>)
 80040f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fc:	0800411d 	.word	0x0800411d
 8004100:	08004131 	.word	0x08004131
 8004104:	08004147 	.word	0x08004147
 8004108:	0800415b 	.word	0x0800415b
 800410c:	0800416f 	.word	0x0800416f
 8004110:	0800435b 	.word	0x0800435b
 8004114:	0800435b 	.word	0x0800435b
 8004118:	08004183 	.word	0x08004183
		{
			case TIM_1:
			{
				TIM1->DIER.bit.cc3de = State;
 800411c:	4a94      	ldr	r2, [pc, #592]	; (8004370 <tim_it_control+0xc60>)
 800411e:	78bb      	ldrb	r3, [r7, #2]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	b2d9      	uxtb	r1, r3
 8004126:	8993      	ldrh	r3, [r2, #12]
 8004128:	f361 23cb 	bfi	r3, r1, #11, #1
 800412c:	8193      	strh	r3, [r2, #12]
				break;
 800412e:	e124      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_2:
			{
				TIM2->DIER.bit.cc3de = State;
 8004130:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004134:	78bb      	ldrb	r3, [r7, #2]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	b2d9      	uxtb	r1, r3
 800413c:	8993      	ldrh	r3, [r2, #12]
 800413e:	f361 23cb 	bfi	r3, r1, #11, #1
 8004142:	8193      	strh	r3, [r2, #12]
				break;
 8004144:	e119      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_3:
			{
				TIM3->DIER.bit.cc3de = State;
 8004146:	4a8b      	ldr	r2, [pc, #556]	; (8004374 <tim_it_control+0xc64>)
 8004148:	78bb      	ldrb	r3, [r7, #2]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	b2d9      	uxtb	r1, r3
 8004150:	8993      	ldrh	r3, [r2, #12]
 8004152:	f361 23cb 	bfi	r3, r1, #11, #1
 8004156:	8193      	strh	r3, [r2, #12]
				break;
 8004158:	e10f      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_4:
			{
				TIM4->DIER.bit.cc3de = State;
 800415a:	4a82      	ldr	r2, [pc, #520]	; (8004364 <tim_it_control+0xc54>)
 800415c:	78bb      	ldrb	r3, [r7, #2]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	b2d9      	uxtb	r1, r3
 8004164:	8993      	ldrh	r3, [r2, #12]
 8004166:	f361 23cb 	bfi	r3, r1, #11, #1
 800416a:	8193      	strh	r3, [r2, #12]
				break;
 800416c:	e105      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_5:
			{
				TIM5->DIER.bit.cc3de = State;
 800416e:	4a7e      	ldr	r2, [pc, #504]	; (8004368 <tim_it_control+0xc58>)
 8004170:	78bb      	ldrb	r3, [r7, #2]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	b2d9      	uxtb	r1, r3
 8004178:	8993      	ldrh	r3, [r2, #12]
 800417a:	f361 23cb 	bfi	r3, r1, #11, #1
 800417e:	8193      	strh	r3, [r2, #12]
				break;
 8004180:	e0fb      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_8:
			{
				TIM8->DIER.bit.cc3de = State;
 8004182:	4a7a      	ldr	r2, [pc, #488]	; (800436c <tim_it_control+0xc5c>)
 8004184:	78bb      	ldrb	r3, [r7, #2]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	b2d9      	uxtb	r1, r3
 800418c:	8993      	ldrh	r3, [r2, #12]
 800418e:	f361 23cb 	bfi	r3, r1, #11, #1
 8004192:	8193      	strh	r3, [r2, #12]
				break;
 8004194:	e0f1      	b.n	800437a <tim_it_control+0xc6a>
			}
			default:
				break;
		}
	}else if(TIM_IT_DMA_CC4 == Interrupt)
 8004196:	78fb      	ldrb	r3, [r7, #3]
 8004198:	2b12      	cmp	r3, #18
 800419a:	d156      	bne.n	800424a <tim_it_control+0xb3a>
	{
		switch(pTIMHandle->TIMx)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	2b07      	cmp	r3, #7
 80041a4:	f200 80db 	bhi.w	800435e <tim_it_control+0xc4e>
 80041a8:	a201      	add	r2, pc, #4	; (adr r2, 80041b0 <tim_it_control+0xaa0>)
 80041aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ae:	bf00      	nop
 80041b0:	080041d1 	.word	0x080041d1
 80041b4:	080041e5 	.word	0x080041e5
 80041b8:	080041fb 	.word	0x080041fb
 80041bc:	0800420f 	.word	0x0800420f
 80041c0:	08004223 	.word	0x08004223
 80041c4:	0800435f 	.word	0x0800435f
 80041c8:	0800435f 	.word	0x0800435f
 80041cc:	08004237 	.word	0x08004237
		{
			case TIM_1:
			{
				TIM1->DIER.bit.cc4de = State;
 80041d0:	4a67      	ldr	r2, [pc, #412]	; (8004370 <tim_it_control+0xc60>)
 80041d2:	78bb      	ldrb	r3, [r7, #2]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	b2d9      	uxtb	r1, r3
 80041da:	8993      	ldrh	r3, [r2, #12]
 80041dc:	f361 330c 	bfi	r3, r1, #12, #1
 80041e0:	8193      	strh	r3, [r2, #12]
				break;
 80041e2:	e0ca      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_2:
			{
				TIM2->DIER.bit.cc4de = State;
 80041e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80041e8:	78bb      	ldrb	r3, [r7, #2]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	b2d9      	uxtb	r1, r3
 80041f0:	8993      	ldrh	r3, [r2, #12]
 80041f2:	f361 330c 	bfi	r3, r1, #12, #1
 80041f6:	8193      	strh	r3, [r2, #12]
				break;
 80041f8:	e0bf      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_3:
			{
				TIM3->DIER.bit.cc4de = State;
 80041fa:	4a5e      	ldr	r2, [pc, #376]	; (8004374 <tim_it_control+0xc64>)
 80041fc:	78bb      	ldrb	r3, [r7, #2]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	b2d9      	uxtb	r1, r3
 8004204:	8993      	ldrh	r3, [r2, #12]
 8004206:	f361 330c 	bfi	r3, r1, #12, #1
 800420a:	8193      	strh	r3, [r2, #12]
				break;
 800420c:	e0b5      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_4:
			{
				TIM4->DIER.bit.cc4de = State;
 800420e:	4a55      	ldr	r2, [pc, #340]	; (8004364 <tim_it_control+0xc54>)
 8004210:	78bb      	ldrb	r3, [r7, #2]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	b2d9      	uxtb	r1, r3
 8004218:	8993      	ldrh	r3, [r2, #12]
 800421a:	f361 330c 	bfi	r3, r1, #12, #1
 800421e:	8193      	strh	r3, [r2, #12]
				break;
 8004220:	e0ab      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_5:
			{
				TIM5->DIER.bit.cc4de = State;
 8004222:	4a51      	ldr	r2, [pc, #324]	; (8004368 <tim_it_control+0xc58>)
 8004224:	78bb      	ldrb	r3, [r7, #2]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	b2d9      	uxtb	r1, r3
 800422c:	8993      	ldrh	r3, [r2, #12]
 800422e:	f361 330c 	bfi	r3, r1, #12, #1
 8004232:	8193      	strh	r3, [r2, #12]
				break;
 8004234:	e0a1      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_8:
			{
				TIM8->DIER.bit.cc4de = State;
 8004236:	4a4d      	ldr	r2, [pc, #308]	; (800436c <tim_it_control+0xc5c>)
 8004238:	78bb      	ldrb	r3, [r7, #2]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	b2d9      	uxtb	r1, r3
 8004240:	8993      	ldrh	r3, [r2, #12]
 8004242:	f361 330c 	bfi	r3, r1, #12, #1
 8004246:	8193      	strh	r3, [r2, #12]
				break;
 8004248:	e097      	b.n	800437a <tim_it_control+0xc6a>
			}
			default:
				break;
		}
	}else if(TIM_IT_DMA_COM == Interrupt)
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	2b13      	cmp	r3, #19
 800424e:	d11a      	bne.n	8004286 <tim_it_control+0xb76>
	{
		switch(pTIMHandle->TIMx)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d002      	beq.n	800425e <tim_it_control+0xb4e>
 8004258:	2b08      	cmp	r3, #8
 800425a:	d00a      	beq.n	8004272 <tim_it_control+0xb62>
			{
				TIM8->DIER.bit.comde = State;
				break;
			}
			default:
				break;
 800425c:	e08d      	b.n	800437a <tim_it_control+0xc6a>
				TIM1->DIER.bit.comde = State;
 800425e:	4a44      	ldr	r2, [pc, #272]	; (8004370 <tim_it_control+0xc60>)
 8004260:	78bb      	ldrb	r3, [r7, #2]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	b2d9      	uxtb	r1, r3
 8004268:	8993      	ldrh	r3, [r2, #12]
 800426a:	f361 334d 	bfi	r3, r1, #13, #1
 800426e:	8193      	strh	r3, [r2, #12]
				break;
 8004270:	e083      	b.n	800437a <tim_it_control+0xc6a>
				TIM8->DIER.bit.comde = State;
 8004272:	4a3e      	ldr	r2, [pc, #248]	; (800436c <tim_it_control+0xc5c>)
 8004274:	78bb      	ldrb	r3, [r7, #2]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	b2d9      	uxtb	r1, r3
 800427c:	8993      	ldrh	r3, [r2, #12]
 800427e:	f361 334d 	bfi	r3, r1, #13, #1
 8004282:	8193      	strh	r3, [r2, #12]
				break;
 8004284:	e079      	b.n	800437a <tim_it_control+0xc6a>
		}
	}else if(TIM_IT_DMA_TRIGGER == Interrupt)
 8004286:	78fb      	ldrb	r3, [r7, #3]
 8004288:	2b14      	cmp	r3, #20
 800428a:	d177      	bne.n	800437c <tim_it_control+0xc6c>
	{
		switch(pTIMHandle->TIMx)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	3b01      	subs	r3, #1
 8004292:	2b07      	cmp	r3, #7
 8004294:	d870      	bhi.n	8004378 <tim_it_control+0xc68>
 8004296:	a201      	add	r2, pc, #4	; (adr r2, 800429c <tim_it_control+0xb8c>)
 8004298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429c:	080042bd 	.word	0x080042bd
 80042a0:	080042d1 	.word	0x080042d1
 80042a4:	080042e7 	.word	0x080042e7
 80042a8:	080042fb 	.word	0x080042fb
 80042ac:	0800430f 	.word	0x0800430f
 80042b0:	08004379 	.word	0x08004379
 80042b4:	08004379 	.word	0x08004379
 80042b8:	08004323 	.word	0x08004323
		{
			case TIM_1:
			{
				TIM1->DIER.bit.tde = State;
 80042bc:	4a2c      	ldr	r2, [pc, #176]	; (8004370 <tim_it_control+0xc60>)
 80042be:	78bb      	ldrb	r3, [r7, #2]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	b2d9      	uxtb	r1, r3
 80042c6:	8993      	ldrh	r3, [r2, #12]
 80042c8:	f361 338e 	bfi	r3, r1, #14, #1
 80042cc:	8193      	strh	r3, [r2, #12]
				break;
 80042ce:	e054      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_2:
			{
				TIM2->DIER.bit.tde = State;
 80042d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042d4:	78bb      	ldrb	r3, [r7, #2]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	b2d9      	uxtb	r1, r3
 80042dc:	8993      	ldrh	r3, [r2, #12]
 80042de:	f361 338e 	bfi	r3, r1, #14, #1
 80042e2:	8193      	strh	r3, [r2, #12]
				break;
 80042e4:	e049      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_3:
			{
				TIM3->DIER.bit.tde = State;
 80042e6:	4a23      	ldr	r2, [pc, #140]	; (8004374 <tim_it_control+0xc64>)
 80042e8:	78bb      	ldrb	r3, [r7, #2]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	b2d9      	uxtb	r1, r3
 80042f0:	8993      	ldrh	r3, [r2, #12]
 80042f2:	f361 338e 	bfi	r3, r1, #14, #1
 80042f6:	8193      	strh	r3, [r2, #12]
				break;
 80042f8:	e03f      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_4:
			{
				TIM4->DIER.bit.tde = State;
 80042fa:	4a1a      	ldr	r2, [pc, #104]	; (8004364 <tim_it_control+0xc54>)
 80042fc:	78bb      	ldrb	r3, [r7, #2]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	b2d9      	uxtb	r1, r3
 8004304:	8993      	ldrh	r3, [r2, #12]
 8004306:	f361 338e 	bfi	r3, r1, #14, #1
 800430a:	8193      	strh	r3, [r2, #12]
				break;
 800430c:	e035      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_5:
			{
				TIM5->DIER.bit.tde = State;
 800430e:	4a16      	ldr	r2, [pc, #88]	; (8004368 <tim_it_control+0xc58>)
 8004310:	78bb      	ldrb	r3, [r7, #2]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	b2d9      	uxtb	r1, r3
 8004318:	8993      	ldrh	r3, [r2, #12]
 800431a:	f361 338e 	bfi	r3, r1, #14, #1
 800431e:	8193      	strh	r3, [r2, #12]
				break;
 8004320:	e02b      	b.n	800437a <tim_it_control+0xc6a>
			}
			case TIM_8:
			{
				TIM8->DIER.bit.tde = State;
 8004322:	4a12      	ldr	r2, [pc, #72]	; (800436c <tim_it_control+0xc5c>)
 8004324:	78bb      	ldrb	r3, [r7, #2]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	b2d9      	uxtb	r1, r3
 800432c:	8993      	ldrh	r3, [r2, #12]
 800432e:	f361 338e 	bfi	r3, r1, #14, #1
 8004332:	8193      	strh	r3, [r2, #12]
				break;
 8004334:	e021      	b.n	800437a <tim_it_control+0xc6a>
				break;
 8004336:	bf00      	nop
 8004338:	e01f      	b.n	800437a <tim_it_control+0xc6a>
				break;
 800433a:	bf00      	nop
 800433c:	e01d      	b.n	800437a <tim_it_control+0xc6a>
				break;
 800433e:	bf00      	nop
 8004340:	e01b      	b.n	800437a <tim_it_control+0xc6a>
				break;
 8004342:	bf00      	nop
 8004344:	e019      	b.n	800437a <tim_it_control+0xc6a>
				break;
 8004346:	bf00      	nop
 8004348:	e017      	b.n	800437a <tim_it_control+0xc6a>
				break;
 800434a:	bf00      	nop
 800434c:	e015      	b.n	800437a <tim_it_control+0xc6a>
				break;
 800434e:	bf00      	nop
 8004350:	e013      	b.n	800437a <tim_it_control+0xc6a>
				break;
 8004352:	bf00      	nop
 8004354:	e011      	b.n	800437a <tim_it_control+0xc6a>
				break;
 8004356:	bf00      	nop
 8004358:	e00f      	b.n	800437a <tim_it_control+0xc6a>
				break;
 800435a:	bf00      	nop
 800435c:	e00d      	b.n	800437a <tim_it_control+0xc6a>
				break;
 800435e:	bf00      	nop
 8004360:	e00b      	b.n	800437a <tim_it_control+0xc6a>
 8004362:	bf00      	nop
 8004364:	40000800 	.word	0x40000800
 8004368:	40000c00 	.word	0x40000c00
 800436c:	40010400 	.word	0x40010400
 8004370:	40010000 	.word	0x40010000
 8004374:	40000400 	.word	0x40000400
			}
			default:
				break;
 8004378:	bf00      	nop
		}
	}

		return;
 800437a:	bf00      	nop
 800437c:	bf00      	nop
}
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	bc80      	pop	{r7}
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop

08004388 <tim_read_ccmrx>:


uint32_t tim_read_ccmrx(TIM_Handle_t *pTIMHandle, uint8_t TIM_CCMRx)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	70fb      	strb	r3, [r7, #3]
	if(TIM_CCMR1 == TIM_CCMRx)
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d156      	bne.n	8004448 <tim_read_ccmrx+0xc0>
	{
		switch(pTIMHandle->TIMx)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	3b01      	subs	r3, #1
 80043a0:	2b13      	cmp	r3, #19
 80043a2:	d850      	bhi.n	8004446 <tim_read_ccmrx+0xbe>
 80043a4:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <tim_read_ccmrx+0x24>)
 80043a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043aa:	bf00      	nop
 80043ac:	080043fd 	.word	0x080043fd
 80043b0:	08004403 	.word	0x08004403
 80043b4:	0800440b 	.word	0x0800440b
 80043b8:	08004411 	.word	0x08004411
 80043bc:	08004417 	.word	0x08004417
 80043c0:	08004447 	.word	0x08004447
 80043c4:	08004447 	.word	0x08004447
 80043c8:	0800441d 	.word	0x0800441d
 80043cc:	08004423 	.word	0x08004423
 80043d0:	08004447 	.word	0x08004447
 80043d4:	08004447 	.word	0x08004447
 80043d8:	08004447 	.word	0x08004447
 80043dc:	08004447 	.word	0x08004447
 80043e0:	08004447 	.word	0x08004447
 80043e4:	08004447 	.word	0x08004447
 80043e8:	08004429 	.word	0x08004429
 80043ec:	0800442f 	.word	0x0800442f
 80043f0:	08004435 	.word	0x08004435
 80043f4:	0800443b 	.word	0x0800443b
 80043f8:	08004441 	.word	0x08004441
		{
			case TIM_1:
			{
				return TIM1->CCMR1.reg;
 80043fc:	4b2d      	ldr	r3, [pc, #180]	; (80044b4 <tim_read_ccmrx+0x12c>)
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	e053      	b.n	80044aa <tim_read_ccmrx+0x122>
				break;
			}
			case TIM_2:
			{
				return TIM2->CCMR1.reg;
 8004402:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	e04f      	b.n	80044aa <tim_read_ccmrx+0x122>
				break;
			}
			case TIM_3:
			{
				return TIM3->CCMR1.reg;
 800440a:	4b2b      	ldr	r3, [pc, #172]	; (80044b8 <tim_read_ccmrx+0x130>)
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	e04c      	b.n	80044aa <tim_read_ccmrx+0x122>
				break;
			}
			case TIM_4:
			{
				return TIM4->CCMR1.reg;
 8004410:	4b2a      	ldr	r3, [pc, #168]	; (80044bc <tim_read_ccmrx+0x134>)
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	e049      	b.n	80044aa <tim_read_ccmrx+0x122>
				break;
			}
			case TIM_5:
			{
				return TIM5->CCMR1.reg;
 8004416:	4b2a      	ldr	r3, [pc, #168]	; (80044c0 <tim_read_ccmrx+0x138>)
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	e046      	b.n	80044aa <tim_read_ccmrx+0x122>
				break;
			}
			case TIM_8:
			{
				return TIM8->CCMR1.reg;
 800441c:	4b29      	ldr	r3, [pc, #164]	; (80044c4 <tim_read_ccmrx+0x13c>)
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	e043      	b.n	80044aa <tim_read_ccmrx+0x122>
				break;
			}
			case TIM_9:
			{
				return TIM9->CCMR1.reg;
 8004422:	4b29      	ldr	r3, [pc, #164]	; (80044c8 <tim_read_ccmrx+0x140>)
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	e040      	b.n	80044aa <tim_read_ccmrx+0x122>
				break;
			}
			case TIM_10:
			{
				return TIM10->CCMR1.reg;
 8004428:	4b28      	ldr	r3, [pc, #160]	; (80044cc <tim_read_ccmrx+0x144>)
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	e03d      	b.n	80044aa <tim_read_ccmrx+0x122>
				break;
			}
			case TIM_11:
			{
				return TIM11->CCMR1.reg;
 800442e:	4b28      	ldr	r3, [pc, #160]	; (80044d0 <tim_read_ccmrx+0x148>)
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	e03a      	b.n	80044aa <tim_read_ccmrx+0x122>
				break;
			}
			case TIM_12:
			{
				return TIM12->CCMR1.reg;
 8004434:	4b27      	ldr	r3, [pc, #156]	; (80044d4 <tim_read_ccmrx+0x14c>)
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	e037      	b.n	80044aa <tim_read_ccmrx+0x122>
				break;
			}
			case TIM_13:
			{
				return TIM13->CCMR1.reg;
 800443a:	4b27      	ldr	r3, [pc, #156]	; (80044d8 <tim_read_ccmrx+0x150>)
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	e034      	b.n	80044aa <tim_read_ccmrx+0x122>
				break;
			}
			case TIM_14:
			{
				return TIM14->CCMR1.reg;
 8004440:	4b26      	ldr	r3, [pc, #152]	; (80044dc <tim_read_ccmrx+0x154>)
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	e031      	b.n	80044aa <tim_read_ccmrx+0x122>
				break;
			}
			default:
				break;
 8004446:	bf00      	nop
		}
	}

	if(TIM_CCMR2 == TIM_CCMRx)
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d12c      	bne.n	80044a8 <tim_read_ccmrx+0x120>
	{
		switch(pTIMHandle->TIMx)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	3b01      	subs	r3, #1
 8004454:	2b07      	cmp	r3, #7
 8004456:	d826      	bhi.n	80044a6 <tim_read_ccmrx+0x11e>
 8004458:	a201      	add	r2, pc, #4	; (adr r2, 8004460 <tim_read_ccmrx+0xd8>)
 800445a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445e:	bf00      	nop
 8004460:	08004481 	.word	0x08004481
 8004464:	08004487 	.word	0x08004487
 8004468:	0800448f 	.word	0x0800448f
 800446c:	08004495 	.word	0x08004495
 8004470:	0800449b 	.word	0x0800449b
 8004474:	080044a7 	.word	0x080044a7
 8004478:	080044a7 	.word	0x080044a7
 800447c:	080044a1 	.word	0x080044a1
		{
			case TIM_1:
			{
				return TIM1->CCMR2.reg;
 8004480:	4b0c      	ldr	r3, [pc, #48]	; (80044b4 <tim_read_ccmrx+0x12c>)
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	e011      	b.n	80044aa <tim_read_ccmrx+0x122>
				break;
			}
			case TIM_2:
			{
				return TIM2->CCMR2.reg;
 8004486:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	e00d      	b.n	80044aa <tim_read_ccmrx+0x122>
				break;
			}
			case TIM_3:
			{
				return TIM3->CCMR2.reg;
 800448e:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <tim_read_ccmrx+0x130>)
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	e00a      	b.n	80044aa <tim_read_ccmrx+0x122>
				break;
			}
			case TIM_4:
			{
				return TIM4->CCMR2.reg;
 8004494:	4b09      	ldr	r3, [pc, #36]	; (80044bc <tim_read_ccmrx+0x134>)
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	e007      	b.n	80044aa <tim_read_ccmrx+0x122>
				break;
			}
			case TIM_5:
			{
				return TIM5->CCMR2.reg;
 800449a:	4b09      	ldr	r3, [pc, #36]	; (80044c0 <tim_read_ccmrx+0x138>)
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	e004      	b.n	80044aa <tim_read_ccmrx+0x122>
				break;
			}
			case TIM_8:
			{
				return TIM8->CCMR2.reg;
 80044a0:	4b08      	ldr	r3, [pc, #32]	; (80044c4 <tim_read_ccmrx+0x13c>)
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	e001      	b.n	80044aa <tim_read_ccmrx+0x122>
				break;
			}
			default:
				break;
 80044a6:	bf00      	nop
		}
	}

	//wrong input
	return 0x0U;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr
 80044b4:	40010000 	.word	0x40010000
 80044b8:	40000400 	.word	0x40000400
 80044bc:	40000800 	.word	0x40000800
 80044c0:	40000c00 	.word	0x40000c00
 80044c4:	40010400 	.word	0x40010400
 80044c8:	40014000 	.word	0x40014000
 80044cc:	40014400 	.word	0x40014400
 80044d0:	40014800 	.word	0x40014800
 80044d4:	40001800 	.word	0x40001800
 80044d8:	40001c00 	.word	0x40001c00
 80044dc:	40002000 	.word	0x40002000

080044e0 <tim_read_ccer>:


uint32_t tim_read_ccer(TIM_Handle_t *pTIMHandle)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
	switch(pTIMHandle->TIMx)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	3b01      	subs	r3, #1
 80044ee:	2b13      	cmp	r3, #19
 80044f0:	d84f      	bhi.n	8004592 <tim_read_ccer+0xb2>
 80044f2:	a201      	add	r2, pc, #4	; (adr r2, 80044f8 <tim_read_ccer+0x18>)
 80044f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f8:	08004549 	.word	0x08004549
 80044fc:	0800454f 	.word	0x0800454f
 8004500:	08004557 	.word	0x08004557
 8004504:	0800455d 	.word	0x0800455d
 8004508:	08004563 	.word	0x08004563
 800450c:	08004593 	.word	0x08004593
 8004510:	08004593 	.word	0x08004593
 8004514:	08004569 	.word	0x08004569
 8004518:	0800456f 	.word	0x0800456f
 800451c:	08004593 	.word	0x08004593
 8004520:	08004593 	.word	0x08004593
 8004524:	08004593 	.word	0x08004593
 8004528:	08004593 	.word	0x08004593
 800452c:	08004593 	.word	0x08004593
 8004530:	08004593 	.word	0x08004593
 8004534:	08004575 	.word	0x08004575
 8004538:	0800457b 	.word	0x0800457b
 800453c:	08004581 	.word	0x08004581
 8004540:	08004587 	.word	0x08004587
 8004544:	0800458d 	.word	0x0800458d
	{
		case TIM_1:
		{
			return TIM1->CCER.reg;
 8004548:	4b15      	ldr	r3, [pc, #84]	; (80045a0 <tim_read_ccer+0xc0>)
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	e022      	b.n	8004594 <tim_read_ccer+0xb4>
			break;
		}
		case TIM_2:
		{
			return TIM2->CCER.reg;
 800454e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	e01e      	b.n	8004594 <tim_read_ccer+0xb4>
			break;
		}
		case TIM_3:
		{
			return TIM3->CCER.reg;
 8004556:	4b13      	ldr	r3, [pc, #76]	; (80045a4 <tim_read_ccer+0xc4>)
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	e01b      	b.n	8004594 <tim_read_ccer+0xb4>
			break;
		}
		case TIM_4:
		{
			return TIM4->CCER.reg;
 800455c:	4b12      	ldr	r3, [pc, #72]	; (80045a8 <tim_read_ccer+0xc8>)
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	e018      	b.n	8004594 <tim_read_ccer+0xb4>
			break;
		}
		case TIM_5:
		{
			return TIM5->CCER.reg;
 8004562:	4b12      	ldr	r3, [pc, #72]	; (80045ac <tim_read_ccer+0xcc>)
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	e015      	b.n	8004594 <tim_read_ccer+0xb4>
			break;
		}
		case TIM_8:
		{
			return TIM8->CCER.reg;
 8004568:	4b11      	ldr	r3, [pc, #68]	; (80045b0 <tim_read_ccer+0xd0>)
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	e012      	b.n	8004594 <tim_read_ccer+0xb4>
			break;
		}
		case TIM_9:
		{
			return TIM9->CCER.reg;
 800456e:	4b11      	ldr	r3, [pc, #68]	; (80045b4 <tim_read_ccer+0xd4>)
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	e00f      	b.n	8004594 <tim_read_ccer+0xb4>
			break;
		}
		case TIM_10:
		{
			return TIM10->CCER.reg;
 8004574:	4b10      	ldr	r3, [pc, #64]	; (80045b8 <tim_read_ccer+0xd8>)
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	e00c      	b.n	8004594 <tim_read_ccer+0xb4>
			break;
		}
		case TIM_11:
		{
			return TIM11->CCER.reg;
 800457a:	4b10      	ldr	r3, [pc, #64]	; (80045bc <tim_read_ccer+0xdc>)
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	e009      	b.n	8004594 <tim_read_ccer+0xb4>
			break;
		}
		case TIM_12:
		{
			return TIM12->CCER.reg;
 8004580:	4b0f      	ldr	r3, [pc, #60]	; (80045c0 <tim_read_ccer+0xe0>)
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	e006      	b.n	8004594 <tim_read_ccer+0xb4>
			break;
		}
		case TIM_13:
		{
			return TIM13->CCER.reg;
 8004586:	4b0f      	ldr	r3, [pc, #60]	; (80045c4 <tim_read_ccer+0xe4>)
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	e003      	b.n	8004594 <tim_read_ccer+0xb4>
			break;
		}
		case TIM_14:
		{
			return TIM14->CCER.reg;
 800458c:	4b0e      	ldr	r3, [pc, #56]	; (80045c8 <tim_read_ccer+0xe8>)
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	e000      	b.n	8004594 <tim_read_ccer+0xb4>
			break;
		}
		default:
			return 0x0U;
 8004592:	2300      	movs	r3, #0
	}
}
 8004594:	4618      	mov	r0, r3
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	40010000 	.word	0x40010000
 80045a4:	40000400 	.word	0x40000400
 80045a8:	40000800 	.word	0x40000800
 80045ac:	40000c00 	.word	0x40000c00
 80045b0:	40010400 	.word	0x40010400
 80045b4:	40014000 	.word	0x40014000
 80045b8:	40014400 	.word	0x40014400
 80045bc:	40014800 	.word	0x40014800
 80045c0:	40001800 	.word	0x40001800
 80045c4:	40001c00 	.word	0x40001c00
 80045c8:	40002000 	.word	0x40002000

080045cc <tim_read_cr2>:

uint32_t tim_read_cr2(TIM_Handle_t *pTIMHandle)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
	switch(pTIMHandle->TIMx)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	3b01      	subs	r3, #1
 80045da:	2b11      	cmp	r3, #17
 80045dc:	d845      	bhi.n	800466a <tim_read_cr2+0x9e>
 80045de:	a201      	add	r2, pc, #4	; (adr r2, 80045e4 <tim_read_cr2+0x18>)
 80045e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e4:	0800462d 	.word	0x0800462d
 80045e8:	08004633 	.word	0x08004633
 80045ec:	0800463b 	.word	0x0800463b
 80045f0:	08004641 	.word	0x08004641
 80045f4:	08004647 	.word	0x08004647
 80045f8:	0800464d 	.word	0x0800464d
 80045fc:	08004653 	.word	0x08004653
 8004600:	08004659 	.word	0x08004659
 8004604:	0800465f 	.word	0x0800465f
 8004608:	0800466b 	.word	0x0800466b
 800460c:	0800466b 	.word	0x0800466b
 8004610:	0800466b 	.word	0x0800466b
 8004614:	0800466b 	.word	0x0800466b
 8004618:	0800466b 	.word	0x0800466b
 800461c:	0800466b 	.word	0x0800466b
 8004620:	0800466b 	.word	0x0800466b
 8004624:	0800466b 	.word	0x0800466b
 8004628:	08004665 	.word	0x08004665
	{
		case TIM_1:
		{
			return TIM1->CR2.reg;
 800462c:	4b12      	ldr	r3, [pc, #72]	; (8004678 <tim_read_cr2+0xac>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	e01c      	b.n	800466c <tim_read_cr2+0xa0>
			break;
		}
		case TIM_2:
		{
			return TIM2->CR2.reg;
 8004632:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	e018      	b.n	800466c <tim_read_cr2+0xa0>
			break;
		}
		case TIM_3:
		{
			return TIM3->CR2.reg;
 800463a:	4b10      	ldr	r3, [pc, #64]	; (800467c <tim_read_cr2+0xb0>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	e015      	b.n	800466c <tim_read_cr2+0xa0>
			break;
		}
		case TIM_4:
		{
			return TIM4->CR2.reg;
 8004640:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <tim_read_cr2+0xb4>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	e012      	b.n	800466c <tim_read_cr2+0xa0>
			break;
		}
		case TIM_5:
		{
			return TIM5->CR2.reg;
 8004646:	4b0f      	ldr	r3, [pc, #60]	; (8004684 <tim_read_cr2+0xb8>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	e00f      	b.n	800466c <tim_read_cr2+0xa0>
			break;
		}
		case TIM_6:
		{
			return TIM6->CR2.reg;
 800464c:	4b0e      	ldr	r3, [pc, #56]	; (8004688 <tim_read_cr2+0xbc>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	e00c      	b.n	800466c <tim_read_cr2+0xa0>
			break;
		}
		case TIM_7:
		{
			return TIM7->CR2.reg;
 8004652:	4b0e      	ldr	r3, [pc, #56]	; (800468c <tim_read_cr2+0xc0>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	e009      	b.n	800466c <tim_read_cr2+0xa0>
			break;
		}
		case TIM_8:
		{
			return TIM8->CR2.reg;
 8004658:	4b0d      	ldr	r3, [pc, #52]	; (8004690 <tim_read_cr2+0xc4>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	e006      	b.n	800466c <tim_read_cr2+0xa0>
			break;
		}
		case TIM_9:
		{
			return TIM9->CR2.reg;
 800465e:	4b0d      	ldr	r3, [pc, #52]	; (8004694 <tim_read_cr2+0xc8>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	e003      	b.n	800466c <tim_read_cr2+0xa0>
			break;
		}
		case TIM_12:
		{
			return TIM12->CR2.reg;
 8004664:	4b0c      	ldr	r3, [pc, #48]	; (8004698 <tim_read_cr2+0xcc>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	e000      	b.n	800466c <tim_read_cr2+0xa0>
			break;
		}
		default:
			return 0x0U;
 800466a:	2300      	movs	r3, #0
	}
}
 800466c:	4618      	mov	r0, r3
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	40010000 	.word	0x40010000
 800467c:	40000400 	.word	0x40000400
 8004680:	40000800 	.word	0x40000800
 8004684:	40000c00 	.word	0x40000c00
 8004688:	40001000 	.word	0x40001000
 800468c:	40001400 	.word	0x40001400
 8004690:	40010400 	.word	0x40010400
 8004694:	40014000 	.word	0x40014000
 8004698:	40001800 	.word	0x40001800

0800469c <tim_read_smcr>:

uint32_t tim_read_smcr(TIM_Handle_t *pTIMHandle)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
	switch(pTIMHandle->TIMx)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	3b01      	subs	r3, #1
 80046aa:	2b11      	cmp	r3, #17
 80046ac:	d83c      	bhi.n	8004728 <tim_read_smcr+0x8c>
 80046ae:	a201      	add	r2, pc, #4	; (adr r2, 80046b4 <tim_read_smcr+0x18>)
 80046b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b4:	080046fd 	.word	0x080046fd
 80046b8:	08004703 	.word	0x08004703
 80046bc:	0800470b 	.word	0x0800470b
 80046c0:	08004711 	.word	0x08004711
 80046c4:	08004717 	.word	0x08004717
 80046c8:	08004729 	.word	0x08004729
 80046cc:	08004729 	.word	0x08004729
 80046d0:	0800471d 	.word	0x0800471d
 80046d4:	08004729 	.word	0x08004729
 80046d8:	08004729 	.word	0x08004729
 80046dc:	08004729 	.word	0x08004729
 80046e0:	08004729 	.word	0x08004729
 80046e4:	08004729 	.word	0x08004729
 80046e8:	08004729 	.word	0x08004729
 80046ec:	08004729 	.word	0x08004729
 80046f0:	08004729 	.word	0x08004729
 80046f4:	08004729 	.word	0x08004729
 80046f8:	08004723 	.word	0x08004723
	{
		case TIM_1:
		{
			return TIM1->SMCR.reg;
 80046fc:	4b0e      	ldr	r3, [pc, #56]	; (8004738 <tim_read_smcr+0x9c>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	e014      	b.n	800472c <tim_read_smcr+0x90>
			break;
		}
		case TIM_2:
		{
			return TIM2->SMCR.reg;
 8004702:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	e010      	b.n	800472c <tim_read_smcr+0x90>
			break;
		}
		case TIM_3:
		{
			return TIM3->SMCR.reg;
 800470a:	4b0c      	ldr	r3, [pc, #48]	; (800473c <tim_read_smcr+0xa0>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	e00d      	b.n	800472c <tim_read_smcr+0x90>
			break;
		}
		case TIM_4:
		{
			return TIM4->SMCR.reg;
 8004710:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <tim_read_smcr+0xa4>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	e00a      	b.n	800472c <tim_read_smcr+0x90>
			break;
		}
		case TIM_5:
		{
			return TIM5->SMCR.reg;
 8004716:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <tim_read_smcr+0xa8>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	e007      	b.n	800472c <tim_read_smcr+0x90>
			break;
		}
		case TIM_8:
		{
			return TIM8->SMCR.reg;
 800471c:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <tim_read_smcr+0xac>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	e004      	b.n	800472c <tim_read_smcr+0x90>
			break;
		}
		case TIM_12:
		{
			return TIM12->SMCR.reg;
 8004722:	4b0a      	ldr	r3, [pc, #40]	; (800474c <tim_read_smcr+0xb0>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	e001      	b.n	800472c <tim_read_smcr+0x90>
			break;
		}
		default:
			break;
 8004728:	bf00      	nop
	}

	return 0;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	bc80      	pop	{r7}
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	40010000 	.word	0x40010000
 800473c:	40000400 	.word	0x40000400
 8004740:	40000800 	.word	0x40000800
 8004744:	40000c00 	.word	0x40000c00
 8004748:	40010400 	.word	0x40010400
 800474c:	40001800 	.word	0x40001800

08004750 <tim_write_to_cr2>:
	return 0;
}


static void tim_write_to_cr2(TIM_Handle_t *pTIMHandle, uint32_t CR2tempReg)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
	switch(pTIMHandle->TIMx)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	3b01      	subs	r3, #1
 8004760:	2b11      	cmp	r3, #17
 8004762:	d850      	bhi.n	8004806 <tim_write_to_cr2+0xb6>
 8004764:	a201      	add	r2, pc, #4	; (adr r2, 800476c <tim_write_to_cr2+0x1c>)
 8004766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476a:	bf00      	nop
 800476c:	080047b5 	.word	0x080047b5
 8004770:	080047bd 	.word	0x080047bd
 8004774:	080047c7 	.word	0x080047c7
 8004778:	080047cf 	.word	0x080047cf
 800477c:	080047d7 	.word	0x080047d7
 8004780:	080047df 	.word	0x080047df
 8004784:	080047e7 	.word	0x080047e7
 8004788:	080047ef 	.word	0x080047ef
 800478c:	080047f7 	.word	0x080047f7
 8004790:	08004807 	.word	0x08004807
 8004794:	08004807 	.word	0x08004807
 8004798:	08004807 	.word	0x08004807
 800479c:	08004807 	.word	0x08004807
 80047a0:	08004807 	.word	0x08004807
 80047a4:	08004807 	.word	0x08004807
 80047a8:	08004807 	.word	0x08004807
 80047ac:	08004807 	.word	0x08004807
 80047b0:	080047ff 	.word	0x080047ff
	{
		case TIM_1:
		{
			TIM1->CR2.reg = CR2tempReg;
 80047b4:	4a16      	ldr	r2, [pc, #88]	; (8004810 <tim_write_to_cr2+0xc0>)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	6053      	str	r3, [r2, #4]
			break;
 80047ba:	e025      	b.n	8004808 <tim_write_to_cr2+0xb8>
		}
		case TIM_2:
		{
			TIM2->CR2.reg = CR2tempReg;
 80047bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	6053      	str	r3, [r2, #4]
			break;
 80047c4:	e020      	b.n	8004808 <tim_write_to_cr2+0xb8>
		}
		case TIM_3:
		{
			TIM3->CR2.reg = CR2tempReg;
 80047c6:	4a13      	ldr	r2, [pc, #76]	; (8004814 <tim_write_to_cr2+0xc4>)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	6053      	str	r3, [r2, #4]
			break;
 80047cc:	e01c      	b.n	8004808 <tim_write_to_cr2+0xb8>
		}
		case TIM_4:
		{
			TIM4->CR2.reg = CR2tempReg;
 80047ce:	4a12      	ldr	r2, [pc, #72]	; (8004818 <tim_write_to_cr2+0xc8>)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	6053      	str	r3, [r2, #4]
			break;
 80047d4:	e018      	b.n	8004808 <tim_write_to_cr2+0xb8>
		}
		case TIM_5:
		{
			TIM5->CR2.reg = CR2tempReg;
 80047d6:	4a11      	ldr	r2, [pc, #68]	; (800481c <tim_write_to_cr2+0xcc>)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	6053      	str	r3, [r2, #4]
			break;
 80047dc:	e014      	b.n	8004808 <tim_write_to_cr2+0xb8>
		}
		case TIM_6:
		{
			TIM6->CR2.reg = CR2tempReg;
 80047de:	4a10      	ldr	r2, [pc, #64]	; (8004820 <tim_write_to_cr2+0xd0>)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	6053      	str	r3, [r2, #4]
			break;
 80047e4:	e010      	b.n	8004808 <tim_write_to_cr2+0xb8>
		}
		case TIM_7:
		{
			TIM7->CR2.reg = CR2tempReg;
 80047e6:	4a0f      	ldr	r2, [pc, #60]	; (8004824 <tim_write_to_cr2+0xd4>)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	6053      	str	r3, [r2, #4]
			break;
 80047ec:	e00c      	b.n	8004808 <tim_write_to_cr2+0xb8>
		}
		case TIM_8:
		{
			TIM8->CR2.reg = CR2tempReg;
 80047ee:	4a0e      	ldr	r2, [pc, #56]	; (8004828 <tim_write_to_cr2+0xd8>)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	6053      	str	r3, [r2, #4]
			break;
 80047f4:	e008      	b.n	8004808 <tim_write_to_cr2+0xb8>
		}
		case TIM_9:
		{
			TIM9->CR2.reg = CR2tempReg;
 80047f6:	4a0d      	ldr	r2, [pc, #52]	; (800482c <tim_write_to_cr2+0xdc>)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	6053      	str	r3, [r2, #4]
			break;
 80047fc:	e004      	b.n	8004808 <tim_write_to_cr2+0xb8>
		}
		case TIM_12:
		{
			TIM12->CR2.reg = CR2tempReg;
 80047fe:	4a0c      	ldr	r2, [pc, #48]	; (8004830 <tim_write_to_cr2+0xe0>)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	6053      	str	r3, [r2, #4]
			break;
 8004804:	e000      	b.n	8004808 <tim_write_to_cr2+0xb8>
		}
		default:
			return;
 8004806:	bf00      	nop
	}
}
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr
 8004810:	40010000 	.word	0x40010000
 8004814:	40000400 	.word	0x40000400
 8004818:	40000800 	.word	0x40000800
 800481c:	40000c00 	.word	0x40000c00
 8004820:	40001000 	.word	0x40001000
 8004824:	40001400 	.word	0x40001400
 8004828:	40010400 	.word	0x40010400
 800482c:	40014000 	.word	0x40014000
 8004830:	40001800 	.word	0x40001800

08004834 <tim_write_to_ccer>:

static void tim_write_to_ccer(TIM_Handle_t *pTIMHandle, uint32_t CCERtempReg)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
	switch(pTIMHandle->TIMx)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	3b01      	subs	r3, #1
 8004844:	2b11      	cmp	r3, #17
 8004846:	d850      	bhi.n	80048ea <tim_write_to_ccer+0xb6>
 8004848:	a201      	add	r2, pc, #4	; (adr r2, 8004850 <tim_write_to_ccer+0x1c>)
 800484a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484e:	bf00      	nop
 8004850:	08004899 	.word	0x08004899
 8004854:	080048a1 	.word	0x080048a1
 8004858:	080048ab 	.word	0x080048ab
 800485c:	080048b3 	.word	0x080048b3
 8004860:	080048bb 	.word	0x080048bb
 8004864:	080048eb 	.word	0x080048eb
 8004868:	080048eb 	.word	0x080048eb
 800486c:	080048c3 	.word	0x080048c3
 8004870:	080048cb 	.word	0x080048cb
 8004874:	080048eb 	.word	0x080048eb
 8004878:	080048eb 	.word	0x080048eb
 800487c:	080048eb 	.word	0x080048eb
 8004880:	080048eb 	.word	0x080048eb
 8004884:	080048eb 	.word	0x080048eb
 8004888:	080048eb 	.word	0x080048eb
 800488c:	080048d3 	.word	0x080048d3
 8004890:	080048db 	.word	0x080048db
 8004894:	080048e3 	.word	0x080048e3
	{
		case TIM_1:
		{
			TIM1->CCER.reg = CCERtempReg;
 8004898:	4a16      	ldr	r2, [pc, #88]	; (80048f4 <tim_write_to_ccer+0xc0>)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	6213      	str	r3, [r2, #32]
			break;
 800489e:	e025      	b.n	80048ec <tim_write_to_ccer+0xb8>
		}
		case TIM_2:
		{
			TIM2->CCER.reg = CCERtempReg;
 80048a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	6213      	str	r3, [r2, #32]
			break;
 80048a8:	e020      	b.n	80048ec <tim_write_to_ccer+0xb8>
		}
		case TIM_3:
		{
			TIM3->CCER.reg = CCERtempReg;
 80048aa:	4a13      	ldr	r2, [pc, #76]	; (80048f8 <tim_write_to_ccer+0xc4>)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	6213      	str	r3, [r2, #32]
			break;
 80048b0:	e01c      	b.n	80048ec <tim_write_to_ccer+0xb8>
		}
		case TIM_4:
		{
			TIM4->CCER.reg = CCERtempReg;
 80048b2:	4a12      	ldr	r2, [pc, #72]	; (80048fc <tim_write_to_ccer+0xc8>)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	6213      	str	r3, [r2, #32]
			break;
 80048b8:	e018      	b.n	80048ec <tim_write_to_ccer+0xb8>
		}
		case TIM_5:
		{
			TIM5->CCER.reg = CCERtempReg;
 80048ba:	4a11      	ldr	r2, [pc, #68]	; (8004900 <tim_write_to_ccer+0xcc>)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	6213      	str	r3, [r2, #32]
			break;
 80048c0:	e014      	b.n	80048ec <tim_write_to_ccer+0xb8>
		}
		case TIM_8:
		{
			TIM8->CCER.reg = CCERtempReg;
 80048c2:	4a10      	ldr	r2, [pc, #64]	; (8004904 <tim_write_to_ccer+0xd0>)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	6213      	str	r3, [r2, #32]
			break;
 80048c8:	e010      	b.n	80048ec <tim_write_to_ccer+0xb8>
		}
		case TIM_9:
		{
			TIM9->CCER.reg = CCERtempReg;
 80048ca:	4a0f      	ldr	r2, [pc, #60]	; (8004908 <tim_write_to_ccer+0xd4>)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	6213      	str	r3, [r2, #32]
			break;
 80048d0:	e00c      	b.n	80048ec <tim_write_to_ccer+0xb8>
		}
		case TIM_10:
		{
			TIM10->CCER.reg = CCERtempReg;
 80048d2:	4a0e      	ldr	r2, [pc, #56]	; (800490c <tim_write_to_ccer+0xd8>)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	6213      	str	r3, [r2, #32]
			break;
 80048d8:	e008      	b.n	80048ec <tim_write_to_ccer+0xb8>
		}
		case TIM_11:
		{
			TIM11->CCER.reg = CCERtempReg;
 80048da:	4a0d      	ldr	r2, [pc, #52]	; (8004910 <tim_write_to_ccer+0xdc>)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	6213      	str	r3, [r2, #32]
			break;
 80048e0:	e004      	b.n	80048ec <tim_write_to_ccer+0xb8>
		}
		case TIM_12:
		{
			TIM12->CCER.reg = CCERtempReg;
 80048e2:	4a0c      	ldr	r2, [pc, #48]	; (8004914 <tim_write_to_ccer+0xe0>)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	6213      	str	r3, [r2, #32]
			break;
 80048e8:	e000      	b.n	80048ec <tim_write_to_ccer+0xb8>
		}
		default:
			return;
 80048ea:	bf00      	nop
	}
}
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr
 80048f4:	40010000 	.word	0x40010000
 80048f8:	40000400 	.word	0x40000400
 80048fc:	40000800 	.word	0x40000800
 8004900:	40000c00 	.word	0x40000c00
 8004904:	40010400 	.word	0x40010400
 8004908:	40014000 	.word	0x40014000
 800490c:	40014400 	.word	0x40014400
 8004910:	40014800 	.word	0x40014800
 8004914:	40001800 	.word	0x40001800

08004918 <tim_write_to_ccmrx>:


static void tim_write_to_ccmrx(TIM_Handle_t *pTIMHandle, uint8_t TIM_CCMRx ,uint32_t CCMRxtempReg)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	460b      	mov	r3, r1
 8004922:	607a      	str	r2, [r7, #4]
 8004924:	72fb      	strb	r3, [r7, #11]
	if(TIM_CCMR1 == TIM_CCMRx)
 8004926:	7afb      	ldrb	r3, [r7, #11]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d161      	bne.n	80049f0 <tim_write_to_ccmrx+0xd8>
	{
		switch(pTIMHandle->TIMx)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	3b01      	subs	r3, #1
 8004932:	2b13      	cmp	r3, #19
 8004934:	d85b      	bhi.n	80049ee <tim_write_to_ccmrx+0xd6>
 8004936:	a201      	add	r2, pc, #4	; (adr r2, 800493c <tim_write_to_ccmrx+0x24>)
 8004938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493c:	0800498d 	.word	0x0800498d
 8004940:	08004995 	.word	0x08004995
 8004944:	0800499f 	.word	0x0800499f
 8004948:	080049a7 	.word	0x080049a7
 800494c:	080049af 	.word	0x080049af
 8004950:	080049ef 	.word	0x080049ef
 8004954:	080049ef 	.word	0x080049ef
 8004958:	080049b7 	.word	0x080049b7
 800495c:	080049bf 	.word	0x080049bf
 8004960:	080049ef 	.word	0x080049ef
 8004964:	080049ef 	.word	0x080049ef
 8004968:	080049ef 	.word	0x080049ef
 800496c:	080049ef 	.word	0x080049ef
 8004970:	080049ef 	.word	0x080049ef
 8004974:	080049ef 	.word	0x080049ef
 8004978:	080049c7 	.word	0x080049c7
 800497c:	080049cf 	.word	0x080049cf
 8004980:	080049d7 	.word	0x080049d7
 8004984:	080049df 	.word	0x080049df
 8004988:	080049e7 	.word	0x080049e7
		{
			case TIM_1:
			{
				TIM1->CCMR1.reg = CCMRxtempReg;
 800498c:	4a36      	ldr	r2, [pc, #216]	; (8004a68 <tim_write_to_ccmrx+0x150>)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6193      	str	r3, [r2, #24]
				break;
 8004992:	e02d      	b.n	80049f0 <tim_write_to_ccmrx+0xd8>
			}
			case TIM_2:
			{
				TIM2->CCMR1.reg = CCMRxtempReg;
 8004994:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6193      	str	r3, [r2, #24]
				break;
 800499c:	e028      	b.n	80049f0 <tim_write_to_ccmrx+0xd8>
			}
			case TIM_3:
			{
				TIM3->CCMR1.reg = CCMRxtempReg;
 800499e:	4a33      	ldr	r2, [pc, #204]	; (8004a6c <tim_write_to_ccmrx+0x154>)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6193      	str	r3, [r2, #24]
				break;
 80049a4:	e024      	b.n	80049f0 <tim_write_to_ccmrx+0xd8>
			}
			case TIM_4:
			{
				TIM4->CCMR1.reg = CCMRxtempReg;
 80049a6:	4a32      	ldr	r2, [pc, #200]	; (8004a70 <tim_write_to_ccmrx+0x158>)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6193      	str	r3, [r2, #24]
				break;
 80049ac:	e020      	b.n	80049f0 <tim_write_to_ccmrx+0xd8>
			}
			case TIM_5:
			{
				TIM5->CCMR1.reg = CCMRxtempReg;
 80049ae:	4a31      	ldr	r2, [pc, #196]	; (8004a74 <tim_write_to_ccmrx+0x15c>)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6193      	str	r3, [r2, #24]
				break;
 80049b4:	e01c      	b.n	80049f0 <tim_write_to_ccmrx+0xd8>
			}
			case TIM_8:
			{
				TIM8->CCMR1.reg = CCMRxtempReg;
 80049b6:	4a30      	ldr	r2, [pc, #192]	; (8004a78 <tim_write_to_ccmrx+0x160>)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6193      	str	r3, [r2, #24]
				break;
 80049bc:	e018      	b.n	80049f0 <tim_write_to_ccmrx+0xd8>
			}
			case TIM_9:
			{
				TIM9->CCMR1.reg = CCMRxtempReg;
 80049be:	4a2f      	ldr	r2, [pc, #188]	; (8004a7c <tim_write_to_ccmrx+0x164>)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6193      	str	r3, [r2, #24]
				break;
 80049c4:	e014      	b.n	80049f0 <tim_write_to_ccmrx+0xd8>
			}
			case TIM_10:
			{
				TIM10->CCMR1.reg = CCMRxtempReg;
 80049c6:	4a2e      	ldr	r2, [pc, #184]	; (8004a80 <tim_write_to_ccmrx+0x168>)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6193      	str	r3, [r2, #24]
				break;
 80049cc:	e010      	b.n	80049f0 <tim_write_to_ccmrx+0xd8>
			}
			case TIM_11:
			{
				TIM11->CCMR1.reg = CCMRxtempReg;
 80049ce:	4a2d      	ldr	r2, [pc, #180]	; (8004a84 <tim_write_to_ccmrx+0x16c>)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6193      	str	r3, [r2, #24]
				break;
 80049d4:	e00c      	b.n	80049f0 <tim_write_to_ccmrx+0xd8>
			}
			case TIM_12:
			{
				TIM12->CCMR1.reg = CCMRxtempReg;
 80049d6:	4a2c      	ldr	r2, [pc, #176]	; (8004a88 <tim_write_to_ccmrx+0x170>)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6193      	str	r3, [r2, #24]
				break;
 80049dc:	e008      	b.n	80049f0 <tim_write_to_ccmrx+0xd8>
			}
			case TIM_13:
			{
				TIM13->CCMR1.reg = CCMRxtempReg;
 80049de:	4a2b      	ldr	r2, [pc, #172]	; (8004a8c <tim_write_to_ccmrx+0x174>)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6193      	str	r3, [r2, #24]
				break;
 80049e4:	e004      	b.n	80049f0 <tim_write_to_ccmrx+0xd8>
			}
			case TIM_14:
			{
				TIM14->CCMR1.reg = CCMRxtempReg;
 80049e6:	4a2a      	ldr	r2, [pc, #168]	; (8004a90 <tim_write_to_ccmrx+0x178>)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6193      	str	r3, [r2, #24]
				break;
 80049ec:	e000      	b.n	80049f0 <tim_write_to_ccmrx+0xd8>
			}
			default:
				break;
 80049ee:	bf00      	nop
		}
	}

	if(TIM_CCMR2 == TIM_CCMRx)
 80049f0:	7afb      	ldrb	r3, [r7, #11]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d132      	bne.n	8004a5c <tim_write_to_ccmrx+0x144>
	{
		switch(pTIMHandle->TIMx)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	2b07      	cmp	r3, #7
 80049fe:	d82c      	bhi.n	8004a5a <tim_write_to_ccmrx+0x142>
 8004a00:	a201      	add	r2, pc, #4	; (adr r2, 8004a08 <tim_write_to_ccmrx+0xf0>)
 8004a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a06:	bf00      	nop
 8004a08:	08004a29 	.word	0x08004a29
 8004a0c:	08004a31 	.word	0x08004a31
 8004a10:	08004a3b 	.word	0x08004a3b
 8004a14:	08004a43 	.word	0x08004a43
 8004a18:	08004a4b 	.word	0x08004a4b
 8004a1c:	08004a5b 	.word	0x08004a5b
 8004a20:	08004a5b 	.word	0x08004a5b
 8004a24:	08004a53 	.word	0x08004a53
		{
			case TIM_1:
			{
				TIM1->CCMR2.reg = CCMRxtempReg;
 8004a28:	4a0f      	ldr	r2, [pc, #60]	; (8004a68 <tim_write_to_ccmrx+0x150>)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	61d3      	str	r3, [r2, #28]
				break;
 8004a2e:	e015      	b.n	8004a5c <tim_write_to_ccmrx+0x144>
			}
			case TIM_2:
			{
				TIM2->CCMR2.reg = CCMRxtempReg;
 8004a30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	61d3      	str	r3, [r2, #28]
				break;
 8004a38:	e010      	b.n	8004a5c <tim_write_to_ccmrx+0x144>
			}
			case TIM_3:
			{
				TIM3->CCMR2.reg = CCMRxtempReg;
 8004a3a:	4a0c      	ldr	r2, [pc, #48]	; (8004a6c <tim_write_to_ccmrx+0x154>)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	61d3      	str	r3, [r2, #28]
				break;
 8004a40:	e00c      	b.n	8004a5c <tim_write_to_ccmrx+0x144>
			}
			case TIM_4:
			{
				TIM4->CCMR2.reg = CCMRxtempReg;
 8004a42:	4a0b      	ldr	r2, [pc, #44]	; (8004a70 <tim_write_to_ccmrx+0x158>)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	61d3      	str	r3, [r2, #28]
				break;
 8004a48:	e008      	b.n	8004a5c <tim_write_to_ccmrx+0x144>
			}
			case TIM_5:
			{
				TIM5->CCMR2.reg = CCMRxtempReg;
 8004a4a:	4a0a      	ldr	r2, [pc, #40]	; (8004a74 <tim_write_to_ccmrx+0x15c>)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	61d3      	str	r3, [r2, #28]
				break;
 8004a50:	e004      	b.n	8004a5c <tim_write_to_ccmrx+0x144>
			}
			case TIM_8:
			{
				TIM8->CCMR2.reg = CCMRxtempReg;
 8004a52:	4a09      	ldr	r2, [pc, #36]	; (8004a78 <tim_write_to_ccmrx+0x160>)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	61d3      	str	r3, [r2, #28]
				break;
 8004a58:	e000      	b.n	8004a5c <tim_write_to_ccmrx+0x144>
			}
			default:
				break;
 8004a5a:	bf00      	nop
		}
	}
}
 8004a5c:	bf00      	nop
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bc80      	pop	{r7}
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40010000 	.word	0x40010000
 8004a6c:	40000400 	.word	0x40000400
 8004a70:	40000800 	.word	0x40000800
 8004a74:	40000c00 	.word	0x40000c00
 8004a78:	40010400 	.word	0x40010400
 8004a7c:	40014000 	.word	0x40014000
 8004a80:	40014400 	.word	0x40014400
 8004a84:	40014800 	.word	0x40014800
 8004a88:	40001800 	.word	0x40001800
 8004a8c:	40001c00 	.word	0x40001c00
 8004a90:	40002000 	.word	0x40002000

08004a94 <tim_write_to_ccrx>:


static void tim_write_to_ccrx(TIM_Handle_t *pTIMHandle, uint8_t TIM_CCRx, uint32_t CCRxtemp)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	607a      	str	r2, [r7, #4]
 8004aa0:	72fb      	strb	r3, [r7, #11]
	if(TIM_CCR1 == TIM_CCRx)
 8004aa2:	7afb      	ldrb	r3, [r7, #11]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d161      	bne.n	8004b6c <tim_write_to_ccrx+0xd8>
	{
		switch(pTIMHandle->TIMx)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	2b13      	cmp	r3, #19
 8004ab0:	d85b      	bhi.n	8004b6a <tim_write_to_ccrx+0xd6>
 8004ab2:	a201      	add	r2, pc, #4	; (adr r2, 8004ab8 <tim_write_to_ccrx+0x24>)
 8004ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab8:	08004b09 	.word	0x08004b09
 8004abc:	08004b11 	.word	0x08004b11
 8004ac0:	08004b1b 	.word	0x08004b1b
 8004ac4:	08004b23 	.word	0x08004b23
 8004ac8:	08004b2b 	.word	0x08004b2b
 8004acc:	08004b6b 	.word	0x08004b6b
 8004ad0:	08004b6b 	.word	0x08004b6b
 8004ad4:	08004b33 	.word	0x08004b33
 8004ad8:	08004b3b 	.word	0x08004b3b
 8004adc:	08004b6b 	.word	0x08004b6b
 8004ae0:	08004b6b 	.word	0x08004b6b
 8004ae4:	08004b6b 	.word	0x08004b6b
 8004ae8:	08004b6b 	.word	0x08004b6b
 8004aec:	08004b6b 	.word	0x08004b6b
 8004af0:	08004b6b 	.word	0x08004b6b
 8004af4:	08004b43 	.word	0x08004b43
 8004af8:	08004b4b 	.word	0x08004b4b
 8004afc:	08004b53 	.word	0x08004b53
 8004b00:	08004b5b 	.word	0x08004b5b
 8004b04:	08004b63 	.word	0x08004b63
		{
			case TIM_1:
			{
				TIM1->CCR1 = CCRxtemp;
 8004b08:	4a7a      	ldr	r2, [pc, #488]	; (8004cf4 <tim_write_to_ccrx+0x260>)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6353      	str	r3, [r2, #52]	; 0x34
				break;
 8004b0e:	e02d      	b.n	8004b6c <tim_write_to_ccrx+0xd8>
			}
			case TIM_2:
			{
				TIM2->CCR1 = CCRxtemp;
 8004b10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6353      	str	r3, [r2, #52]	; 0x34
				break;
 8004b18:	e028      	b.n	8004b6c <tim_write_to_ccrx+0xd8>
			}
			case TIM_3:
			{
				TIM3->CCR1 = CCRxtemp;
 8004b1a:	4a77      	ldr	r2, [pc, #476]	; (8004cf8 <tim_write_to_ccrx+0x264>)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6353      	str	r3, [r2, #52]	; 0x34
				break;
 8004b20:	e024      	b.n	8004b6c <tim_write_to_ccrx+0xd8>
			}
			case TIM_4:
			{
				TIM4->CCR1 = CCRxtemp;
 8004b22:	4a76      	ldr	r2, [pc, #472]	; (8004cfc <tim_write_to_ccrx+0x268>)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6353      	str	r3, [r2, #52]	; 0x34
				break;
 8004b28:	e020      	b.n	8004b6c <tim_write_to_ccrx+0xd8>
			}
			case TIM_5:
			{
				TIM5->CCR1 = CCRxtemp;
 8004b2a:	4a75      	ldr	r2, [pc, #468]	; (8004d00 <tim_write_to_ccrx+0x26c>)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6353      	str	r3, [r2, #52]	; 0x34
				break;
 8004b30:	e01c      	b.n	8004b6c <tim_write_to_ccrx+0xd8>
			}
			case TIM_8:
			{
				TIM8->CCR1 = CCRxtemp;
 8004b32:	4a74      	ldr	r2, [pc, #464]	; (8004d04 <tim_write_to_ccrx+0x270>)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6353      	str	r3, [r2, #52]	; 0x34
				break;
 8004b38:	e018      	b.n	8004b6c <tim_write_to_ccrx+0xd8>
			}
			case TIM_9:
			{
				TIM9->CCR1 = CCRxtemp;
 8004b3a:	4a73      	ldr	r2, [pc, #460]	; (8004d08 <tim_write_to_ccrx+0x274>)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6353      	str	r3, [r2, #52]	; 0x34
				break;
 8004b40:	e014      	b.n	8004b6c <tim_write_to_ccrx+0xd8>
			}
			case TIM_10:
			{
				TIM10->CCR1 = CCRxtemp;
 8004b42:	4a72      	ldr	r2, [pc, #456]	; (8004d0c <tim_write_to_ccrx+0x278>)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6353      	str	r3, [r2, #52]	; 0x34
				break;
 8004b48:	e010      	b.n	8004b6c <tim_write_to_ccrx+0xd8>
			}
			case TIM_11:
			{
				TIM11->CCR1 = CCRxtemp;
 8004b4a:	4a71      	ldr	r2, [pc, #452]	; (8004d10 <tim_write_to_ccrx+0x27c>)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6353      	str	r3, [r2, #52]	; 0x34
				break;
 8004b50:	e00c      	b.n	8004b6c <tim_write_to_ccrx+0xd8>
			}
			case TIM_12:
			{
				TIM12->CCR1 = CCRxtemp;
 8004b52:	4a70      	ldr	r2, [pc, #448]	; (8004d14 <tim_write_to_ccrx+0x280>)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6353      	str	r3, [r2, #52]	; 0x34
				break;
 8004b58:	e008      	b.n	8004b6c <tim_write_to_ccrx+0xd8>
			}
			case TIM_13:
			{
				TIM13->CCR1 = CCRxtemp;
 8004b5a:	4a6f      	ldr	r2, [pc, #444]	; (8004d18 <tim_write_to_ccrx+0x284>)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6353      	str	r3, [r2, #52]	; 0x34
				break;
 8004b60:	e004      	b.n	8004b6c <tim_write_to_ccrx+0xd8>
			}
			case TIM_14:
			{
				TIM14->CCR1 = CCRxtemp;
 8004b62:	4a6e      	ldr	r2, [pc, #440]	; (8004d1c <tim_write_to_ccrx+0x288>)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6353      	str	r3, [r2, #52]	; 0x34
				break;
 8004b68:	e000      	b.n	8004b6c <tim_write_to_ccrx+0xd8>
			}
			default:
				break;
 8004b6a:	bf00      	nop
		}
	}

	if(TIM_CCR2 == TIM_CCRx)
 8004b6c:	7afb      	ldrb	r3, [r7, #11]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d14e      	bne.n	8004c10 <tim_write_to_ccrx+0x17c>
	{
		switch(pTIMHandle->TIMx)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	2b11      	cmp	r3, #17
 8004b7a:	d848      	bhi.n	8004c0e <tim_write_to_ccrx+0x17a>
 8004b7c:	a201      	add	r2, pc, #4	; (adr r2, 8004b84 <tim_write_to_ccrx+0xf0>)
 8004b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b82:	bf00      	nop
 8004b84:	08004bcd 	.word	0x08004bcd
 8004b88:	08004bd5 	.word	0x08004bd5
 8004b8c:	08004bdf 	.word	0x08004bdf
 8004b90:	08004be7 	.word	0x08004be7
 8004b94:	08004bef 	.word	0x08004bef
 8004b98:	08004c0f 	.word	0x08004c0f
 8004b9c:	08004c0f 	.word	0x08004c0f
 8004ba0:	08004bf7 	.word	0x08004bf7
 8004ba4:	08004bff 	.word	0x08004bff
 8004ba8:	08004c0f 	.word	0x08004c0f
 8004bac:	08004c0f 	.word	0x08004c0f
 8004bb0:	08004c0f 	.word	0x08004c0f
 8004bb4:	08004c0f 	.word	0x08004c0f
 8004bb8:	08004c0f 	.word	0x08004c0f
 8004bbc:	08004c0f 	.word	0x08004c0f
 8004bc0:	08004c0f 	.word	0x08004c0f
 8004bc4:	08004c0f 	.word	0x08004c0f
 8004bc8:	08004c07 	.word	0x08004c07
		{
			case TIM_1:
			{
				TIM1->CCR2 = CCRxtemp;
 8004bcc:	4a49      	ldr	r2, [pc, #292]	; (8004cf4 <tim_write_to_ccrx+0x260>)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6393      	str	r3, [r2, #56]	; 0x38
				break;
 8004bd2:	e01d      	b.n	8004c10 <tim_write_to_ccrx+0x17c>
			}
			case TIM_2:
			{
				TIM2->CCR2 = CCRxtemp;
 8004bd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6393      	str	r3, [r2, #56]	; 0x38
				break;
 8004bdc:	e018      	b.n	8004c10 <tim_write_to_ccrx+0x17c>
			}
			case TIM_3:
			{
				TIM3->CCR2 = CCRxtemp;
 8004bde:	4a46      	ldr	r2, [pc, #280]	; (8004cf8 <tim_write_to_ccrx+0x264>)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6393      	str	r3, [r2, #56]	; 0x38
				break;
 8004be4:	e014      	b.n	8004c10 <tim_write_to_ccrx+0x17c>
			}
			case TIM_4:
			{
				TIM4->CCR2 = CCRxtemp;
 8004be6:	4a45      	ldr	r2, [pc, #276]	; (8004cfc <tim_write_to_ccrx+0x268>)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6393      	str	r3, [r2, #56]	; 0x38
				break;
 8004bec:	e010      	b.n	8004c10 <tim_write_to_ccrx+0x17c>
			}
			case TIM_5:
			{
				TIM5->CCR2 = CCRxtemp;
 8004bee:	4a44      	ldr	r2, [pc, #272]	; (8004d00 <tim_write_to_ccrx+0x26c>)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6393      	str	r3, [r2, #56]	; 0x38
				break;
 8004bf4:	e00c      	b.n	8004c10 <tim_write_to_ccrx+0x17c>
			}
			case TIM_8:
			{
				TIM8->CCR2 = CCRxtemp;
 8004bf6:	4a43      	ldr	r2, [pc, #268]	; (8004d04 <tim_write_to_ccrx+0x270>)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6393      	str	r3, [r2, #56]	; 0x38
				break;
 8004bfc:	e008      	b.n	8004c10 <tim_write_to_ccrx+0x17c>
			}
			case TIM_9:
			{
				TIM9->CCR2 = CCRxtemp;
 8004bfe:	4a42      	ldr	r2, [pc, #264]	; (8004d08 <tim_write_to_ccrx+0x274>)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6393      	str	r3, [r2, #56]	; 0x38
				break;
 8004c04:	e004      	b.n	8004c10 <tim_write_to_ccrx+0x17c>
			}
			case TIM_12:
			{
				TIM12->CCR2 = CCRxtemp;
 8004c06:	4a43      	ldr	r2, [pc, #268]	; (8004d14 <tim_write_to_ccrx+0x280>)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6393      	str	r3, [r2, #56]	; 0x38
				break;
 8004c0c:	e000      	b.n	8004c10 <tim_write_to_ccrx+0x17c>
			}
			default:
				break;
 8004c0e:	bf00      	nop
		}
	}

	if(TIM_CCR3 == TIM_CCRx)
 8004c10:	7afb      	ldrb	r3, [r7, #11]
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d132      	bne.n	8004c7c <tim_write_to_ccrx+0x1e8>
	{
		switch(pTIMHandle->TIMx)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	2b07      	cmp	r3, #7
 8004c1e:	d82c      	bhi.n	8004c7a <tim_write_to_ccrx+0x1e6>
 8004c20:	a201      	add	r2, pc, #4	; (adr r2, 8004c28 <tim_write_to_ccrx+0x194>)
 8004c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c26:	bf00      	nop
 8004c28:	08004c49 	.word	0x08004c49
 8004c2c:	08004c51 	.word	0x08004c51
 8004c30:	08004c5b 	.word	0x08004c5b
 8004c34:	08004c63 	.word	0x08004c63
 8004c38:	08004c6b 	.word	0x08004c6b
 8004c3c:	08004c7b 	.word	0x08004c7b
 8004c40:	08004c7b 	.word	0x08004c7b
 8004c44:	08004c73 	.word	0x08004c73
		{
			case TIM_1:
			{
				TIM1->CCR3 = CCRxtemp;
 8004c48:	4a2a      	ldr	r2, [pc, #168]	; (8004cf4 <tim_write_to_ccrx+0x260>)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	63d3      	str	r3, [r2, #60]	; 0x3c
				break;
 8004c4e:	e015      	b.n	8004c7c <tim_write_to_ccrx+0x1e8>
			}
			case TIM_2:
			{
				TIM2->CCR3 = CCRxtemp;
 8004c50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	63d3      	str	r3, [r2, #60]	; 0x3c
				break;
 8004c58:	e010      	b.n	8004c7c <tim_write_to_ccrx+0x1e8>
			}
			case TIM_3:
			{
				TIM3->CCR3 = CCRxtemp;
 8004c5a:	4a27      	ldr	r2, [pc, #156]	; (8004cf8 <tim_write_to_ccrx+0x264>)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	63d3      	str	r3, [r2, #60]	; 0x3c
				break;
 8004c60:	e00c      	b.n	8004c7c <tim_write_to_ccrx+0x1e8>
			}
			case TIM_4:
			{
				TIM4->CCR3 = CCRxtemp;
 8004c62:	4a26      	ldr	r2, [pc, #152]	; (8004cfc <tim_write_to_ccrx+0x268>)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	63d3      	str	r3, [r2, #60]	; 0x3c
				break;
 8004c68:	e008      	b.n	8004c7c <tim_write_to_ccrx+0x1e8>
			}
			case TIM_5:
			{
				TIM5->CCR3 = CCRxtemp;
 8004c6a:	4a25      	ldr	r2, [pc, #148]	; (8004d00 <tim_write_to_ccrx+0x26c>)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	63d3      	str	r3, [r2, #60]	; 0x3c
				break;
 8004c70:	e004      	b.n	8004c7c <tim_write_to_ccrx+0x1e8>
			}
			case TIM_8:
			{
				TIM8->CCR3 = CCRxtemp;
 8004c72:	4a24      	ldr	r2, [pc, #144]	; (8004d04 <tim_write_to_ccrx+0x270>)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	63d3      	str	r3, [r2, #60]	; 0x3c
				break;
 8004c78:	e000      	b.n	8004c7c <tim_write_to_ccrx+0x1e8>
			}
			default:
				break;
 8004c7a:	bf00      	nop
		}
	}

	if(TIM_CCR4 == TIM_CCRx)
 8004c7c:	7afb      	ldrb	r3, [r7, #11]
 8004c7e:	2b03      	cmp	r3, #3
 8004c80:	d132      	bne.n	8004ce8 <tim_write_to_ccrx+0x254>
	{
		switch(pTIMHandle->TIMx)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	2b07      	cmp	r3, #7
 8004c8a:	d82c      	bhi.n	8004ce6 <tim_write_to_ccrx+0x252>
 8004c8c:	a201      	add	r2, pc, #4	; (adr r2, 8004c94 <tim_write_to_ccrx+0x200>)
 8004c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c92:	bf00      	nop
 8004c94:	08004cb5 	.word	0x08004cb5
 8004c98:	08004cbd 	.word	0x08004cbd
 8004c9c:	08004cc7 	.word	0x08004cc7
 8004ca0:	08004ccf 	.word	0x08004ccf
 8004ca4:	08004cd7 	.word	0x08004cd7
 8004ca8:	08004ce7 	.word	0x08004ce7
 8004cac:	08004ce7 	.word	0x08004ce7
 8004cb0:	08004cdf 	.word	0x08004cdf
		{
			case TIM_1:
			{
				TIM1->CCR4 = CCRxtemp;
 8004cb4:	4a0f      	ldr	r2, [pc, #60]	; (8004cf4 <tim_write_to_ccrx+0x260>)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6413      	str	r3, [r2, #64]	; 0x40
				break;
 8004cba:	e015      	b.n	8004ce8 <tim_write_to_ccrx+0x254>
			}
			case TIM_2:
			{
				TIM2->CCR4 = CCRxtemp;
 8004cbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6413      	str	r3, [r2, #64]	; 0x40
				break;
 8004cc4:	e010      	b.n	8004ce8 <tim_write_to_ccrx+0x254>
			}
			case TIM_3:
			{
				TIM3->CCR4 = CCRxtemp;
 8004cc6:	4a0c      	ldr	r2, [pc, #48]	; (8004cf8 <tim_write_to_ccrx+0x264>)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6413      	str	r3, [r2, #64]	; 0x40
				break;
 8004ccc:	e00c      	b.n	8004ce8 <tim_write_to_ccrx+0x254>
			}
			case TIM_4:
			{
				TIM4->CCR4 = CCRxtemp;
 8004cce:	4a0b      	ldr	r2, [pc, #44]	; (8004cfc <tim_write_to_ccrx+0x268>)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6413      	str	r3, [r2, #64]	; 0x40
				break;
 8004cd4:	e008      	b.n	8004ce8 <tim_write_to_ccrx+0x254>
			}
			case TIM_5:
			{
				TIM5->CCR4 = CCRxtemp;
 8004cd6:	4a0a      	ldr	r2, [pc, #40]	; (8004d00 <tim_write_to_ccrx+0x26c>)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6413      	str	r3, [r2, #64]	; 0x40
				break;
 8004cdc:	e004      	b.n	8004ce8 <tim_write_to_ccrx+0x254>
			}
			case TIM_8:
			{
				TIM8->CCR4 = CCRxtemp;
 8004cde:	4a09      	ldr	r2, [pc, #36]	; (8004d04 <tim_write_to_ccrx+0x270>)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6413      	str	r3, [r2, #64]	; 0x40
				break;
 8004ce4:	e000      	b.n	8004ce8 <tim_write_to_ccrx+0x254>
			}
			default:
				break;
 8004ce6:	bf00      	nop
		}
	}
}
 8004ce8:	bf00      	nop
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bc80      	pop	{r7}
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	40010000 	.word	0x40010000
 8004cf8:	40000400 	.word	0x40000400
 8004cfc:	40000800 	.word	0x40000800
 8004d00:	40000c00 	.word	0x40000c00
 8004d04:	40010400 	.word	0x40010400
 8004d08:	40014000 	.word	0x40014000
 8004d0c:	40014400 	.word	0x40014400
 8004d10:	40014800 	.word	0x40014800
 8004d14:	40001800 	.word	0x40001800
 8004d18:	40001c00 	.word	0x40001c00
 8004d1c:	40002000 	.word	0x40002000

08004d20 <tim_write_to_smcr>:

static void tim_write_to_smcr(TIM_Handle_t *pTIMHandle, uint32_t SMCRtempReg)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
	switch(pTIMHandle->TIMx)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	2b11      	cmp	r3, #17
 8004d32:	d844      	bhi.n	8004dbe <tim_write_to_smcr+0x9e>
 8004d34:	a201      	add	r2, pc, #4	; (adr r2, 8004d3c <tim_write_to_smcr+0x1c>)
 8004d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3a:	bf00      	nop
 8004d3c:	08004d85 	.word	0x08004d85
 8004d40:	08004d8d 	.word	0x08004d8d
 8004d44:	08004d97 	.word	0x08004d97
 8004d48:	08004d9f 	.word	0x08004d9f
 8004d4c:	08004da7 	.word	0x08004da7
 8004d50:	08004dbf 	.word	0x08004dbf
 8004d54:	08004dbf 	.word	0x08004dbf
 8004d58:	08004daf 	.word	0x08004daf
 8004d5c:	08004dbf 	.word	0x08004dbf
 8004d60:	08004dbf 	.word	0x08004dbf
 8004d64:	08004dbf 	.word	0x08004dbf
 8004d68:	08004dbf 	.word	0x08004dbf
 8004d6c:	08004dbf 	.word	0x08004dbf
 8004d70:	08004dbf 	.word	0x08004dbf
 8004d74:	08004dbf 	.word	0x08004dbf
 8004d78:	08004dbf 	.word	0x08004dbf
 8004d7c:	08004dbf 	.word	0x08004dbf
 8004d80:	08004db7 	.word	0x08004db7
	{
		case TIM_1:
		{
			TIM1->SMCR.reg = SMCRtempReg;
 8004d84:	4a11      	ldr	r2, [pc, #68]	; (8004dcc <tim_write_to_smcr+0xac>)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	6093      	str	r3, [r2, #8]
			break;
 8004d8a:	e019      	b.n	8004dc0 <tim_write_to_smcr+0xa0>
		}
		case TIM_2:
		{
			TIM2->SMCR.reg = SMCRtempReg;
 8004d8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	6093      	str	r3, [r2, #8]
			break;
 8004d94:	e014      	b.n	8004dc0 <tim_write_to_smcr+0xa0>
		}
		case TIM_3:
		{
			TIM3->SMCR.reg = SMCRtempReg;
 8004d96:	4a0e      	ldr	r2, [pc, #56]	; (8004dd0 <tim_write_to_smcr+0xb0>)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	6093      	str	r3, [r2, #8]
			break;
 8004d9c:	e010      	b.n	8004dc0 <tim_write_to_smcr+0xa0>
		}
		case TIM_4:
		{
			TIM4->SMCR.reg = SMCRtempReg;
 8004d9e:	4a0d      	ldr	r2, [pc, #52]	; (8004dd4 <tim_write_to_smcr+0xb4>)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	6093      	str	r3, [r2, #8]
			break;
 8004da4:	e00c      	b.n	8004dc0 <tim_write_to_smcr+0xa0>
		}
		case TIM_5:
		{
			TIM5->SMCR.reg = SMCRtempReg;
 8004da6:	4a0c      	ldr	r2, [pc, #48]	; (8004dd8 <tim_write_to_smcr+0xb8>)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	6093      	str	r3, [r2, #8]
			break;
 8004dac:	e008      	b.n	8004dc0 <tim_write_to_smcr+0xa0>
		}
		case TIM_8:
		{
			TIM8->SMCR.reg = SMCRtempReg;
 8004dae:	4a0b      	ldr	r2, [pc, #44]	; (8004ddc <tim_write_to_smcr+0xbc>)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	6093      	str	r3, [r2, #8]
			break;
 8004db4:	e004      	b.n	8004dc0 <tim_write_to_smcr+0xa0>
		}
		case TIM_12:
		{
			TIM12->SMCR.reg = SMCRtempReg;
 8004db6:	4a0a      	ldr	r2, [pc, #40]	; (8004de0 <tim_write_to_smcr+0xc0>)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	6093      	str	r3, [r2, #8]
			break;
 8004dbc:	e000      	b.n	8004dc0 <tim_write_to_smcr+0xa0>
		}
		default:
			break;
 8004dbe:	bf00      	nop
	}
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bc80      	pop	{r7}
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	40010000 	.word	0x40010000
 8004dd0:	40000400 	.word	0x40000400
 8004dd4:	40000800 	.word	0x40000800
 8004dd8:	40000c00 	.word	0x40000c00
 8004ddc:	40010400 	.word	0x40010400
 8004de0:	40001800 	.word	0x40001800

08004de4 <tim_oc1_set_config>:
	//wrong input
	return 0x3;
}

static void tim_oc1_set_config(TIM_Handle_t *pTIMHandle, TIM_OC_Config_t *OC_Config)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
	TIM_1_8_CCMR1_Reg_t CCMR1temp = {0};
 8004dee:	2300      	movs	r3, #0
 8004df0:	613b      	str	r3, [r7, #16]
	TIM_1_8_CCER_Reg_t CCERtemp = {0};
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
	TIM_1_8_CR2_Reg_t	CR2temp = {0};
 8004df6:	2300      	movs	r3, #0
 8004df8:	60bb      	str	r3, [r7, #8]
	uint32_t CCR1temp = {0};
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	617b      	str	r3, [r7, #20]

	CCERtemp.reg = tim_read_ccer(pTIMHandle);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7ff fb6e 	bl	80044e0 <tim_read_ccer>
 8004e04:	4603      	mov	r3, r0
 8004e06:	60fb      	str	r3, [r7, #12]

	// disable Channel 1
	CCERtemp.bit.cc1e = RESET;
 8004e08:	89bb      	ldrh	r3, [r7, #12]
 8004e0a:	f36f 0300 	bfc	r3, #0, #1
 8004e0e:	81bb      	strh	r3, [r7, #12]

	tim_write_to_ccer(pTIMHandle, CCERtemp.reg);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4619      	mov	r1, r3
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7ff fd0d 	bl	8004834 <tim_write_to_ccer>

	// get CCER register value
	CCERtemp.reg = tim_read_ccer(pTIMHandle);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7ff fb60 	bl	80044e0 <tim_read_ccer>
 8004e20:	4603      	mov	r3, r0
 8004e22:	60fb      	str	r3, [r7, #12]

	//get CR2 register value
	CR2temp.reg = tim_read_cr2(pTIMHandle);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff fbd1 	bl	80045cc <tim_read_cr2>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	60bb      	str	r3, [r7, #8]

	// get CCMR1 register value
	CCMR1temp.reg = tim_read_ccmrx(pTIMHandle, TIM_CCMR1);
 8004e2e:	2100      	movs	r1, #0
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7ff faa9 	bl	8004388 <tim_read_ccmrx>
 8004e36:	4603      	mov	r3, r0
 8004e38:	613b      	str	r3, [r7, #16]

	// reset Output Compare Mode bits
	CCMR1temp.bit.oc1m = RESET;
 8004e3a:	8a3b      	ldrh	r3, [r7, #16]
 8004e3c:	f36f 1306 	bfc	r3, #4, #3
 8004e40:	823b      	strh	r3, [r7, #16]
	CCMR1temp.bit.cc1s = RESET;
 8004e42:	8a3b      	ldrh	r3, [r7, #16]
 8004e44:	f36f 0301 	bfc	r3, #0, #2
 8004e48:	823b      	strh	r3, [r7, #16]

	// select the output compare mode
	CCMR1temp.bit.oc1m = OC_Config->OCMode;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0307 	and.w	r3, r3, #7
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	8a3b      	ldrh	r3, [r7, #16]
 8004e56:	f362 1306 	bfi	r3, r2, #4, #3
 8004e5a:	823b      	strh	r3, [r7, #16]

	//set the output compare polarity
	CCERtemp.bit.cc1p = OC_Config->OCPolarity;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	89bb      	ldrh	r3, [r7, #12]
 8004e68:	f362 0341 	bfi	r3, r2, #1, #1
 8004e6c:	81bb      	strh	r3, [r7, #12]

	if(((TIM_1 == pTIMHandle->TIMx) && ((TIM_CHANNEL_1 == pTIMHandle->Channel) || (TIM_CHANNEL_2 == pTIMHandle->Channel)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d113      	bne.n	8004e9e <tim_oc1_set_config+0xba>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d026      	beq.n	8004ece <tim_oc1_set_config+0xea>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d021      	beq.n	8004ece <tim_oc1_set_config+0xea>
	|| (TIM_CHANNEL_2 == pTIMHandle->Channel) || (TIM_CHANNEL_3 == pTIMHandle->Channel)))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	d01c      	beq.n	8004ece <tim_oc1_set_config+0xea>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d017      	beq.n	8004ece <tim_oc1_set_config+0xea>
	|| ((TIM_8 == pTIMHandle->TIMx) && ((TIM_CHANNEL_1 == pTIMHandle->Channel) || (TIM_CHANNEL_2 == pTIMHandle->Channel)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	2b08      	cmp	r3, #8
 8004ea4:	d120      	bne.n	8004ee8 <tim_oc1_set_config+0x104>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00e      	beq.n	8004ece <tim_oc1_set_config+0xea>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d009      	beq.n	8004ece <tim_oc1_set_config+0xea>
	|| (TIM_CHANNEL_2 == pTIMHandle->Channel) || (TIM_CHANNEL_3 == pTIMHandle->Channel))))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d004      	beq.n	8004ece <tim_oc1_set_config+0xea>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004eca:	2b08      	cmp	r3, #8
 8004ecc:	d10c      	bne.n	8004ee8 <tim_oc1_set_config+0x104>
	{
		// set the output N polarity level
		CCERtemp.bit.cc1np = OC_Config->OCNPolarity;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	89bb      	ldrh	r3, [r7, #12]
 8004eda:	f362 03c3 	bfi	r3, r2, #3, #1
 8004ede:	81bb      	strh	r3, [r7, #12]

		// reset output N state
		CCERtemp.bit.cc1ne = RESET;
 8004ee0:	89bb      	ldrh	r3, [r7, #12]
 8004ee2:	f36f 0382 	bfc	r3, #2, #1
 8004ee6:	81bb      	strh	r3, [r7, #12]
	}

	if((TIM_1 == pTIMHandle->TIMx) || (TIM_8 == pTIMHandle->TIMx))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d003      	beq.n	8004ef8 <tim_oc1_set_config+0x114>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d119      	bne.n	8004f2c <tim_oc1_set_config+0x148>
	{
		// reset output compare and output compare N IDLE state
		CR2temp.bit.ois1 = RESET;
 8004ef8:	893b      	ldrh	r3, [r7, #8]
 8004efa:	f36f 2308 	bfc	r3, #8, #1
 8004efe:	813b      	strh	r3, [r7, #8]
		CR2temp.bit.ois1n = RESET;
 8004f00:	893b      	ldrh	r3, [r7, #8]
 8004f02:	f36f 2349 	bfc	r3, #9, #1
 8004f06:	813b      	strh	r3, [r7, #8]

		//set output IDLE state
		CR2temp.bit.ois1 = OC_Config->OCIdleState;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	893b      	ldrh	r3, [r7, #8]
 8004f14:	f362 2308 	bfi	r3, r2, #8, #1
 8004f18:	813b      	strh	r3, [r7, #8]
		CR2temp.bit.ois1n = OC_Config->OCNIdleState;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	893b      	ldrh	r3, [r7, #8]
 8004f26:	f362 2349 	bfi	r3, r2, #9, #1
 8004f2a:	813b      	strh	r3, [r7, #8]
	}

	// write to CR2
	tim_write_to_cr2(pTIMHandle, CR2temp.reg);
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4619      	mov	r1, r3
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7ff fc0d 	bl	8004750 <tim_write_to_cr2>

	//write to CCMR1
	tim_write_to_ccmrx(pTIMHandle, TIM_CCMR1, CCMR1temp.reg);
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff fceb 	bl	8004918 <tim_write_to_ccmrx>

	// set capture compare register value
	CCR1temp = OC_Config->Pulse;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	617b      	str	r3, [r7, #20]
	tim_write_to_ccrx(pTIMHandle, TIM_CCR1, CCR1temp);
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff fda1 	bl	8004a94 <tim_write_to_ccrx>

	//write to CCER
	tim_write_to_ccer(pTIMHandle, CCERtemp.reg);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4619      	mov	r1, r3
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff fc6c 	bl	8004834 <tim_write_to_ccer>
}
 8004f5c:	bf00      	nop
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <tim_oc2_set_config>:

static void tim_oc2_set_config(TIM_Handle_t *pTIMHandle, TIM_OC_Config_t *OC_Config)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
	TIM_1_8_CCMR1_Reg_t CCMR1temp = {0};
 8004f6e:	2300      	movs	r3, #0
 8004f70:	613b      	str	r3, [r7, #16]
	TIM_1_8_CCER_Reg_t CCERtemp = {0};
 8004f72:	2300      	movs	r3, #0
 8004f74:	60fb      	str	r3, [r7, #12]
	TIM_1_8_CR2_Reg_t	CR2temp = {0};
 8004f76:	2300      	movs	r3, #0
 8004f78:	60bb      	str	r3, [r7, #8]
	uint32_t CCR2temp = {0};
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	617b      	str	r3, [r7, #20]

	CCERtemp.reg = tim_read_ccer(pTIMHandle);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff faae 	bl	80044e0 <tim_read_ccer>
 8004f84:	4603      	mov	r3, r0
 8004f86:	60fb      	str	r3, [r7, #12]

	// disable Channel 2
	CCERtemp.bit.cc2e = RESET;
 8004f88:	89bb      	ldrh	r3, [r7, #12]
 8004f8a:	f36f 1304 	bfc	r3, #4, #1
 8004f8e:	81bb      	strh	r3, [r7, #12]

	tim_write_to_ccer(pTIMHandle, CCERtemp.reg);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4619      	mov	r1, r3
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7ff fc4d 	bl	8004834 <tim_write_to_ccer>

	// get CCER register value
	CCERtemp.reg = tim_read_ccer(pTIMHandle);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7ff faa0 	bl	80044e0 <tim_read_ccer>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	60fb      	str	r3, [r7, #12]

	//get CR2 register value
	CR2temp.reg = tim_read_cr2(pTIMHandle);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7ff fb11 	bl	80045cc <tim_read_cr2>
 8004faa:	4603      	mov	r3, r0
 8004fac:	60bb      	str	r3, [r7, #8]

	// get CCMR1 register value
	CCMR1temp.reg = tim_read_ccmrx(pTIMHandle, TIM_CCMR1);
 8004fae:	2100      	movs	r1, #0
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7ff f9e9 	bl	8004388 <tim_read_ccmrx>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	613b      	str	r3, [r7, #16]

	// reset Output Compare Mode bits
	CCMR1temp.bit.oc2m = RESET;
 8004fba:	8a3b      	ldrh	r3, [r7, #16]
 8004fbc:	f36f 330e 	bfc	r3, #12, #3
 8004fc0:	823b      	strh	r3, [r7, #16]
	CCMR1temp.bit.cc2s = RESET;
 8004fc2:	8a3b      	ldrh	r3, [r7, #16]
 8004fc4:	f36f 2309 	bfc	r3, #8, #2
 8004fc8:	823b      	strh	r3, [r7, #16]

	// select the output compare mode
	CCMR1temp.bit.oc2m = OC_Config->OCMode;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0307 	and.w	r3, r3, #7
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	8a3b      	ldrh	r3, [r7, #16]
 8004fd6:	f362 330e 	bfi	r3, r2, #12, #3
 8004fda:	823b      	strh	r3, [r7, #16]

	// set output polarity
	CCERtemp.bit.cc2p = OC_Config->OCPolarity;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	89bb      	ldrh	r3, [r7, #12]
 8004fe8:	f362 1345 	bfi	r3, r2, #5, #1
 8004fec:	81bb      	strh	r3, [r7, #12]

	if(((TIM_1 == pTIMHandle->TIMx) && ((TIM_CHANNEL_1 == pTIMHandle->Channel) || (TIM_CHANNEL_2 == pTIMHandle->Channel)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d113      	bne.n	800501e <tim_oc2_set_config+0xba>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d026      	beq.n	800504e <tim_oc2_set_config+0xea>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005006:	2b04      	cmp	r3, #4
 8005008:	d021      	beq.n	800504e <tim_oc2_set_config+0xea>
	|| (TIM_CHANNEL_2 == pTIMHandle->Channel) || (TIM_CHANNEL_3 == pTIMHandle->Channel)))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005010:	2b04      	cmp	r3, #4
 8005012:	d01c      	beq.n	800504e <tim_oc2_set_config+0xea>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 3020 	ldrb.w	r3, [r3, #32]
 800501a:	2b08      	cmp	r3, #8
 800501c:	d017      	beq.n	800504e <tim_oc2_set_config+0xea>
	|| ((TIM_8 == pTIMHandle->TIMx) && ((TIM_CHANNEL_1 == pTIMHandle->Channel) || (TIM_CHANNEL_2 == pTIMHandle->Channel)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2b08      	cmp	r3, #8
 8005024:	d120      	bne.n	8005068 <tim_oc2_set_config+0x104>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 3020 	ldrb.w	r3, [r3, #32]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00e      	beq.n	800504e <tim_oc2_set_config+0xea>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005036:	2b04      	cmp	r3, #4
 8005038:	d009      	beq.n	800504e <tim_oc2_set_config+0xea>
	|| (TIM_CHANNEL_2 == pTIMHandle->Channel) || (TIM_CHANNEL_3 == pTIMHandle->Channel))))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005040:	2b04      	cmp	r3, #4
 8005042:	d004      	beq.n	800504e <tim_oc2_set_config+0xea>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 3020 	ldrb.w	r3, [r3, #32]
 800504a:	2b08      	cmp	r3, #8
 800504c:	d10c      	bne.n	8005068 <tim_oc2_set_config+0x104>
	{
		// set the output N polarity level
		CCERtemp.bit.cc2np = OC_Config->OCNPolarity;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	b2da      	uxtb	r2, r3
 8005058:	89bb      	ldrh	r3, [r7, #12]
 800505a:	f362 13c7 	bfi	r3, r2, #7, #1
 800505e:	81bb      	strh	r3, [r7, #12]

		// reset output N state
		CCERtemp.bit.cc2ne = RESET;
 8005060:	89bb      	ldrh	r3, [r7, #12]
 8005062:	f36f 1386 	bfc	r3, #6, #1
 8005066:	81bb      	strh	r3, [r7, #12]
	}

	if((TIM_1 == pTIMHandle->TIMx) || (TIM_8 == pTIMHandle->TIMx))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d003      	beq.n	8005078 <tim_oc2_set_config+0x114>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	2b08      	cmp	r3, #8
 8005076:	d119      	bne.n	80050ac <tim_oc2_set_config+0x148>
	{
		// reset output compare and output compare N IDLE state
		CR2temp.bit.ois2 = RESET;
 8005078:	893b      	ldrh	r3, [r7, #8]
 800507a:	f36f 238a 	bfc	r3, #10, #1
 800507e:	813b      	strh	r3, [r7, #8]
		CR2temp.bit.ois2n = RESET;
 8005080:	893b      	ldrh	r3, [r7, #8]
 8005082:	f36f 23cb 	bfc	r3, #11, #1
 8005086:	813b      	strh	r3, [r7, #8]

		//set output IDLE state
		CR2temp.bit.ois2 = OC_Config->OCIdleState;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	b2da      	uxtb	r2, r3
 8005092:	893b      	ldrh	r3, [r7, #8]
 8005094:	f362 238a 	bfi	r3, r2, #10, #1
 8005098:	813b      	strh	r3, [r7, #8]
		CR2temp.bit.ois2n = OC_Config->OCNIdleState;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	893b      	ldrh	r3, [r7, #8]
 80050a6:	f362 23cb 	bfi	r3, r2, #11, #1
 80050aa:	813b      	strh	r3, [r7, #8]
	}

	// write to CR2
	tim_write_to_cr2(pTIMHandle, CR2temp.reg);
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4619      	mov	r1, r3
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7ff fb4d 	bl	8004750 <tim_write_to_cr2>

	//write to CCMR1
	tim_write_to_ccmrx(pTIMHandle, TIM_CCMR1, CCMR1temp.reg);
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	461a      	mov	r2, r3
 80050ba:	2100      	movs	r1, #0
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7ff fc2b 	bl	8004918 <tim_write_to_ccmrx>

	// set capture compare register value
	CCR2temp = OC_Config->Pulse;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	617b      	str	r3, [r7, #20]
	tim_write_to_ccrx(pTIMHandle, TIM_CCR2, CCR2temp);
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	2101      	movs	r1, #1
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7ff fce1 	bl	8004a94 <tim_write_to_ccrx>

	//write to CCER
	tim_write_to_ccer(pTIMHandle, CCERtemp.reg);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4619      	mov	r1, r3
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7ff fbac 	bl	8004834 <tim_write_to_ccer>
}
 80050dc:	bf00      	nop
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <tim_oc3_set_config>:


static void tim_oc3_set_config(TIM_Handle_t *pTIMHandle, TIM_OC_Config_t *OC_Config)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
	TIM_1_8_CCMR2_Reg_t CCMR2temp = {0};
 80050ee:	2300      	movs	r3, #0
 80050f0:	613b      	str	r3, [r7, #16]
	TIM_1_8_CCER_Reg_t CCERtemp = {0};
 80050f2:	2300      	movs	r3, #0
 80050f4:	60fb      	str	r3, [r7, #12]
	TIM_1_8_CR2_Reg_t	CR2temp = {0};
 80050f6:	2300      	movs	r3, #0
 80050f8:	60bb      	str	r3, [r7, #8]
	uint32_t CCR3temp = {0};
 80050fa:	2300      	movs	r3, #0
 80050fc:	617b      	str	r3, [r7, #20]

	CCERtemp.reg = tim_read_ccer(pTIMHandle);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7ff f9ee 	bl	80044e0 <tim_read_ccer>
 8005104:	4603      	mov	r3, r0
 8005106:	60fb      	str	r3, [r7, #12]

	// disable Channel 3
	CCERtemp.bit.cc3e = RESET;
 8005108:	89bb      	ldrh	r3, [r7, #12]
 800510a:	f36f 2308 	bfc	r3, #8, #1
 800510e:	81bb      	strh	r3, [r7, #12]

	tim_write_to_ccer(pTIMHandle, CCERtemp.reg);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4619      	mov	r1, r3
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7ff fb8d 	bl	8004834 <tim_write_to_ccer>

	// get CCER register value
	CCERtemp.reg = tim_read_ccer(pTIMHandle);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7ff f9e0 	bl	80044e0 <tim_read_ccer>
 8005120:	4603      	mov	r3, r0
 8005122:	60fb      	str	r3, [r7, #12]

	//get CR2 register value
	CR2temp.reg = tim_read_cr2(pTIMHandle);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f7ff fa51 	bl	80045cc <tim_read_cr2>
 800512a:	4603      	mov	r3, r0
 800512c:	60bb      	str	r3, [r7, #8]

	// get CCMR2 register value
	CCMR2temp.reg = tim_read_ccmrx(pTIMHandle, TIM_CCMR2);
 800512e:	2101      	movs	r1, #1
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff f929 	bl	8004388 <tim_read_ccmrx>
 8005136:	4603      	mov	r3, r0
 8005138:	613b      	str	r3, [r7, #16]

	// reset Output Compare Mode bits
	CCMR2temp.bit.oc3m = RESET;
 800513a:	8a3b      	ldrh	r3, [r7, #16]
 800513c:	f36f 1306 	bfc	r3, #4, #3
 8005140:	823b      	strh	r3, [r7, #16]
	CCMR2temp.bit.cc3s = RESET;
 8005142:	8a3b      	ldrh	r3, [r7, #16]
 8005144:	f36f 0301 	bfc	r3, #0, #2
 8005148:	823b      	strh	r3, [r7, #16]

	// select the output compare mode
	CCMR2temp.bit.oc3m = OC_Config->OCMode;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0307 	and.w	r3, r3, #7
 8005152:	b2da      	uxtb	r2, r3
 8005154:	8a3b      	ldrh	r3, [r7, #16]
 8005156:	f362 1306 	bfi	r3, r2, #4, #3
 800515a:	823b      	strh	r3, [r7, #16]

	// set output polarity
	CCERtemp.bit.cc3p = OC_Config->OCPolarity;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	b2da      	uxtb	r2, r3
 8005166:	89bb      	ldrh	r3, [r7, #12]
 8005168:	f362 2349 	bfi	r3, r2, #9, #1
 800516c:	81bb      	strh	r3, [r7, #12]

	if(((TIM_1 == pTIMHandle->TIMx) && ((TIM_CHANNEL_1 == pTIMHandle->Channel) || (TIM_CHANNEL_2 == pTIMHandle->Channel)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d113      	bne.n	800519e <tim_oc3_set_config+0xba>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 3020 	ldrb.w	r3, [r3, #32]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d026      	beq.n	80051ce <tim_oc3_set_config+0xea>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005186:	2b04      	cmp	r3, #4
 8005188:	d021      	beq.n	80051ce <tim_oc3_set_config+0xea>
	|| (TIM_CHANNEL_2 == pTIMHandle->Channel) || (TIM_CHANNEL_3 == pTIMHandle->Channel)))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005190:	2b04      	cmp	r3, #4
 8005192:	d01c      	beq.n	80051ce <tim_oc3_set_config+0xea>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 3020 	ldrb.w	r3, [r3, #32]
 800519a:	2b08      	cmp	r3, #8
 800519c:	d017      	beq.n	80051ce <tim_oc3_set_config+0xea>
	|| ((TIM_8 == pTIMHandle->TIMx) && ((TIM_CHANNEL_1 == pTIMHandle->Channel) || (TIM_CHANNEL_2 == pTIMHandle->Channel)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	2b08      	cmp	r3, #8
 80051a4:	d120      	bne.n	80051e8 <tim_oc3_set_config+0x104>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00e      	beq.n	80051ce <tim_oc3_set_config+0xea>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d009      	beq.n	80051ce <tim_oc3_set_config+0xea>
	|| (TIM_CHANNEL_2 == pTIMHandle->Channel) || (TIM_CHANNEL_3 == pTIMHandle->Channel))))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051c0:	2b04      	cmp	r3, #4
 80051c2:	d004      	beq.n	80051ce <tim_oc3_set_config+0xea>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051ca:	2b08      	cmp	r3, #8
 80051cc:	d10c      	bne.n	80051e8 <tim_oc3_set_config+0x104>
	{
		// set the output N polarity level
		CCERtemp.bit.cc3np = OC_Config->OCNPolarity;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	89bb      	ldrh	r3, [r7, #12]
 80051da:	f362 23cb 	bfi	r3, r2, #11, #1
 80051de:	81bb      	strh	r3, [r7, #12]

		// reset output N state
		CCERtemp.bit.cc3ne = RESET;
 80051e0:	89bb      	ldrh	r3, [r7, #12]
 80051e2:	f36f 238a 	bfc	r3, #10, #1
 80051e6:	81bb      	strh	r3, [r7, #12]
	}

	if((TIM_1 == pTIMHandle->TIMx) || (TIM_8 == pTIMHandle->TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d003      	beq.n	80051f8 <tim_oc3_set_config+0x114>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d119      	bne.n	800522c <tim_oc3_set_config+0x148>
	{
		// reset output compare and output compare N IDLE state
		CR2temp.bit.ois3 = RESET;
 80051f8:	893b      	ldrh	r3, [r7, #8]
 80051fa:	f36f 330c 	bfc	r3, #12, #1
 80051fe:	813b      	strh	r3, [r7, #8]
		CR2temp.bit.ois3n = RESET;
 8005200:	893b      	ldrh	r3, [r7, #8]
 8005202:	f36f 334d 	bfc	r3, #13, #1
 8005206:	813b      	strh	r3, [r7, #8]

		//set output IDLE state
		CR2temp.bit.ois3 = OC_Config->OCIdleState;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	b2da      	uxtb	r2, r3
 8005212:	893b      	ldrh	r3, [r7, #8]
 8005214:	f362 330c 	bfi	r3, r2, #12, #1
 8005218:	813b      	strh	r3, [r7, #8]
		CR2temp.bit.ois3n = OC_Config->OCNIdleState;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	b2da      	uxtb	r2, r3
 8005224:	893b      	ldrh	r3, [r7, #8]
 8005226:	f362 334d 	bfi	r3, r2, #13, #1
 800522a:	813b      	strh	r3, [r7, #8]
	}

	// write to CR2
	tim_write_to_cr2(pTIMHandle, CR2temp.reg);
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4619      	mov	r1, r3
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f7ff fa8d 	bl	8004750 <tim_write_to_cr2>

	//write to CCMR1
	tim_write_to_ccmrx(pTIMHandle, TIM_CCMR2, CCMR2temp.reg);
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	461a      	mov	r2, r3
 800523a:	2101      	movs	r1, #1
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f7ff fb6b 	bl	8004918 <tim_write_to_ccmrx>

	// set capture compare register value
	CCR3temp = OC_Config->Pulse;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	617b      	str	r3, [r7, #20]
	tim_write_to_ccrx(pTIMHandle, TIM_CCR3, CCR3temp);
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	2102      	movs	r1, #2
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff fc21 	bl	8004a94 <tim_write_to_ccrx>

	//write to CCER
	tim_write_to_ccer(pTIMHandle, CCERtemp.reg);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4619      	mov	r1, r3
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7ff faec 	bl	8004834 <tim_write_to_ccer>
}
 800525c:	bf00      	nop
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <tim_oc4_set_config>:


static void tim_oc4_set_config(TIM_Handle_t *pTIMHandle, TIM_OC_Config_t *OC_Config)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
	TIM_1_8_CCMR2_Reg_t CCMR2temp = {0};
 800526e:	2300      	movs	r3, #0
 8005270:	613b      	str	r3, [r7, #16]
	TIM_1_8_CCER_Reg_t CCERtemp = {0};
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]
	TIM_1_8_CR2_Reg_t	CR2temp = {0};
 8005276:	2300      	movs	r3, #0
 8005278:	60bb      	str	r3, [r7, #8]
	uint32_t CCR4temp = {0};
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]

	CCERtemp.reg = tim_read_ccer(pTIMHandle);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7ff f92e 	bl	80044e0 <tim_read_ccer>
 8005284:	4603      	mov	r3, r0
 8005286:	60fb      	str	r3, [r7, #12]

	// disable Channel 4
	CCERtemp.bit.cc4e = RESET;
 8005288:	89bb      	ldrh	r3, [r7, #12]
 800528a:	f36f 330c 	bfc	r3, #12, #1
 800528e:	81bb      	strh	r3, [r7, #12]

	tim_write_to_ccer(pTIMHandle, CCERtemp.reg);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4619      	mov	r1, r3
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7ff facd 	bl	8004834 <tim_write_to_ccer>

	// get CCER register value
	CCERtemp.reg = tim_read_ccer(pTIMHandle);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7ff f920 	bl	80044e0 <tim_read_ccer>
 80052a0:	4603      	mov	r3, r0
 80052a2:	60fb      	str	r3, [r7, #12]

	//get CR2 register value
	CR2temp.reg = tim_read_cr2(pTIMHandle);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7ff f991 	bl	80045cc <tim_read_cr2>
 80052aa:	4603      	mov	r3, r0
 80052ac:	60bb      	str	r3, [r7, #8]

	// get CCMR2 register value
	CCMR2temp.reg = tim_read_ccmrx(pTIMHandle, TIM_CCMR2);
 80052ae:	2101      	movs	r1, #1
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f7ff f869 	bl	8004388 <tim_read_ccmrx>
 80052b6:	4603      	mov	r3, r0
 80052b8:	613b      	str	r3, [r7, #16]

	// reset Output Compare Mode bits
	CCMR2temp.bit.oc4m = RESET;
 80052ba:	8a3b      	ldrh	r3, [r7, #16]
 80052bc:	f36f 330e 	bfc	r3, #12, #3
 80052c0:	823b      	strh	r3, [r7, #16]
	CCMR2temp.bit.cc4s = RESET;
 80052c2:	8a3b      	ldrh	r3, [r7, #16]
 80052c4:	f36f 2309 	bfc	r3, #8, #2
 80052c8:	823b      	strh	r3, [r7, #16]

	// select the output compare mode
	CCMR2temp.bit.oc4m = OC_Config->OCMode;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	8a3b      	ldrh	r3, [r7, #16]
 80052d6:	f362 330e 	bfi	r3, r2, #12, #3
 80052da:	823b      	strh	r3, [r7, #16]

	// set output polarity
	CCERtemp.bit.cc4p = OC_Config->OCPolarity;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	89bb      	ldrh	r3, [r7, #12]
 80052e8:	f362 334d 	bfi	r3, r2, #13, #1
 80052ec:	81bb      	strh	r3, [r7, #12]

	if(((TIM_1 == pTIMHandle->TIMx) && ((TIM_CHANNEL_1 == pTIMHandle->Channel) || (TIM_CHANNEL_2 == pTIMHandle->Channel)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d113      	bne.n	800531e <tim_oc4_set_config+0xba>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d026      	beq.n	800534e <tim_oc4_set_config+0xea>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005306:	2b04      	cmp	r3, #4
 8005308:	d021      	beq.n	800534e <tim_oc4_set_config+0xea>
	|| (TIM_CHANNEL_2 == pTIMHandle->Channel) || (TIM_CHANNEL_3 == pTIMHandle->Channel)))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005310:	2b04      	cmp	r3, #4
 8005312:	d01c      	beq.n	800534e <tim_oc4_set_config+0xea>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 3020 	ldrb.w	r3, [r3, #32]
 800531a:	2b08      	cmp	r3, #8
 800531c:	d017      	beq.n	800534e <tim_oc4_set_config+0xea>
	|| ((TIM_8 == pTIMHandle->TIMx) && ((TIM_CHANNEL_1 == pTIMHandle->Channel) || (TIM_CHANNEL_2 == pTIMHandle->Channel)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b08      	cmp	r3, #8
 8005324:	d11c      	bne.n	8005360 <tim_oc4_set_config+0xfc>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 3020 	ldrb.w	r3, [r3, #32]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00e      	beq.n	800534e <tim_oc4_set_config+0xea>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005336:	2b04      	cmp	r3, #4
 8005338:	d009      	beq.n	800534e <tim_oc4_set_config+0xea>
	|| (TIM_CHANNEL_2 == pTIMHandle->Channel) || (TIM_CHANNEL_3 == pTIMHandle->Channel))))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005340:	2b04      	cmp	r3, #4
 8005342:	d004      	beq.n	800534e <tim_oc4_set_config+0xea>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 3020 	ldrb.w	r3, [r3, #32]
 800534a:	2b08      	cmp	r3, #8
 800534c:	d108      	bne.n	8005360 <tim_oc4_set_config+0xfc>
	{
		// set the output N polarity level
		CCERtemp.bit.cc4np = OC_Config->OCNPolarity;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	b2da      	uxtb	r2, r3
 8005358:	89bb      	ldrh	r3, [r7, #12]
 800535a:	f362 33cf 	bfi	r3, r2, #15, #1
 800535e:	81bb      	strh	r3, [r7, #12]

	}

	if((TIM_1 == pTIMHandle->TIMx) || (TIM_8 == pTIMHandle->TIMx))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d003      	beq.n	8005370 <tim_oc4_set_config+0x10c>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	2b08      	cmp	r3, #8
 800536e:	d10c      	bne.n	800538a <tim_oc4_set_config+0x126>
	{
		// reset output compare IDLE state
		CR2temp.bit.ois4 = RESET;
 8005370:	893b      	ldrh	r3, [r7, #8]
 8005372:	f36f 338e 	bfc	r3, #14, #1
 8005376:	813b      	strh	r3, [r7, #8]

		//set output IDLE state
		CR2temp.bit.ois4 = OC_Config->OCIdleState;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	b2da      	uxtb	r2, r3
 8005382:	893b      	ldrh	r3, [r7, #8]
 8005384:	f362 338e 	bfi	r3, r2, #14, #1
 8005388:	813b      	strh	r3, [r7, #8]
	}

	// write to CR2
	tim_write_to_cr2(pTIMHandle, CR2temp.reg);
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	4619      	mov	r1, r3
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7ff f9de 	bl	8004750 <tim_write_to_cr2>

	//write to CCMR1
	tim_write_to_ccmrx(pTIMHandle, TIM_CCMR2, CCMR2temp.reg);
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	461a      	mov	r2, r3
 8005398:	2101      	movs	r1, #1
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7ff fabc 	bl	8004918 <tim_write_to_ccmrx>

	// set capture compare register value
	CCR4temp = OC_Config->Pulse;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	617b      	str	r3, [r7, #20]
	tim_write_to_ccrx(pTIMHandle, TIM_CCR4, CCR4temp);
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	2103      	movs	r1, #3
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7ff fb72 	bl	8004a94 <tim_write_to_ccrx>

	//write to CCER
	tim_write_to_ccer(pTIMHandle, CCERtemp.reg);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4619      	mov	r1, r3
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7ff fa3d 	bl	8004834 <tim_write_to_ccer>
}
 80053ba:	bf00      	nop
 80053bc:	3718      	adds	r7, #24
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <tim_etr_set_config>:
	tim_write_to_ccer(pTIMHandle, CCERtemp.reg);
}

static void tim_etr_set_config(TIM_Handle_t *pTIMHandle, uint32_t TIM_ExtTRGPrescaler, uint32_t TIM_ExtTRGPolarity,
		uint32_t ExtTRGFilter)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b086      	sub	sp, #24
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	60f8      	str	r0, [r7, #12]
 80053ca:	60b9      	str	r1, [r7, #8]
 80053cc:	607a      	str	r2, [r7, #4]
 80053ce:	603b      	str	r3, [r7, #0]
	TIM_1_8_SMCR_Reg_t SMCRtemp = {0};
 80053d0:	2300      	movs	r3, #0
 80053d2:	617b      	str	r3, [r7, #20]

	SMCRtemp.reg = tim_read_smcr(pTIMHandle);
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f7ff f961 	bl	800469c <tim_read_smcr>
 80053da:	4603      	mov	r3, r0
 80053dc:	617b      	str	r3, [r7, #20]

	//reset ETR bits

	SMCRtemp.bit.etf = RESET;
 80053de:	8abb      	ldrh	r3, [r7, #20]
 80053e0:	f36f 230b 	bfc	r3, #8, #4
 80053e4:	82bb      	strh	r3, [r7, #20]
	SMCRtemp.bit.etps = RESET;
 80053e6:	8abb      	ldrh	r3, [r7, #20]
 80053e8:	f36f 330d 	bfc	r3, #12, #2
 80053ec:	82bb      	strh	r3, [r7, #20]
	SMCRtemp.bit.ece = RESET;
 80053ee:	8abb      	ldrh	r3, [r7, #20]
 80053f0:	f36f 338e 	bfc	r3, #14, #1
 80053f4:	82bb      	strh	r3, [r7, #20]
	SMCRtemp.bit.etp = RESET;
 80053f6:	8abb      	ldrh	r3, [r7, #20]
 80053f8:	f36f 33cf 	bfc	r3, #15, #1
 80053fc:	82bb      	strh	r3, [r7, #20]

	// set prescaler, filter value and polarity
	SMCRtemp.bit.etf = ExtTRGFilter;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	f003 030f 	and.w	r3, r3, #15
 8005404:	b2da      	uxtb	r2, r3
 8005406:	8abb      	ldrh	r3, [r7, #20]
 8005408:	f362 230b 	bfi	r3, r2, #8, #4
 800540c:	82bb      	strh	r3, [r7, #20]
	SMCRtemp.bit.etps = TIM_ExtTRGPrescaler;
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f003 0303 	and.w	r3, r3, #3
 8005414:	b2da      	uxtb	r2, r3
 8005416:	8abb      	ldrh	r3, [r7, #20]
 8005418:	f362 330d 	bfi	r3, r2, #12, #2
 800541c:	82bb      	strh	r3, [r7, #20]
	SMCRtemp.bit.etp = TIM_ExtTRGPolarity;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	b2da      	uxtb	r2, r3
 8005426:	8abb      	ldrh	r3, [r7, #20]
 8005428:	f362 33cf 	bfi	r3, r2, #15, #1
 800542c:	82bb      	strh	r3, [r7, #20]

	// write to SMCR
	tim_write_to_smcr(pTIMHandle, SMCRtemp.reg);
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	4619      	mov	r1, r3
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f7ff fc74 	bl	8004d20 <tim_write_to_smcr>
}
 8005438:	bf00      	nop
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <tim_itrx_set_config>:


static void tim_itrx_set_config(TIM_Handle_t *pTIMHandle, uint32_t InputTriggerSource)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
	TIM_1_8_SMCR_Reg_t SMCRtemp = {0};
 800544a:	2300      	movs	r3, #0
 800544c:	60fb      	str	r3, [r7, #12]

	SMCRtemp.reg = tim_read_smcr(pTIMHandle);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7ff f924 	bl	800469c <tim_read_smcr>
 8005454:	4603      	mov	r3, r0
 8005456:	60fb      	str	r3, [r7, #12]

	// Reset the TS Bits
	SMCRtemp.bit.ts = RESET;
 8005458:	89bb      	ldrh	r3, [r7, #12]
 800545a:	f36f 1306 	bfc	r3, #4, #3
 800545e:	81bb      	strh	r3, [r7, #12]

	// set the Input Trigger source and the slave mode
	SMCRtemp.bit.ts = InputTriggerSource;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	b2da      	uxtb	r2, r3
 8005468:	89bb      	ldrh	r3, [r7, #12]
 800546a:	f362 1306 	bfi	r3, r2, #4, #3
 800546e:	81bb      	strh	r3, [r7, #12]
	SMCRtemp.bit.sms = 0x7U; //  External Clock Mode 1 : 111
 8005470:	89bb      	ldrh	r3, [r7, #12]
 8005472:	f043 0307 	orr.w	r3, r3, #7
 8005476:	81bb      	strh	r3, [r7, #12]

	// write to TIMx SMCR
	tim_write_to_smcr(pTIMHandle, SMCRtemp.reg);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4619      	mov	r1, r3
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7ff fc4f 	bl	8004d20 <tim_write_to_smcr>
}
 8005482:	bf00      	nop
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <tim_ti1_config_input_stage>:


static void tim_ti1_config_input_stage(TIM_Handle_t *pTIMHandle, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b086      	sub	sp, #24
 800548e:	af00      	add	r7, sp, #0
 8005490:	60f8      	str	r0, [r7, #12]
 8005492:	60b9      	str	r1, [r7, #8]
 8005494:	607a      	str	r2, [r7, #4]
	TIM_1_8_CCMR1_Reg_t CCMR1temp = {0};
 8005496:	2300      	movs	r3, #0
 8005498:	617b      	str	r3, [r7, #20]
	TIM_1_8_CCER_Reg_t CCERtemp = {0};
 800549a:	2300      	movs	r3, #0
 800549c:	613b      	str	r3, [r7, #16]
	CCERtemp.reg = tim_read_ccer(pTIMHandle);
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f7ff f81e 	bl	80044e0 <tim_read_ccer>
 80054a4:	4603      	mov	r3, r0
 80054a6:	613b      	str	r3, [r7, #16]

	// disable the channel 1: reset the CC2E bit
	CCERtemp.bit.cc1e = RESET;
 80054a8:	8a3b      	ldrh	r3, [r7, #16]
 80054aa:	f36f 0300 	bfc	r3, #0, #1
 80054ae:	823b      	strh	r3, [r7, #16]
	tim_write_to_ccer(pTIMHandle, CCERtemp.reg);
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	4619      	mov	r1, r3
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f7ff f9bd 	bl	8004834 <tim_write_to_ccer>

	CCMR1temp.reg = tim_read_ccmrx(pTIMHandle, TIM_CCMR1);
 80054ba:	2100      	movs	r1, #0
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f7fe ff63 	bl	8004388 <tim_read_ccmrx>
 80054c2:	4603      	mov	r3, r0
 80054c4:	617b      	str	r3, [r7, #20]
	CCERtemp.reg = tim_read_ccer(pTIMHandle);
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f7ff f80a 	bl	80044e0 <tim_read_ccer>
 80054cc:	4603      	mov	r3, r0
 80054ce:	613b      	str	r3, [r7, #16]

	// set the filter
	CCMR1temp.bit.oc1m = RESET;
 80054d0:	8abb      	ldrh	r3, [r7, #20]
 80054d2:	f36f 1306 	bfc	r3, #4, #3
 80054d6:	82bb      	strh	r3, [r7, #20]
	CCMR1temp.bit.oc1ce = RESET;
 80054d8:	8abb      	ldrh	r3, [r7, #20]
 80054da:	f36f 13c7 	bfc	r3, #7, #1
 80054de:	82bb      	strh	r3, [r7, #20]

	CCMR1temp.reg |= (TIM_ICFilter << 4U);
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	4313      	orrs	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]

	// select the polarity and set CC1E bit
	CCERtemp.bit.cc1p = RESET;
 80054ea:	8a3b      	ldrh	r3, [r7, #16]
 80054ec:	f36f 0341 	bfc	r3, #1, #1
 80054f0:	823b      	strh	r3, [r7, #16]
	CCERtemp.bit.cc1np = RESET;
 80054f2:	8a3b      	ldrh	r3, [r7, #16]
 80054f4:	f36f 03c3 	bfc	r3, #3, #1
 80054f8:	823b      	strh	r3, [r7, #16]

	CCERtemp.reg |= (TIM_ICPolarity << 4U);
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	4313      	orrs	r3, r2
 8005502:	613b      	str	r3, [r7, #16]

	// write to CCMR1 and CCER registers
	tim_write_to_ccer(pTIMHandle, CCERtemp.reg);
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	4619      	mov	r1, r3
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f7ff f993 	bl	8004834 <tim_write_to_ccer>
	tim_write_to_ccmrx(pTIMHandle, TIM_CCMR1, CCMR1temp.reg);
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	461a      	mov	r2, r3
 8005512:	2100      	movs	r1, #0
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f7ff f9ff 	bl	8004918 <tim_write_to_ccmrx>
}
 800551a:	bf00      	nop
 800551c:	3718      	adds	r7, #24
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <tim_ti2_config_input_stage>:


static void tim_ti2_config_input_stage(TIM_Handle_t *pTIMHandle, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b086      	sub	sp, #24
 8005526:	af00      	add	r7, sp, #0
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	607a      	str	r2, [r7, #4]
	TIM_1_8_CCMR1_Reg_t CCMR1temp = {0};
 800552e:	2300      	movs	r3, #0
 8005530:	617b      	str	r3, [r7, #20]
	TIM_1_8_CCER_Reg_t CCERtemp = {0};
 8005532:	2300      	movs	r3, #0
 8005534:	613b      	str	r3, [r7, #16]
	CCERtemp.reg = tim_read_ccer(pTIMHandle);
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f7fe ffd2 	bl	80044e0 <tim_read_ccer>
 800553c:	4603      	mov	r3, r0
 800553e:	613b      	str	r3, [r7, #16]

	// disable the channel 2: reset the CC2E bit
	CCERtemp.bit.cc2e = RESET;
 8005540:	8a3b      	ldrh	r3, [r7, #16]
 8005542:	f36f 1304 	bfc	r3, #4, #1
 8005546:	823b      	strh	r3, [r7, #16]
	tim_write_to_ccer(pTIMHandle, CCERtemp.reg);
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	4619      	mov	r1, r3
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f7ff f971 	bl	8004834 <tim_write_to_ccer>

	CCMR1temp.reg = tim_read_ccmrx(pTIMHandle, TIM_CCMR1);
 8005552:	2100      	movs	r1, #0
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f7fe ff17 	bl	8004388 <tim_read_ccmrx>
 800555a:	4603      	mov	r3, r0
 800555c:	617b      	str	r3, [r7, #20]
	CCERtemp.reg = tim_read_ccer(pTIMHandle);
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f7fe ffbe 	bl	80044e0 <tim_read_ccer>
 8005564:	4603      	mov	r3, r0
 8005566:	613b      	str	r3, [r7, #16]

	// set the filter
	CCMR1temp.bit.oc2m = RESET;
 8005568:	8abb      	ldrh	r3, [r7, #20]
 800556a:	f36f 330e 	bfc	r3, #12, #3
 800556e:	82bb      	strh	r3, [r7, #20]
	CCMR1temp.bit.oc2ce = RESET;
 8005570:	8abb      	ldrh	r3, [r7, #20]
 8005572:	f36f 33cf 	bfc	r3, #15, #1
 8005576:	82bb      	strh	r3, [r7, #20]

	CCMR1temp.reg |= (TIM_ICFilter << 12U);
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	031b      	lsls	r3, r3, #12
 800557e:	4313      	orrs	r3, r2
 8005580:	617b      	str	r3, [r7, #20]

	// select the polarity and set CC2E bit
	CCERtemp.bit.cc2p = RESET;
 8005582:	8a3b      	ldrh	r3, [r7, #16]
 8005584:	f36f 1345 	bfc	r3, #5, #1
 8005588:	823b      	strh	r3, [r7, #16]
	CCERtemp.bit.cc2np = RESET;
 800558a:	8a3b      	ldrh	r3, [r7, #16]
 800558c:	f36f 13c7 	bfc	r3, #7, #1
 8005590:	823b      	strh	r3, [r7, #16]

	CCERtemp.reg |= (TIM_ICPolarity << 4U);
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	011b      	lsls	r3, r3, #4
 8005598:	4313      	orrs	r3, r2
 800559a:	613b      	str	r3, [r7, #16]

	// write to CCMR1 and CCER registers
	tim_write_to_ccer(pTIMHandle, CCERtemp.reg);
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	4619      	mov	r1, r3
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f7ff f947 	bl	8004834 <tim_write_to_ccer>
	tim_write_to_ccmrx(pTIMHandle, TIM_CCMR1, CCMR1temp.reg);
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	461a      	mov	r2, r3
 80055aa:	2100      	movs	r1, #0
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f7ff f9b3 	bl	8004918 <tim_write_to_ccmrx>
}
 80055b2:	bf00      	nop
 80055b4:	3718      	adds	r7, #24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
	...

080055bc <USART_SetBaudRate>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]

	//variable to hold fraction value
	uint32_t F_part;

	//Get the value of APB bus clock in to the variable PCLKx
	if(pUSARTx == USART1 || pUSARTx == USART6)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a39      	ldr	r2, [pc, #228]	; (80056b0 <USART_SetBaudRate+0xf4>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d003      	beq.n	80055d6 <USART_SetBaudRate+0x1a>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a38      	ldr	r2, [pc, #224]	; (80056b4 <USART_SetBaudRate+0xf8>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d103      	bne.n	80055de <USART_SetBaudRate+0x22>
	{
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Freq();
 80055d6:	f7fc fb15 	bl	8001c04 <RCC_GetPCLK2Freq>
 80055da:	6178      	str	r0, [r7, #20]
 80055dc:	e002      	b.n	80055e4 <USART_SetBaudRate+0x28>
	}else
	{
	   PCLKx = RCC_GetPCLK1Freq();
 80055de:	f7fc faab 	bl	8001b38 <RCC_GetPCLK1Freq>
 80055e2:	6178      	str	r0, [r7, #20]
	}

	//Check for OVER8 configuration bit
	if(1 == pUSARTx->CR1.bit.over8)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d10b      	bne.n	800560a <USART_SetBaudRate+0x4e>
	{
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	4613      	mov	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	009a      	lsls	r2, r3, #2
 80055fc:	441a      	add	r2, r3
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	fbb2 f3f3 	udiv	r3, r2, r3
 8005606:	613b      	str	r3, [r7, #16]
 8005608:	e00a      	b.n	8005620 <USART_SetBaudRate+0x64>
	}else
	{
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	4613      	mov	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	009a      	lsls	r2, r3, #2
 8005614:	441a      	add	r2, r3
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	fbb2 f3f3 	udiv	r3, r2, r3
 800561e:	613b      	str	r3, [r7, #16]
	}

	//Calculate the Mantissa part
	pUSARTx->BRR.bit.div_mantissa = usartdiv/100;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	4a25      	ldr	r2, [pc, #148]	; (80056b8 <USART_SetBaudRate+0xfc>)
 8005624:	fba2 2303 	umull	r2, r3, r2, r3
 8005628:	095b      	lsrs	r3, r3, #5
 800562a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800562e:	b299      	uxth	r1, r3
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6893      	ldr	r3, [r2, #8]
 8005634:	f361 130f 	bfi	r3, r1, #4, #12
 8005638:	6093      	str	r3, [r2, #8]

	//Extract the fraction part
	F_part = (usartdiv - (pUSARTx->BRR.bit.div_mantissa * 100));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8005642:	b29b      	uxth	r3, r3
 8005644:	461a      	mov	r2, r3
 8005646:	2364      	movs	r3, #100	; 0x64
 8005648:	fb02 f303 	mul.w	r3, r2, r3
 800564c:	461a      	mov	r2, r3
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1a9b      	subs	r3, r3, r2
 8005652:	60fb      	str	r3, [r7, #12]

	//Calculate the final fractional
	if(1 == pUSARTx->CR1.bit.over8)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b01      	cmp	r3, #1
 8005660:	d112      	bne.n	8005688 <USART_SetBaudRate+0xcc>
	{
	  //OVER8 = 1 , over sampling by 8
	  pUSARTx->BRR.bit.div_fraction = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	00db      	lsls	r3, r3, #3
 8005666:	3332      	adds	r3, #50	; 0x32
 8005668:	4a13      	ldr	r2, [pc, #76]	; (80056b8 <USART_SetBaudRate+0xfc>)
 800566a:	fba2 2303 	umull	r2, r3, r2, r3
 800566e:	095b      	lsrs	r3, r3, #5
 8005670:	f003 030f 	and.w	r3, r3, #15
 8005674:	b2db      	uxtb	r3, r3
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	b2d9      	uxtb	r1, r3
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6893      	ldr	r3, [r2, #8]
 8005680:	f361 0303 	bfi	r3, r1, #0, #4
 8005684:	6093      	str	r3, [r2, #8]
	{
	   //over sampling by 16
	   pUSARTx->BRR.bit.div_fraction = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);

	}
}
 8005686:	e00e      	b.n	80056a6 <USART_SetBaudRate+0xea>
	   pUSARTx->BRR.bit.div_fraction = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	3332      	adds	r3, #50	; 0x32
 800568e:	4a0a      	ldr	r2, [pc, #40]	; (80056b8 <USART_SetBaudRate+0xfc>)
 8005690:	fba2 2303 	umull	r2, r3, r2, r3
 8005694:	095b      	lsrs	r3, r3, #5
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	b2d9      	uxtb	r1, r3
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	6893      	ldr	r3, [r2, #8]
 80056a0:	f361 0303 	bfi	r3, r1, #0, #4
 80056a4:	6093      	str	r3, [r2, #8]
}
 80056a6:	bf00      	nop
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	40011000 	.word	0x40011000
 80056b4:	40011400 	.word	0x40011400
 80056b8:	51eb851f 	.word	0x51eb851f

080056bc <USART_Init>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]

	//Temporary handle
	USART_CR1_Reg_t CR1_temp = {0};
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2101      	movs	r1, #1
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 f896 	bl	8005800 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if (USART_MODE_ONLY_RX ==  pUSARTHandle->USART_Config.USART_Mode)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	791b      	ldrb	r3, [r3, #4]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d104      	bne.n	80056e6 <USART_Init+0x2a>
	{
		//enable the Receiver bit field
		CR1_temp.bit.re = SET;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f043 0304 	orr.w	r3, r3, #4
 80056e2:	60fb      	str	r3, [r7, #12]
 80056e4:	e014      	b.n	8005710 <USART_Init+0x54>

	}else if (USART_MODE_ONLY_TX == pUSARTHandle->USART_Config.USART_Mode)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	791b      	ldrb	r3, [r3, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d104      	bne.n	80056f8 <USART_Init+0x3c>
	{
		//enable the Transmitter bit field
		CR1_temp.bit.te = SET;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f043 0308 	orr.w	r3, r3, #8
 80056f4:	60fb      	str	r3, [r7, #12]
 80056f6:	e00b      	b.n	8005710 <USART_Init+0x54>

	}else if (USART_MODE_TXRX == pUSARTHandle->USART_Config.USART_Mode)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	791b      	ldrb	r3, [r3, #4]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d107      	bne.n	8005710 <USART_Init+0x54>
	{
		//enable the both Transmitter and Receiver bit fields
		CR1_temp.bit.te = SET;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f043 0308 	orr.w	r3, r3, #8
 8005706:	60fb      	str	r3, [r7, #12]
		CR1_temp.bit.re = SET;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f043 0304 	orr.w	r3, r3, #4
 800570e:	60fb      	str	r3, [r7, #12]
	}

    //configure the Word length configuration item
	CR1_temp.bit.m = pUSARTHandle->USART_Config.USART_WordLength;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	7b5b      	ldrb	r3, [r3, #13]
 8005714:	f003 0301 	and.w	r3, r3, #1
 8005718:	b2da      	uxtb	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f362 330c 	bfi	r3, r2, #12, #1
 8005720:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if (USART_PARITY_EN_EVEN ==  pUSARTHandle->USART_Config.USART_ParityControl)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	7b9b      	ldrb	r3, [r3, #14]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d104      	bne.n	8005734 <USART_Init+0x78>
	{
		//enable the parity control
		CR1_temp.bit.pce = SET;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	e00b      	b.n	800574c <USART_Init+0x90>

		//by default EVEN parity will be selected once you enable the parity control

	}else if (USART_PARITY_EN_ODD == pUSARTHandle->USART_Config.USART_ParityControl)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	7b9b      	ldrb	r3, [r3, #14]
 8005738:	2b02      	cmp	r3, #2
 800573a:	d107      	bne.n	800574c <USART_Init+0x90>
	{
		//enable the parity control
		CR1_temp.bit.pce = SET;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005742:	60fb      	str	r3, [r7, #12]

	    //enable ODD parity
		CR1_temp.bit.ps = SET;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800574a:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1.reg = CR1_temp.reg;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	//configure the number of stop bits inserted during USART frame transmission
	pUSARTHandle->pUSARTx->CR2.bit.stop = pUSARTHandle->USART_Config.USART_NoOfStopBits;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	7b19      	ldrb	r1, [r3, #12]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	460b      	mov	r3, r1
 800575e:	f003 0303 	and.w	r3, r3, #3
 8005762:	b2d9      	uxtb	r1, r3
 8005764:	6913      	ldr	r3, [r2, #16]
 8005766:	f361 330d 	bfi	r3, r1, #12, #2
 800576a:	6113      	str	r3, [r2, #16]

/******************************** Configuration of CR3******************************************/

	USART_CR3_Reg_t CR3_temp = {0};
 800576c:	2300      	movs	r3, #0
 800576e:	60bb      	str	r3, [r7, #8]

	//Configuration of USART hardware flow control
	if (USART_HW_FLOW_CTRL_CTS ==  pUSARTHandle->USART_Config.USART_HWFlowControl)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	7bdb      	ldrb	r3, [r3, #15]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d104      	bne.n	8005782 <USART_Init+0xc6>
	{
		//enable CTS flow control
		CR3_temp.bit.ctse = SET;
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800577e:	60bb      	str	r3, [r7, #8]
 8005780:	e014      	b.n	80057ac <USART_Init+0xf0>

	}else if (USART_HW_FLOW_CTRL_RTS == pUSARTHandle->USART_Config.USART_HWFlowControl)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	7bdb      	ldrb	r3, [r3, #15]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d104      	bne.n	8005794 <USART_Init+0xd8>
	{
		//enable RTS flow control
		CR3_temp.bit.rtse = SET;
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005790:	60bb      	str	r3, [r7, #8]
 8005792:	e00b      	b.n	80057ac <USART_Init+0xf0>

	}else if (USART_HW_FLOW_CTRL_CTS_RTS == pUSARTHandle->USART_Config.USART_HWFlowControl)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	7bdb      	ldrb	r3, [r3, #15]
 8005798:	2b03      	cmp	r3, #3
 800579a:	d107      	bne.n	80057ac <USART_Init+0xf0>
	{
		//enable both CTS and RTS Flow control
		CR3_temp.bit.ctse = SET;
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057a2:	60bb      	str	r3, [r7, #8]
		CR3_temp.bit.rtse = SET;
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057aa:	60bb      	str	r3, [r7, #8]
	}


	pUSARTHandle->pUSARTx->CR3.reg = CR3_temp.reg;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//configure the baud rate
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	4619      	mov	r1, r3
 80057be:	4610      	mov	r0, r2
 80057c0:	f7ff fefc 	bl	80055bc <USART_SetBaudRate>

/***************************************** Enable USART peripheral ************************************************/
	USART_PeripheralControl(pUSARTHandle->pUSARTx, ENABLE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2101      	movs	r1, #1
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 f804 	bl	80057d8 <USART_PeripheralControl>
}
 80057d0:	bf00      	nop
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <USART_PeripheralControl>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t state)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	460b      	mov	r3, r1
 80057e2:	70fb      	strb	r3, [r7, #3]
	pUSARTx->CR1.bit.ue = state;
 80057e4:	78fb      	ldrb	r3, [r7, #3]
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	b2d9      	uxtb	r1, r3
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	68d3      	ldr	r3, [r2, #12]
 80057f0:	f361 334d 	bfi	r3, r1, #13, #1
 80057f4:	60d3      	str	r3, [r2, #12]
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bc80      	pop	{r7}
 80057fe:	4770      	bx	lr

08005800 <USART_PeriClockControl>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t state)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx == USART1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a2b      	ldr	r2, [pc, #172]	; (80058bc <USART_PeriClockControl+0xbc>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d109      	bne.n	8005828 <USART_PeriClockControl+0x28>
	{
		RCC->APB2ENR.bit.usart1en = state;
 8005814:	4a2a      	ldr	r2, [pc, #168]	; (80058c0 <USART_PeriClockControl+0xc0>)
 8005816:	78fb      	ldrb	r3, [r7, #3]
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	b2d9      	uxtb	r1, r3
 800581e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005820:	f361 1304 	bfi	r3, r1, #4, #1
 8005824:	6453      	str	r3, [r2, #68]	; 0x44
	}else if (pUSARTx == USART6)
	{
		RCC->APB2ENR.bit.usart6en = state;
	}

}
 8005826:	e044      	b.n	80058b2 <USART_PeriClockControl+0xb2>
	}else if (pUSARTx == USART2)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a26      	ldr	r2, [pc, #152]	; (80058c4 <USART_PeriClockControl+0xc4>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d109      	bne.n	8005844 <USART_PeriClockControl+0x44>
		RCC->APB1ENR.bit.usart2en = state;
 8005830:	4a23      	ldr	r2, [pc, #140]	; (80058c0 <USART_PeriClockControl+0xc0>)
 8005832:	78fb      	ldrb	r3, [r7, #3]
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	b2d9      	uxtb	r1, r3
 800583a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800583c:	f361 4351 	bfi	r3, r1, #17, #1
 8005840:	6413      	str	r3, [r2, #64]	; 0x40
}
 8005842:	e036      	b.n	80058b2 <USART_PeriClockControl+0xb2>
	}else if (pUSARTx == USART3)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a20      	ldr	r2, [pc, #128]	; (80058c8 <USART_PeriClockControl+0xc8>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d109      	bne.n	8005860 <USART_PeriClockControl+0x60>
		RCC->APB1ENR.bit.usart3en = state;
 800584c:	4a1c      	ldr	r2, [pc, #112]	; (80058c0 <USART_PeriClockControl+0xc0>)
 800584e:	78fb      	ldrb	r3, [r7, #3]
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	b2d9      	uxtb	r1, r3
 8005856:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005858:	f361 4392 	bfi	r3, r1, #18, #1
 800585c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800585e:	e028      	b.n	80058b2 <USART_PeriClockControl+0xb2>
	else if (pUSARTx == UART4)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a1a      	ldr	r2, [pc, #104]	; (80058cc <USART_PeriClockControl+0xcc>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d109      	bne.n	800587c <USART_PeriClockControl+0x7c>
		RCC->APB1ENR.bit.uart4en = state;
 8005868:	4a15      	ldr	r2, [pc, #84]	; (80058c0 <USART_PeriClockControl+0xc0>)
 800586a:	78fb      	ldrb	r3, [r7, #3]
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	b2d9      	uxtb	r1, r3
 8005872:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005874:	f361 43d3 	bfi	r3, r1, #19, #1
 8005878:	6413      	str	r3, [r2, #64]	; 0x40
}
 800587a:	e01a      	b.n	80058b2 <USART_PeriClockControl+0xb2>
	}else if (pUSARTx == UART5)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a14      	ldr	r2, [pc, #80]	; (80058d0 <USART_PeriClockControl+0xd0>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d109      	bne.n	8005898 <USART_PeriClockControl+0x98>
		RCC->APB1ENR.bit.uart5en = state;
 8005884:	4a0e      	ldr	r2, [pc, #56]	; (80058c0 <USART_PeriClockControl+0xc0>)
 8005886:	78fb      	ldrb	r3, [r7, #3]
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	b2d9      	uxtb	r1, r3
 800588e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005890:	f361 5314 	bfi	r3, r1, #20, #1
 8005894:	6413      	str	r3, [r2, #64]	; 0x40
}
 8005896:	e00c      	b.n	80058b2 <USART_PeriClockControl+0xb2>
	}else if (pUSARTx == USART6)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a0e      	ldr	r2, [pc, #56]	; (80058d4 <USART_PeriClockControl+0xd4>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d108      	bne.n	80058b2 <USART_PeriClockControl+0xb2>
		RCC->APB2ENR.bit.usart6en = state;
 80058a0:	4a07      	ldr	r2, [pc, #28]	; (80058c0 <USART_PeriClockControl+0xc0>)
 80058a2:	78fb      	ldrb	r3, [r7, #3]
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	b2d9      	uxtb	r1, r3
 80058aa:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80058ac:	f361 1345 	bfi	r3, r1, #5, #1
 80058b0:	6453      	str	r3, [r2, #68]	; 0x44
}
 80058b2:	bf00      	nop
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bc80      	pop	{r7}
 80058ba:	4770      	bx	lr
 80058bc:	40011000 	.word	0x40011000
 80058c0:	40023800 	.word	0x40023800
 80058c4:	40004400 	.word	0x40004400
 80058c8:	40004800 	.word	0x40004800
 80058cc:	40004c00 	.word	0x40004c00
 80058d0:	40005000 	.word	0x40005000
 80058d4:	40011400 	.word	0x40011400

080058d8 <USART_GetFlagStatus>:
/* @return				- flag state																	*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, USART_SR_flag_t StatusFlagName)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	460b      	mov	r3, r1
 80058e2:	70fb      	strb	r3, [r7, #3]
	switch(StatusFlagName)
 80058e4:	78fb      	ldrb	r3, [r7, #3]
 80058e6:	2b09      	cmp	r3, #9
 80058e8:	d852      	bhi.n	8005990 <USART_GetFlagStatus+0xb8>
 80058ea:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <USART_GetFlagStatus+0x18>)
 80058ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f0:	08005919 	.word	0x08005919
 80058f4:	08005925 	.word	0x08005925
 80058f8:	08005931 	.word	0x08005931
 80058fc:	0800593d 	.word	0x0800593d
 8005900:	08005949 	.word	0x08005949
 8005904:	08005955 	.word	0x08005955
 8005908:	08005961 	.word	0x08005961
 800590c:	0800596d 	.word	0x0800596d
 8005910:	08005979 	.word	0x08005979
 8005914:	08005985 	.word	0x08005985
	{
		case USART_SR_PE:
		{
			return pUSARTx->SR.bit.pe;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005920:	b2db      	uxtb	r3, r3
 8005922:	e036      	b.n	8005992 <USART_GetFlagStatus+0xba>
			break;
		}
		case USART_SR_FE:
		{
			return pUSARTx->SR.bit.fe;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800592c:	b2db      	uxtb	r3, r3
 800592e:	e030      	b.n	8005992 <USART_GetFlagStatus+0xba>
			break;
		}
		case USART_SR_NF:
		{
			return pUSARTx->SR.bit.nf;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005938:	b2db      	uxtb	r3, r3
 800593a:	e02a      	b.n	8005992 <USART_GetFlagStatus+0xba>
			break;
		}
		case USART_SR_ORE:
		{
			return pUSARTx->SR.bit.ore;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005944:	b2db      	uxtb	r3, r3
 8005946:	e024      	b.n	8005992 <USART_GetFlagStatus+0xba>
			break;
		}
		case USART_SR_IDLE:
		{
			return pUSARTx->SR.bit.idle;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005950:	b2db      	uxtb	r3, r3
 8005952:	e01e      	b.n	8005992 <USART_GetFlagStatus+0xba>
			break;
		}
		case USART_SR_RXNE:
		{
			return pUSARTx->SR.bit.rxne;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800595c:	b2db      	uxtb	r3, r3
 800595e:	e018      	b.n	8005992 <USART_GetFlagStatus+0xba>
			break;
		}
		case USART_SR_TC:
		{
			return pUSARTx->SR.bit.tc;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005968:	b2db      	uxtb	r3, r3
 800596a:	e012      	b.n	8005992 <USART_GetFlagStatus+0xba>
			break;
		}
		case USART_SR_TXE:
		{
			return pUSARTx->SR.bit.txe;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005974:	b2db      	uxtb	r3, r3
 8005976:	e00c      	b.n	8005992 <USART_GetFlagStatus+0xba>
			break;
		}
		case USART_SR_LBD:
		{
			return pUSARTx->SR.bit.lbd;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f3c3 2300 	ubfx	r3, r3, #8, #1
 8005980:	b2db      	uxtb	r3, r3
 8005982:	e006      	b.n	8005992 <USART_GetFlagStatus+0xba>
			break;
		}
		case USART_SR_CTS:
		{
			return pUSARTx->SR.bit.cts;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800598c:	b2db      	uxtb	r3, r3
 800598e:	e000      	b.n	8005992 <USART_GetFlagStatus+0xba>
			break;
		}
		default:
			return RESET;
 8005990:	2300      	movs	r3, #0

	}
}
 8005992:	4618      	mov	r0, r3
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	bc80      	pop	{r7}
 800599a:	4770      	bx	lr

0800599c <USART_ClearFlag>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void USART_ClearFlag(USART_RegDef_t *pUSARTx, uint16_t StatusFlagName)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	460b      	mov	r3, r1
 80059a6:	807b      	strh	r3, [r7, #2]
	switch(StatusFlagName)
 80059a8:	887b      	ldrh	r3, [r7, #2]
 80059aa:	2b09      	cmp	r3, #9
 80059ac:	d852      	bhi.n	8005a54 <USART_ClearFlag+0xb8>
 80059ae:	a201      	add	r2, pc, #4	; (adr r2, 80059b4 <USART_ClearFlag+0x18>)
 80059b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b4:	080059dd 	.word	0x080059dd
 80059b8:	080059e9 	.word	0x080059e9
 80059bc:	080059f5 	.word	0x080059f5
 80059c0:	08005a01 	.word	0x08005a01
 80059c4:	08005a0d 	.word	0x08005a0d
 80059c8:	08005a19 	.word	0x08005a19
 80059cc:	08005a25 	.word	0x08005a25
 80059d0:	08005a31 	.word	0x08005a31
 80059d4:	08005a3d 	.word	0x08005a3d
 80059d8:	08005a49 	.word	0x08005a49
	{
		case USART_SR_PE:
		{
			pUSARTx->SR.bit.pe = RESET;
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	6813      	ldr	r3, [r2, #0]
 80059e0:	f36f 0300 	bfc	r3, #0, #1
 80059e4:	6013      	str	r3, [r2, #0]
			break;
 80059e6:	e036      	b.n	8005a56 <USART_ClearFlag+0xba>
		}
		case USART_SR_FE:
		{
			pUSARTx->SR.bit.fe = RESET;
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6813      	ldr	r3, [r2, #0]
 80059ec:	f36f 0341 	bfc	r3, #1, #1
 80059f0:	6013      	str	r3, [r2, #0]
			break;
 80059f2:	e030      	b.n	8005a56 <USART_ClearFlag+0xba>
		}
		case USART_SR_NF:
		{
			pUSARTx->SR.bit.nf = RESET;
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6813      	ldr	r3, [r2, #0]
 80059f8:	f36f 0382 	bfc	r3, #2, #1
 80059fc:	6013      	str	r3, [r2, #0]
			break;
 80059fe:	e02a      	b.n	8005a56 <USART_ClearFlag+0xba>
		}
		case USART_SR_ORE:
		{
			pUSARTx->SR.bit.ore = RESET;
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6813      	ldr	r3, [r2, #0]
 8005a04:	f36f 03c3 	bfc	r3, #3, #1
 8005a08:	6013      	str	r3, [r2, #0]
			break;
 8005a0a:	e024      	b.n	8005a56 <USART_ClearFlag+0xba>
		}
		case USART_SR_IDLE:
		{
			pUSARTx->SR.bit.idle = RESET;
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6813      	ldr	r3, [r2, #0]
 8005a10:	f36f 1304 	bfc	r3, #4, #1
 8005a14:	6013      	str	r3, [r2, #0]
			break;
 8005a16:	e01e      	b.n	8005a56 <USART_ClearFlag+0xba>
		}
		case USART_SR_RXNE:
		{
			pUSARTx->SR.bit.rxne = RESET;
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6813      	ldr	r3, [r2, #0]
 8005a1c:	f36f 1345 	bfc	r3, #5, #1
 8005a20:	6013      	str	r3, [r2, #0]
			break;
 8005a22:	e018      	b.n	8005a56 <USART_ClearFlag+0xba>
		}
		case USART_SR_TC:
		{
			pUSARTx->SR.bit.tc = RESET;
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6813      	ldr	r3, [r2, #0]
 8005a28:	f36f 1386 	bfc	r3, #6, #1
 8005a2c:	6013      	str	r3, [r2, #0]
			break;
 8005a2e:	e012      	b.n	8005a56 <USART_ClearFlag+0xba>
		}
		case USART_SR_TXE:
		{
			pUSARTx->SR.bit.txe = RESET;
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6813      	ldr	r3, [r2, #0]
 8005a34:	f36f 13c7 	bfc	r3, #7, #1
 8005a38:	6013      	str	r3, [r2, #0]
			break;
 8005a3a:	e00c      	b.n	8005a56 <USART_ClearFlag+0xba>
		}
		case USART_SR_LBD:
		{
			pUSARTx->SR.bit.lbd = RESET;
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	6813      	ldr	r3, [r2, #0]
 8005a40:	f36f 2308 	bfc	r3, #8, #1
 8005a44:	6013      	str	r3, [r2, #0]
			break;
 8005a46:	e006      	b.n	8005a56 <USART_ClearFlag+0xba>
		}
		case USART_SR_CTS:
		{
			pUSARTx->SR.bit.cts = RESET;
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6813      	ldr	r3, [r2, #0]
 8005a4c:	f36f 2349 	bfc	r3, #9, #1
 8005a50:	6013      	str	r3, [r2, #0]
			break;
 8005a52:	e000      	b.n	8005a56 <USART_ClearFlag+0xba>
		}
		default:
			return;
 8005a54:	bf00      	nop

	}

}
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bc80      	pop	{r7}
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop

08005a60 <USART_IRQInterruptConfig>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void USART_IRQInterruptConfig(uint8_t IRQNumber,uint32_t IRQPriority,uint8_t state)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	4603      	mov	r3, r0
 8005a68:	6039      	str	r1, [r7, #0]
 8005a6a:	71fb      	strb	r3, [r7, #7]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	71bb      	strb	r3, [r7, #6]

	if(SET == state)
 8005a70:	79bb      	ldrb	r3, [r7, #6]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d133      	bne.n	8005ade <USART_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8005a76:	79fb      	ldrb	r3, [r7, #7]
 8005a78:	2b1f      	cmp	r3, #31
 8005a7a:	d80a      	bhi.n	8005a92 <USART_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			NVIC->ISER[0] |= ( 1 << IRQNumber);
 8005a7c:	4b46      	ldr	r3, [pc, #280]	; (8005b98 <USART_IRQInterruptConfig+0x138>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	79fa      	ldrb	r2, [r7, #7]
 8005a82:	2101      	movs	r1, #1
 8005a84:	fa01 f202 	lsl.w	r2, r1, r2
 8005a88:	4611      	mov	r1, r2
 8005a8a:	4a43      	ldr	r2, [pc, #268]	; (8005b98 <USART_IRQInterruptConfig+0x138>)
 8005a8c:	430b      	orrs	r3, r1
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	e05e      	b.n	8005b50 <USART_IRQInterruptConfig+0xf0>

		}else if(IRQNumber > 31 && IRQNumber < 64) //32 to 63
 8005a92:	79fb      	ldrb	r3, [r7, #7]
 8005a94:	2b1f      	cmp	r3, #31
 8005a96:	d90f      	bls.n	8005ab8 <USART_IRQInterruptConfig+0x58>
 8005a98:	79fb      	ldrb	r3, [r7, #7]
 8005a9a:	2b3f      	cmp	r3, #63	; 0x3f
 8005a9c:	d80c      	bhi.n	8005ab8 <USART_IRQInterruptConfig+0x58>
		{
			//program ISER1 register
			NVIC->ISER[1] |= ( 1 << (IRQNumber % 32));
 8005a9e:	4b3e      	ldr	r3, [pc, #248]	; (8005b98 <USART_IRQInterruptConfig+0x138>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	79fa      	ldrb	r2, [r7, #7]
 8005aa4:	f002 021f 	and.w	r2, r2, #31
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8005aae:	4611      	mov	r1, r2
 8005ab0:	4a39      	ldr	r2, [pc, #228]	; (8005b98 <USART_IRQInterruptConfig+0x138>)
 8005ab2:	430b      	orrs	r3, r1
 8005ab4:	6053      	str	r3, [r2, #4]
 8005ab6:	e04b      	b.n	8005b50 <USART_IRQInterruptConfig+0xf0>
		}
		else if(IRQNumber >= 64 && IRQNumber < 96)
 8005ab8:	79fb      	ldrb	r3, [r7, #7]
 8005aba:	2b3f      	cmp	r3, #63	; 0x3f
 8005abc:	d948      	bls.n	8005b50 <USART_IRQInterruptConfig+0xf0>
 8005abe:	79fb      	ldrb	r3, [r7, #7]
 8005ac0:	2b5f      	cmp	r3, #95	; 0x5f
 8005ac2:	d845      	bhi.n	8005b50 <USART_IRQInterruptConfig+0xf0>
		{
			//program ISER2 register //64 to 95
			NVIC->ISER[2] |= ( 1 << (IRQNumber % 64));
 8005ac4:	4b34      	ldr	r3, [pc, #208]	; (8005b98 <USART_IRQInterruptConfig+0x138>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	79fa      	ldrb	r2, [r7, #7]
 8005aca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005ace:	2101      	movs	r1, #1
 8005ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ad4:	4611      	mov	r1, r2
 8005ad6:	4a30      	ldr	r2, [pc, #192]	; (8005b98 <USART_IRQInterruptConfig+0x138>)
 8005ad8:	430b      	orrs	r3, r1
 8005ada:	6093      	str	r3, [r2, #8]
 8005adc:	e038      	b.n	8005b50 <USART_IRQInterruptConfig+0xf0>
		}
	}else
	{
		if(IRQNumber <= 31)
 8005ade:	79fb      	ldrb	r3, [r7, #7]
 8005ae0:	2b1f      	cmp	r3, #31
 8005ae2:	d80c      	bhi.n	8005afe <USART_IRQInterruptConfig+0x9e>
		{
			//program ICER0 register
			NVIC->ICER[0] |= ( 1 << IRQNumber);
 8005ae4:	4b2c      	ldr	r3, [pc, #176]	; (8005b98 <USART_IRQInterruptConfig+0x138>)
 8005ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aea:	79fa      	ldrb	r2, [r7, #7]
 8005aec:	2101      	movs	r1, #1
 8005aee:	fa01 f202 	lsl.w	r2, r1, r2
 8005af2:	4611      	mov	r1, r2
 8005af4:	4a28      	ldr	r2, [pc, #160]	; (8005b98 <USART_IRQInterruptConfig+0x138>)
 8005af6:	430b      	orrs	r3, r1
 8005af8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005afc:	e028      	b.n	8005b50 <USART_IRQInterruptConfig+0xf0>
		}else if(IRQNumber > 31 && IRQNumber < 64)
 8005afe:	79fb      	ldrb	r3, [r7, #7]
 8005b00:	2b1f      	cmp	r3, #31
 8005b02:	d911      	bls.n	8005b28 <USART_IRQInterruptConfig+0xc8>
 8005b04:	79fb      	ldrb	r3, [r7, #7]
 8005b06:	2b3f      	cmp	r3, #63	; 0x3f
 8005b08:	d80e      	bhi.n	8005b28 <USART_IRQInterruptConfig+0xc8>
		{
			//program ICER1 register
			NVIC->ICER[1] |= ( 1 << (IRQNumber % 32));
 8005b0a:	4b23      	ldr	r3, [pc, #140]	; (8005b98 <USART_IRQInterruptConfig+0x138>)
 8005b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b10:	79fa      	ldrb	r2, [r7, #7]
 8005b12:	f002 021f 	and.w	r2, r2, #31
 8005b16:	2101      	movs	r1, #1
 8005b18:	fa01 f202 	lsl.w	r2, r1, r2
 8005b1c:	4611      	mov	r1, r2
 8005b1e:	4a1e      	ldr	r2, [pc, #120]	; (8005b98 <USART_IRQInterruptConfig+0x138>)
 8005b20:	430b      	orrs	r3, r1
 8005b22:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8005b26:	e013      	b.n	8005b50 <USART_IRQInterruptConfig+0xf0>
		}
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 8005b28:	79fb      	ldrb	r3, [r7, #7]
 8005b2a:	2b05      	cmp	r3, #5
 8005b2c:	d910      	bls.n	8005b50 <USART_IRQInterruptConfig+0xf0>
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
 8005b30:	2b5f      	cmp	r3, #95	; 0x5f
 8005b32:	d80d      	bhi.n	8005b50 <USART_IRQInterruptConfig+0xf0>
		{
			//program ICER2 register
			NVIC->ICER[2] |= ( 1 << (IRQNumber % 64));
 8005b34:	4b18      	ldr	r3, [pc, #96]	; (8005b98 <USART_IRQInterruptConfig+0x138>)
 8005b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3a:	79fa      	ldrb	r2, [r7, #7]
 8005b3c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005b40:	2101      	movs	r1, #1
 8005b42:	fa01 f202 	lsl.w	r2, r1, r2
 8005b46:	4611      	mov	r1, r2
 8005b48:	4a13      	ldr	r2, [pc, #76]	; (8005b98 <USART_IRQInterruptConfig+0x138>)
 8005b4a:	430b      	orrs	r3, r1
 8005b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		}
	}

	//first lets find out the ipr register
	uint8_t iprx = IRQNumber/4;
 8005b50:	79fb      	ldrb	r3, [r7, #7]
 8005b52:	089b      	lsrs	r3, r3, #2
 8005b54:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section  = IRQNumber%4 ;
 8005b56:	79fb      	ldrb	r3, [r7, #7]
 8005b58:	f003 0303 	and.w	r3, r3, #3
 8005b5c:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section) + 4;
 8005b5e:	7bbb      	ldrb	r3, [r7, #14]
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	3304      	adds	r3, #4
 8005b66:	737b      	strb	r3, [r7, #13]

	*(NVIC_IPR_BASE + iprx ) |= (IRQPriority << shift_amount);
 8005b68:	7bfb      	ldrb	r3, [r7, #15]
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8005b70:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8005b74:	6819      	ldr	r1, [r3, #0]
 8005b76:	7b7b      	ldrb	r3, [r7, #13]
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	409a      	lsls	r2, r3
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8005b84:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	601a      	str	r2, [r3, #0]
}
 8005b8c:	bf00      	nop
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bc80      	pop	{r7}
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	e000e100 	.word	0xe000e100

08005b9c <TIM1_Config>:
/* Includes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#include <simple_delay.h>
#include "stm32f407xx.h"

void TIM1_Config(void)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
	RCC->APB2ENR.bit.tim1en = ENABLE;  	//TIM1 EN
 8005ba0:	4a10      	ldr	r2, [pc, #64]	; (8005be4 <TIM1_Config+0x48>)
 8005ba2:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005ba4:	f043 0301 	orr.w	r3, r3, #1
 8005ba8:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->PSC = 167; 					// ~1 uS delay
 8005baa:	4b0f      	ldr	r3, [pc, #60]	; (8005be8 <TIM1_Config+0x4c>)
 8005bac:	22a7      	movs	r2, #167	; 0xa7
 8005bae:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR |= 0xFFFF; 				//all bits set to 1
 8005bb0:	4b0d      	ldr	r3, [pc, #52]	; (8005be8 <TIM1_Config+0x4c>)
 8005bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb4:	4a0c      	ldr	r2, [pc, #48]	; (8005be8 <TIM1_Config+0x4c>)
 8005bb6:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8005bba:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8005bbe:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM1->CR1.bit.cen = ENABLE; 		//timer counter EN
 8005bc0:	4a09      	ldr	r2, [pc, #36]	; (8005be8 <TIM1_Config+0x4c>)
 8005bc2:	8813      	ldrh	r3, [r2, #0]
 8005bc4:	f043 0301 	orr.w	r3, r3, #1
 8005bc8:	8013      	strh	r3, [r2, #0]

	while(SET != TIM1->SR.bit.uif)
 8005bca:	bf00      	nop
 8005bcc:	4b06      	ldr	r3, [pc, #24]	; (8005be8 <TIM1_Config+0x4c>)
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d1f8      	bne.n	8005bcc <TIM1_Config+0x30>
	{
		//Update interrupt pending. This bit is set by hardware when the registers are updated
	}
}
 8005bda:	bf00      	nop
 8005bdc:	bf00      	nop
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bc80      	pop	{r7}
 8005be2:	4770      	bx	lr
 8005be4:	40023800 	.word	0x40023800
 8005be8:	40010000 	.word	0x40010000

08005bec <delay_us>:

void delay_us(int micro)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
	TIM1->CNT = 0x0000;  				//reset counter register
 8005bf4:	4b07      	ldr	r3, [pc, #28]	; (8005c14 <delay_us+0x28>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM1->CNT < micro);
 8005bfa:	bf00      	nop
 8005bfc:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <delay_us+0x28>)
 8005bfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d3fa      	bcc.n	8005bfc <delay_us+0x10>
}
 8005c06:	bf00      	nop
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	40010000 	.word	0x40010000

08005c18 <delay_ms>:

void delay_ms(int ms)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < ms; i++)
 8005c20:	2300      	movs	r3, #0
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	e006      	b.n	8005c34 <delay_ms+0x1c>
	{
		delay_us(1000); 			//1 ms delay
 8005c26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c2a:	f7ff ffdf 	bl	8005bec <delay_us>
	for (i = 0; i < ms; i++)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	3301      	adds	r3, #1
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	dbf4      	blt.n	8005c26 <delay_ms+0xe>
	}
}
 8005c3c:	bf00      	nop
 8005c3e:	bf00      	nop
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <__NVIC_EnableIRQ>:
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	4603      	mov	r3, r0
 8005c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	db0b      	blt.n	8005c72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c5a:	79fb      	ldrb	r3, [r7, #7]
 8005c5c:	f003 021f 	and.w	r2, r3, #31
 8005c60:	4906      	ldr	r1, [pc, #24]	; (8005c7c <__NVIC_EnableIRQ+0x34>)
 8005c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c66:	095b      	lsrs	r3, r3, #5
 8005c68:	2001      	movs	r0, #1
 8005c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8005c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005c72:	bf00      	nop
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bc80      	pop	{r7}
 8005c7a:	4770      	bx	lr
 8005c7c:	e000e100 	.word	0xe000e100

08005c80 <__NVIC_SetPriority>:
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	4603      	mov	r3, r0
 8005c88:	6039      	str	r1, [r7, #0]
 8005c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	db0a      	blt.n	8005caa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	490c      	ldr	r1, [pc, #48]	; (8005ccc <__NVIC_SetPriority+0x4c>)
 8005c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c9e:	0112      	lsls	r2, r2, #4
 8005ca0:	b2d2      	uxtb	r2, r2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005ca8:	e00a      	b.n	8005cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	4908      	ldr	r1, [pc, #32]	; (8005cd0 <__NVIC_SetPriority+0x50>)
 8005cb0:	79fb      	ldrb	r3, [r7, #7]
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	3b04      	subs	r3, #4
 8005cb8:	0112      	lsls	r2, r2, #4
 8005cba:	b2d2      	uxtb	r2, r2
 8005cbc:	440b      	add	r3, r1
 8005cbe:	761a      	strb	r2, [r3, #24]
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bc80      	pop	{r7}
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	e000e100 	.word	0xe000e100
 8005cd0:	e000ed00 	.word	0xe000ed00

08005cd4 <ST7735_Config>:
/* @Note				- Only SLCK and MOSI pins are initialized inside this function. All other pins 	*/
/*						  used by display are initialized inside 'ST7735_Init' function. If you want to */
/*						  use other pins for display you may change them inside <st7735.h> module.		*/
/********************************************************************************************************/
void ST7735_Config(void)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0

	GPIO_Handle_t ST7735_Pins;

	//SLCK and MOSI
	ST7735_Pins.pGPIOx = GPIOA;
 8005cda:	4b1f      	ldr	r3, [pc, #124]	; (8005d58 <ST7735_Config+0x84>)
 8005cdc:	603b      	str	r3, [r7, #0]
	ST7735_Pins.GPIO_Config.PinMode = GPIO_MODE_AF;
 8005cde:	2302      	movs	r3, #2
 8005ce0:	723b      	strb	r3, [r7, #8]
	ST7735_Pins.GPIO_Config.PinAltFuncMode = 5;
 8005ce2:	2305      	movs	r3, #5
 8005ce4:	733b      	strb	r3, [r7, #12]
	ST7735_Pins.GPIO_Config.PinOPType = GPIO_OUTPUT_PP;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	72fb      	strb	r3, [r7, #11]
	ST7735_Pins.GPIO_Config.PinPuPdControl = GPIO_PIN_NO_PUPD;
 8005cea:	2300      	movs	r3, #0
 8005cec:	72bb      	strb	r3, [r7, #10]
	ST7735_Pins.GPIO_Config.PinSpeed = GPIO_SPEED_FAST;
 8005cee:	2302      	movs	r3, #2
 8005cf0:	727b      	strb	r3, [r7, #9]

	ST7735_Pins.GPIO_Config.PinNumber = GPIO_PIN_5;		//SLCK pin
 8005cf2:	2305      	movs	r3, #5
 8005cf4:	607b      	str	r3, [r7, #4]
	GPIO_Init(&ST7735_Pins);
 8005cf6:	463b      	mov	r3, r7
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7fb fa9d 	bl	8001238 <GPIO_Init>

	ST7735_Pins.GPIO_Config.PinNumber = GPIO_PIN_7;		//MOSI pin
 8005cfe:	2307      	movs	r3, #7
 8005d00:	607b      	str	r3, [r7, #4]
	GPIO_Init(&ST7735_Pins);
 8005d02:	463b      	mov	r3, r7
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7fb fa97 	bl	8001238 <GPIO_Init>

	ST7735Handle.pSPIx = SPI1;
 8005d0a:	4b14      	ldr	r3, [pc, #80]	; (8005d5c <ST7735_Config+0x88>)
 8005d0c:	4a14      	ldr	r2, [pc, #80]	; (8005d60 <ST7735_Config+0x8c>)
 8005d0e:	601a      	str	r2, [r3, #0]
	ST7735Handle.SPIConfig.SPI_DeviceMode = SPI_MODE_MASTER;
 8005d10:	4b12      	ldr	r3, [pc, #72]	; (8005d5c <ST7735_Config+0x88>)
 8005d12:	2201      	movs	r2, #1
 8005d14:	711a      	strb	r2, [r3, #4]
	ST7735Handle.SPIConfig.SPI_BusConfig = SPI_BUS_FD;
 8005d16:	4b11      	ldr	r3, [pc, #68]	; (8005d5c <ST7735_Config+0x88>)
 8005d18:	2201      	movs	r2, #1
 8005d1a:	715a      	strb	r2, [r3, #5]
	ST7735Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8005d1c:	4b0f      	ldr	r3, [pc, #60]	; (8005d5c <ST7735_Config+0x88>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	71da      	strb	r2, [r3, #7]
	ST7735Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8005d22:	4b0e      	ldr	r3, [pc, #56]	; (8005d5c <ST7735_Config+0x88>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	721a      	strb	r2, [r3, #8]
	ST7735Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8005d28:	4b0c      	ldr	r3, [pc, #48]	; (8005d5c <ST7735_Config+0x88>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	725a      	strb	r2, [r3, #9]
	ST7735Handle.SPIConfig.SPI_SSM = SPI_SSM_SW;
 8005d2e:	4b0b      	ldr	r3, [pc, #44]	; (8005d5c <ST7735_Config+0x88>)
 8005d30:	2201      	movs	r2, #1
 8005d32:	729a      	strb	r2, [r3, #10]
	ST7735Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;
 8005d34:	4b09      	ldr	r3, [pc, #36]	; (8005d5c <ST7735_Config+0x88>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	719a      	strb	r2, [r3, #6]
	SPI_Init(&ST7735Handle);
 8005d3a:	4808      	ldr	r0, [pc, #32]	; (8005d5c <ST7735_Config+0x88>)
 8005d3c:	f7fb fffe 	bl	8001d3c <SPI_Init>

	ST7735_Init();
 8005d40:	f003 ff8a 	bl	8009c58 <ST7735_Init>
	ST7735_Backlight_On();
 8005d44:	f004 fa0e 	bl	800a164 <ST7735_Backlight_On>
	ST7735_SetRotation(3);
 8005d48:	2003      	movs	r0, #3
 8005d4a:	f004 fc9f 	bl	800a68c <ST7735_SetRotation>
}
 8005d4e:	bf00      	nop
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	40020000 	.word	0x40020000
 8005d5c:	20000698 	.word	0x20000698
 8005d60:	40013000 	.word	0x40013000

08005d64 <R308_Config>:
/*																										*/
/* @Note				- Since ring buffer is used for USART communication between R308 and MCU, a 	*/
/*						  separate USART function  is used for R308 USART initialization.				*/
/********************************************************************************************************/
uint8_t R308_Config(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
	R308_USART_Handle.USART_handle.pUSARTx = USART3;
 8005d6a:	4b0c      	ldr	r3, [pc, #48]	; (8005d9c <R308_Config+0x38>)
 8005d6c:	4a0c      	ldr	r2, [pc, #48]	; (8005da0 <R308_Config+0x3c>)
 8005d6e:	601a      	str	r2, [r3, #0]
	R308_USART_Init(&R308_USART_Handle, R308_BAUDRATE_57600);
 8005d70:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8005d74:	4809      	ldr	r0, [pc, #36]	; (8005d9c <R308_Config+0x38>)
 8005d76:	f002 fff5 	bl	8008d64 <R308_USART_Init>

	uint8_t ack_package;
	R308_Config_Handle.Address = 0xFFFFFFFF;
 8005d7a:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <R308_Config+0x40>)
 8005d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d80:	605a      	str	r2, [r3, #4]
	R308_Config_Handle.Password = 0;
 8005d82:	4b08      	ldr	r3, [pc, #32]	; (8005da4 <R308_Config+0x40>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	601a      	str	r2, [r3, #0]
	ack_package = R308_Init(&R308_Config_Handle);
 8005d88:	4806      	ldr	r0, [pc, #24]	; (8005da4 <R308_Config+0x40>)
 8005d8a:	f003 f971 	bl	8009070 <R308_Init>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	71fb      	strb	r3, [r7, #7]

	return ack_package;
 8005d92:	79fb      	ldrb	r3, [r7, #7]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	2000023c 	.word	0x2000023c
 8005da0:	40004800 	.word	0x40004800
 8005da4:	2000066c 	.word	0x2000066c

08005da8 <main>:
/* @brief				- The application entry point.													*/
/*																										*/
/* @return				- int																			*/
/********************************************************************************************************/
int main(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af04      	add	r7, sp, #16
	SystemClock_Config();
 8005dae:	f000 fc5d 	bl	800666c <SystemClock_Config>

	//timers init
	TIM1_Config();
 8005db2:	f7ff fef3 	bl	8005b9c <TIM1_Config>
	TIM2_Config();
 8005db6:	f000 fbc9 	bl	800654c <TIM2_Config>
	TIM3_Config();
 8005dba:	f000 fc1b 	bl	80065f4 <TIM3_Config>
	TIM_Base_StartIT(&TIM3Handle);
 8005dbe:	4847      	ldr	r0, [pc, #284]	; (8005edc <main+0x134>)
 8005dc0:	f7fc fa75 	bl	80022ae <TIM_Base_StartIT>

	//screen init
	ST7735_Config();
 8005dc4:	f7ff ff86 	bl	8005cd4 <ST7735_Config>
	destrocore();
 8005dc8:	f002 ff6a 	bl	8008ca0 <destrocore>

	//PWM is used for producing buzzer sounds
	TIM_PWM_Start(&TIM2Handle, TIM_CHANNEL_1);
 8005dcc:	2100      	movs	r1, #0
 8005dce:	4844      	ldr	r0, [pc, #272]	; (8005ee0 <main+0x138>)
 8005dd0:	f7fc faa4 	bl	800231c <TIM_PWM_Start>

	//keypad init
	Keypad4x4_Init();
 8005dd4:	f002 fe22 	bl	8008a1c <Keypad4x4_Init>

	//check if FP sensor is connected
	if(1 == R308_Config())
 8005dd8:	f7ff ffc4 	bl	8005d64 <R308_Config>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d10b      	bne.n	8005dfa <main+0x52>
	{
		BuzzerAlert(BUZZER_INIT_SOUND);
 8005de2:	2003      	movs	r0, #3
 8005de4:	f000 fca4 	bl	8006730 <BuzzerAlert>
		printf("R308 connected and ready to work!\n");
 8005de8:	483e      	ldr	r0, [pc, #248]	; (8005ee4 <main+0x13c>)
 8005dea:	f005 fa81 	bl	800b2f0 <puts>
		while(1)
		{

		}
	}
	WelcomeScreen();
 8005dee:	f000 fe15 	bl	8006a1c <WelcomeScreen>
	SystemState = SYS_STATE_BEGIN;
 8005df2:	4b3d      	ldr	r3, [pc, #244]	; (8005ee8 <main+0x140>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	701a      	strb	r2, [r3, #0]
 8005df8:	e014      	b.n	8005e24 <main+0x7c>
		BuzzerAlert(BUZZER_ERROR_SOUND);
 8005dfa:	2002      	movs	r0, #2
 8005dfc:	f000 fc98 	bl	8006730 <BuzzerAlert>
		ST7735_FillScreen(ST7735_BLACK);
 8005e00:	2000      	movs	r0, #0
 8005e02:	f004 f90d 	bl	800a020 <ST7735_FillScreen>
		ST7735_DrawString(0, 35, "FINGERPRINT    SCANNER IS NOT CONNECTED", Font_11x18, ST7735_RED, ST7735_BLACK);
 8005e06:	4b39      	ldr	r3, [pc, #228]	; (8005eec <main+0x144>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	9202      	str	r2, [sp, #8]
 8005e0c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005e10:	9201      	str	r2, [sp, #4]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	9200      	str	r2, [sp, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a35      	ldr	r2, [pc, #212]	; (8005ef0 <main+0x148>)
 8005e1a:	2123      	movs	r1, #35	; 0x23
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	f003 ffe7 	bl	8009df0 <ST7735_DrawString>
		while(1)
 8005e22:	e7fe      	b.n	8005e22 <main+0x7a>

	while(1)
	{
		if(SYS_STATE_BEGIN == SystemState)
 8005e24:	4b30      	ldr	r3, [pc, #192]	; (8005ee8 <main+0x140>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d102      	bne.n	8005e32 <main+0x8a>
		{
			MainMenu();
 8005e2c:	f000 f88e 	bl	8005f4c <MainMenu>
 8005e30:	e7f8      	b.n	8005e24 <main+0x7c>
		}else if(SYS_STATE_READ_PWD == SystemState)
 8005e32:	4b2d      	ldr	r3, [pc, #180]	; (8005ee8 <main+0x140>)
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d102      	bne.n	8005e40 <main+0x98>
		{
			EnterPassword();
 8005e3a:	f000 fe0b 	bl	8006a54 <EnterPassword>
 8005e3e:	e7f1      	b.n	8005e24 <main+0x7c>
		}else if(SYS_STATE_PWD_CONFIRMATION == SystemState)
 8005e40:	4b29      	ldr	r3, [pc, #164]	; (8005ee8 <main+0x140>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d102      	bne.n	8005e4e <main+0xa6>
		{
			PasswordConfirmation();
 8005e48:	f002 f8cc 	bl	8007fe4 <PasswordConfirmation>
 8005e4c:	e7ea      	b.n	8005e24 <main+0x7c>
		}else if(SYS_STATE_READ_ADMIN_PWD == SystemState)
 8005e4e:	4b26      	ldr	r3, [pc, #152]	; (8005ee8 <main+0x140>)
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	2b03      	cmp	r3, #3
 8005e54:	d102      	bne.n	8005e5c <main+0xb4>
		{
			EnterPassword();
 8005e56:	f000 fdfd 	bl	8006a54 <EnterPassword>
 8005e5a:	e7e3      	b.n	8005e24 <main+0x7c>
		}else if(SYS_STATE_ADM_DB_DEL_ID == SystemState)
 8005e5c:	4b22      	ldr	r3, [pc, #136]	; (8005ee8 <main+0x140>)
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d102      	bne.n	8005e6a <main+0xc2>
		{
			Delete_ID();
 8005e64:	f002 fbce 	bl	8008604 <Delete_ID>
 8005e68:	e7dc      	b.n	8005e24 <main+0x7c>
		}else if(SYS_STATE_ADM_SCREEN == SystemState)
 8005e6a:	4b1f      	ldr	r3, [pc, #124]	; (8005ee8 <main+0x140>)
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	d102      	bne.n	8005e78 <main+0xd0>
		{
			AdminSettingsMenu();
 8005e72:	f002 f925 	bl	80080c0 <AdminSettingsMenu>
 8005e76:	e7d5      	b.n	8005e24 <main+0x7c>
		}else if(SYS_STATE_ADM_PWD_MENU == SystemState)
 8005e78:	4b1b      	ldr	r3, [pc, #108]	; (8005ee8 <main+0x140>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2b05      	cmp	r3, #5
 8005e7e:	d102      	bne.n	8005e86 <main+0xde>
		{
			ChangePasswordMenu();
 8005e80:	f001 fc36 	bl	80076f0 <ChangePasswordMenu>
 8005e84:	e7ce      	b.n	8005e24 <main+0x7c>
		}else if(SYS_STATE_ADM_DB_MENU == SystemState)
 8005e86:	4b18      	ldr	r3, [pc, #96]	; (8005ee8 <main+0x140>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	2b06      	cmp	r3, #6
 8005e8c:	d102      	bne.n	8005e94 <main+0xec>
		{
			DatabaseOperationsMenu();
 8005e8e:	f001 fcb7 	bl	8007800 <DatabaseOperationsMenu>
 8005e92:	e7c7      	b.n	8005e24 <main+0x7c>
		}else if(SYS_STATE_ADM_DB_EMPTY == SystemState)
 8005e94:	4b14      	ldr	r3, [pc, #80]	; (8005ee8 <main+0x140>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b07      	cmp	r3, #7
 8005e9a:	d102      	bne.n	8005ea2 <main+0xfa>
		{
			EmptyDBWarning();
 8005e9c:	f001 fd7e 	bl	800799c <EmptyDBWarning>
 8005ea0:	e7c0      	b.n	8005e24 <main+0x7c>
		}else if(SYS_STATE_ADM_NEW_USR_PWD == SystemState)
 8005ea2:	4b11      	ldr	r3, [pc, #68]	; (8005ee8 <main+0x140>)
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	2b09      	cmp	r3, #9
 8005ea8:	d102      	bne.n	8005eb0 <main+0x108>
		{
			EnterPassword();
 8005eaa:	f000 fdd3 	bl	8006a54 <EnterPassword>
 8005eae:	e7b9      	b.n	8005e24 <main+0x7c>
		}else if(SYS_STATE_ADM_NEW_PWD == SystemState)
 8005eb0:	4b0d      	ldr	r3, [pc, #52]	; (8005ee8 <main+0x140>)
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	2b0a      	cmp	r3, #10
 8005eb6:	d102      	bne.n	8005ebe <main+0x116>
		{
			EnterPassword();
 8005eb8:	f000 fdcc 	bl	8006a54 <EnterPassword>
 8005ebc:	e7b2      	b.n	8005e24 <main+0x7c>
		}else if(SYS_STATE_ADM_ALARM_MENU == SystemState)
 8005ebe:	4b0a      	ldr	r3, [pc, #40]	; (8005ee8 <main+0x140>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	2b0b      	cmp	r3, #11
 8005ec4:	d102      	bne.n	8005ecc <main+0x124>
		{
			ChangeAlarmWarning();
 8005ec6:	f001 fee9 	bl	8007c9c <ChangeAlarmWarning>
 8005eca:	e7ab      	b.n	8005e24 <main+0x7c>
		}else if(SYS_STATE_ADM_ALARM_TIME == SystemState)
 8005ecc:	4b06      	ldr	r3, [pc, #24]	; (8005ee8 <main+0x140>)
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	2b0c      	cmp	r3, #12
 8005ed2:	d1a7      	bne.n	8005e24 <main+0x7c>
		{
			SetNewAlarmTime();
 8005ed4:	f001 ff66 	bl	8007da4 <SetNewAlarmTime>
		if(SYS_STATE_BEGIN == SystemState)
 8005ed8:	e7a4      	b.n	8005e24 <main+0x7c>
 8005eda:	bf00      	nop
 8005edc:	200006b8 	.word	0x200006b8
 8005ee0:	200006e4 	.word	0x200006e4
 8005ee4:	0800d588 	.word	0x0800d588
 8005ee8:	20000711 	.word	0x20000711
 8005eec:	20000044 	.word	0x20000044
 8005ef0:	0800d5ac 	.word	0x0800d5ac

08005ef4 <TIM_PeriodElapsedCallback>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void TIM_PeriodElapsedCallback(TIM_Handle_t *pTIMHandle)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
	if(TIM_3 == pTIMHandle->TIMx)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	2b03      	cmp	r3, #3
 8005f02:	d104      	bne.n	8005f0e <TIM_PeriodElapsedCallback+0x1a>
	{
		counter_1s++;
 8005f04:	4b04      	ldr	r3, [pc, #16]	; (8005f18 <TIM_PeriodElapsedCallback+0x24>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	4a03      	ldr	r2, [pc, #12]	; (8005f18 <TIM_PeriodElapsedCallback+0x24>)
 8005f0c:	6013      	str	r3, [r2, #0]
		//indicate 1s has passed
	}
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bc80      	pop	{r7}
 8005f16:	4770      	bx	lr
 8005f18:	20000714 	.word	0x20000714

08005f1c <TIM3_IRQHandler>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void TIM3_IRQHandler(void)
{	// if update interrupt flag is set
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	af00      	add	r7, sp, #0
	if(SET == TIM3->SR.bit.uif)
 8005f20:	4b08      	ldr	r3, [pc, #32]	; (8005f44 <TIM3_IRQHandler+0x28>)
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d107      	bne.n	8005f3e <TIM3_IRQHandler+0x22>
	{
		TIM3->SR.bit.uif = RESET; // reset the flag
 8005f2e:	4a05      	ldr	r2, [pc, #20]	; (8005f44 <TIM3_IRQHandler+0x28>)
 8005f30:	8a13      	ldrh	r3, [r2, #16]
 8005f32:	f36f 0300 	bfc	r3, #0, #1
 8005f36:	8213      	strh	r3, [r2, #16]
		TIM_PeriodElapsedCallback(&TIM3Handle);
 8005f38:	4803      	ldr	r0, [pc, #12]	; (8005f48 <TIM3_IRQHandler+0x2c>)
 8005f3a:	f7ff ffdb 	bl	8005ef4 <TIM_PeriodElapsedCallback>
	}
}
 8005f3e:	bf00      	nop
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	40000400 	.word	0x40000400
 8005f48:	200006b8 	.word	0x200006b8

08005f4c <MainMenu>:
/* @Note				- If user enters any key they get promoted to scan their finger. In case user's	*/
/*						  input is a combination of '*' and 'A' they get promoted to enter administrator*/
/*						  password instead.																*/
/********************************************************************************************************/
void MainMenu(void)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	af00      	add	r7, sp, #0
	key = KEYPAD_NOT_PRESSED;
 8005f50:	4b22      	ldr	r3, [pc, #136]	; (8005fdc <MainMenu+0x90>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	701a      	strb	r2, [r3, #0]
	key = Keypad4x4_Read();
 8005f56:	f002 fdbf 	bl	8008ad8 <Keypad4x4_Read>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	4b1f      	ldr	r3, [pc, #124]	; (8005fdc <MainMenu+0x90>)
 8005f60:	701a      	strb	r2, [r3, #0]
	if(KEYPAD_NOT_PRESSED != key)
 8005f62:	4b1e      	ldr	r3, [pc, #120]	; (8005fdc <MainMenu+0x90>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d037      	beq.n	8005fda <MainMenu+0x8e>
	{
		if('*'== key)
 8005f6a:	4b1c      	ldr	r3, [pc, #112]	; (8005fdc <MainMenu+0x90>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	2b2a      	cmp	r3, #42	; 0x2a
 8005f70:	d128      	bne.n	8005fc4 <MainMenu+0x78>
		{
			key = KEYPAD_NOT_PRESSED;
 8005f72:	4b1a      	ldr	r3, [pc, #104]	; (8005fdc <MainMenu+0x90>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	701a      	strb	r2, [r3, #0]
			while(KEYPAD_NOT_PRESSED == key)
 8005f78:	e020      	b.n	8005fbc <MainMenu+0x70>
			{
				key = KEYPAD_NOT_PRESSED;
 8005f7a:	4b18      	ldr	r3, [pc, #96]	; (8005fdc <MainMenu+0x90>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	701a      	strb	r2, [r3, #0]
				key = Keypad4x4_Read();
 8005f80:	f002 fdaa 	bl	8008ad8 <Keypad4x4_Read>
 8005f84:	4603      	mov	r3, r0
 8005f86:	461a      	mov	r2, r3
 8005f88:	4b14      	ldr	r3, [pc, #80]	; (8005fdc <MainMenu+0x90>)
 8005f8a:	701a      	strb	r2, [r3, #0]
				if(KEYPAD_NOT_PRESSED != key)
 8005f8c:	4b13      	ldr	r3, [pc, #76]	; (8005fdc <MainMenu+0x90>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d013      	beq.n	8005fbc <MainMenu+0x70>
				{
					if('A' == key)
 8005f94:	4b11      	ldr	r3, [pc, #68]	; (8005fdc <MainMenu+0x90>)
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b41      	cmp	r3, #65	; 0x41
 8005f9a:	d103      	bne.n	8005fa4 <MainMenu+0x58>
					{
						SystemState = SYS_STATE_READ_ADMIN_PWD;
 8005f9c:	4b10      	ldr	r3, [pc, #64]	; (8005fe0 <MainMenu+0x94>)
 8005f9e:	2203      	movs	r2, #3
 8005fa0:	701a      	strb	r2, [r3, #0]
						return;
 8005fa2:	e01a      	b.n	8005fda <MainMenu+0x8e>
					}
					if(('A' != key) && (KEYPAD_NOT_PRESSED != key))
 8005fa4:	4b0d      	ldr	r3, [pc, #52]	; (8005fdc <MainMenu+0x90>)
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2b41      	cmp	r3, #65	; 0x41
 8005faa:	d006      	beq.n	8005fba <MainMenu+0x6e>
 8005fac:	4b0b      	ldr	r3, [pc, #44]	; (8005fdc <MainMenu+0x90>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d002      	beq.n	8005fba <MainMenu+0x6e>
					{
						SearchDatabase();
 8005fb4:	f000 f9d4 	bl	8006360 <SearchDatabase>
						return;
 8005fb8:	e00f      	b.n	8005fda <MainMenu+0x8e>
					}
					else
					{
						continue;
 8005fba:	bf00      	nop
			while(KEYPAD_NOT_PRESSED == key)
 8005fbc:	4b07      	ldr	r3, [pc, #28]	; (8005fdc <MainMenu+0x90>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d0da      	beq.n	8005f7a <MainMenu+0x2e>
					}

				}
			}
		}
		if(KEYPAD_NOT_PRESSED == key)
 8005fc4:	4b05      	ldr	r3, [pc, #20]	; (8005fdc <MainMenu+0x90>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d103      	bne.n	8005fd4 <MainMenu+0x88>
		{
			SystemState = SYS_STATE_BEGIN;
 8005fcc:	4b04      	ldr	r3, [pc, #16]	; (8005fe0 <MainMenu+0x94>)
 8005fce:	2200      	movs	r2, #0
 8005fd0:	701a      	strb	r2, [r3, #0]
			return;
 8005fd2:	e002      	b.n	8005fda <MainMenu+0x8e>
		}
		else
		{
			SearchDatabase();
 8005fd4:	f000 f9c4 	bl	8006360 <SearchDatabase>
			return;
 8005fd8:	bf00      	nop
		}
	}
}
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	20000710 	.word	0x20000710
 8005fe0:	20000711 	.word	0x20000711

08005fe4 <GetFreeIndex>:
/* @Note				- Firstly, TemplateNum command packet is sent to R308. This return the current 	*/
/*						  count of fingerprints saved in R308 FLASH memory. If there is free space in 	*/
/*						  FLASH memory then the ID of then ID number will be returned for new fingerprint*/
/********************************************************************************************************/
int16_t GetFreeIndex(void)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af04      	add	r7, sp, #16
	int16_t fingerID = R308_TemplateNum();
 8005fea:	f003 f9fd 	bl	80093e8 <R308_TemplateNum>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	80fb      	strh	r3, [r7, #6]
	int16_t template_count = 499 - fingerID;
 8005ff2:	88fb      	ldrh	r3, [r7, #6]
 8005ff4:	f5c3 73f9 	rsb	r3, r3, #498	; 0x1f2
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	80bb      	strh	r3, [r7, #4]
	if(template_count < 0)
 8005ffe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	da18      	bge.n	8006038 <GetFreeIndex+0x54>
	{
		ST7735_FillScreen(ST7735_WHITE);
 8006006:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800600a:	f004 f809 	bl	800a020 <ST7735_FillScreen>
		ST7735_DrawString(20, 45, "MEMORY FULL", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 800600e:	4b0d      	ldr	r3, [pc, #52]	; (8006044 <GetFreeIndex+0x60>)
 8006010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006014:	9202      	str	r2, [sp, #8]
 8006016:	221f      	movs	r2, #31
 8006018:	9201      	str	r2, [sp, #4]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	9200      	str	r2, [sp, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a09      	ldr	r2, [pc, #36]	; (8006048 <GetFreeIndex+0x64>)
 8006022:	212d      	movs	r1, #45	; 0x2d
 8006024:	2014      	movs	r0, #20
 8006026:	f003 fee3 	bl	8009df0 <ST7735_DrawString>
		delay_ms(1000);
 800602a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800602e:	f7ff fdf3 	bl	8005c18 <delay_ms>
		return -1;
 8006032:	f04f 33ff 	mov.w	r3, #4294967295
 8006036:	e001      	b.n	800603c <GetFreeIndex+0x58>
	}else
	{
		return fingerID;
 8006038:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
	}
}
 800603c:	4618      	mov	r0, r3
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	20000044 	.word	0x20000044
 8006048:	0800d5d4 	.word	0x0800d5d4

0800604c <EnrollFingerprint>:
/* @Note				- Enrollment requires generation of 2 character models for each fingerprint. 	*/
/*						  If both fingerprint models are identical then fingerprint may be stored inside*/
/*						  FLASH memory and new ID will be assigned in case of successful enrollment.    */
/********************************************************************************************************/
void EnrollFingerprint(int16_t fingerID)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af04      	add	r7, sp, #16
 8006052:	4603      	mov	r3, r0
 8006054:	80fb      	strh	r3, [r7, #6]
	int16_t ack_package = -1;
 8006056:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800605a:	81fb      	strh	r3, [r7, #14]
	ST7735_FillScreen(ST7735_BLACK);
 800605c:	2000      	movs	r0, #0
 800605e:	f003 ffdf 	bl	800a020 <ST7735_FillScreen>
	ST7735_DrawString(20, 25, "PLACE YOUR       FINGER", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 8006062:	4ba0      	ldr	r3, [pc, #640]	; (80062e4 <EnrollFingerprint+0x298>)
 8006064:	2200      	movs	r2, #0
 8006066:	9202      	str	r2, [sp, #8]
 8006068:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800606c:	9201      	str	r2, [sp, #4]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	9200      	str	r2, [sp, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a9c      	ldr	r2, [pc, #624]	; (80062e8 <EnrollFingerprint+0x29c>)
 8006076:	2119      	movs	r1, #25
 8006078:	2014      	movs	r0, #20
 800607a:	f003 feb9 	bl	8009df0 <ST7735_DrawString>
	delay_ms(500);
 800607e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006082:	f7ff fdc9 	bl	8005c18 <delay_ms>
	while(R308_SUCCESS != ack_package)
 8006086:	e016      	b.n	80060b6 <EnrollFingerprint+0x6a>
	{
		ack_package = R308_GetImage();
 8006088:	f003 f83c 	bl	8009104 <R308_GetImage>
 800608c:	4603      	mov	r3, r0
 800608e:	81fb      	strh	r3, [r7, #14]
		switch(ack_package)
 8006090:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d002      	beq.n	800609e <EnrollFingerprint+0x52>
 8006098:	2b02      	cmp	r3, #2
 800609a:	d004      	beq.n	80060a6 <EnrollFingerprint+0x5a>
 800609c:	e007      	b.n	80060ae <EnrollFingerprint+0x62>
		{
			case R308_SUCCESS:
			{
				printf("Finger collection success\n");
 800609e:	4893      	ldr	r0, [pc, #588]	; (80062ec <EnrollFingerprint+0x2a0>)
 80060a0:	f005 f926 	bl	800b2f0 <puts>
				break;
 80060a4:	e007      	b.n	80060b6 <EnrollFingerprint+0x6a>
			}
			case R308_FINGER_NOT_DETECTED:
			{
				printf("Can't detect finger\n");
 80060a6:	4892      	ldr	r0, [pc, #584]	; (80062f0 <EnrollFingerprint+0x2a4>)
 80060a8:	f005 f922 	bl	800b2f0 <puts>
				break;
 80060ac:	e003      	b.n	80060b6 <EnrollFingerprint+0x6a>
			}
			default:
			{
				printf("An error occurred while collecting the finger\n");
 80060ae:	4891      	ldr	r0, [pc, #580]	; (80062f4 <EnrollFingerprint+0x2a8>)
 80060b0:	f005 f91e 	bl	800b2f0 <puts>
				break;
 80060b4:	bf00      	nop
	while(R308_SUCCESS != ack_package)
 80060b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1e4      	bne.n	8006088 <EnrollFingerprint+0x3c>
			}
		}
	}

	ack_package = R308_GenChar(1);
 80060be:	2001      	movs	r0, #1
 80060c0:	f003 f846 	bl	8009150 <R308_GenChar>
 80060c4:	4603      	mov	r3, r0
 80060c6:	81fb      	strh	r3, [r7, #14]
	switch(ack_package)
 80060c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d117      	bne.n	8006100 <EnrollFingerprint+0xb4>
	{
		case R308_SUCCESS:
		{
			printf("Generating character file 1 complete\n");
 80060d0:	4889      	ldr	r0, [pc, #548]	; (80062f8 <EnrollFingerprint+0x2ac>)
 80060d2:	f005 f90d 	bl	800b2f0 <puts>
			break;
 80060d6:	bf00      	nop
			DatabaseOperationsMenu();
			return;
		}
	}

	ST7735_FillScreen(ST7735_BLACK);
 80060d8:	2000      	movs	r0, #0
 80060da:	f003 ffa1 	bl	800a020 <ST7735_FillScreen>
	ST7735_DrawString(20, 25, "REMOVE YOUR      FINGER", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 80060de:	4b81      	ldr	r3, [pc, #516]	; (80062e4 <EnrollFingerprint+0x298>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	9202      	str	r2, [sp, #8]
 80060e4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80060e8:	9201      	str	r2, [sp, #4]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	9200      	str	r2, [sp, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a82      	ldr	r2, [pc, #520]	; (80062fc <EnrollFingerprint+0x2b0>)
 80060f2:	2119      	movs	r1, #25
 80060f4:	2014      	movs	r0, #20
 80060f6:	f003 fe7b 	bl	8009df0 <ST7735_DrawString>
	ack_package = 0;
 80060fa:	2300      	movs	r3, #0
 80060fc:	81fb      	strh	r3, [r7, #14]
	while(R308_FINGER_NOT_DETECTED != ack_package)
 80060fe:	e00c      	b.n	800611a <EnrollFingerprint+0xce>
			printf("Image generation failed\n");
 8006100:	487f      	ldr	r0, [pc, #508]	; (8006300 <EnrollFingerprint+0x2b4>)
 8006102:	f005 f8f5 	bl	800b2f0 <puts>
			DatabaseOperationsMenu();
 8006106:	f001 fb7b 	bl	8007800 <DatabaseOperationsMenu>
			return;
 800610a:	e0e7      	b.n	80062dc <EnrollFingerprint+0x290>
	{
		ack_package = R308_GetImage();
 800610c:	f002 fffa 	bl	8009104 <R308_GetImage>
 8006110:	4603      	mov	r3, r0
 8006112:	81fb      	strh	r3, [r7, #14]
		delay_ms(10);
 8006114:	200a      	movs	r0, #10
 8006116:	f7ff fd7f 	bl	8005c18 <delay_ms>
	while(R308_FINGER_NOT_DETECTED != ack_package)
 800611a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800611e:	2b02      	cmp	r3, #2
 8006120:	d1f4      	bne.n	800610c <EnrollFingerprint+0xc0>
	}

	ack_package = -1;
 8006122:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006126:	81fb      	strh	r3, [r7, #14]
	ST7735_FillScreen(ST7735_BLACK);
 8006128:	2000      	movs	r0, #0
 800612a:	f003 ff79 	bl	800a020 <ST7735_FillScreen>
	ST7735_DrawString(0, 25, "  PLACE YOUR    FINGER AGAIN", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 800612e:	4b6d      	ldr	r3, [pc, #436]	; (80062e4 <EnrollFingerprint+0x298>)
 8006130:	2200      	movs	r2, #0
 8006132:	9202      	str	r2, [sp, #8]
 8006134:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8006138:	9201      	str	r2, [sp, #4]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	9200      	str	r2, [sp, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a70      	ldr	r2, [pc, #448]	; (8006304 <EnrollFingerprint+0x2b8>)
 8006142:	2119      	movs	r1, #25
 8006144:	2000      	movs	r0, #0
 8006146:	f003 fe53 	bl	8009df0 <ST7735_DrawString>
	while(R308_SUCCESS != ack_package)
 800614a:	e02c      	b.n	80061a6 <EnrollFingerprint+0x15a>
	{
		ack_package = R308_GetImage();
 800614c:	f002 ffda 	bl	8009104 <R308_GetImage>
 8006150:	4603      	mov	r3, r0
 8006152:	81fb      	strh	r3, [r7, #14]
		switch(ack_package)
 8006154:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <EnrollFingerprint+0x116>
 800615c:	2b02      	cmp	r3, #2
 800615e:	d004      	beq.n	800616a <EnrollFingerprint+0x11e>
 8006160:	e007      	b.n	8006172 <EnrollFingerprint+0x126>
		{
			case R308_SUCCESS:
			{
				printf("Finger collection success\n");
 8006162:	4862      	ldr	r0, [pc, #392]	; (80062ec <EnrollFingerprint+0x2a0>)
 8006164:	f005 f8c4 	bl	800b2f0 <puts>
				break;
 8006168:	e01d      	b.n	80061a6 <EnrollFingerprint+0x15a>
			}
			case R308_FINGER_NOT_DETECTED:
			{
				printf("Can't detect finger\n");
 800616a:	4861      	ldr	r0, [pc, #388]	; (80062f0 <EnrollFingerprint+0x2a4>)
 800616c:	f005 f8c0 	bl	800b2f0 <puts>
				break;
 8006170:	e019      	b.n	80061a6 <EnrollFingerprint+0x15a>
			}
			default:
			{
				printf("An error occurred while collecting the finger\n");
 8006172:	4860      	ldr	r0, [pc, #384]	; (80062f4 <EnrollFingerprint+0x2a8>)
 8006174:	f005 f8bc 	bl	800b2f0 <puts>
				ST7735_FillScreen(ST7735_BLACK);
 8006178:	2000      	movs	r0, #0
 800617a:	f003 ff51 	bl	800a020 <ST7735_FillScreen>
				ST7735_DrawString(0, 25, "     ERROR", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 800617e:	4b59      	ldr	r3, [pc, #356]	; (80062e4 <EnrollFingerprint+0x298>)
 8006180:	2200      	movs	r2, #0
 8006182:	9202      	str	r2, [sp, #8]
 8006184:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8006188:	9201      	str	r2, [sp, #4]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	9200      	str	r2, [sp, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a5d      	ldr	r2, [pc, #372]	; (8006308 <EnrollFingerprint+0x2bc>)
 8006192:	2119      	movs	r1, #25
 8006194:	2000      	movs	r0, #0
 8006196:	f003 fe2b 	bl	8009df0 <ST7735_DrawString>
				delay_ms(100);
 800619a:	2064      	movs	r0, #100	; 0x64
 800619c:	f7ff fd3c 	bl	8005c18 <delay_ms>
				DatabaseOperationsMenu();
 80061a0:	f001 fb2e 	bl	8007800 <DatabaseOperationsMenu>
				break;
 80061a4:	bf00      	nop
	while(R308_SUCCESS != ack_package)
 80061a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1ce      	bne.n	800614c <EnrollFingerprint+0x100>
			}
		}
	}

	ack_package = R308_GenChar(2);
 80061ae:	2002      	movs	r0, #2
 80061b0:	f002 ffce 	bl	8009150 <R308_GenChar>
 80061b4:	4603      	mov	r3, r0
 80061b6:	81fb      	strh	r3, [r7, #14]
	switch(ack_package)
 80061b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10c      	bne.n	80061da <EnrollFingerprint+0x18e>
	{
		case R308_SUCCESS:
		{
			printf("Generating character file 2 complete\n");
 80061c0:	4852      	ldr	r0, [pc, #328]	; (800630c <EnrollFingerprint+0x2c0>)
 80061c2:	f005 f895 	bl	800b2f0 <puts>
			break;
 80061c6:	bf00      	nop
			DatabaseOperationsMenu();
			return;
		}
	}

	ack_package = R308_RegModel();
 80061c8:	f002 ffee 	bl	80091a8 <R308_RegModel>
 80061cc:	4603      	mov	r3, r0
 80061ce:	81fb      	strh	r3, [r7, #14]
	switch(ack_package)
 80061d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d11e      	bne.n	8006216 <EnrollFingerprint+0x1ca>
 80061d8:	e019      	b.n	800620e <EnrollFingerprint+0x1c2>
			printf("Image generation failed\n");
 80061da:	4849      	ldr	r0, [pc, #292]	; (8006300 <EnrollFingerprint+0x2b4>)
 80061dc:	f005 f888 	bl	800b2f0 <puts>
			ST7735_FillScreen(ST7735_BLACK);
 80061e0:	2000      	movs	r0, #0
 80061e2:	f003 ff1d 	bl	800a020 <ST7735_FillScreen>
			ST7735_DrawString(0, 25, "IMG GENERATION     FAILED", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 80061e6:	4b3f      	ldr	r3, [pc, #252]	; (80062e4 <EnrollFingerprint+0x298>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	9202      	str	r2, [sp, #8]
 80061ec:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80061f0:	9201      	str	r2, [sp, #4]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	9200      	str	r2, [sp, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a45      	ldr	r2, [pc, #276]	; (8006310 <EnrollFingerprint+0x2c4>)
 80061fa:	2119      	movs	r1, #25
 80061fc:	2000      	movs	r0, #0
 80061fe:	f003 fdf7 	bl	8009df0 <ST7735_DrawString>
			delay_ms(100);
 8006202:	2064      	movs	r0, #100	; 0x64
 8006204:	f7ff fd08 	bl	8005c18 <delay_ms>
			DatabaseOperationsMenu();
 8006208:	f001 fafa 	bl	8007800 <DatabaseOperationsMenu>
			return;
 800620c:	e066      	b.n	80062dc <EnrollFingerprint+0x290>
	{
		case R308_SUCCESS:
		{
			printf("Operation success!\n");
 800620e:	4841      	ldr	r0, [pc, #260]	; (8006314 <EnrollFingerprint+0x2c8>)
 8006210:	f005 f86e 	bl	800b2f0 <puts>
			break;
 8006214:	e019      	b.n	800624a <EnrollFingerprint+0x1fe>
		}
		default:
		{
			printf("Failed registering model\n");
 8006216:	4840      	ldr	r0, [pc, #256]	; (8006318 <EnrollFingerprint+0x2cc>)
 8006218:	f005 f86a 	bl	800b2f0 <puts>
			ST7735_FillScreen(ST7735_BLACK);
 800621c:	2000      	movs	r0, #0
 800621e:	f003 feff 	bl	800a020 <ST7735_FillScreen>
			ST7735_DrawString(0, 25, "FAILED REGISTERING MODEL", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 8006222:	4b30      	ldr	r3, [pc, #192]	; (80062e4 <EnrollFingerprint+0x298>)
 8006224:	2200      	movs	r2, #0
 8006226:	9202      	str	r2, [sp, #8]
 8006228:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800622c:	9201      	str	r2, [sp, #4]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	9200      	str	r2, [sp, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a39      	ldr	r2, [pc, #228]	; (800631c <EnrollFingerprint+0x2d0>)
 8006236:	2119      	movs	r1, #25
 8006238:	2000      	movs	r0, #0
 800623a:	f003 fdd9 	bl	8009df0 <ST7735_DrawString>
			delay_ms(100);
 800623e:	2064      	movs	r0, #100	; 0x64
 8006240:	f7ff fcea 	bl	8005c18 <delay_ms>
			DatabaseOperationsMenu();
 8006244:	f001 fadc 	bl	8007800 <DatabaseOperationsMenu>
			break;
 8006248:	bf00      	nop
		}
	}

	ST7735_FillScreen(ST7735_BLACK);
 800624a:	2000      	movs	r0, #0
 800624c:	f003 fee8 	bl	800a020 <ST7735_FillScreen>
	ST7735_Print(0, 25, "STORING NEW    FINGERPRINT IN THE SLOT:", fingerID, Font_11x18, ST7735_GREEN, ST7735_BLACK);
 8006250:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006254:	4618      	mov	r0, r3
 8006256:	f7fa fd81 	bl	8000d5c <__aeabi_i2f>
 800625a:	4602      	mov	r2, r0
 800625c:	2300      	movs	r3, #0
 800625e:	9303      	str	r3, [sp, #12]
 8006260:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006264:	9302      	str	r3, [sp, #8]
 8006266:	491f      	ldr	r1, [pc, #124]	; (80062e4 <EnrollFingerprint+0x298>)
 8006268:	466b      	mov	r3, sp
 800626a:	c903      	ldmia	r1, {r0, r1}
 800626c:	e883 0003 	stmia.w	r3, {r0, r1}
 8006270:	4613      	mov	r3, r2
 8006272:	4a2b      	ldr	r2, [pc, #172]	; (8006320 <EnrollFingerprint+0x2d4>)
 8006274:	2119      	movs	r1, #25
 8006276:	2000      	movs	r0, #0
 8006278:	f003 fe16 	bl	8009ea8 <ST7735_Print>
	delay_ms(500);
 800627c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006280:	f7ff fcca 	bl	8005c18 <delay_ms>

	ack_package = R308_Store(1, fingerID);
 8006284:	88fb      	ldrh	r3, [r7, #6]
 8006286:	4619      	mov	r1, r3
 8006288:	2001      	movs	r0, #1
 800628a:	f002 ffd9 	bl	8009240 <R308_Store>
 800628e:	4603      	mov	r3, r0
 8006290:	81fb      	strh	r3, [r7, #14]
	switch(ack_package)
 8006292:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d105      	bne.n	80062a6 <EnrollFingerprint+0x25a>
	{
		case R308_SUCCESS:
		{
			printf("Storage success\n");
 800629a:	4822      	ldr	r0, [pc, #136]	; (8006324 <EnrollFingerprint+0x2d8>)
 800629c:	f005 f828 	bl	800b2f0 <puts>
			DatabaseOperationsMenu();
 80062a0:	f001 faae 	bl	8007800 <DatabaseOperationsMenu>
			break;
 80062a4:	e019      	b.n	80062da <EnrollFingerprint+0x28e>
		}
		default:
		{
			printf("Error\n");
 80062a6:	4820      	ldr	r0, [pc, #128]	; (8006328 <EnrollFingerprint+0x2dc>)
 80062a8:	f005 f822 	bl	800b2f0 <puts>
			ST7735_FillScreen(ST7735_BLACK);
 80062ac:	2000      	movs	r0, #0
 80062ae:	f003 feb7 	bl	800a020 <ST7735_FillScreen>
			ST7735_DrawString(0, 25, "     ERROR", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 80062b2:	4b0c      	ldr	r3, [pc, #48]	; (80062e4 <EnrollFingerprint+0x298>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	9202      	str	r2, [sp, #8]
 80062b8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80062bc:	9201      	str	r2, [sp, #4]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	9200      	str	r2, [sp, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a10      	ldr	r2, [pc, #64]	; (8006308 <EnrollFingerprint+0x2bc>)
 80062c6:	2119      	movs	r1, #25
 80062c8:	2000      	movs	r0, #0
 80062ca:	f003 fd91 	bl	8009df0 <ST7735_DrawString>
			delay_ms(100);
 80062ce:	2064      	movs	r0, #100	; 0x64
 80062d0:	f7ff fca2 	bl	8005c18 <delay_ms>
			DatabaseOperationsMenu();
 80062d4:	f001 fa94 	bl	8007800 <DatabaseOperationsMenu>
			break;
 80062d8:	bf00      	nop
		}
	}
	return;
 80062da:	bf00      	nop
}
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	20000044 	.word	0x20000044
 80062e8:	0800d5e0 	.word	0x0800d5e0
 80062ec:	0800d5f8 	.word	0x0800d5f8
 80062f0:	0800d614 	.word	0x0800d614
 80062f4:	0800d628 	.word	0x0800d628
 80062f8:	0800d658 	.word	0x0800d658
 80062fc:	0800d698 	.word	0x0800d698
 8006300:	0800d680 	.word	0x0800d680
 8006304:	0800d6b0 	.word	0x0800d6b0
 8006308:	0800d6d0 	.word	0x0800d6d0
 800630c:	0800d6dc 	.word	0x0800d6dc
 8006310:	0800d704 	.word	0x0800d704
 8006314:	0800d720 	.word	0x0800d720
 8006318:	0800d734 	.word	0x0800d734
 800631c:	0800d750 	.word	0x0800d750
 8006320:	0800d76c 	.word	0x0800d76c
 8006324:	0800d794 	.word	0x0800d794
 8006328:	0800d7a4 	.word	0x0800d7a4

0800632c <EnrollmentAttempt>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void EnrollmentAttempt(void)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
	int16_t fingerID = GetFreeIndex();
 8006332:	f7ff fe57 	bl	8005fe4 <GetFreeIndex>
 8006336:	4603      	mov	r3, r0
 8006338:	80fb      	strh	r3, [r7, #6]
	if(fingerID < 0)
 800633a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800633e:	2b00      	cmp	r3, #0
 8006340:	da03      	bge.n	800634a <EnrollmentAttempt+0x1e>
	{
		printf("No free slots left!\n");
 8006342:	4806      	ldr	r0, [pc, #24]	; (800635c <EnrollmentAttempt+0x30>)
 8006344:	f004 ffd4 	bl	800b2f0 <puts>
		//welcome message
		return;
 8006348:	e005      	b.n	8006356 <EnrollmentAttempt+0x2a>
	}else
	{
		EnrollFingerprint(fingerID);
 800634a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800634e:	4618      	mov	r0, r3
 8006350:	f7ff fe7c 	bl	800604c <EnrollFingerprint>
	}
	return;
 8006354:	bf00      	nop
}
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	0800d7ac 	.word	0x0800d7ac

08006360 <SearchDatabase>:
/*																										*/
/* @Note				- if model is present in the database it proceeds to password screen. In case 	*/
/*						 finger ID belongs to administrator it proceeds to administrator password screen*/
/********************************************************************************************************/
void SearchDatabase(void)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af04      	add	r7, sp, #16
	int16_t response = -1;
 8006366:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800636a:	80fb      	strh	r3, [r7, #6]
	ST7735_FillScreen(ST7735_WHITE);
 800636c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006370:	f003 fe56 	bl	800a020 <ST7735_FillScreen>
	ST7735_DrawString(20, 25, "PLACE YOUR       FINGER", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8006374:	4b69      	ldr	r3, [pc, #420]	; (800651c <SearchDatabase+0x1bc>)
 8006376:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800637a:	9202      	str	r2, [sp, #8]
 800637c:	221f      	movs	r2, #31
 800637e:	9201      	str	r2, [sp, #4]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	9200      	str	r2, [sp, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a66      	ldr	r2, [pc, #408]	; (8006520 <SearchDatabase+0x1c0>)
 8006388:	2119      	movs	r1, #25
 800638a:	2014      	movs	r0, #20
 800638c:	f003 fd30 	bl	8009df0 <ST7735_DrawString>
	fingerprint_icon();
 8006390:	f002 fc9a 	bl	8008cc8 <fingerprint_icon>
	delay_ms(500);
 8006394:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006398:	f7ff fc3e 	bl	8005c18 <delay_ms>
	while(R308_SUCCESS != response)
 800639c:	e038      	b.n	8006410 <SearchDatabase+0xb0>
	{
		response  = R308_GetImage();
 800639e:	f002 feb1 	bl	8009104 <R308_GetImage>
 80063a2:	4603      	mov	r3, r0
 80063a4:	80fb      	strh	r3, [r7, #6]
		switch(response)
 80063a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <SearchDatabase+0x54>
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d004      	beq.n	80063bc <SearchDatabase+0x5c>
 80063b2:	e007      	b.n	80063c4 <SearchDatabase+0x64>
		{
			case R308_SUCCESS:
			{
				printf("Image captured successfully\n");
 80063b4:	485b      	ldr	r0, [pc, #364]	; (8006524 <SearchDatabase+0x1c4>)
 80063b6:	f004 ff9b 	bl	800b2f0 <puts>
				break;
 80063ba:	e029      	b.n	8006410 <SearchDatabase+0xb0>
			}
			case R308_FINGER_NOT_DETECTED:
			{
				printf("Finger not detected\n");
 80063bc:	485a      	ldr	r0, [pc, #360]	; (8006528 <SearchDatabase+0x1c8>)
 80063be:	f004 ff97 	bl	800b2f0 <puts>
				break;
 80063c2:	e025      	b.n	8006410 <SearchDatabase+0xb0>
			}
			default:
			{
				printf("Error\n");
 80063c4:	4859      	ldr	r0, [pc, #356]	; (800652c <SearchDatabase+0x1cc>)
 80063c6:	f004 ff93 	bl	800b2f0 <puts>
				BuzzerAlert(BUZZER_ERROR_SOUND);
 80063ca:	2002      	movs	r0, #2
 80063cc:	f000 f9b0 	bl	8006730 <BuzzerAlert>
				ST7735_FillScreen(ST7735_BLACK);
 80063d0:	2000      	movs	r0, #0
 80063d2:	f003 fe25 	bl	800a020 <ST7735_FillScreen>
				ST7735_Print(15, 50, "ERROR CODE:", response, Font_11x18, ST7735_RED, ST7735_BLACK);
 80063d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fa fcbe 	bl	8000d5c <__aeabi_i2f>
 80063e0:	4602      	mov	r2, r0
 80063e2:	2300      	movs	r3, #0
 80063e4:	9303      	str	r3, [sp, #12]
 80063e6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80063ea:	9302      	str	r3, [sp, #8]
 80063ec:	494b      	ldr	r1, [pc, #300]	; (800651c <SearchDatabase+0x1bc>)
 80063ee:	466b      	mov	r3, sp
 80063f0:	c903      	ldmia	r1, {r0, r1}
 80063f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80063f6:	4613      	mov	r3, r2
 80063f8:	4a4d      	ldr	r2, [pc, #308]	; (8006530 <SearchDatabase+0x1d0>)
 80063fa:	2132      	movs	r1, #50	; 0x32
 80063fc:	200f      	movs	r0, #15
 80063fe:	f003 fd53 	bl	8009ea8 <ST7735_Print>
				delay_ms(500);
 8006402:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006406:	f7ff fc07 	bl	8005c18 <delay_ms>
				WelcomeScreen();
 800640a:	f000 fb07 	bl	8006a1c <WelcomeScreen>
				return;
 800640e:	e082      	b.n	8006516 <SearchDatabase+0x1b6>
	while(R308_SUCCESS != response)
 8006410:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1c2      	bne.n	800639e <SearchDatabase+0x3e>
			}
		}
	}
	response = R308_GenChar(1);
 8006418:	2001      	movs	r0, #1
 800641a:	f002 fe99 	bl	8009150 <R308_GenChar>
 800641e:	4603      	mov	r3, r0
 8006420:	80fb      	strh	r3, [r7, #6]
	switch(response)
 8006422:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10f      	bne.n	800644a <SearchDatabase+0xea>
	{
		case R308_SUCCESS:
		{
			printf("Character 1 generated");
 800642a:	4842      	ldr	r0, [pc, #264]	; (8006534 <SearchDatabase+0x1d4>)
 800642c:	f004 fefa 	bl	800b224 <iprintf>
			break;
 8006430:	bf00      	nop
			WelcomeScreen();
			return;
		}
	}
	uint16_t fingerID;
	response = R308_SearchDatabase(&fingerID, 1);
 8006432:	1d3b      	adds	r3, r7, #4
 8006434:	2101      	movs	r1, #1
 8006436:	4618      	mov	r0, r3
 8006438:	f002 ff3c 	bl	80092b4 <R308_SearchDatabase>
 800643c:	4603      	mov	r3, r0
 800643e:	80fb      	strh	r3, [r7, #6]

	switch(response)
 8006440:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d029      	beq.n	800649c <SearchDatabase+0x13c>
 8006448:	e025      	b.n	8006496 <SearchDatabase+0x136>
			printf("Error generating character");
 800644a:	483b      	ldr	r0, [pc, #236]	; (8006538 <SearchDatabase+0x1d8>)
 800644c:	f004 feea 	bl	800b224 <iprintf>
			BuzzerAlert(BUZZER_ERROR_SOUND);
 8006450:	2002      	movs	r0, #2
 8006452:	f000 f96d 	bl	8006730 <BuzzerAlert>
			ST7735_FillScreen(ST7735_BLACK);
 8006456:	2000      	movs	r0, #0
 8006458:	f003 fde2 	bl	800a020 <ST7735_FillScreen>
			ST7735_Print(25, 50, "ERROR:", response, Font_11x18, ST7735_RED, ST7735_BLACK);
 800645c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006460:	4618      	mov	r0, r3
 8006462:	f7fa fc7b 	bl	8000d5c <__aeabi_i2f>
 8006466:	4602      	mov	r2, r0
 8006468:	2300      	movs	r3, #0
 800646a:	9303      	str	r3, [sp, #12]
 800646c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006470:	9302      	str	r3, [sp, #8]
 8006472:	492a      	ldr	r1, [pc, #168]	; (800651c <SearchDatabase+0x1bc>)
 8006474:	466b      	mov	r3, sp
 8006476:	c903      	ldmia	r1, {r0, r1}
 8006478:	e883 0003 	stmia.w	r3, {r0, r1}
 800647c:	4613      	mov	r3, r2
 800647e:	4a2f      	ldr	r2, [pc, #188]	; (800653c <SearchDatabase+0x1dc>)
 8006480:	2132      	movs	r1, #50	; 0x32
 8006482:	2019      	movs	r0, #25
 8006484:	f003 fd10 	bl	8009ea8 <ST7735_Print>
			delay_ms(500);
 8006488:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800648c:	f7ff fbc4 	bl	8005c18 <delay_ms>
			WelcomeScreen();
 8006490:	f000 fac4 	bl	8006a1c <WelcomeScreen>
			return;
 8006494:	e03f      	b.n	8006516 <SearchDatabase+0x1b6>
	switch(response)
 8006496:	2b09      	cmp	r3, #9
 8006498:	d008      	beq.n	80064ac <SearchDatabase+0x14c>
 800649a:	e00e      	b.n	80064ba <SearchDatabase+0x15a>
	{
		case R308_SUCCESS:
		{
			printf("Found finger in database!\n");
 800649c:	4828      	ldr	r0, [pc, #160]	; (8006540 <SearchDatabase+0x1e0>)
 800649e:	f004 ff27 	bl	800b2f0 <puts>
			break;
 80064a2:	bf00      	nop
			delay_ms(1000);
			WelcomeScreen();
			return;
		}
	}
	if(ADMIN_ID == fingerID)
 80064a4:	88bb      	ldrh	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d131      	bne.n	800650e <SearchDatabase+0x1ae>
 80064aa:	e02c      	b.n	8006506 <SearchDatabase+0x1a6>
			printf("No such finger in database");
 80064ac:	4825      	ldr	r0, [pc, #148]	; (8006544 <SearchDatabase+0x1e4>)
 80064ae:	f004 feb9 	bl	800b224 <iprintf>
			BuzzerAlert(BUZZER_ALARM_SOUND);
 80064b2:	2000      	movs	r0, #0
 80064b4:	f000 f93c 	bl	8006730 <BuzzerAlert>
			return;
 80064b8:	e02d      	b.n	8006516 <SearchDatabase+0x1b6>
			printf("Error\n");
 80064ba:	481c      	ldr	r0, [pc, #112]	; (800652c <SearchDatabase+0x1cc>)
 80064bc:	f004 ff18 	bl	800b2f0 <puts>
			BuzzerAlert(BUZZER_ERROR_SOUND);
 80064c0:	2002      	movs	r0, #2
 80064c2:	f000 f935 	bl	8006730 <BuzzerAlert>
			ST7735_FillScreen(ST7735_BLACK);
 80064c6:	2000      	movs	r0, #0
 80064c8:	f003 fdaa 	bl	800a020 <ST7735_FillScreen>
			ST7735_Print(25, 50, "ERROR:", response, Font_11x18, ST7735_RED, ST7735_BLACK);
 80064cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7fa fc43 	bl	8000d5c <__aeabi_i2f>
 80064d6:	4602      	mov	r2, r0
 80064d8:	2300      	movs	r3, #0
 80064da:	9303      	str	r3, [sp, #12]
 80064dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80064e0:	9302      	str	r3, [sp, #8]
 80064e2:	490e      	ldr	r1, [pc, #56]	; (800651c <SearchDatabase+0x1bc>)
 80064e4:	466b      	mov	r3, sp
 80064e6:	c903      	ldmia	r1, {r0, r1}
 80064e8:	e883 0003 	stmia.w	r3, {r0, r1}
 80064ec:	4613      	mov	r3, r2
 80064ee:	4a13      	ldr	r2, [pc, #76]	; (800653c <SearchDatabase+0x1dc>)
 80064f0:	2132      	movs	r1, #50	; 0x32
 80064f2:	2019      	movs	r0, #25
 80064f4:	f003 fcd8 	bl	8009ea8 <ST7735_Print>
			delay_ms(1000);
 80064f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80064fc:	f7ff fb8c 	bl	8005c18 <delay_ms>
			WelcomeScreen();
 8006500:	f000 fa8c 	bl	8006a1c <WelcomeScreen>
			return;
 8006504:	e007      	b.n	8006516 <SearchDatabase+0x1b6>
	{
		SystemState = SYS_STATE_READ_ADMIN_PWD;
 8006506:	4b10      	ldr	r3, [pc, #64]	; (8006548 <SearchDatabase+0x1e8>)
 8006508:	2203      	movs	r2, #3
 800650a:	701a      	strb	r2, [r3, #0]
 800650c:	e003      	b.n	8006516 <SearchDatabase+0x1b6>
	}else
	{
		SecondStepAuth(fingerID);
 800650e:	88bb      	ldrh	r3, [r7, #4]
 8006510:	4618      	mov	r0, r3
 8006512:	f000 fa53 	bl	80069bc <SecondStepAuth>
	}
}
 8006516:	3708      	adds	r7, #8
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	20000044 	.word	0x20000044
 8006520:	0800d5e0 	.word	0x0800d5e0
 8006524:	0800d7c0 	.word	0x0800d7c0
 8006528:	0800d7dc 	.word	0x0800d7dc
 800652c:	0800d7a4 	.word	0x0800d7a4
 8006530:	0800d7f0 	.word	0x0800d7f0
 8006534:	0800d7fc 	.word	0x0800d7fc
 8006538:	0800d814 	.word	0x0800d814
 800653c:	0800d830 	.word	0x0800d830
 8006540:	0800d838 	.word	0x0800d838
 8006544:	0800d854 	.word	0x0800d854
 8006548:	20000711 	.word	0x20000711

0800654c <TIM2_Config>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void TIM2_Config(void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b08c      	sub	sp, #48	; 0x30
 8006550:	af00      	add	r7, sp, #0
	RCC->APB1ENR.bit.tim2en = SET;
 8006552:	4a25      	ldr	r2, [pc, #148]	; (80065e8 <TIM2_Config+0x9c>)
 8006554:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006556:	f043 0301 	orr.w	r3, r3, #1
 800655a:	6413      	str	r3, [r2, #64]	; 0x40

	TIM_OC_Config_t sConfigOC = {0};
 800655c:	f107 0314 	add.w	r3, r7, #20
 8006560:	2200      	movs	r2, #0
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	605a      	str	r2, [r3, #4]
 8006566:	609a      	str	r2, [r3, #8]
 8006568:	60da      	str	r2, [r3, #12]
 800656a:	611a      	str	r2, [r3, #16]
 800656c:	615a      	str	r2, [r3, #20]
 800656e:	619a      	str	r2, [r3, #24]

	TIM2Handle.TIMx = TIM_2;
 8006570:	4b1e      	ldr	r3, [pc, #120]	; (80065ec <TIM2_Config+0xa0>)
 8006572:	2202      	movs	r2, #2
 8006574:	701a      	strb	r2, [r3, #0]
	TIM2Handle.TIM_Config.Prescaler = 1290;
 8006576:	4b1d      	ldr	r3, [pc, #116]	; (80065ec <TIM2_Config+0xa0>)
 8006578:	f240 520a 	movw	r2, #1290	; 0x50a
 800657c:	605a      	str	r2, [r3, #4]
	TIM2Handle.TIM_Config.CounterMode = TIM_COUNTERMODE_UP;
 800657e:	4b1b      	ldr	r3, [pc, #108]	; (80065ec <TIM2_Config+0xa0>)
 8006580:	2200      	movs	r2, #0
 8006582:	60da      	str	r2, [r3, #12]
	TIM2Handle.TIM_Config.Period = 254;
 8006584:	4b19      	ldr	r3, [pc, #100]	; (80065ec <TIM2_Config+0xa0>)
 8006586:	22fe      	movs	r2, #254	; 0xfe
 8006588:	609a      	str	r2, [r3, #8]
	TIM2Handle.TIM_Config.ClockDivision = TIM_CLOCKDIV_DIV1;
 800658a:	4b18      	ldr	r3, [pc, #96]	; (80065ec <TIM2_Config+0xa0>)
 800658c:	2200      	movs	r2, #0
 800658e:	615a      	str	r2, [r3, #20]
	TIM2Handle.TIM_Config.AutoReloadPreload = 0;
 8006590:	4b16      	ldr	r3, [pc, #88]	; (80065ec <TIM2_Config+0xa0>)
 8006592:	2200      	movs	r2, #0
 8006594:	61da      	str	r2, [r3, #28]
	TIM_PWM_Init(&TIM2Handle);
 8006596:	4815      	ldr	r0, [pc, #84]	; (80065ec <TIM2_Config+0xa0>)
 8006598:	f7fb fe9e 	bl	80022d8 <TIM_PWM_Init>

	sConfigOC.OCMode = 0x6;
 800659c:	2306      	movs	r3, #6
 800659e:	617b      	str	r3, [r7, #20]
	sConfigOC.Pulse = 0;
 80065a0:	2300      	movs	r3, #0
 80065a2:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCPolarity = 0;
 80065a4:	2300      	movs	r3, #0
 80065a6:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCFastMode = 0;
 80065a8:	2300      	movs	r3, #0
 80065aa:	627b      	str	r3, [r7, #36]	; 0x24
	TIM_PWM_ConfigChannel(&TIM2Handle, &sConfigOC, TIM_CHANNEL_1);
 80065ac:	f107 0314 	add.w	r3, r7, #20
 80065b0:	2200      	movs	r2, #0
 80065b2:	4619      	mov	r1, r3
 80065b4:	480d      	ldr	r0, [pc, #52]	; (80065ec <TIM2_Config+0xa0>)
 80065b6:	f7fb feef 	bl	8002398 <TIM_PWM_ConfigChannel>

	GPIO_Handle_t TIM2_GPIO;

	TIM2_GPIO.pGPIOx = GPIOA;
 80065ba:	4b0d      	ldr	r3, [pc, #52]	; (80065f0 <TIM2_Config+0xa4>)
 80065bc:	607b      	str	r3, [r7, #4]
	TIM2_GPIO.GPIO_Config.PinNumber = GPIO_PIN_15;
 80065be:	230f      	movs	r3, #15
 80065c0:	60bb      	str	r3, [r7, #8]
	TIM2_GPIO.GPIO_Config.PinMode = GPIO_MODE_AF;
 80065c2:	2302      	movs	r3, #2
 80065c4:	733b      	strb	r3, [r7, #12]
	TIM2_GPIO.GPIO_Config.PinAltFuncMode = 1;
 80065c6:	2301      	movs	r3, #1
 80065c8:	743b      	strb	r3, [r7, #16]
	TIM2_GPIO.GPIO_Config.PinOPType = GPIO_OUTPUT_PP;
 80065ca:	2300      	movs	r3, #0
 80065cc:	73fb      	strb	r3, [r7, #15]
	TIM2_GPIO.GPIO_Config.PinPuPdControl = GPIO_PIN_NO_PUPD;
 80065ce:	2300      	movs	r3, #0
 80065d0:	73bb      	strb	r3, [r7, #14]
	TIM2_GPIO.GPIO_Config.PinSpeed = GPIO_SPEED_LOW;
 80065d2:	2300      	movs	r3, #0
 80065d4:	737b      	strb	r3, [r7, #13]
	GPIO_Init(&TIM2_GPIO);
 80065d6:	1d3b      	adds	r3, r7, #4
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fa fe2d 	bl	8001238 <GPIO_Init>
}
 80065de:	bf00      	nop
 80065e0:	3730      	adds	r7, #48	; 0x30
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	40023800 	.word	0x40023800
 80065ec:	200006e4 	.word	0x200006e4
 80065f0:	40020000 	.word	0x40020000

080065f4 <TIM3_Config>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void TIM3_Config(void)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
	TIM_Clock_Config_t sClkSrcConfig = {0};
 80065fa:	463b      	mov	r3, r7
 80065fc:	2200      	movs	r2, #0
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	605a      	str	r2, [r3, #4]
 8006602:	609a      	str	r2, [r3, #8]
 8006604:	60da      	str	r2, [r3, #12]

	RCC->APB1ENR.bit.tim3en = SET;
 8006606:	4a17      	ldr	r2, [pc, #92]	; (8006664 <TIM3_Config+0x70>)
 8006608:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800660a:	f043 0302 	orr.w	r3, r3, #2
 800660e:	6413      	str	r3, [r2, #64]	; 0x40

	TIM3Handle.TIMx = TIM_3;
 8006610:	4b15      	ldr	r3, [pc, #84]	; (8006668 <TIM3_Config+0x74>)
 8006612:	2203      	movs	r2, #3
 8006614:	701a      	strb	r2, [r3, #0]
	TIM3Handle.TIM_Config.Prescaler = 8399;
 8006616:	4b14      	ldr	r3, [pc, #80]	; (8006668 <TIM3_Config+0x74>)
 8006618:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800661c:	605a      	str	r2, [r3, #4]
	TIM3Handle.TIM_Config.CounterMode = TIM_COUNTERMODE_UP;
 800661e:	4b12      	ldr	r3, [pc, #72]	; (8006668 <TIM3_Config+0x74>)
 8006620:	2200      	movs	r2, #0
 8006622:	60da      	str	r2, [r3, #12]
	TIM3Handle.TIM_Config.Period = 9999;
 8006624:	4b10      	ldr	r3, [pc, #64]	; (8006668 <TIM3_Config+0x74>)
 8006626:	f242 720f 	movw	r2, #9999	; 0x270f
 800662a:	609a      	str	r2, [r3, #8]
	TIM3Handle.TIM_Config.ClockDivision = TIM_CLOCKDIV_DIV1;
 800662c:	4b0e      	ldr	r3, [pc, #56]	; (8006668 <TIM3_Config+0x74>)
 800662e:	2200      	movs	r2, #0
 8006630:	615a      	str	r2, [r3, #20]
	TIM3Handle.TIM_Config.AutoReloadPreload = TIM_AUTORELOAD_DISABLE;
 8006632:	4b0d      	ldr	r3, [pc, #52]	; (8006668 <TIM3_Config+0x74>)
 8006634:	2200      	movs	r2, #0
 8006636:	61da      	str	r2, [r3, #28]
	TIM_Base_Init(&TIM3Handle);
 8006638:	480b      	ldr	r0, [pc, #44]	; (8006668 <TIM3_Config+0x74>)
 800663a:	f7fb fe17 	bl	800226c <TIM_Base_Init>

	sClkSrcConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800663e:	2301      	movs	r3, #1
 8006640:	603b      	str	r3, [r7, #0]
	TIM_ConfigClockSource(&TIM3Handle, &sClkSrcConfig);
 8006642:	463b      	mov	r3, r7
 8006644:	4619      	mov	r1, r3
 8006646:	4808      	ldr	r0, [pc, #32]	; (8006668 <TIM3_Config+0x74>)
 8006648:	f7fb ff50 	bl	80024ec <TIM_ConfigClockSource>

	NVIC_SetPriority(TIM3_IRQn, 0);
 800664c:	2100      	movs	r1, #0
 800664e:	201d      	movs	r0, #29
 8006650:	f7ff fb16 	bl	8005c80 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn);
 8006654:	201d      	movs	r0, #29
 8006656:	f7ff faf7 	bl	8005c48 <__NVIC_EnableIRQ>
}
 800665a:	bf00      	nop
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	40023800 	.word	0x40023800
 8006668:	200006b8 	.word	0x200006b8

0800666c <SystemClock_Config>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void SystemClock_Config(void)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b092      	sub	sp, #72	; 0x48
 8006670:	af00      	add	r7, sp, #0

	RCC_OscInit_t Osc = {0};
 8006672:	f107 0318 	add.w	r3, r7, #24
 8006676:	2230      	movs	r2, #48	; 0x30
 8006678:	2100      	movs	r1, #0
 800667a:	4618      	mov	r0, r3
 800667c:	f004 ff38 	bl	800b4f0 <memset>
	RCC_ClkInit_t Clk = {0};
 8006680:	1d3b      	adds	r3, r7, #4
 8006682:	2200      	movs	r2, #0
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	605a      	str	r2, [r3, #4]
 8006688:	609a      	str	r2, [r3, #8]
 800668a:	60da      	str	r2, [r3, #12]
 800668c:	611a      	str	r2, [r3, #16]


	//osc init
	Osc.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800668e:	2301      	movs	r3, #1
 8006690:	61bb      	str	r3, [r7, #24]
	Osc.HSEState = RCC_HSE_ON;
 8006692:	2301      	movs	r3, #1
 8006694:	61fb      	str	r3, [r7, #28]
	Osc.PLL.State = RCC_PLL_ON;
 8006696:	2302      	movs	r3, #2
 8006698:	633b      	str	r3, [r7, #48]	; 0x30
	Osc.PLL.Source = RCC_PLLCFGR_PLLSRC_HSE;
 800669a:	2301      	movs	r3, #1
 800669c:	637b      	str	r3, [r7, #52]	; 0x34
	Osc.PLL.M = 4;
 800669e:	2304      	movs	r3, #4
 80066a0:	63bb      	str	r3, [r7, #56]	; 0x38
	Osc.PLL.N = 168;
 80066a2:	23a8      	movs	r3, #168	; 0xa8
 80066a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	Osc.PLL.P = 0;
 80066a6:	2300      	movs	r3, #0
 80066a8:	643b      	str	r3, [r7, #64]	; 0x40
	Osc.PLL.Q = 4;
 80066aa:	2304      	movs	r3, #4
 80066ac:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscConfig(&Osc);
 80066ae:	f107 0318 	add.w	r3, r7, #24
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7fb f822 	bl	80016fc <RCC_OscConfig>

	//clk init
	Clk.ClockType = RCC_CLOCKTYPE_HCLK;
 80066b8:	2302      	movs	r3, #2
 80066ba:	607b      	str	r3, [r7, #4]
	Clk.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80066bc:	2302      	movs	r3, #2
 80066be:	60bb      	str	r3, [r7, #8]
	Clk.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80066c0:	2300      	movs	r3, #0
 80066c2:	60fb      	str	r3, [r7, #12]
	Clk.APB1CLKDivider = RCC_HCLK_DIV4;
 80066c4:	2305      	movs	r3, #5
 80066c6:	613b      	str	r3, [r7, #16]
	Clk.APB2CLKDivider = RCC_HCLK_DIV2;
 80066c8:	2304      	movs	r3, #4
 80066ca:	617b      	str	r3, [r7, #20]

	RCC_ClockConfig(&Clk);
 80066cc:	1d3b      	adds	r3, r7, #4
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fb f8dc 	bl	800188c <RCC_ClockConfig>

	Clk.ClockType = RCC_CLOCKTYPE_SYSCLK;
 80066d4:	2301      	movs	r3, #1
 80066d6:	607b      	str	r3, [r7, #4]
	RCC_ClockConfig(&Clk);
 80066d8:	1d3b      	adds	r3, r7, #4
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fb f8d6 	bl	800188c <RCC_ClockConfig>

	Clk.ClockType = RCC_CLOCKTYPE_PCLK1;
 80066e0:	2304      	movs	r3, #4
 80066e2:	607b      	str	r3, [r7, #4]
	RCC_ClockConfig(&Clk);
 80066e4:	1d3b      	adds	r3, r7, #4
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fb f8d0 	bl	800188c <RCC_ClockConfig>

	Clk.ClockType = RCC_CLOCKTYPE_PCLK2;
 80066ec:	2308      	movs	r3, #8
 80066ee:	607b      	str	r3, [r7, #4]
	RCC_ClockConfig(&Clk);
 80066f0:	1d3b      	adds	r3, r7, #4
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7fb f8ca 	bl	800188c <RCC_ClockConfig>

	SysTick_Init();
 80066f8:	f7fb fcaa 	bl	8002050 <SysTick_Init>
}
 80066fc:	bf00      	nop
 80066fe:	3748      	adds	r7, #72	; 0x48
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <__NVIC_SystemReset>:
{
 8006704:	b480      	push	{r7}
 8006706:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006708:	f3bf 8f4f 	dsb	sy
}
 800670c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800670e:	4b06      	ldr	r3, [pc, #24]	; (8006728 <__NVIC_SystemReset+0x24>)
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006716:	4904      	ldr	r1, [pc, #16]	; (8006728 <__NVIC_SystemReset+0x24>)
 8006718:	4b04      	ldr	r3, [pc, #16]	; (800672c <__NVIC_SystemReset+0x28>)
 800671a:	4313      	orrs	r3, r2
 800671c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800671e:	f3bf 8f4f 	dsb	sy
}
 8006722:	bf00      	nop
    __NOP();
 8006724:	bf00      	nop
 8006726:	e7fd      	b.n	8006724 <__NVIC_SystemReset+0x20>
 8006728:	e000ed00 	.word	0xe000ed00
 800672c:	05fa0004 	.word	0x05fa0004

08006730 <BuzzerAlert>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void BuzzerAlert(uint8_t sound)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b092      	sub	sp, #72	; 0x48
 8006734:	af04      	add	r7, sp, #16
 8006736:	4603      	mov	r3, r0
 8006738:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 800673a:	2300      	movs	r3, #0
 800673c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	switch(sound)
 8006740:	79fb      	ldrb	r3, [r7, #7]
 8006742:	2b03      	cmp	r3, #3
 8006744:	f200 812d 	bhi.w	80069a2 <BuzzerAlert+0x272>
 8006748:	a201      	add	r2, pc, #4	; (adr r2, 8006750 <BuzzerAlert+0x20>)
 800674a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674e:	bf00      	nop
 8006750:	08006761 	.word	0x08006761
 8006754:	0800688b 	.word	0x0800688b
 8006758:	0800689d 	.word	0x0800689d
 800675c:	080068f5 	.word	0x080068f5
	{
		case BUZZER_ALARM_SOUND:
		{
			ST7735_FillScreen(ST7735_RED);
 8006760:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8006764:	f003 fc5c 	bl	800a020 <ST7735_FillScreen>
			ST7735_DrawString(0, 40, "      EITHER YOUR                             FINGERPRINT NOT FOUND                           OR THE PASSWORD IS                                  WRONG!", Font_7x10, ST7735_WHITE, ST7735_RED);
 8006768:	4b90      	ldr	r3, [pc, #576]	; (80069ac <BuzzerAlert+0x27c>)
 800676a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800676e:	9202      	str	r2, [sp, #8]
 8006770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006774:	9201      	str	r2, [sp, #4]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	9200      	str	r2, [sp, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a8c      	ldr	r2, [pc, #560]	; (80069b0 <BuzzerAlert+0x280>)
 800677e:	2128      	movs	r1, #40	; 0x28
 8006780:	2000      	movs	r0, #0
 8006782:	f003 fb35 	bl	8009df0 <ST7735_DrawString>
			alert_icon();
 8006786:	f002 faaf 	bl	8008ce8 <alert_icon>
			while(i < alarm_time)
 800678a:	e04c      	b.n	8006826 <BuzzerAlert+0xf6>
			{
				for(int k = 0; k < 255; k++)
 800678c:	2300      	movs	r3, #0
 800678e:	633b      	str	r3, [r7, #48]	; 0x30
 8006790:	e009      	b.n	80067a6 <BuzzerAlert+0x76>
				{
					TIM2->CCR1 = k;
 8006792:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006798:	6353      	str	r3, [r2, #52]	; 0x34
					delay_ms(2);
 800679a:	2002      	movs	r0, #2
 800679c:	f7ff fa3c 	bl	8005c18 <delay_ms>
				for(int k = 0; k < 255; k++)
 80067a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a2:	3301      	adds	r3, #1
 80067a4:	633b      	str	r3, [r7, #48]	; 0x30
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	2bfe      	cmp	r3, #254	; 0xfe
 80067aa:	ddf2      	ble.n	8006792 <BuzzerAlert+0x62>
				}
				ST7735_FillScreen(ST7735_BLUE);
 80067ac:	201f      	movs	r0, #31
 80067ae:	f003 fc37 	bl	800a020 <ST7735_FillScreen>
				ST7735_DrawString(0, 40, "                            EITHER YOUR                             FINGERPRINT NOT FOUND                           OR THE PASSWORD IS                                  WRONG!", Font_7x10, ST7735_WHITE, ST7735_BLUE);
 80067b2:	4b7e      	ldr	r3, [pc, #504]	; (80069ac <BuzzerAlert+0x27c>)
 80067b4:	221f      	movs	r2, #31
 80067b6:	9202      	str	r2, [sp, #8]
 80067b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067bc:	9201      	str	r2, [sp, #4]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	9200      	str	r2, [sp, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a7b      	ldr	r2, [pc, #492]	; (80069b4 <BuzzerAlert+0x284>)
 80067c6:	2128      	movs	r1, #40	; 0x28
 80067c8:	2000      	movs	r0, #0
 80067ca:	f003 fb11 	bl	8009df0 <ST7735_DrawString>
				alert_icon();
 80067ce:	f002 fa8b 	bl	8008ce8 <alert_icon>
				for(int k = 100; k > 0; k--)
 80067d2:	2364      	movs	r3, #100	; 0x64
 80067d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067d6:	e009      	b.n	80067ec <BuzzerAlert+0xbc>
				{
					TIM2->CCR1 = k;
 80067d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80067dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067de:	6353      	str	r3, [r2, #52]	; 0x34
					delay_ms(2);
 80067e0:	2002      	movs	r0, #2
 80067e2:	f7ff fa19 	bl	8005c18 <delay_ms>
				for(int k = 100; k > 0; k--)
 80067e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e8:	3b01      	subs	r3, #1
 80067ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	dcf2      	bgt.n	80067d8 <BuzzerAlert+0xa8>
				}
				ST7735_FillScreen(ST7735_RED);
 80067f2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80067f6:	f003 fc13 	bl	800a020 <ST7735_FillScreen>
				ST7735_DrawString(0, 40, "                            EITHER YOUR                             FINGERPRINT NOT FOUND                           OR THE PASSWORD IS                                  WRONG!", Font_7x10, ST7735_WHITE, ST7735_RED);
 80067fa:	4b6c      	ldr	r3, [pc, #432]	; (80069ac <BuzzerAlert+0x27c>)
 80067fc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006800:	9202      	str	r2, [sp, #8]
 8006802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006806:	9201      	str	r2, [sp, #4]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	9200      	str	r2, [sp, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a69      	ldr	r2, [pc, #420]	; (80069b4 <BuzzerAlert+0x284>)
 8006810:	2128      	movs	r1, #40	; 0x28
 8006812:	2000      	movs	r0, #0
 8006814:	f003 faec 	bl	8009df0 <ST7735_DrawString>
				alert_icon();
 8006818:	f002 fa66 	bl	8008ce8 <alert_icon>
				i++;
 800681c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006820:	3301      	adds	r3, #1
 8006822:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			while(i < alarm_time)
 8006826:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800682a:	4b63      	ldr	r3, [pc, #396]	; (80069b8 <BuzzerAlert+0x288>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	429a      	cmp	r2, r3
 8006830:	d3ac      	bcc.n	800678c <BuzzerAlert+0x5c>
			}
			TIM2->CCR1 = 0;
 8006832:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006836:	2200      	movs	r2, #0
 8006838:	635a      	str	r2, [r3, #52]	; 0x34
			WelcomeScreen();
 800683a:	f000 f8ef 	bl	8006a1c <WelcomeScreen>
			break;
 800683e:	e0b0      	b.n	80069a2 <BuzzerAlert+0x272>
		}
		case BUZZER_ACCESS_GRANTED_SOUND:
		{
			while(i < 10)
			{
				for(int k = 0; k < 10; k++)
 8006840:	2300      	movs	r3, #0
 8006842:	62bb      	str	r3, [r7, #40]	; 0x28
 8006844:	e009      	b.n	800685a <BuzzerAlert+0x12a>
				{
					TIM2->CCR1 = k;
 8006846:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800684a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684c:	6353      	str	r3, [r2, #52]	; 0x34
					delay_ms(4);
 800684e:	2004      	movs	r0, #4
 8006850:	f7ff f9e2 	bl	8005c18 <delay_ms>
				for(int k = 0; k < 10; k++)
 8006854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006856:	3301      	adds	r3, #1
 8006858:	62bb      	str	r3, [r7, #40]	; 0x28
 800685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685c:	2b09      	cmp	r3, #9
 800685e:	ddf2      	ble.n	8006846 <BuzzerAlert+0x116>
				}

				for(int k=10; k>0; k--)
 8006860:	230a      	movs	r3, #10
 8006862:	627b      	str	r3, [r7, #36]	; 0x24
 8006864:	e009      	b.n	800687a <BuzzerAlert+0x14a>
				{
					TIM2->CCR1 = k;
 8006866:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	6353      	str	r3, [r2, #52]	; 0x34
					delay_ms(4);
 800686e:	2004      	movs	r0, #4
 8006870:	f7ff f9d2 	bl	8005c18 <delay_ms>
				for(int k=10; k>0; k--)
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	3b01      	subs	r3, #1
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	2b00      	cmp	r3, #0
 800687e:	dcf2      	bgt.n	8006866 <BuzzerAlert+0x136>
				}
				i++;
 8006880:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006884:	3301      	adds	r3, #1
 8006886:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			while(i < 10)
 800688a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800688e:	2b09      	cmp	r3, #9
 8006890:	d9d6      	bls.n	8006840 <BuzzerAlert+0x110>
			}
			TIM2->CCR1 = 0;
 8006892:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006896:	2200      	movs	r2, #0
 8006898:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800689a:	e082      	b.n	80069a2 <BuzzerAlert+0x272>
		}
		case BUZZER_ERROR_SOUND:
		{
			for(int k = 5; k > 0; k--)
 800689c:	2305      	movs	r3, #5
 800689e:	623b      	str	r3, [r7, #32]
 80068a0:	e009      	b.n	80068b6 <BuzzerAlert+0x186>
			{
				TIM2->CCR1 = k;
 80068a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	6353      	str	r3, [r2, #52]	; 0x34
				delay_ms(50);
 80068aa:	2032      	movs	r0, #50	; 0x32
 80068ac:	f7ff f9b4 	bl	8005c18 <delay_ms>
			for(int k = 5; k > 0; k--)
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	3b01      	subs	r3, #1
 80068b4:	623b      	str	r3, [r7, #32]
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	dcf2      	bgt.n	80068a2 <BuzzerAlert+0x172>
			}
			TIM2->CCR1 = 0;
 80068bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80068c0:	2200      	movs	r2, #0
 80068c2:	635a      	str	r2, [r3, #52]	; 0x34
			delay_ms(20);
 80068c4:	2014      	movs	r0, #20
 80068c6:	f7ff f9a7 	bl	8005c18 <delay_ms>
			for(int k = 5; k > 0; k--)
 80068ca:	2305      	movs	r3, #5
 80068cc:	61fb      	str	r3, [r7, #28]
 80068ce:	e009      	b.n	80068e4 <BuzzerAlert+0x1b4>
			{
				TIM2->CCR1 = k;
 80068d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	6353      	str	r3, [r2, #52]	; 0x34
				delay_ms(40);
 80068d8:	2028      	movs	r0, #40	; 0x28
 80068da:	f7ff f99d 	bl	8005c18 <delay_ms>
			for(int k = 5; k > 0; k--)
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	3b01      	subs	r3, #1
 80068e2:	61fb      	str	r3, [r7, #28]
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	dcf2      	bgt.n	80068d0 <BuzzerAlert+0x1a0>
			}
			TIM2->CCR1 = 0;
 80068ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80068ee:	2200      	movs	r2, #0
 80068f0:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80068f2:	e056      	b.n	80069a2 <BuzzerAlert+0x272>
		}
		case BUZZER_INIT_SOUND:
		{
			for(int k = 5; k > 0; k--)
 80068f4:	2305      	movs	r3, #5
 80068f6:	61bb      	str	r3, [r7, #24]
 80068f8:	e009      	b.n	800690e <BuzzerAlert+0x1de>
			{
				TIM2->CCR1 = k;
 80068fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	6353      	str	r3, [r2, #52]	; 0x34
				delay_ms(30);
 8006902:	201e      	movs	r0, #30
 8006904:	f7ff f988 	bl	8005c18 <delay_ms>
			for(int k = 5; k > 0; k--)
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	3b01      	subs	r3, #1
 800690c:	61bb      	str	r3, [r7, #24]
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	2b00      	cmp	r3, #0
 8006912:	dcf2      	bgt.n	80068fa <BuzzerAlert+0x1ca>
			}
			TIM2->CCR1 = 0;
 8006914:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006918:	2200      	movs	r2, #0
 800691a:	635a      	str	r2, [r3, #52]	; 0x34
			delay_ms(90);
 800691c:	205a      	movs	r0, #90	; 0x5a
 800691e:	f7ff f97b 	bl	8005c18 <delay_ms>
			for(int k = 5; k > 0; k--)
 8006922:	2305      	movs	r3, #5
 8006924:	617b      	str	r3, [r7, #20]
 8006926:	e006      	b.n	8006936 <BuzzerAlert+0x206>
			{
				TIM2->CCR1 = k;
 8006928:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	6353      	str	r3, [r2, #52]	; 0x34
			for(int k = 5; k > 0; k--)
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	3b01      	subs	r3, #1
 8006934:	617b      	str	r3, [r7, #20]
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	2b00      	cmp	r3, #0
 800693a:	dcf5      	bgt.n	8006928 <BuzzerAlert+0x1f8>
			}
			TIM2->CCR1 = 0;
 800693c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006940:	2200      	movs	r2, #0
 8006942:	635a      	str	r2, [r3, #52]	; 0x34
			delay_ms(60);
 8006944:	203c      	movs	r0, #60	; 0x3c
 8006946:	f7ff f967 	bl	8005c18 <delay_ms>
			for(int k = 5; k > 0; k--)
 800694a:	2305      	movs	r3, #5
 800694c:	613b      	str	r3, [r7, #16]
 800694e:	e009      	b.n	8006964 <BuzzerAlert+0x234>
			{
				TIM2->CCR1 = k;
 8006950:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	6353      	str	r3, [r2, #52]	; 0x34
				delay_ms(70);
 8006958:	2046      	movs	r0, #70	; 0x46
 800695a:	f7ff f95d 	bl	8005c18 <delay_ms>
			for(int k = 5; k > 0; k--)
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	3b01      	subs	r3, #1
 8006962:	613b      	str	r3, [r7, #16]
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	2b00      	cmp	r3, #0
 8006968:	dcf2      	bgt.n	8006950 <BuzzerAlert+0x220>
			}
			TIM2->CCR1 = 0;
 800696a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800696e:	2200      	movs	r2, #0
 8006970:	635a      	str	r2, [r3, #52]	; 0x34
			delay_ms(3);
 8006972:	2003      	movs	r0, #3
 8006974:	f7ff f950 	bl	8005c18 <delay_ms>
			for(int k = 5; k > 0; k--)
 8006978:	2305      	movs	r3, #5
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	e009      	b.n	8006992 <BuzzerAlert+0x262>
			{
				TIM2->CCR1 = k;
 800697e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6353      	str	r3, [r2, #52]	; 0x34
				delay_ms(25);
 8006986:	2019      	movs	r0, #25
 8006988:	f7ff f946 	bl	8005c18 <delay_ms>
			for(int k = 5; k > 0; k--)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	3b01      	subs	r3, #1
 8006990:	60fb      	str	r3, [r7, #12]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	dcf2      	bgt.n	800697e <BuzzerAlert+0x24e>
			}
			TIM2->CCR1 = 0;
 8006998:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800699c:	2200      	movs	r2, #0
 800699e:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80069a0:	bf00      	nop
		}
	}
}
 80069a2:	bf00      	nop
 80069a4:	3738      	adds	r7, #56	; 0x38
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	2000003c 	.word	0x2000003c
 80069b0:	0800d870 	.word	0x0800d870
 80069b4:	0800d90c 	.word	0x0800d90c
 80069b8:	20000024 	.word	0x20000024

080069bc <SecondStepAuth>:
/* @return				- none																			*/
/*																										*/
/* @Note				- 'EnterPassword()' will be called after switching the SystemState				*/
/********************************************************************************************************/
void SecondStepAuth(uint16_t fingerID)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af04      	add	r7, sp, #16
 80069c2:	4603      	mov	r3, r0
 80069c4:	80fb      	strh	r3, [r7, #6]
	ST7735_FillScreen(ST7735_GREEN);
 80069c6:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80069ca:	f003 fb29 	bl	800a020 <ST7735_FillScreen>
	ST7735_Print(0, 30, "    FOUND        FINGERPRINT      ID =", fingerID, Font_11x18, ST7735_WHITE, ST7735_GREEN);
 80069ce:	88fb      	ldrh	r3, [r7, #6]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fa f9bf 	bl	8000d54 <__aeabi_ui2f>
 80069d6:	4602      	mov	r2, r0
 80069d8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80069dc:	9303      	str	r3, [sp, #12]
 80069de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80069e2:	9302      	str	r3, [sp, #8]
 80069e4:	490a      	ldr	r1, [pc, #40]	; (8006a10 <SecondStepAuth+0x54>)
 80069e6:	466b      	mov	r3, sp
 80069e8:	c903      	ldmia	r1, {r0, r1}
 80069ea:	e883 0003 	stmia.w	r3, {r0, r1}
 80069ee:	4613      	mov	r3, r2
 80069f0:	4a08      	ldr	r2, [pc, #32]	; (8006a14 <SecondStepAuth+0x58>)
 80069f2:	211e      	movs	r1, #30
 80069f4:	2000      	movs	r0, #0
 80069f6:	f003 fa57 	bl	8009ea8 <ST7735_Print>
	SystemState = SYS_STATE_READ_PWD;
 80069fa:	4b07      	ldr	r3, [pc, #28]	; (8006a18 <SecondStepAuth+0x5c>)
 80069fc:	2201      	movs	r2, #1
 80069fe:	701a      	strb	r2, [r3, #0]
	delay_ms(400);
 8006a00:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8006a04:	f7ff f908 	bl	8005c18 <delay_ms>
}
 8006a08:	bf00      	nop
 8006a0a:	3708      	adds	r7, #8
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	20000044 	.word	0x20000044
 8006a14:	0800d9bc 	.word	0x0800d9bc
 8006a18:	20000711 	.word	0x20000711

08006a1c <WelcomeScreen>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void WelcomeScreen(void)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af04      	add	r7, sp, #16
	ST7735_FillScreen(ST7735_WHITE);
 8006a22:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006a26:	f003 fafb 	bl	800a020 <ST7735_FillScreen>
	ST7735_DrawString(10, 30, "PLEASE PRESS                    ANY KEY", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8006a2a:	4b08      	ldr	r3, [pc, #32]	; (8006a4c <WelcomeScreen+0x30>)
 8006a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a30:	9202      	str	r2, [sp, #8]
 8006a32:	221f      	movs	r2, #31
 8006a34:	9201      	str	r2, [sp, #4]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	9200      	str	r2, [sp, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a04      	ldr	r2, [pc, #16]	; (8006a50 <WelcomeScreen+0x34>)
 8006a3e:	211e      	movs	r1, #30
 8006a40:	200a      	movs	r0, #10
 8006a42:	f003 f9d5 	bl	8009df0 <ST7735_DrawString>
	return;
 8006a46:	bf00      	nop
}
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	20000044 	.word	0x20000044
 8006a50:	0800d9e4 	.word	0x0800d9e4

08006a54 <EnterPassword>:
/* @return				- none																			*/
/*																										*/
/* @Note				- this function is called for any password entrance related operations			*/
/********************************************************************************************************/
void EnterPassword(void)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af04      	add	r7, sp, #16
	counter_1s = 0;
 8006a5a:	4bb0      	ldr	r3, [pc, #704]	; (8006d1c <EnterPassword+0x2c8>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	601a      	str	r2, [r3, #0]
	int	digit_number = 0;
 8006a60:	2300      	movs	r3, #0
 8006a62:	607b      	str	r3, [r7, #4]
	switch(SystemState)
 8006a64:	4bae      	ldr	r3, [pc, #696]	; (8006d20 <EnterPassword+0x2cc>)
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	2b09      	cmp	r3, #9
 8006a6c:	d85f      	bhi.n	8006b2e <EnterPassword+0xda>
 8006a6e:	a201      	add	r2, pc, #4	; (adr r2, 8006a74 <EnterPassword+0x20>)
 8006a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a74:	08006a9d 	.word	0x08006a9d
 8006a78:	08006b2f 	.word	0x08006b2f
 8006a7c:	08006ae7 	.word	0x08006ae7
 8006a80:	08006b2f 	.word	0x08006b2f
 8006a84:	08006b2f 	.word	0x08006b2f
 8006a88:	08006b2f 	.word	0x08006b2f
 8006a8c:	08006b2f 	.word	0x08006b2f
 8006a90:	08006b2f 	.word	0x08006b2f
 8006a94:	08006ac3 	.word	0x08006ac3
 8006a98:	08006b0b 	.word	0x08006b0b
	{
		case SYS_STATE_READ_PWD:
		{
			ST7735_FillScreen(ST7735_WHITE);
 8006a9c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006aa0:	f003 fabe 	bl	800a020 <ST7735_FillScreen>
			ST7735_DrawString(0, 40, "ENTER PASSWORD", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8006aa4:	4b9f      	ldr	r3, [pc, #636]	; (8006d24 <EnterPassword+0x2d0>)
 8006aa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006aaa:	9202      	str	r2, [sp, #8]
 8006aac:	221f      	movs	r2, #31
 8006aae:	9201      	str	r2, [sp, #4]
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	9200      	str	r2, [sp, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a9c      	ldr	r2, [pc, #624]	; (8006d28 <EnterPassword+0x2d4>)
 8006ab8:	2128      	movs	r1, #40	; 0x28
 8006aba:	2000      	movs	r0, #0
 8006abc:	f003 f998 	bl	8009df0 <ST7735_DrawString>
			break;
 8006ac0:	e036      	b.n	8006b30 <EnterPassword+0xdc>
		}
		case SYS_STATE_ADM_NEW_USR_PWD:
		{
			ST7735_FillScreen(ST7735_BLACK);
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	f003 faac 	bl	800a020 <ST7735_FillScreen>
			ST7735_DrawString(0, 10, "PLEASE ENTER     NEW USER       PASSWORD:", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 8006ac8:	4b96      	ldr	r3, [pc, #600]	; (8006d24 <EnterPassword+0x2d0>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	9202      	str	r2, [sp, #8]
 8006ace:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8006ad2:	9201      	str	r2, [sp, #4]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	9200      	str	r2, [sp, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a94      	ldr	r2, [pc, #592]	; (8006d2c <EnterPassword+0x2d8>)
 8006adc:	210a      	movs	r1, #10
 8006ade:	2000      	movs	r0, #0
 8006ae0:	f003 f986 	bl	8009df0 <ST7735_DrawString>
			break;
 8006ae4:	e024      	b.n	8006b30 <EnterPassword+0xdc>
		}
		case SYS_STATE_READ_ADMIN_PWD:
		{
			ST7735_FillScreen(ST7735_BLACK);
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	f003 fa9a 	bl	800a020 <ST7735_FillScreen>
			ST7735_DrawString(0, 40, "ENTER ADMIN PASSWORD:", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8006aec:	4b90      	ldr	r3, [pc, #576]	; (8006d30 <EnterPassword+0x2dc>)
 8006aee:	2200      	movs	r2, #0
 8006af0:	9202      	str	r2, [sp, #8]
 8006af2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8006af6:	9201      	str	r2, [sp, #4]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	9200      	str	r2, [sp, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a8d      	ldr	r2, [pc, #564]	; (8006d34 <EnterPassword+0x2e0>)
 8006b00:	2128      	movs	r1, #40	; 0x28
 8006b02:	2000      	movs	r0, #0
 8006b04:	f003 f974 	bl	8009df0 <ST7735_DrawString>
			break;
 8006b08:	e012      	b.n	8006b30 <EnterPassword+0xdc>
		}
		case SYS_STATE_ADM_NEW_PWD:
		{
			ST7735_FillScreen(ST7735_BLACK);
 8006b0a:	2000      	movs	r0, #0
 8006b0c:	f003 fa88 	bl	800a020 <ST7735_FillScreen>
			ST7735_DrawString(0, 10, "   ENTER NEW  ADMIN PASSWORD", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 8006b10:	4b84      	ldr	r3, [pc, #528]	; (8006d24 <EnterPassword+0x2d0>)
 8006b12:	2200      	movs	r2, #0
 8006b14:	9202      	str	r2, [sp, #8]
 8006b16:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8006b1a:	9201      	str	r2, [sp, #4]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	9200      	str	r2, [sp, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a85      	ldr	r2, [pc, #532]	; (8006d38 <EnterPassword+0x2e4>)
 8006b24:	210a      	movs	r1, #10
 8006b26:	2000      	movs	r0, #0
 8006b28:	f003 f962 	bl	8009df0 <ST7735_DrawString>
			break;
 8006b2c:	e000      	b.n	8006b30 <EnterPassword+0xdc>
		}
		default:
			break;
 8006b2e:	bf00      	nop
	}

	if((SYS_STATE_READ_PWD == SystemState) || (SYS_STATE_ADM_NEW_USR_PWD == SystemState))
 8006b30:	4b7b      	ldr	r3, [pc, #492]	; (8006d20 <EnterPassword+0x2cc>)
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	f000 82b9 	beq.w	80070ac <EnterPassword+0x658>
 8006b3a:	4b79      	ldr	r3, [pc, #484]	; (8006d20 <EnterPassword+0x2cc>)
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	2b09      	cmp	r3, #9
 8006b40:	f040 82f1 	bne.w	8007126 <EnterPassword+0x6d2>
	{
		while(digit_number < 4)
 8006b44:	e2b2      	b.n	80070ac <EnterPassword+0x658>
		{
			if(counter_1s < 10)
 8006b46:	4b75      	ldr	r3, [pc, #468]	; (8006d1c <EnterPassword+0x2c8>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b09      	cmp	r3, #9
 8006b4c:	f200 82ab 	bhi.w	80070a6 <EnterPassword+0x652>
			{
				key = KEYPAD_NOT_PRESSED;
 8006b50:	4b7a      	ldr	r3, [pc, #488]	; (8006d3c <EnterPassword+0x2e8>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	701a      	strb	r2, [r3, #0]
				key = Keypad4x4_Read();
 8006b56:	f001 ffbf 	bl	8008ad8 <Keypad4x4_Read>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	4b77      	ldr	r3, [pc, #476]	; (8006d3c <EnterPassword+0x2e8>)
 8006b60:	701a      	strb	r2, [r3, #0]
				if(key != KEYPAD_NOT_PRESSED)
 8006b62:	4b76      	ldr	r3, [pc, #472]	; (8006d3c <EnterPassword+0x2e8>)
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 82a0 	beq.w	80070ac <EnterPassword+0x658>
				{
					if(key == '0'){input_password[digit_number] = '0'; digit_number++; ST7735_DrawString(4+digit_number*27.5, 100, "*", Font_16x26, ST7735_BLUE, ST7735_WHITE); delay_ms(70); continue;}
 8006b6c:	4b73      	ldr	r3, [pc, #460]	; (8006d3c <EnterPassword+0x2e8>)
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	2b30      	cmp	r3, #48	; 0x30
 8006b72:	d131      	bne.n	8006bd8 <EnterPassword+0x184>
 8006b74:	4a72      	ldr	r2, [pc, #456]	; (8006d40 <EnterPassword+0x2ec>)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4413      	add	r3, r2
 8006b7a:	2230      	movs	r2, #48	; 0x30
 8006b7c:	701a      	strb	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	3301      	adds	r3, #1
 8006b82:	607b      	str	r3, [r7, #4]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7f9 fccd 	bl	8000524 <__aeabi_i2d>
 8006b8a:	f04f 0200 	mov.w	r2, #0
 8006b8e:	4b6d      	ldr	r3, [pc, #436]	; (8006d44 <EnterPassword+0x2f0>)
 8006b90:	f7f9 fd32 	bl	80005f8 <__aeabi_dmul>
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	4610      	mov	r0, r2
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	f04f 0200 	mov.w	r2, #0
 8006ba0:	4b69      	ldr	r3, [pc, #420]	; (8006d48 <EnterPassword+0x2f4>)
 8006ba2:	f7f9 fb73 	bl	800028c <__adddf3>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4610      	mov	r0, r2
 8006bac:	4619      	mov	r1, r3
 8006bae:	f7f9 fffb 	bl	8000ba8 <__aeabi_d2uiz>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	b298      	uxth	r0, r3
 8006bb6:	4b65      	ldr	r3, [pc, #404]	; (8006d4c <EnterPassword+0x2f8>)
 8006bb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006bbc:	9202      	str	r2, [sp, #8]
 8006bbe:	221f      	movs	r2, #31
 8006bc0:	9201      	str	r2, [sp, #4]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	9200      	str	r2, [sp, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a61      	ldr	r2, [pc, #388]	; (8006d50 <EnterPassword+0x2fc>)
 8006bca:	2164      	movs	r1, #100	; 0x64
 8006bcc:	f003 f910 	bl	8009df0 <ST7735_DrawString>
 8006bd0:	2046      	movs	r0, #70	; 0x46
 8006bd2:	f7ff f821 	bl	8005c18 <delay_ms>
 8006bd6:	e269      	b.n	80070ac <EnterPassword+0x658>
					if(key == '1'){input_password[digit_number] = '1'; digit_number++; ST7735_DrawString(4+digit_number*27.5, 100, "*", Font_16x26, ST7735_BLUE, ST7735_WHITE); delay_ms(70); continue;}
 8006bd8:	4b58      	ldr	r3, [pc, #352]	; (8006d3c <EnterPassword+0x2e8>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	2b31      	cmp	r3, #49	; 0x31
 8006bde:	d131      	bne.n	8006c44 <EnterPassword+0x1f0>
 8006be0:	4a57      	ldr	r2, [pc, #348]	; (8006d40 <EnterPassword+0x2ec>)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4413      	add	r3, r2
 8006be6:	2231      	movs	r2, #49	; 0x31
 8006be8:	701a      	strb	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	3301      	adds	r3, #1
 8006bee:	607b      	str	r3, [r7, #4]
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f7f9 fc97 	bl	8000524 <__aeabi_i2d>
 8006bf6:	f04f 0200 	mov.w	r2, #0
 8006bfa:	4b52      	ldr	r3, [pc, #328]	; (8006d44 <EnterPassword+0x2f0>)
 8006bfc:	f7f9 fcfc 	bl	80005f8 <__aeabi_dmul>
 8006c00:	4602      	mov	r2, r0
 8006c02:	460b      	mov	r3, r1
 8006c04:	4610      	mov	r0, r2
 8006c06:	4619      	mov	r1, r3
 8006c08:	f04f 0200 	mov.w	r2, #0
 8006c0c:	4b4e      	ldr	r3, [pc, #312]	; (8006d48 <EnterPassword+0x2f4>)
 8006c0e:	f7f9 fb3d 	bl	800028c <__adddf3>
 8006c12:	4602      	mov	r2, r0
 8006c14:	460b      	mov	r3, r1
 8006c16:	4610      	mov	r0, r2
 8006c18:	4619      	mov	r1, r3
 8006c1a:	f7f9 ffc5 	bl	8000ba8 <__aeabi_d2uiz>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	b298      	uxth	r0, r3
 8006c22:	4b4a      	ldr	r3, [pc, #296]	; (8006d4c <EnterPassword+0x2f8>)
 8006c24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c28:	9202      	str	r2, [sp, #8]
 8006c2a:	221f      	movs	r2, #31
 8006c2c:	9201      	str	r2, [sp, #4]
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	9200      	str	r2, [sp, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a46      	ldr	r2, [pc, #280]	; (8006d50 <EnterPassword+0x2fc>)
 8006c36:	2164      	movs	r1, #100	; 0x64
 8006c38:	f003 f8da 	bl	8009df0 <ST7735_DrawString>
 8006c3c:	2046      	movs	r0, #70	; 0x46
 8006c3e:	f7fe ffeb 	bl	8005c18 <delay_ms>
 8006c42:	e233      	b.n	80070ac <EnterPassword+0x658>
					if(key == '2'){input_password[digit_number] = '2'; digit_number++; ST7735_DrawString(4+digit_number*27.5, 100, "*", Font_16x26, ST7735_BLUE, ST7735_WHITE); delay_ms(70); continue;}
 8006c44:	4b3d      	ldr	r3, [pc, #244]	; (8006d3c <EnterPassword+0x2e8>)
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	2b32      	cmp	r3, #50	; 0x32
 8006c4a:	d131      	bne.n	8006cb0 <EnterPassword+0x25c>
 8006c4c:	4a3c      	ldr	r2, [pc, #240]	; (8006d40 <EnterPassword+0x2ec>)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4413      	add	r3, r2
 8006c52:	2232      	movs	r2, #50	; 0x32
 8006c54:	701a      	strb	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	607b      	str	r3, [r7, #4]
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7f9 fc61 	bl	8000524 <__aeabi_i2d>
 8006c62:	f04f 0200 	mov.w	r2, #0
 8006c66:	4b37      	ldr	r3, [pc, #220]	; (8006d44 <EnterPassword+0x2f0>)
 8006c68:	f7f9 fcc6 	bl	80005f8 <__aeabi_dmul>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	4610      	mov	r0, r2
 8006c72:	4619      	mov	r1, r3
 8006c74:	f04f 0200 	mov.w	r2, #0
 8006c78:	4b33      	ldr	r3, [pc, #204]	; (8006d48 <EnterPassword+0x2f4>)
 8006c7a:	f7f9 fb07 	bl	800028c <__adddf3>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	4610      	mov	r0, r2
 8006c84:	4619      	mov	r1, r3
 8006c86:	f7f9 ff8f 	bl	8000ba8 <__aeabi_d2uiz>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	b298      	uxth	r0, r3
 8006c8e:	4b2f      	ldr	r3, [pc, #188]	; (8006d4c <EnterPassword+0x2f8>)
 8006c90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c94:	9202      	str	r2, [sp, #8]
 8006c96:	221f      	movs	r2, #31
 8006c98:	9201      	str	r2, [sp, #4]
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	9200      	str	r2, [sp, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a2b      	ldr	r2, [pc, #172]	; (8006d50 <EnterPassword+0x2fc>)
 8006ca2:	2164      	movs	r1, #100	; 0x64
 8006ca4:	f003 f8a4 	bl	8009df0 <ST7735_DrawString>
 8006ca8:	2046      	movs	r0, #70	; 0x46
 8006caa:	f7fe ffb5 	bl	8005c18 <delay_ms>
 8006cae:	e1fd      	b.n	80070ac <EnterPassword+0x658>
					if(key == '3'){input_password[digit_number] = '3'; digit_number++; ST7735_DrawString(4+digit_number*27.5, 100, "*", Font_16x26, ST7735_BLUE, ST7735_WHITE); delay_ms(70); continue;}
 8006cb0:	4b22      	ldr	r3, [pc, #136]	; (8006d3c <EnterPassword+0x2e8>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	2b33      	cmp	r3, #51	; 0x33
 8006cb6:	d14d      	bne.n	8006d54 <EnterPassword+0x300>
 8006cb8:	4a21      	ldr	r2, [pc, #132]	; (8006d40 <EnterPassword+0x2ec>)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	2233      	movs	r2, #51	; 0x33
 8006cc0:	701a      	strb	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	607b      	str	r3, [r7, #4]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7f9 fc2b 	bl	8000524 <__aeabi_i2d>
 8006cce:	f04f 0200 	mov.w	r2, #0
 8006cd2:	4b1c      	ldr	r3, [pc, #112]	; (8006d44 <EnterPassword+0x2f0>)
 8006cd4:	f7f9 fc90 	bl	80005f8 <__aeabi_dmul>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	460b      	mov	r3, r1
 8006cdc:	4610      	mov	r0, r2
 8006cde:	4619      	mov	r1, r3
 8006ce0:	f04f 0200 	mov.w	r2, #0
 8006ce4:	4b18      	ldr	r3, [pc, #96]	; (8006d48 <EnterPassword+0x2f4>)
 8006ce6:	f7f9 fad1 	bl	800028c <__adddf3>
 8006cea:	4602      	mov	r2, r0
 8006cec:	460b      	mov	r3, r1
 8006cee:	4610      	mov	r0, r2
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	f7f9 ff59 	bl	8000ba8 <__aeabi_d2uiz>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	b298      	uxth	r0, r3
 8006cfa:	4b14      	ldr	r3, [pc, #80]	; (8006d4c <EnterPassword+0x2f8>)
 8006cfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d00:	9202      	str	r2, [sp, #8]
 8006d02:	221f      	movs	r2, #31
 8006d04:	9201      	str	r2, [sp, #4]
 8006d06:	685a      	ldr	r2, [r3, #4]
 8006d08:	9200      	str	r2, [sp, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a10      	ldr	r2, [pc, #64]	; (8006d50 <EnterPassword+0x2fc>)
 8006d0e:	2164      	movs	r1, #100	; 0x64
 8006d10:	f003 f86e 	bl	8009df0 <ST7735_DrawString>
 8006d14:	2046      	movs	r0, #70	; 0x46
 8006d16:	f7fe ff7f 	bl	8005c18 <delay_ms>
 8006d1a:	e1c7      	b.n	80070ac <EnterPassword+0x658>
 8006d1c:	20000714 	.word	0x20000714
 8006d20:	20000711 	.word	0x20000711
 8006d24:	20000044 	.word	0x20000044
 8006d28:	0800da0c 	.word	0x0800da0c
 8006d2c:	0800da1c 	.word	0x0800da1c
 8006d30:	2000003c 	.word	0x2000003c
 8006d34:	0800da48 	.word	0x0800da48
 8006d38:	0800da60 	.word	0x0800da60
 8006d3c:	20000710 	.word	0x20000710
 8006d40:	2000072c 	.word	0x2000072c
 8006d44:	403b8000 	.word	0x403b8000
 8006d48:	40100000 	.word	0x40100000
 8006d4c:	2000004c 	.word	0x2000004c
 8006d50:	0800da80 	.word	0x0800da80
					if(key == '4'){input_password[digit_number] = '4'; digit_number++; ST7735_DrawString(4+digit_number*27.5, 100, "*", Font_16x26, ST7735_BLUE, ST7735_WHITE); delay_ms(70); continue;}
 8006d54:	4ba9      	ldr	r3, [pc, #676]	; (8006ffc <EnterPassword+0x5a8>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	2b34      	cmp	r3, #52	; 0x34
 8006d5a:	d131      	bne.n	8006dc0 <EnterPassword+0x36c>
 8006d5c:	4aa8      	ldr	r2, [pc, #672]	; (8007000 <EnterPassword+0x5ac>)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4413      	add	r3, r2
 8006d62:	2234      	movs	r2, #52	; 0x34
 8006d64:	701a      	strb	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	607b      	str	r3, [r7, #4]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7f9 fbd9 	bl	8000524 <__aeabi_i2d>
 8006d72:	f04f 0200 	mov.w	r2, #0
 8006d76:	4ba3      	ldr	r3, [pc, #652]	; (8007004 <EnterPassword+0x5b0>)
 8006d78:	f7f9 fc3e 	bl	80005f8 <__aeabi_dmul>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4610      	mov	r0, r2
 8006d82:	4619      	mov	r1, r3
 8006d84:	f04f 0200 	mov.w	r2, #0
 8006d88:	4b9f      	ldr	r3, [pc, #636]	; (8007008 <EnterPassword+0x5b4>)
 8006d8a:	f7f9 fa7f 	bl	800028c <__adddf3>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	460b      	mov	r3, r1
 8006d92:	4610      	mov	r0, r2
 8006d94:	4619      	mov	r1, r3
 8006d96:	f7f9 ff07 	bl	8000ba8 <__aeabi_d2uiz>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	b298      	uxth	r0, r3
 8006d9e:	4b9b      	ldr	r3, [pc, #620]	; (800700c <EnterPassword+0x5b8>)
 8006da0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006da4:	9202      	str	r2, [sp, #8]
 8006da6:	221f      	movs	r2, #31
 8006da8:	9201      	str	r2, [sp, #4]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	9200      	str	r2, [sp, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a97      	ldr	r2, [pc, #604]	; (8007010 <EnterPassword+0x5bc>)
 8006db2:	2164      	movs	r1, #100	; 0x64
 8006db4:	f003 f81c 	bl	8009df0 <ST7735_DrawString>
 8006db8:	2046      	movs	r0, #70	; 0x46
 8006dba:	f7fe ff2d 	bl	8005c18 <delay_ms>
 8006dbe:	e175      	b.n	80070ac <EnterPassword+0x658>
					if(key == '5'){input_password[digit_number] = '5'; digit_number++; ST7735_DrawString(4+digit_number*27.5, 100, "*", Font_16x26, ST7735_BLUE, ST7735_WHITE); delay_ms(70); continue;}
 8006dc0:	4b8e      	ldr	r3, [pc, #568]	; (8006ffc <EnterPassword+0x5a8>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	2b35      	cmp	r3, #53	; 0x35
 8006dc6:	d131      	bne.n	8006e2c <EnterPassword+0x3d8>
 8006dc8:	4a8d      	ldr	r2, [pc, #564]	; (8007000 <EnterPassword+0x5ac>)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4413      	add	r3, r2
 8006dce:	2235      	movs	r2, #53	; 0x35
 8006dd0:	701a      	strb	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	607b      	str	r3, [r7, #4]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7f9 fba3 	bl	8000524 <__aeabi_i2d>
 8006dde:	f04f 0200 	mov.w	r2, #0
 8006de2:	4b88      	ldr	r3, [pc, #544]	; (8007004 <EnterPassword+0x5b0>)
 8006de4:	f7f9 fc08 	bl	80005f8 <__aeabi_dmul>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	4610      	mov	r0, r2
 8006dee:	4619      	mov	r1, r3
 8006df0:	f04f 0200 	mov.w	r2, #0
 8006df4:	4b84      	ldr	r3, [pc, #528]	; (8007008 <EnterPassword+0x5b4>)
 8006df6:	f7f9 fa49 	bl	800028c <__adddf3>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	4610      	mov	r0, r2
 8006e00:	4619      	mov	r1, r3
 8006e02:	f7f9 fed1 	bl	8000ba8 <__aeabi_d2uiz>
 8006e06:	4603      	mov	r3, r0
 8006e08:	b298      	uxth	r0, r3
 8006e0a:	4b80      	ldr	r3, [pc, #512]	; (800700c <EnterPassword+0x5b8>)
 8006e0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e10:	9202      	str	r2, [sp, #8]
 8006e12:	221f      	movs	r2, #31
 8006e14:	9201      	str	r2, [sp, #4]
 8006e16:	685a      	ldr	r2, [r3, #4]
 8006e18:	9200      	str	r2, [sp, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a7c      	ldr	r2, [pc, #496]	; (8007010 <EnterPassword+0x5bc>)
 8006e1e:	2164      	movs	r1, #100	; 0x64
 8006e20:	f002 ffe6 	bl	8009df0 <ST7735_DrawString>
 8006e24:	2046      	movs	r0, #70	; 0x46
 8006e26:	f7fe fef7 	bl	8005c18 <delay_ms>
 8006e2a:	e13f      	b.n	80070ac <EnterPassword+0x658>
					if(key == '6'){input_password[digit_number] = '6'; digit_number++; ST7735_DrawString(4+digit_number*27.5, 100, "*", Font_16x26, ST7735_BLUE, ST7735_WHITE); delay_ms(70); continue;}
 8006e2c:	4b73      	ldr	r3, [pc, #460]	; (8006ffc <EnterPassword+0x5a8>)
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	2b36      	cmp	r3, #54	; 0x36
 8006e32:	d131      	bne.n	8006e98 <EnterPassword+0x444>
 8006e34:	4a72      	ldr	r2, [pc, #456]	; (8007000 <EnterPassword+0x5ac>)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4413      	add	r3, r2
 8006e3a:	2236      	movs	r2, #54	; 0x36
 8006e3c:	701a      	strb	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	3301      	adds	r3, #1
 8006e42:	607b      	str	r3, [r7, #4]
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f7f9 fb6d 	bl	8000524 <__aeabi_i2d>
 8006e4a:	f04f 0200 	mov.w	r2, #0
 8006e4e:	4b6d      	ldr	r3, [pc, #436]	; (8007004 <EnterPassword+0x5b0>)
 8006e50:	f7f9 fbd2 	bl	80005f8 <__aeabi_dmul>
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	4610      	mov	r0, r2
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	f04f 0200 	mov.w	r2, #0
 8006e60:	4b69      	ldr	r3, [pc, #420]	; (8007008 <EnterPassword+0x5b4>)
 8006e62:	f7f9 fa13 	bl	800028c <__adddf3>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4610      	mov	r0, r2
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	f7f9 fe9b 	bl	8000ba8 <__aeabi_d2uiz>
 8006e72:	4603      	mov	r3, r0
 8006e74:	b298      	uxth	r0, r3
 8006e76:	4b65      	ldr	r3, [pc, #404]	; (800700c <EnterPassword+0x5b8>)
 8006e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e7c:	9202      	str	r2, [sp, #8]
 8006e7e:	221f      	movs	r2, #31
 8006e80:	9201      	str	r2, [sp, #4]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	9200      	str	r2, [sp, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a61      	ldr	r2, [pc, #388]	; (8007010 <EnterPassword+0x5bc>)
 8006e8a:	2164      	movs	r1, #100	; 0x64
 8006e8c:	f002 ffb0 	bl	8009df0 <ST7735_DrawString>
 8006e90:	2046      	movs	r0, #70	; 0x46
 8006e92:	f7fe fec1 	bl	8005c18 <delay_ms>
 8006e96:	e109      	b.n	80070ac <EnterPassword+0x658>
					if(key == '7'){input_password[digit_number] = '7'; digit_number++; ST7735_DrawString(4+digit_number*27.5, 100, "*", Font_16x26, ST7735_BLUE, ST7735_WHITE); delay_ms(70); continue;}
 8006e98:	4b58      	ldr	r3, [pc, #352]	; (8006ffc <EnterPassword+0x5a8>)
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	2b37      	cmp	r3, #55	; 0x37
 8006e9e:	d131      	bne.n	8006f04 <EnterPassword+0x4b0>
 8006ea0:	4a57      	ldr	r2, [pc, #348]	; (8007000 <EnterPassword+0x5ac>)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	2237      	movs	r2, #55	; 0x37
 8006ea8:	701a      	strb	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	3301      	adds	r3, #1
 8006eae:	607b      	str	r3, [r7, #4]
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f7f9 fb37 	bl	8000524 <__aeabi_i2d>
 8006eb6:	f04f 0200 	mov.w	r2, #0
 8006eba:	4b52      	ldr	r3, [pc, #328]	; (8007004 <EnterPassword+0x5b0>)
 8006ebc:	f7f9 fb9c 	bl	80005f8 <__aeabi_dmul>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	f04f 0200 	mov.w	r2, #0
 8006ecc:	4b4e      	ldr	r3, [pc, #312]	; (8007008 <EnterPassword+0x5b4>)
 8006ece:	f7f9 f9dd 	bl	800028c <__adddf3>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	4610      	mov	r0, r2
 8006ed8:	4619      	mov	r1, r3
 8006eda:	f7f9 fe65 	bl	8000ba8 <__aeabi_d2uiz>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	b298      	uxth	r0, r3
 8006ee2:	4b4a      	ldr	r3, [pc, #296]	; (800700c <EnterPassword+0x5b8>)
 8006ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ee8:	9202      	str	r2, [sp, #8]
 8006eea:	221f      	movs	r2, #31
 8006eec:	9201      	str	r2, [sp, #4]
 8006eee:	685a      	ldr	r2, [r3, #4]
 8006ef0:	9200      	str	r2, [sp, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a46      	ldr	r2, [pc, #280]	; (8007010 <EnterPassword+0x5bc>)
 8006ef6:	2164      	movs	r1, #100	; 0x64
 8006ef8:	f002 ff7a 	bl	8009df0 <ST7735_DrawString>
 8006efc:	2046      	movs	r0, #70	; 0x46
 8006efe:	f7fe fe8b 	bl	8005c18 <delay_ms>
 8006f02:	e0d3      	b.n	80070ac <EnterPassword+0x658>
					if(key == '8'){input_password[digit_number] = '8'; digit_number++; ST7735_DrawString(4+digit_number*27.5, 100, "*", Font_16x26, ST7735_BLUE, ST7735_WHITE); delay_ms(70); continue;}
 8006f04:	4b3d      	ldr	r3, [pc, #244]	; (8006ffc <EnterPassword+0x5a8>)
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	2b38      	cmp	r3, #56	; 0x38
 8006f0a:	d131      	bne.n	8006f70 <EnterPassword+0x51c>
 8006f0c:	4a3c      	ldr	r2, [pc, #240]	; (8007000 <EnterPassword+0x5ac>)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4413      	add	r3, r2
 8006f12:	2238      	movs	r2, #56	; 0x38
 8006f14:	701a      	strb	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	607b      	str	r3, [r7, #4]
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f7f9 fb01 	bl	8000524 <__aeabi_i2d>
 8006f22:	f04f 0200 	mov.w	r2, #0
 8006f26:	4b37      	ldr	r3, [pc, #220]	; (8007004 <EnterPassword+0x5b0>)
 8006f28:	f7f9 fb66 	bl	80005f8 <__aeabi_dmul>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	460b      	mov	r3, r1
 8006f30:	4610      	mov	r0, r2
 8006f32:	4619      	mov	r1, r3
 8006f34:	f04f 0200 	mov.w	r2, #0
 8006f38:	4b33      	ldr	r3, [pc, #204]	; (8007008 <EnterPassword+0x5b4>)
 8006f3a:	f7f9 f9a7 	bl	800028c <__adddf3>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	460b      	mov	r3, r1
 8006f42:	4610      	mov	r0, r2
 8006f44:	4619      	mov	r1, r3
 8006f46:	f7f9 fe2f 	bl	8000ba8 <__aeabi_d2uiz>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	b298      	uxth	r0, r3
 8006f4e:	4b2f      	ldr	r3, [pc, #188]	; (800700c <EnterPassword+0x5b8>)
 8006f50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f54:	9202      	str	r2, [sp, #8]
 8006f56:	221f      	movs	r2, #31
 8006f58:	9201      	str	r2, [sp, #4]
 8006f5a:	685a      	ldr	r2, [r3, #4]
 8006f5c:	9200      	str	r2, [sp, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a2b      	ldr	r2, [pc, #172]	; (8007010 <EnterPassword+0x5bc>)
 8006f62:	2164      	movs	r1, #100	; 0x64
 8006f64:	f002 ff44 	bl	8009df0 <ST7735_DrawString>
 8006f68:	2046      	movs	r0, #70	; 0x46
 8006f6a:	f7fe fe55 	bl	8005c18 <delay_ms>
 8006f6e:	e09d      	b.n	80070ac <EnterPassword+0x658>
					if(key == '9'){input_password[digit_number] = '9'; digit_number++; ST7735_DrawString(4+digit_number*27.5, 100, "*", Font_16x26, ST7735_BLUE, ST7735_WHITE); delay_ms(70); continue;}
 8006f70:	4b22      	ldr	r3, [pc, #136]	; (8006ffc <EnterPassword+0x5a8>)
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	2b39      	cmp	r3, #57	; 0x39
 8006f76:	d131      	bne.n	8006fdc <EnterPassword+0x588>
 8006f78:	4a21      	ldr	r2, [pc, #132]	; (8007000 <EnterPassword+0x5ac>)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	2239      	movs	r2, #57	; 0x39
 8006f80:	701a      	strb	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	3301      	adds	r3, #1
 8006f86:	607b      	str	r3, [r7, #4]
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f7f9 facb 	bl	8000524 <__aeabi_i2d>
 8006f8e:	f04f 0200 	mov.w	r2, #0
 8006f92:	4b1c      	ldr	r3, [pc, #112]	; (8007004 <EnterPassword+0x5b0>)
 8006f94:	f7f9 fb30 	bl	80005f8 <__aeabi_dmul>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4610      	mov	r0, r2
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	f04f 0200 	mov.w	r2, #0
 8006fa4:	4b18      	ldr	r3, [pc, #96]	; (8007008 <EnterPassword+0x5b4>)
 8006fa6:	f7f9 f971 	bl	800028c <__adddf3>
 8006faa:	4602      	mov	r2, r0
 8006fac:	460b      	mov	r3, r1
 8006fae:	4610      	mov	r0, r2
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	f7f9 fdf9 	bl	8000ba8 <__aeabi_d2uiz>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	b298      	uxth	r0, r3
 8006fba:	4b14      	ldr	r3, [pc, #80]	; (800700c <EnterPassword+0x5b8>)
 8006fbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fc0:	9202      	str	r2, [sp, #8]
 8006fc2:	221f      	movs	r2, #31
 8006fc4:	9201      	str	r2, [sp, #4]
 8006fc6:	685a      	ldr	r2, [r3, #4]
 8006fc8:	9200      	str	r2, [sp, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a10      	ldr	r2, [pc, #64]	; (8007010 <EnterPassword+0x5bc>)
 8006fce:	2164      	movs	r1, #100	; 0x64
 8006fd0:	f002 ff0e 	bl	8009df0 <ST7735_DrawString>
 8006fd4:	2046      	movs	r0, #70	; 0x46
 8006fd6:	f7fe fe1f 	bl	8005c18 <delay_ms>
 8006fda:	e067      	b.n	80070ac <EnterPassword+0x658>
					if(key == 'A'){delay_ms(70); continue;}
 8006fdc:	4b07      	ldr	r3, [pc, #28]	; (8006ffc <EnterPassword+0x5a8>)
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	2b41      	cmp	r3, #65	; 0x41
 8006fe2:	d103      	bne.n	8006fec <EnterPassword+0x598>
 8006fe4:	2046      	movs	r0, #70	; 0x46
 8006fe6:	f7fe fe17 	bl	8005c18 <delay_ms>
 8006fea:	e05f      	b.n	80070ac <EnterPassword+0x658>
					if(key == 'B'){delay_ms(70); continue;}
 8006fec:	4b03      	ldr	r3, [pc, #12]	; (8006ffc <EnterPassword+0x5a8>)
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	2b42      	cmp	r3, #66	; 0x42
 8006ff2:	d10f      	bne.n	8007014 <EnterPassword+0x5c0>
 8006ff4:	2046      	movs	r0, #70	; 0x46
 8006ff6:	f7fe fe0f 	bl	8005c18 <delay_ms>
 8006ffa:	e057      	b.n	80070ac <EnterPassword+0x658>
 8006ffc:	20000710 	.word	0x20000710
 8007000:	2000072c 	.word	0x2000072c
 8007004:	403b8000 	.word	0x403b8000
 8007008:	40100000 	.word	0x40100000
 800700c:	2000004c 	.word	0x2000004c
 8007010:	0800da80 	.word	0x0800da80
					if(key == 'C'){ST7735_DrawString(4+(digit_number)*27.5, 100, " ", Font_16x26, ST7735_BLUE, ST7735_WHITE); digit_number--; delay_ms(70); continue;}
 8007014:	4b9f      	ldr	r3, [pc, #636]	; (8007294 <EnterPassword+0x840>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	2b43      	cmp	r3, #67	; 0x43
 800701a:	d12c      	bne.n	8007076 <EnterPassword+0x622>
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7f9 fa81 	bl	8000524 <__aeabi_i2d>
 8007022:	f04f 0200 	mov.w	r2, #0
 8007026:	4b9c      	ldr	r3, [pc, #624]	; (8007298 <EnterPassword+0x844>)
 8007028:	f7f9 fae6 	bl	80005f8 <__aeabi_dmul>
 800702c:	4602      	mov	r2, r0
 800702e:	460b      	mov	r3, r1
 8007030:	4610      	mov	r0, r2
 8007032:	4619      	mov	r1, r3
 8007034:	f04f 0200 	mov.w	r2, #0
 8007038:	4b98      	ldr	r3, [pc, #608]	; (800729c <EnterPassword+0x848>)
 800703a:	f7f9 f927 	bl	800028c <__adddf3>
 800703e:	4602      	mov	r2, r0
 8007040:	460b      	mov	r3, r1
 8007042:	4610      	mov	r0, r2
 8007044:	4619      	mov	r1, r3
 8007046:	f7f9 fdaf 	bl	8000ba8 <__aeabi_d2uiz>
 800704a:	4603      	mov	r3, r0
 800704c:	b298      	uxth	r0, r3
 800704e:	4b94      	ldr	r3, [pc, #592]	; (80072a0 <EnterPassword+0x84c>)
 8007050:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007054:	9202      	str	r2, [sp, #8]
 8007056:	221f      	movs	r2, #31
 8007058:	9201      	str	r2, [sp, #4]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	9200      	str	r2, [sp, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a90      	ldr	r2, [pc, #576]	; (80072a4 <EnterPassword+0x850>)
 8007062:	2164      	movs	r1, #100	; 0x64
 8007064:	f002 fec4 	bl	8009df0 <ST7735_DrawString>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	3b01      	subs	r3, #1
 800706c:	607b      	str	r3, [r7, #4]
 800706e:	2046      	movs	r0, #70	; 0x46
 8007070:	f7fe fdd2 	bl	8005c18 <delay_ms>
 8007074:	e01a      	b.n	80070ac <EnterPassword+0x658>
					if(key == 'D'){delay_ms(70); continue;}
 8007076:	4b87      	ldr	r3, [pc, #540]	; (8007294 <EnterPassword+0x840>)
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	2b44      	cmp	r3, #68	; 0x44
 800707c:	d103      	bne.n	8007086 <EnterPassword+0x632>
 800707e:	2046      	movs	r0, #70	; 0x46
 8007080:	f7fe fdca 	bl	8005c18 <delay_ms>
 8007084:	e012      	b.n	80070ac <EnterPassword+0x658>
					if(key == '*'){delay_ms(70); continue;}
 8007086:	4b83      	ldr	r3, [pc, #524]	; (8007294 <EnterPassword+0x840>)
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	2b2a      	cmp	r3, #42	; 0x2a
 800708c:	d103      	bne.n	8007096 <EnterPassword+0x642>
 800708e:	2046      	movs	r0, #70	; 0x46
 8007090:	f7fe fdc2 	bl	8005c18 <delay_ms>
 8007094:	e00a      	b.n	80070ac <EnterPassword+0x658>
					if(key == '#'){delay_ms(70); continue;}
 8007096:	4b7f      	ldr	r3, [pc, #508]	; (8007294 <EnterPassword+0x840>)
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	2b23      	cmp	r3, #35	; 0x23
 800709c:	d106      	bne.n	80070ac <EnterPassword+0x658>
 800709e:	2046      	movs	r0, #70	; 0x46
 80070a0:	f7fe fdba 	bl	8005c18 <delay_ms>
 80070a4:	e002      	b.n	80070ac <EnterPassword+0x658>
				}
			}else
			{
				TimeoutMessage();
 80070a6:	f000 ff73 	bl	8007f90 <TimeoutMessage>
				return;
 80070aa:	e311      	b.n	80076d0 <EnterPassword+0xc7c>
		while(digit_number < 4)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	f77f ad49 	ble.w	8006b46 <EnterPassword+0xf2>
			}
		}
		if((4 == digit_number) && (SYS_STATE_READ_PWD == SystemState))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b04      	cmp	r3, #4
 80070b8:	d109      	bne.n	80070ce <EnterPassword+0x67a>
 80070ba:	4b7b      	ldr	r3, [pc, #492]	; (80072a8 <EnterPassword+0x854>)
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d105      	bne.n	80070ce <EnterPassword+0x67a>
		{//user entered their password
			digit_number = 0;
 80070c2:	2300      	movs	r3, #0
 80070c4:	607b      	str	r3, [r7, #4]
			SystemState = SYS_STATE_PWD_CONFIRMATION;
 80070c6:	4b78      	ldr	r3, [pc, #480]	; (80072a8 <EnterPassword+0x854>)
 80070c8:	2202      	movs	r2, #2
 80070ca:	701a      	strb	r2, [r3, #0]
			return;
 80070cc:	e300      	b.n	80076d0 <EnterPassword+0xc7c>
		}
		if((4 == digit_number) && (SYS_STATE_ADM_NEW_USR_PWD == SystemState))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b04      	cmp	r3, #4
 80070d2:	d128      	bne.n	8007126 <EnterPassword+0x6d2>
 80070d4:	4b74      	ldr	r3, [pc, #464]	; (80072a8 <EnterPassword+0x854>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	2b09      	cmp	r3, #9
 80070da:	d124      	bne.n	8007126 <EnterPassword+0x6d2>
		{
			user_password[0] = input_password[0];
 80070dc:	4b73      	ldr	r3, [pc, #460]	; (80072ac <EnterPassword+0x858>)
 80070de:	781a      	ldrb	r2, [r3, #0]
 80070e0:	4b73      	ldr	r3, [pc, #460]	; (80072b0 <EnterPassword+0x85c>)
 80070e2:	701a      	strb	r2, [r3, #0]
			user_password[1] = input_password[1];
 80070e4:	4b71      	ldr	r3, [pc, #452]	; (80072ac <EnterPassword+0x858>)
 80070e6:	785a      	ldrb	r2, [r3, #1]
 80070e8:	4b71      	ldr	r3, [pc, #452]	; (80072b0 <EnterPassword+0x85c>)
 80070ea:	705a      	strb	r2, [r3, #1]
			user_password[2] = input_password[2];
 80070ec:	4b6f      	ldr	r3, [pc, #444]	; (80072ac <EnterPassword+0x858>)
 80070ee:	789a      	ldrb	r2, [r3, #2]
 80070f0:	4b6f      	ldr	r3, [pc, #444]	; (80072b0 <EnterPassword+0x85c>)
 80070f2:	709a      	strb	r2, [r3, #2]
			user_password[3] = input_password[3];
 80070f4:	4b6d      	ldr	r3, [pc, #436]	; (80072ac <EnterPassword+0x858>)
 80070f6:	78da      	ldrb	r2, [r3, #3]
 80070f8:	4b6d      	ldr	r3, [pc, #436]	; (80072b0 <EnterPassword+0x85c>)
 80070fa:	70da      	strb	r2, [r3, #3]

			input_password[0] = admin_password[0];
 80070fc:	4b6d      	ldr	r3, [pc, #436]	; (80072b4 <EnterPassword+0x860>)
 80070fe:	781a      	ldrb	r2, [r3, #0]
 8007100:	4b6a      	ldr	r3, [pc, #424]	; (80072ac <EnterPassword+0x858>)
 8007102:	701a      	strb	r2, [r3, #0]
			input_password[1] = admin_password[1];
 8007104:	4b6b      	ldr	r3, [pc, #428]	; (80072b4 <EnterPassword+0x860>)
 8007106:	785a      	ldrb	r2, [r3, #1]
 8007108:	4b68      	ldr	r3, [pc, #416]	; (80072ac <EnterPassword+0x858>)
 800710a:	705a      	strb	r2, [r3, #1]
			input_password[2] = admin_password[2];
 800710c:	4b69      	ldr	r3, [pc, #420]	; (80072b4 <EnterPassword+0x860>)
 800710e:	789a      	ldrb	r2, [r3, #2]
 8007110:	4b66      	ldr	r3, [pc, #408]	; (80072ac <EnterPassword+0x858>)
 8007112:	709a      	strb	r2, [r3, #2]
			input_password[3] = admin_password[3];
 8007114:	4b67      	ldr	r3, [pc, #412]	; (80072b4 <EnterPassword+0x860>)
 8007116:	78da      	ldrb	r2, [r3, #3]
 8007118:	4b64      	ldr	r3, [pc, #400]	; (80072ac <EnterPassword+0x858>)
 800711a:	70da      	strb	r2, [r3, #3]
			digit_number = 0;
 800711c:	2300      	movs	r3, #0
 800711e:	607b      	str	r3, [r7, #4]
			SystemState = SYS_STATE_ADM_PWD_MENU;
 8007120:	4b61      	ldr	r3, [pc, #388]	; (80072a8 <EnterPassword+0x854>)
 8007122:	2205      	movs	r2, #5
 8007124:	701a      	strb	r2, [r3, #0]
		}
	}
	if((SYS_STATE_READ_ADMIN_PWD == SystemState) || (SYS_STATE_ADM_NEW_PWD == SystemState))
 8007126:	4b60      	ldr	r3, [pc, #384]	; (80072a8 <EnterPassword+0x854>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	2b03      	cmp	r3, #3
 800712c:	f000 829b 	beq.w	8007666 <EnterPassword+0xc12>
 8007130:	4b5d      	ldr	r3, [pc, #372]	; (80072a8 <EnterPassword+0x854>)
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	2b0a      	cmp	r3, #10
 8007136:	f040 82cb 	bne.w	80076d0 <EnterPassword+0xc7c>
	{
		while(digit_number < 6)
 800713a:	e294      	b.n	8007666 <EnterPassword+0xc12>
		{
			if(counter_1s < 20)
 800713c:	4b5e      	ldr	r3, [pc, #376]	; (80072b8 <EnterPassword+0x864>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2b13      	cmp	r3, #19
 8007142:	f200 828d 	bhi.w	8007660 <EnterPassword+0xc0c>
			{
				key = KEYPAD_NOT_PRESSED;
 8007146:	4b53      	ldr	r3, [pc, #332]	; (8007294 <EnterPassword+0x840>)
 8007148:	2200      	movs	r2, #0
 800714a:	701a      	strb	r2, [r3, #0]
				key = Keypad4x4_Read();
 800714c:	f001 fcc4 	bl	8008ad8 <Keypad4x4_Read>
 8007150:	4603      	mov	r3, r0
 8007152:	461a      	mov	r2, r3
 8007154:	4b4f      	ldr	r3, [pc, #316]	; (8007294 <EnterPassword+0x840>)
 8007156:	701a      	strb	r2, [r3, #0]
				if(key != KEYPAD_NOT_PRESSED)
 8007158:	4b4e      	ldr	r3, [pc, #312]	; (8007294 <EnterPassword+0x840>)
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 8282 	beq.w	8007666 <EnterPassword+0xc12>
				{
					if(key == '0'){input_password[digit_number] = '0'; digit_number++; ST7735_DrawString(4+digit_number*18, 100, "*", Font_16x26, ST7735_GREEN, ST7735_BLACK); delay_ms(70); continue;}
 8007162:	4b4c      	ldr	r3, [pc, #304]	; (8007294 <EnterPassword+0x840>)
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	2b30      	cmp	r3, #48	; 0x30
 8007168:	d121      	bne.n	80071ae <EnterPassword+0x75a>
 800716a:	4a50      	ldr	r2, [pc, #320]	; (80072ac <EnterPassword+0x858>)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4413      	add	r3, r2
 8007170:	2230      	movs	r2, #48	; 0x30
 8007172:	701a      	strb	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	3301      	adds	r3, #1
 8007178:	607b      	str	r3, [r7, #4]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	b29b      	uxth	r3, r3
 800717e:	461a      	mov	r2, r3
 8007180:	00d2      	lsls	r2, r2, #3
 8007182:	4413      	add	r3, r2
 8007184:	005b      	lsls	r3, r3, #1
 8007186:	b29b      	uxth	r3, r3
 8007188:	3304      	adds	r3, #4
 800718a:	b298      	uxth	r0, r3
 800718c:	4b44      	ldr	r3, [pc, #272]	; (80072a0 <EnterPassword+0x84c>)
 800718e:	2200      	movs	r2, #0
 8007190:	9202      	str	r2, [sp, #8]
 8007192:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8007196:	9201      	str	r2, [sp, #4]
 8007198:	685a      	ldr	r2, [r3, #4]
 800719a:	9200      	str	r2, [sp, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a47      	ldr	r2, [pc, #284]	; (80072bc <EnterPassword+0x868>)
 80071a0:	2164      	movs	r1, #100	; 0x64
 80071a2:	f002 fe25 	bl	8009df0 <ST7735_DrawString>
 80071a6:	2046      	movs	r0, #70	; 0x46
 80071a8:	f7fe fd36 	bl	8005c18 <delay_ms>
 80071ac:	e25b      	b.n	8007666 <EnterPassword+0xc12>
					if(key == '1'){input_password[digit_number] = '1'; digit_number++; ST7735_DrawString(4+digit_number*18, 100, "*", Font_16x26, ST7735_GREEN, ST7735_BLACK); delay_ms(70); continue;}
 80071ae:	4b39      	ldr	r3, [pc, #228]	; (8007294 <EnterPassword+0x840>)
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	2b31      	cmp	r3, #49	; 0x31
 80071b4:	d121      	bne.n	80071fa <EnterPassword+0x7a6>
 80071b6:	4a3d      	ldr	r2, [pc, #244]	; (80072ac <EnterPassword+0x858>)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4413      	add	r3, r2
 80071bc:	2231      	movs	r2, #49	; 0x31
 80071be:	701a      	strb	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	3301      	adds	r3, #1
 80071c4:	607b      	str	r3, [r7, #4]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	461a      	mov	r2, r3
 80071cc:	00d2      	lsls	r2, r2, #3
 80071ce:	4413      	add	r3, r2
 80071d0:	005b      	lsls	r3, r3, #1
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	3304      	adds	r3, #4
 80071d6:	b298      	uxth	r0, r3
 80071d8:	4b31      	ldr	r3, [pc, #196]	; (80072a0 <EnterPassword+0x84c>)
 80071da:	2200      	movs	r2, #0
 80071dc:	9202      	str	r2, [sp, #8]
 80071de:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80071e2:	9201      	str	r2, [sp, #4]
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	9200      	str	r2, [sp, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a34      	ldr	r2, [pc, #208]	; (80072bc <EnterPassword+0x868>)
 80071ec:	2164      	movs	r1, #100	; 0x64
 80071ee:	f002 fdff 	bl	8009df0 <ST7735_DrawString>
 80071f2:	2046      	movs	r0, #70	; 0x46
 80071f4:	f7fe fd10 	bl	8005c18 <delay_ms>
 80071f8:	e235      	b.n	8007666 <EnterPassword+0xc12>
					if(key == '2'){input_password[digit_number] = '2'; digit_number++; ST7735_DrawString(4+digit_number*18, 100, "*", Font_16x26, ST7735_GREEN, ST7735_BLACK); delay_ms(70); continue;}
 80071fa:	4b26      	ldr	r3, [pc, #152]	; (8007294 <EnterPassword+0x840>)
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	2b32      	cmp	r3, #50	; 0x32
 8007200:	d121      	bne.n	8007246 <EnterPassword+0x7f2>
 8007202:	4a2a      	ldr	r2, [pc, #168]	; (80072ac <EnterPassword+0x858>)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4413      	add	r3, r2
 8007208:	2232      	movs	r2, #50	; 0x32
 800720a:	701a      	strb	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	3301      	adds	r3, #1
 8007210:	607b      	str	r3, [r7, #4]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	b29b      	uxth	r3, r3
 8007216:	461a      	mov	r2, r3
 8007218:	00d2      	lsls	r2, r2, #3
 800721a:	4413      	add	r3, r2
 800721c:	005b      	lsls	r3, r3, #1
 800721e:	b29b      	uxth	r3, r3
 8007220:	3304      	adds	r3, #4
 8007222:	b298      	uxth	r0, r3
 8007224:	4b1e      	ldr	r3, [pc, #120]	; (80072a0 <EnterPassword+0x84c>)
 8007226:	2200      	movs	r2, #0
 8007228:	9202      	str	r2, [sp, #8]
 800722a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800722e:	9201      	str	r2, [sp, #4]
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	9200      	str	r2, [sp, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a21      	ldr	r2, [pc, #132]	; (80072bc <EnterPassword+0x868>)
 8007238:	2164      	movs	r1, #100	; 0x64
 800723a:	f002 fdd9 	bl	8009df0 <ST7735_DrawString>
 800723e:	2046      	movs	r0, #70	; 0x46
 8007240:	f7fe fcea 	bl	8005c18 <delay_ms>
 8007244:	e20f      	b.n	8007666 <EnterPassword+0xc12>
					if(key == '3'){input_password[digit_number] = '3'; digit_number++; ST7735_DrawString(4+digit_number*18, 100, "*", Font_16x26, ST7735_GREEN, ST7735_BLACK); delay_ms(70); continue;}
 8007246:	4b13      	ldr	r3, [pc, #76]	; (8007294 <EnterPassword+0x840>)
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	2b33      	cmp	r3, #51	; 0x33
 800724c:	d138      	bne.n	80072c0 <EnterPassword+0x86c>
 800724e:	4a17      	ldr	r2, [pc, #92]	; (80072ac <EnterPassword+0x858>)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4413      	add	r3, r2
 8007254:	2233      	movs	r2, #51	; 0x33
 8007256:	701a      	strb	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	3301      	adds	r3, #1
 800725c:	607b      	str	r3, [r7, #4]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	b29b      	uxth	r3, r3
 8007262:	461a      	mov	r2, r3
 8007264:	00d2      	lsls	r2, r2, #3
 8007266:	4413      	add	r3, r2
 8007268:	005b      	lsls	r3, r3, #1
 800726a:	b29b      	uxth	r3, r3
 800726c:	3304      	adds	r3, #4
 800726e:	b298      	uxth	r0, r3
 8007270:	4b0b      	ldr	r3, [pc, #44]	; (80072a0 <EnterPassword+0x84c>)
 8007272:	2200      	movs	r2, #0
 8007274:	9202      	str	r2, [sp, #8]
 8007276:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800727a:	9201      	str	r2, [sp, #4]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	9200      	str	r2, [sp, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a0e      	ldr	r2, [pc, #56]	; (80072bc <EnterPassword+0x868>)
 8007284:	2164      	movs	r1, #100	; 0x64
 8007286:	f002 fdb3 	bl	8009df0 <ST7735_DrawString>
 800728a:	2046      	movs	r0, #70	; 0x46
 800728c:	f7fe fcc4 	bl	8005c18 <delay_ms>
 8007290:	e1e9      	b.n	8007666 <EnterPassword+0xc12>
 8007292:	bf00      	nop
 8007294:	20000710 	.word	0x20000710
 8007298:	403b8000 	.word	0x403b8000
 800729c:	40100000 	.word	0x40100000
 80072a0:	2000004c 	.word	0x2000004c
 80072a4:	0800da84 	.word	0x0800da84
 80072a8:	20000711 	.word	0x20000711
 80072ac:	2000072c 	.word	0x2000072c
 80072b0:	20000030 	.word	0x20000030
 80072b4:	20000028 	.word	0x20000028
 80072b8:	20000714 	.word	0x20000714
 80072bc:	0800da80 	.word	0x0800da80
					if(key == '4'){input_password[digit_number] = '4'; digit_number++; ST7735_DrawString(4+digit_number*18, 100, "*", Font_16x26, ST7735_GREEN, ST7735_BLACK); delay_ms(70); continue;}
 80072c0:	4b97      	ldr	r3, [pc, #604]	; (8007520 <EnterPassword+0xacc>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	2b34      	cmp	r3, #52	; 0x34
 80072c6:	d121      	bne.n	800730c <EnterPassword+0x8b8>
 80072c8:	4a96      	ldr	r2, [pc, #600]	; (8007524 <EnterPassword+0xad0>)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4413      	add	r3, r2
 80072ce:	2234      	movs	r2, #52	; 0x34
 80072d0:	701a      	strb	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	3301      	adds	r3, #1
 80072d6:	607b      	str	r3, [r7, #4]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	b29b      	uxth	r3, r3
 80072dc:	461a      	mov	r2, r3
 80072de:	00d2      	lsls	r2, r2, #3
 80072e0:	4413      	add	r3, r2
 80072e2:	005b      	lsls	r3, r3, #1
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	3304      	adds	r3, #4
 80072e8:	b298      	uxth	r0, r3
 80072ea:	4b8f      	ldr	r3, [pc, #572]	; (8007528 <EnterPassword+0xad4>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	9202      	str	r2, [sp, #8]
 80072f0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80072f4:	9201      	str	r2, [sp, #4]
 80072f6:	685a      	ldr	r2, [r3, #4]
 80072f8:	9200      	str	r2, [sp, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a8b      	ldr	r2, [pc, #556]	; (800752c <EnterPassword+0xad8>)
 80072fe:	2164      	movs	r1, #100	; 0x64
 8007300:	f002 fd76 	bl	8009df0 <ST7735_DrawString>
 8007304:	2046      	movs	r0, #70	; 0x46
 8007306:	f7fe fc87 	bl	8005c18 <delay_ms>
 800730a:	e1ac      	b.n	8007666 <EnterPassword+0xc12>
					if(key == '5'){input_password[digit_number] = '5'; digit_number++; ST7735_DrawString(4+digit_number*18, 100, "*", Font_16x26, ST7735_GREEN, ST7735_BLACK); delay_ms(70); continue;}
 800730c:	4b84      	ldr	r3, [pc, #528]	; (8007520 <EnterPassword+0xacc>)
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	2b35      	cmp	r3, #53	; 0x35
 8007312:	d121      	bne.n	8007358 <EnterPassword+0x904>
 8007314:	4a83      	ldr	r2, [pc, #524]	; (8007524 <EnterPassword+0xad0>)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4413      	add	r3, r2
 800731a:	2235      	movs	r2, #53	; 0x35
 800731c:	701a      	strb	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	3301      	adds	r3, #1
 8007322:	607b      	str	r3, [r7, #4]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	b29b      	uxth	r3, r3
 8007328:	461a      	mov	r2, r3
 800732a:	00d2      	lsls	r2, r2, #3
 800732c:	4413      	add	r3, r2
 800732e:	005b      	lsls	r3, r3, #1
 8007330:	b29b      	uxth	r3, r3
 8007332:	3304      	adds	r3, #4
 8007334:	b298      	uxth	r0, r3
 8007336:	4b7c      	ldr	r3, [pc, #496]	; (8007528 <EnterPassword+0xad4>)
 8007338:	2200      	movs	r2, #0
 800733a:	9202      	str	r2, [sp, #8]
 800733c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8007340:	9201      	str	r2, [sp, #4]
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	9200      	str	r2, [sp, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a78      	ldr	r2, [pc, #480]	; (800752c <EnterPassword+0xad8>)
 800734a:	2164      	movs	r1, #100	; 0x64
 800734c:	f002 fd50 	bl	8009df0 <ST7735_DrawString>
 8007350:	2046      	movs	r0, #70	; 0x46
 8007352:	f7fe fc61 	bl	8005c18 <delay_ms>
 8007356:	e186      	b.n	8007666 <EnterPassword+0xc12>
					if(key == '6'){input_password[digit_number] = '6'; digit_number++; ST7735_DrawString(4+digit_number*18, 100, "*", Font_16x26, ST7735_GREEN, ST7735_BLACK); delay_ms(70); continue;}
 8007358:	4b71      	ldr	r3, [pc, #452]	; (8007520 <EnterPassword+0xacc>)
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	2b36      	cmp	r3, #54	; 0x36
 800735e:	d121      	bne.n	80073a4 <EnterPassword+0x950>
 8007360:	4a70      	ldr	r2, [pc, #448]	; (8007524 <EnterPassword+0xad0>)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4413      	add	r3, r2
 8007366:	2236      	movs	r2, #54	; 0x36
 8007368:	701a      	strb	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	3301      	adds	r3, #1
 800736e:	607b      	str	r3, [r7, #4]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	b29b      	uxth	r3, r3
 8007374:	461a      	mov	r2, r3
 8007376:	00d2      	lsls	r2, r2, #3
 8007378:	4413      	add	r3, r2
 800737a:	005b      	lsls	r3, r3, #1
 800737c:	b29b      	uxth	r3, r3
 800737e:	3304      	adds	r3, #4
 8007380:	b298      	uxth	r0, r3
 8007382:	4b69      	ldr	r3, [pc, #420]	; (8007528 <EnterPassword+0xad4>)
 8007384:	2200      	movs	r2, #0
 8007386:	9202      	str	r2, [sp, #8]
 8007388:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800738c:	9201      	str	r2, [sp, #4]
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	9200      	str	r2, [sp, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a65      	ldr	r2, [pc, #404]	; (800752c <EnterPassword+0xad8>)
 8007396:	2164      	movs	r1, #100	; 0x64
 8007398:	f002 fd2a 	bl	8009df0 <ST7735_DrawString>
 800739c:	2046      	movs	r0, #70	; 0x46
 800739e:	f7fe fc3b 	bl	8005c18 <delay_ms>
 80073a2:	e160      	b.n	8007666 <EnterPassword+0xc12>
					if(key == '7'){input_password[digit_number] = '7'; digit_number++; ST7735_DrawString(4+digit_number*18, 100, "*", Font_16x26, ST7735_GREEN, ST7735_BLACK); delay_ms(70); continue;}
 80073a4:	4b5e      	ldr	r3, [pc, #376]	; (8007520 <EnterPassword+0xacc>)
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	2b37      	cmp	r3, #55	; 0x37
 80073aa:	d121      	bne.n	80073f0 <EnterPassword+0x99c>
 80073ac:	4a5d      	ldr	r2, [pc, #372]	; (8007524 <EnterPassword+0xad0>)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4413      	add	r3, r2
 80073b2:	2237      	movs	r2, #55	; 0x37
 80073b4:	701a      	strb	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	3301      	adds	r3, #1
 80073ba:	607b      	str	r3, [r7, #4]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	b29b      	uxth	r3, r3
 80073c0:	461a      	mov	r2, r3
 80073c2:	00d2      	lsls	r2, r2, #3
 80073c4:	4413      	add	r3, r2
 80073c6:	005b      	lsls	r3, r3, #1
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	3304      	adds	r3, #4
 80073cc:	b298      	uxth	r0, r3
 80073ce:	4b56      	ldr	r3, [pc, #344]	; (8007528 <EnterPassword+0xad4>)
 80073d0:	2200      	movs	r2, #0
 80073d2:	9202      	str	r2, [sp, #8]
 80073d4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80073d8:	9201      	str	r2, [sp, #4]
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	9200      	str	r2, [sp, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a52      	ldr	r2, [pc, #328]	; (800752c <EnterPassword+0xad8>)
 80073e2:	2164      	movs	r1, #100	; 0x64
 80073e4:	f002 fd04 	bl	8009df0 <ST7735_DrawString>
 80073e8:	2046      	movs	r0, #70	; 0x46
 80073ea:	f7fe fc15 	bl	8005c18 <delay_ms>
 80073ee:	e13a      	b.n	8007666 <EnterPassword+0xc12>
					if(key == '8'){input_password[digit_number] = '8'; digit_number++; ST7735_DrawString(4+digit_number*18, 100, "*", Font_16x26, ST7735_GREEN, ST7735_BLACK); delay_ms(70); continue;}
 80073f0:	4b4b      	ldr	r3, [pc, #300]	; (8007520 <EnterPassword+0xacc>)
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	2b38      	cmp	r3, #56	; 0x38
 80073f6:	d121      	bne.n	800743c <EnterPassword+0x9e8>
 80073f8:	4a4a      	ldr	r2, [pc, #296]	; (8007524 <EnterPassword+0xad0>)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4413      	add	r3, r2
 80073fe:	2238      	movs	r2, #56	; 0x38
 8007400:	701a      	strb	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	3301      	adds	r3, #1
 8007406:	607b      	str	r3, [r7, #4]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	b29b      	uxth	r3, r3
 800740c:	461a      	mov	r2, r3
 800740e:	00d2      	lsls	r2, r2, #3
 8007410:	4413      	add	r3, r2
 8007412:	005b      	lsls	r3, r3, #1
 8007414:	b29b      	uxth	r3, r3
 8007416:	3304      	adds	r3, #4
 8007418:	b298      	uxth	r0, r3
 800741a:	4b43      	ldr	r3, [pc, #268]	; (8007528 <EnterPassword+0xad4>)
 800741c:	2200      	movs	r2, #0
 800741e:	9202      	str	r2, [sp, #8]
 8007420:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8007424:	9201      	str	r2, [sp, #4]
 8007426:	685a      	ldr	r2, [r3, #4]
 8007428:	9200      	str	r2, [sp, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a3f      	ldr	r2, [pc, #252]	; (800752c <EnterPassword+0xad8>)
 800742e:	2164      	movs	r1, #100	; 0x64
 8007430:	f002 fcde 	bl	8009df0 <ST7735_DrawString>
 8007434:	2046      	movs	r0, #70	; 0x46
 8007436:	f7fe fbef 	bl	8005c18 <delay_ms>
 800743a:	e114      	b.n	8007666 <EnterPassword+0xc12>
					if(key == '9'){input_password[digit_number] = '9'; digit_number++; ST7735_DrawString(4+digit_number*18, 100, "*", Font_16x26, ST7735_GREEN, ST7735_BLACK); delay_ms(70); continue;}
 800743c:	4b38      	ldr	r3, [pc, #224]	; (8007520 <EnterPassword+0xacc>)
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	2b39      	cmp	r3, #57	; 0x39
 8007442:	d121      	bne.n	8007488 <EnterPassword+0xa34>
 8007444:	4a37      	ldr	r2, [pc, #220]	; (8007524 <EnterPassword+0xad0>)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4413      	add	r3, r2
 800744a:	2239      	movs	r2, #57	; 0x39
 800744c:	701a      	strb	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	3301      	adds	r3, #1
 8007452:	607b      	str	r3, [r7, #4]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	b29b      	uxth	r3, r3
 8007458:	461a      	mov	r2, r3
 800745a:	00d2      	lsls	r2, r2, #3
 800745c:	4413      	add	r3, r2
 800745e:	005b      	lsls	r3, r3, #1
 8007460:	b29b      	uxth	r3, r3
 8007462:	3304      	adds	r3, #4
 8007464:	b298      	uxth	r0, r3
 8007466:	4b30      	ldr	r3, [pc, #192]	; (8007528 <EnterPassword+0xad4>)
 8007468:	2200      	movs	r2, #0
 800746a:	9202      	str	r2, [sp, #8]
 800746c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8007470:	9201      	str	r2, [sp, #4]
 8007472:	685a      	ldr	r2, [r3, #4]
 8007474:	9200      	str	r2, [sp, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a2c      	ldr	r2, [pc, #176]	; (800752c <EnterPassword+0xad8>)
 800747a:	2164      	movs	r1, #100	; 0x64
 800747c:	f002 fcb8 	bl	8009df0 <ST7735_DrawString>
 8007480:	2046      	movs	r0, #70	; 0x46
 8007482:	f7fe fbc9 	bl	8005c18 <delay_ms>
 8007486:	e0ee      	b.n	8007666 <EnterPassword+0xc12>
					if(key == 'A'){input_password[digit_number] = 'A'; digit_number++; ST7735_DrawString(4+digit_number*18, 100, "*", Font_16x26, ST7735_GREEN, ST7735_BLACK); delay_ms(70); continue;}
 8007488:	4b25      	ldr	r3, [pc, #148]	; (8007520 <EnterPassword+0xacc>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	2b41      	cmp	r3, #65	; 0x41
 800748e:	d121      	bne.n	80074d4 <EnterPassword+0xa80>
 8007490:	4a24      	ldr	r2, [pc, #144]	; (8007524 <EnterPassword+0xad0>)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4413      	add	r3, r2
 8007496:	2241      	movs	r2, #65	; 0x41
 8007498:	701a      	strb	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	3301      	adds	r3, #1
 800749e:	607b      	str	r3, [r7, #4]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	461a      	mov	r2, r3
 80074a6:	00d2      	lsls	r2, r2, #3
 80074a8:	4413      	add	r3, r2
 80074aa:	005b      	lsls	r3, r3, #1
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	3304      	adds	r3, #4
 80074b0:	b298      	uxth	r0, r3
 80074b2:	4b1d      	ldr	r3, [pc, #116]	; (8007528 <EnterPassword+0xad4>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	9202      	str	r2, [sp, #8]
 80074b8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80074bc:	9201      	str	r2, [sp, #4]
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	9200      	str	r2, [sp, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a19      	ldr	r2, [pc, #100]	; (800752c <EnterPassword+0xad8>)
 80074c6:	2164      	movs	r1, #100	; 0x64
 80074c8:	f002 fc92 	bl	8009df0 <ST7735_DrawString>
 80074cc:	2046      	movs	r0, #70	; 0x46
 80074ce:	f7fe fba3 	bl	8005c18 <delay_ms>
 80074d2:	e0c8      	b.n	8007666 <EnterPassword+0xc12>
					if(key == 'B'){input_password[digit_number] = 'B'; digit_number++; ST7735_DrawString(4+digit_number*18, 100, "*", Font_16x26, ST7735_GREEN, ST7735_BLACK); delay_ms(70); continue;}
 80074d4:	4b12      	ldr	r3, [pc, #72]	; (8007520 <EnterPassword+0xacc>)
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b42      	cmp	r3, #66	; 0x42
 80074da:	d129      	bne.n	8007530 <EnterPassword+0xadc>
 80074dc:	4a11      	ldr	r2, [pc, #68]	; (8007524 <EnterPassword+0xad0>)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4413      	add	r3, r2
 80074e2:	2242      	movs	r2, #66	; 0x42
 80074e4:	701a      	strb	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	3301      	adds	r3, #1
 80074ea:	607b      	str	r3, [r7, #4]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	461a      	mov	r2, r3
 80074f2:	00d2      	lsls	r2, r2, #3
 80074f4:	4413      	add	r3, r2
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	3304      	adds	r3, #4
 80074fc:	b298      	uxth	r0, r3
 80074fe:	4b0a      	ldr	r3, [pc, #40]	; (8007528 <EnterPassword+0xad4>)
 8007500:	2200      	movs	r2, #0
 8007502:	9202      	str	r2, [sp, #8]
 8007504:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8007508:	9201      	str	r2, [sp, #4]
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	9200      	str	r2, [sp, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a06      	ldr	r2, [pc, #24]	; (800752c <EnterPassword+0xad8>)
 8007512:	2164      	movs	r1, #100	; 0x64
 8007514:	f002 fc6c 	bl	8009df0 <ST7735_DrawString>
 8007518:	2046      	movs	r0, #70	; 0x46
 800751a:	f7fe fb7d 	bl	8005c18 <delay_ms>
 800751e:	e0a2      	b.n	8007666 <EnterPassword+0xc12>
 8007520:	20000710 	.word	0x20000710
 8007524:	2000072c 	.word	0x2000072c
 8007528:	2000004c 	.word	0x2000004c
 800752c:	0800da80 	.word	0x0800da80
					if(key == 'C'){input_password[digit_number] = 'C'; digit_number++; ST7735_DrawString(4+digit_number*18, 100, "*", Font_16x26, ST7735_GREEN, ST7735_BLACK); delay_ms(70); continue;}
 8007530:	4b69      	ldr	r3, [pc, #420]	; (80076d8 <EnterPassword+0xc84>)
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	2b43      	cmp	r3, #67	; 0x43
 8007536:	d121      	bne.n	800757c <EnterPassword+0xb28>
 8007538:	4a68      	ldr	r2, [pc, #416]	; (80076dc <EnterPassword+0xc88>)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4413      	add	r3, r2
 800753e:	2243      	movs	r2, #67	; 0x43
 8007540:	701a      	strb	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	3301      	adds	r3, #1
 8007546:	607b      	str	r3, [r7, #4]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	b29b      	uxth	r3, r3
 800754c:	461a      	mov	r2, r3
 800754e:	00d2      	lsls	r2, r2, #3
 8007550:	4413      	add	r3, r2
 8007552:	005b      	lsls	r3, r3, #1
 8007554:	b29b      	uxth	r3, r3
 8007556:	3304      	adds	r3, #4
 8007558:	b298      	uxth	r0, r3
 800755a:	4b61      	ldr	r3, [pc, #388]	; (80076e0 <EnterPassword+0xc8c>)
 800755c:	2200      	movs	r2, #0
 800755e:	9202      	str	r2, [sp, #8]
 8007560:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8007564:	9201      	str	r2, [sp, #4]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	9200      	str	r2, [sp, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a5d      	ldr	r2, [pc, #372]	; (80076e4 <EnterPassword+0xc90>)
 800756e:	2164      	movs	r1, #100	; 0x64
 8007570:	f002 fc3e 	bl	8009df0 <ST7735_DrawString>
 8007574:	2046      	movs	r0, #70	; 0x46
 8007576:	f7fe fb4f 	bl	8005c18 <delay_ms>
 800757a:	e074      	b.n	8007666 <EnterPassword+0xc12>
					if(key == 'D'){input_password[digit_number] = 'D'; digit_number++; ST7735_DrawString(4+digit_number*18, 100, "*", Font_16x26, ST7735_GREEN, ST7735_BLACK); delay_ms(70); continue;}
 800757c:	4b56      	ldr	r3, [pc, #344]	; (80076d8 <EnterPassword+0xc84>)
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	2b44      	cmp	r3, #68	; 0x44
 8007582:	d121      	bne.n	80075c8 <EnterPassword+0xb74>
 8007584:	4a55      	ldr	r2, [pc, #340]	; (80076dc <EnterPassword+0xc88>)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4413      	add	r3, r2
 800758a:	2244      	movs	r2, #68	; 0x44
 800758c:	701a      	strb	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	3301      	adds	r3, #1
 8007592:	607b      	str	r3, [r7, #4]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	b29b      	uxth	r3, r3
 8007598:	461a      	mov	r2, r3
 800759a:	00d2      	lsls	r2, r2, #3
 800759c:	4413      	add	r3, r2
 800759e:	005b      	lsls	r3, r3, #1
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	3304      	adds	r3, #4
 80075a4:	b298      	uxth	r0, r3
 80075a6:	4b4e      	ldr	r3, [pc, #312]	; (80076e0 <EnterPassword+0xc8c>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	9202      	str	r2, [sp, #8]
 80075ac:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80075b0:	9201      	str	r2, [sp, #4]
 80075b2:	685a      	ldr	r2, [r3, #4]
 80075b4:	9200      	str	r2, [sp, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a4a      	ldr	r2, [pc, #296]	; (80076e4 <EnterPassword+0xc90>)
 80075ba:	2164      	movs	r1, #100	; 0x64
 80075bc:	f002 fc18 	bl	8009df0 <ST7735_DrawString>
 80075c0:	2046      	movs	r0, #70	; 0x46
 80075c2:	f7fe fb29 	bl	8005c18 <delay_ms>
 80075c6:	e04e      	b.n	8007666 <EnterPassword+0xc12>
					if(key == '*'){input_password[digit_number] = '*'; digit_number++; ST7735_DrawString(4+digit_number*18, 100, "*", Font_16x26, ST7735_GREEN, ST7735_BLACK); delay_ms(70); continue;}
 80075c8:	4b43      	ldr	r3, [pc, #268]	; (80076d8 <EnterPassword+0xc84>)
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	2b2a      	cmp	r3, #42	; 0x2a
 80075ce:	d121      	bne.n	8007614 <EnterPassword+0xbc0>
 80075d0:	4a42      	ldr	r2, [pc, #264]	; (80076dc <EnterPassword+0xc88>)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4413      	add	r3, r2
 80075d6:	222a      	movs	r2, #42	; 0x2a
 80075d8:	701a      	strb	r2, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	3301      	adds	r3, #1
 80075de:	607b      	str	r3, [r7, #4]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	461a      	mov	r2, r3
 80075e6:	00d2      	lsls	r2, r2, #3
 80075e8:	4413      	add	r3, r2
 80075ea:	005b      	lsls	r3, r3, #1
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	3304      	adds	r3, #4
 80075f0:	b298      	uxth	r0, r3
 80075f2:	4b3b      	ldr	r3, [pc, #236]	; (80076e0 <EnterPassword+0xc8c>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	9202      	str	r2, [sp, #8]
 80075f8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80075fc:	9201      	str	r2, [sp, #4]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	9200      	str	r2, [sp, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a37      	ldr	r2, [pc, #220]	; (80076e4 <EnterPassword+0xc90>)
 8007606:	2164      	movs	r1, #100	; 0x64
 8007608:	f002 fbf2 	bl	8009df0 <ST7735_DrawString>
 800760c:	2046      	movs	r0, #70	; 0x46
 800760e:	f7fe fb03 	bl	8005c18 <delay_ms>
 8007612:	e028      	b.n	8007666 <EnterPassword+0xc12>
					if(key == '#'){input_password[digit_number] = '#'; digit_number++; ST7735_DrawString(4+digit_number*18, 100, "*", Font_16x26, ST7735_GREEN, ST7735_BLACK); delay_ms(70); continue;}
 8007614:	4b30      	ldr	r3, [pc, #192]	; (80076d8 <EnterPassword+0xc84>)
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	2b23      	cmp	r3, #35	; 0x23
 800761a:	d124      	bne.n	8007666 <EnterPassword+0xc12>
 800761c:	4a2f      	ldr	r2, [pc, #188]	; (80076dc <EnterPassword+0xc88>)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4413      	add	r3, r2
 8007622:	2223      	movs	r2, #35	; 0x23
 8007624:	701a      	strb	r2, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	3301      	adds	r3, #1
 800762a:	607b      	str	r3, [r7, #4]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	b29b      	uxth	r3, r3
 8007630:	461a      	mov	r2, r3
 8007632:	00d2      	lsls	r2, r2, #3
 8007634:	4413      	add	r3, r2
 8007636:	005b      	lsls	r3, r3, #1
 8007638:	b29b      	uxth	r3, r3
 800763a:	3304      	adds	r3, #4
 800763c:	b298      	uxth	r0, r3
 800763e:	4b28      	ldr	r3, [pc, #160]	; (80076e0 <EnterPassword+0xc8c>)
 8007640:	2200      	movs	r2, #0
 8007642:	9202      	str	r2, [sp, #8]
 8007644:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8007648:	9201      	str	r2, [sp, #4]
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	9200      	str	r2, [sp, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a24      	ldr	r2, [pc, #144]	; (80076e4 <EnterPassword+0xc90>)
 8007652:	2164      	movs	r1, #100	; 0x64
 8007654:	f002 fbcc 	bl	8009df0 <ST7735_DrawString>
 8007658:	2046      	movs	r0, #70	; 0x46
 800765a:	f7fe fadd 	bl	8005c18 <delay_ms>
 800765e:	e002      	b.n	8007666 <EnterPassword+0xc12>
				}
			}else
			{
				TimeoutMessage();
 8007660:	f000 fc96 	bl	8007f90 <TimeoutMessage>
				return;
 8007664:	e034      	b.n	80076d0 <EnterPassword+0xc7c>
		while(digit_number < 6)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2b05      	cmp	r3, #5
 800766a:	f77f ad67 	ble.w	800713c <EnterPassword+0x6e8>
			}
		}
		if((6 == digit_number) && (SYS_STATE_READ_ADMIN_PWD == SystemState))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2b06      	cmp	r3, #6
 8007672:	d109      	bne.n	8007688 <EnterPassword+0xc34>
 8007674:	4b1c      	ldr	r3, [pc, #112]	; (80076e8 <EnterPassword+0xc94>)
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	2b03      	cmp	r3, #3
 800767a:	d105      	bne.n	8007688 <EnterPassword+0xc34>
		{//user has entered admin password
			SystemState = SYS_STATE_ADM_SCREEN;
 800767c:	4b1a      	ldr	r3, [pc, #104]	; (80076e8 <EnterPassword+0xc94>)
 800767e:	2204      	movs	r2, #4
 8007680:	701a      	strb	r2, [r3, #0]
			digit_number = 0;
 8007682:	2300      	movs	r3, #0
 8007684:	607b      	str	r3, [r7, #4]
			return;
 8007686:	e023      	b.n	80076d0 <EnterPassword+0xc7c>
		}
		if((6 == digit_number) && (SYS_STATE_ADM_NEW_PWD == SystemState))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2b06      	cmp	r3, #6
 800768c:	d120      	bne.n	80076d0 <EnterPassword+0xc7c>
 800768e:	4b16      	ldr	r3, [pc, #88]	; (80076e8 <EnterPassword+0xc94>)
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	2b0a      	cmp	r3, #10
 8007694:	d11c      	bne.n	80076d0 <EnterPassword+0xc7c>
		{//admin has changed admin password
			admin_password[0] = input_password[0];
 8007696:	4b11      	ldr	r3, [pc, #68]	; (80076dc <EnterPassword+0xc88>)
 8007698:	781a      	ldrb	r2, [r3, #0]
 800769a:	4b14      	ldr	r3, [pc, #80]	; (80076ec <EnterPassword+0xc98>)
 800769c:	701a      	strb	r2, [r3, #0]
			admin_password[1] = input_password[1];
 800769e:	4b0f      	ldr	r3, [pc, #60]	; (80076dc <EnterPassword+0xc88>)
 80076a0:	785a      	ldrb	r2, [r3, #1]
 80076a2:	4b12      	ldr	r3, [pc, #72]	; (80076ec <EnterPassword+0xc98>)
 80076a4:	705a      	strb	r2, [r3, #1]
			admin_password[2] = input_password[2];
 80076a6:	4b0d      	ldr	r3, [pc, #52]	; (80076dc <EnterPassword+0xc88>)
 80076a8:	789a      	ldrb	r2, [r3, #2]
 80076aa:	4b10      	ldr	r3, [pc, #64]	; (80076ec <EnterPassword+0xc98>)
 80076ac:	709a      	strb	r2, [r3, #2]
			admin_password[3] = input_password[3];
 80076ae:	4b0b      	ldr	r3, [pc, #44]	; (80076dc <EnterPassword+0xc88>)
 80076b0:	78da      	ldrb	r2, [r3, #3]
 80076b2:	4b0e      	ldr	r3, [pc, #56]	; (80076ec <EnterPassword+0xc98>)
 80076b4:	70da      	strb	r2, [r3, #3]
			admin_password[4] = input_password[4];
 80076b6:	4b09      	ldr	r3, [pc, #36]	; (80076dc <EnterPassword+0xc88>)
 80076b8:	791a      	ldrb	r2, [r3, #4]
 80076ba:	4b0c      	ldr	r3, [pc, #48]	; (80076ec <EnterPassword+0xc98>)
 80076bc:	711a      	strb	r2, [r3, #4]
			admin_password[5] = input_password[5];
 80076be:	4b07      	ldr	r3, [pc, #28]	; (80076dc <EnterPassword+0xc88>)
 80076c0:	795a      	ldrb	r2, [r3, #5]
 80076c2:	4b0a      	ldr	r3, [pc, #40]	; (80076ec <EnterPassword+0xc98>)
 80076c4:	715a      	strb	r2, [r3, #5]
			digit_number = 0;
 80076c6:	2300      	movs	r3, #0
 80076c8:	607b      	str	r3, [r7, #4]
			SystemState = SYS_STATE_ADM_PWD_MENU;
 80076ca:	4b07      	ldr	r3, [pc, #28]	; (80076e8 <EnterPassword+0xc94>)
 80076cc:	2205      	movs	r2, #5
 80076ce:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	20000710 	.word	0x20000710
 80076dc:	2000072c 	.word	0x2000072c
 80076e0:	2000004c 	.word	0x2000004c
 80076e4:	0800da80 	.word	0x0800da80
 80076e8:	20000711 	.word	0x20000711
 80076ec:	20000028 	.word	0x20000028

080076f0 <ChangePasswordMenu>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void ChangePasswordMenu(void)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af04      	add	r7, sp, #16
	ST7735_FillScreen(ST7735_BLACK);
 80076f6:	2000      	movs	r0, #0
 80076f8:	f002 fc92 	bl	800a020 <ST7735_FillScreen>
	ST7735_DrawString(0, 0, "SELECT THE PASSWORD    YOU WANT TO CHANGE", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80076fc:	4b38      	ldr	r3, [pc, #224]	; (80077e0 <ChangePasswordMenu+0xf0>)
 80076fe:	2200      	movs	r2, #0
 8007700:	9202      	str	r2, [sp, #8]
 8007702:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8007706:	9201      	str	r2, [sp, #4]
 8007708:	685a      	ldr	r2, [r3, #4]
 800770a:	9200      	str	r2, [sp, #0]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a35      	ldr	r2, [pc, #212]	; (80077e4 <ChangePasswordMenu+0xf4>)
 8007710:	2100      	movs	r1, #0
 8007712:	2000      	movs	r0, #0
 8007714:	f002 fb6c 	bl	8009df0 <ST7735_DrawString>
	ST7735_DrawString(5, 30, "A-USER                                         B-ADMINISTRATOR                               D-BACK", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8007718:	4b31      	ldr	r3, [pc, #196]	; (80077e0 <ChangePasswordMenu+0xf0>)
 800771a:	2200      	movs	r2, #0
 800771c:	9202      	str	r2, [sp, #8]
 800771e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8007722:	9201      	str	r2, [sp, #4]
 8007724:	685a      	ldr	r2, [r3, #4]
 8007726:	9200      	str	r2, [sp, #0]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a2f      	ldr	r2, [pc, #188]	; (80077e8 <ChangePasswordMenu+0xf8>)
 800772c:	211e      	movs	r1, #30
 800772e:	2005      	movs	r0, #5
 8007730:	f002 fb5e 	bl	8009df0 <ST7735_DrawString>
	key = KEYPAD_NOT_PRESSED;
 8007734:	4b2d      	ldr	r3, [pc, #180]	; (80077ec <ChangePasswordMenu+0xfc>)
 8007736:	2200      	movs	r2, #0
 8007738:	701a      	strb	r2, [r3, #0]
	while(KEYPAD_NOT_PRESSED == key)
 800773a:	e04a      	b.n	80077d2 <ChangePasswordMenu+0xe2>
	{
		key = Keypad4x4_Read();
 800773c:	f001 f9cc 	bl	8008ad8 <Keypad4x4_Read>
 8007740:	4603      	mov	r3, r0
 8007742:	461a      	mov	r2, r3
 8007744:	4b29      	ldr	r3, [pc, #164]	; (80077ec <ChangePasswordMenu+0xfc>)
 8007746:	701a      	strb	r2, [r3, #0]
		if(KEYPAD_NOT_PRESSED != key)
 8007748:	4b28      	ldr	r3, [pc, #160]	; (80077ec <ChangePasswordMenu+0xfc>)
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d040      	beq.n	80077d2 <ChangePasswordMenu+0xe2>
		{
			switch(key)
 8007750:	4b26      	ldr	r3, [pc, #152]	; (80077ec <ChangePasswordMenu+0xfc>)
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	2b44      	cmp	r3, #68	; 0x44
 8007756:	d00f      	beq.n	8007778 <ChangePasswordMenu+0x88>
 8007758:	2b44      	cmp	r3, #68	; 0x44
 800775a:	dc38      	bgt.n	80077ce <ChangePasswordMenu+0xde>
 800775c:	2b42      	cmp	r3, #66	; 0x42
 800775e:	d008      	beq.n	8007772 <ChangePasswordMenu+0x82>
 8007760:	2b42      	cmp	r3, #66	; 0x42
 8007762:	dc34      	bgt.n	80077ce <ChangePasswordMenu+0xde>
 8007764:	2b23      	cmp	r3, #35	; 0x23
 8007766:	d00b      	beq.n	8007780 <ChangePasswordMenu+0x90>
 8007768:	2b41      	cmp	r3, #65	; 0x41
 800776a:	d130      	bne.n	80077ce <ChangePasswordMenu+0xde>
			{
				case 'A':
				{
					ChangeUserPassword();
 800776c:	f000 fa16 	bl	8007b9c <ChangeUserPassword>
					return;
 8007770:	e033      	b.n	80077da <ChangePasswordMenu+0xea>
				}
				case 'B':
				{
					ChangeAdminPassword();
 8007772:	f000 f993 	bl	8007a9c <ChangeAdminPassword>
					return;
 8007776:	e030      	b.n	80077da <ChangePasswordMenu+0xea>
				}
				case 'D':
				{
					SystemState = SYS_STATE_ADM_SCREEN;
 8007778:	4b1d      	ldr	r3, [pc, #116]	; (80077f0 <ChangePasswordMenu+0x100>)
 800777a:	2204      	movs	r2, #4
 800777c:	701a      	strb	r2, [r3, #0]
					return;
 800777e:	e02c      	b.n	80077da <ChangePasswordMenu+0xea>
				}
				case '#':
				{
					SystemState = SYS_STATE_BEGIN;
 8007780:	4b1b      	ldr	r3, [pc, #108]	; (80077f0 <ChangePasswordMenu+0x100>)
 8007782:	2200      	movs	r2, #0
 8007784:	701a      	strb	r2, [r3, #0]
					input_password[0] = '\0';
 8007786:	4b1b      	ldr	r3, [pc, #108]	; (80077f4 <ChangePasswordMenu+0x104>)
 8007788:	2200      	movs	r2, #0
 800778a:	701a      	strb	r2, [r3, #0]
					input_password[1] = '\0';
 800778c:	4b19      	ldr	r3, [pc, #100]	; (80077f4 <ChangePasswordMenu+0x104>)
 800778e:	2200      	movs	r2, #0
 8007790:	705a      	strb	r2, [r3, #1]
					input_password[2] = '\0';
 8007792:	4b18      	ldr	r3, [pc, #96]	; (80077f4 <ChangePasswordMenu+0x104>)
 8007794:	2200      	movs	r2, #0
 8007796:	709a      	strb	r2, [r3, #2]
					input_password[3] = '\0';
 8007798:	4b16      	ldr	r3, [pc, #88]	; (80077f4 <ChangePasswordMenu+0x104>)
 800779a:	2200      	movs	r2, #0
 800779c:	70da      	strb	r2, [r3, #3]
					ST7735_FillScreen(ST7735_BLACK);
 800779e:	2000      	movs	r0, #0
 80077a0:	f002 fc3e 	bl	800a020 <ST7735_FillScreen>
					ST7735_DrawString(60, 50, "BYE!", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 80077a4:	4b14      	ldr	r3, [pc, #80]	; (80077f8 <ChangePasswordMenu+0x108>)
 80077a6:	2200      	movs	r2, #0
 80077a8:	9202      	str	r2, [sp, #8]
 80077aa:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80077ae:	9201      	str	r2, [sp, #4]
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	9200      	str	r2, [sp, #0]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a11      	ldr	r2, [pc, #68]	; (80077fc <ChangePasswordMenu+0x10c>)
 80077b8:	2132      	movs	r1, #50	; 0x32
 80077ba:	203c      	movs	r0, #60	; 0x3c
 80077bc:	f002 fb18 	bl	8009df0 <ST7735_DrawString>
					delay_ms(2000);
 80077c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80077c4:	f7fe fa28 	bl	8005c18 <delay_ms>
					WelcomeScreen();
 80077c8:	f7ff f928 	bl	8006a1c <WelcomeScreen>
					return;
 80077cc:	e005      	b.n	80077da <ChangePasswordMenu+0xea>
				}
				default:
					ChangePasswordMenu();
 80077ce:	f7ff ff8f 	bl	80076f0 <ChangePasswordMenu>
	while(KEYPAD_NOT_PRESSED == key)
 80077d2:	4b06      	ldr	r3, [pc, #24]	; (80077ec <ChangePasswordMenu+0xfc>)
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d0b0      	beq.n	800773c <ChangePasswordMenu+0x4c>
			}
		}
	}
}
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	2000003c 	.word	0x2000003c
 80077e4:	0800da88 	.word	0x0800da88
 80077e8:	0800dab4 	.word	0x0800dab4
 80077ec:	20000710 	.word	0x20000710
 80077f0:	20000711 	.word	0x20000711
 80077f4:	2000072c 	.word	0x2000072c
 80077f8:	20000044 	.word	0x20000044
 80077fc:	0800db18 	.word	0x0800db18

08007800 <DatabaseOperationsMenu>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void DatabaseOperationsMenu(void)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af04      	add	r7, sp, #16
	ST7735_FillScreen(ST7735_BLACK);
 8007806:	2000      	movs	r0, #0
 8007808:	f002 fc0a 	bl	800a020 <ST7735_FillScreen>
	ST7735_DrawString(0, 0, "SELECT DATABASE        OPERATION", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800780c:	4b5b      	ldr	r3, [pc, #364]	; (800797c <DatabaseOperationsMenu+0x17c>)
 800780e:	2200      	movs	r2, #0
 8007810:	9202      	str	r2, [sp, #8]
 8007812:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8007816:	9201      	str	r2, [sp, #4]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	9200      	str	r2, [sp, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a58      	ldr	r2, [pc, #352]	; (8007980 <DatabaseOperationsMenu+0x180>)
 8007820:	2100      	movs	r1, #0
 8007822:	2000      	movs	r0, #0
 8007824:	f002 fae4 	bl	8009df0 <ST7735_DrawString>
	ST7735_DrawString(5, 40, "A-ENROLLMENT                                   B-DELETE ID                                   C-EMPTY DATABASE                              D-BACK", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8007828:	4b54      	ldr	r3, [pc, #336]	; (800797c <DatabaseOperationsMenu+0x17c>)
 800782a:	2200      	movs	r2, #0
 800782c:	9202      	str	r2, [sp, #8]
 800782e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8007832:	9201      	str	r2, [sp, #4]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	9200      	str	r2, [sp, #0]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a52      	ldr	r2, [pc, #328]	; (8007984 <DatabaseOperationsMenu+0x184>)
 800783c:	2128      	movs	r1, #40	; 0x28
 800783e:	2005      	movs	r0, #5
 8007840:	f002 fad6 	bl	8009df0 <ST7735_DrawString>
	key = KEYPAD_NOT_PRESSED;
 8007844:	4b50      	ldr	r3, [pc, #320]	; (8007988 <DatabaseOperationsMenu+0x188>)
 8007846:	2200      	movs	r2, #0
 8007848:	701a      	strb	r2, [r3, #0]
	while(KEYPAD_NOT_PRESSED == key)
 800784a:	e08f      	b.n	800796c <DatabaseOperationsMenu+0x16c>
	{
		key = Keypad4x4_Read();
 800784c:	f001 f944 	bl	8008ad8 <Keypad4x4_Read>
 8007850:	4603      	mov	r3, r0
 8007852:	461a      	mov	r2, r3
 8007854:	4b4c      	ldr	r3, [pc, #304]	; (8007988 <DatabaseOperationsMenu+0x188>)
 8007856:	701a      	strb	r2, [r3, #0]
		if(KEYPAD_NOT_PRESSED != key)
 8007858:	4b4b      	ldr	r3, [pc, #300]	; (8007988 <DatabaseOperationsMenu+0x188>)
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 8085 	beq.w	800796c <DatabaseOperationsMenu+0x16c>
		{
			switch(key)
 8007862:	4b49      	ldr	r3, [pc, #292]	; (8007988 <DatabaseOperationsMenu+0x188>)
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	3b23      	subs	r3, #35	; 0x23
 8007868:	2b21      	cmp	r3, #33	; 0x21
 800786a:	d87d      	bhi.n	8007968 <DatabaseOperationsMenu+0x168>
 800786c:	a201      	add	r2, pc, #4	; (adr r2, 8007874 <DatabaseOperationsMenu+0x74>)
 800786e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007872:	bf00      	nop
 8007874:	0800791b 	.word	0x0800791b
 8007878:	08007969 	.word	0x08007969
 800787c:	08007969 	.word	0x08007969
 8007880:	08007969 	.word	0x08007969
 8007884:	08007969 	.word	0x08007969
 8007888:	08007969 	.word	0x08007969
 800788c:	08007969 	.word	0x08007969
 8007890:	08007969 	.word	0x08007969
 8007894:	08007969 	.word	0x08007969
 8007898:	08007969 	.word	0x08007969
 800789c:	08007969 	.word	0x08007969
 80078a0:	08007969 	.word	0x08007969
 80078a4:	08007969 	.word	0x08007969
 80078a8:	08007969 	.word	0x08007969
 80078ac:	08007969 	.word	0x08007969
 80078b0:	08007969 	.word	0x08007969
 80078b4:	08007969 	.word	0x08007969
 80078b8:	08007969 	.word	0x08007969
 80078bc:	08007969 	.word	0x08007969
 80078c0:	08007969 	.word	0x08007969
 80078c4:	08007969 	.word	0x08007969
 80078c8:	08007969 	.word	0x08007969
 80078cc:	08007969 	.word	0x08007969
 80078d0:	08007969 	.word	0x08007969
 80078d4:	08007969 	.word	0x08007969
 80078d8:	08007969 	.word	0x08007969
 80078dc:	08007969 	.word	0x08007969
 80078e0:	08007969 	.word	0x08007969
 80078e4:	08007969 	.word	0x08007969
 80078e8:	08007969 	.word	0x08007969
 80078ec:	080078fd 	.word	0x080078fd
 80078f0:	08007903 	.word	0x08007903
 80078f4:	0800790b 	.word	0x0800790b
 80078f8:	08007913 	.word	0x08007913
			{
				case 'A':
				{
					EnrollmentAttempt();
 80078fc:	f7fe fd16 	bl	800632c <EnrollmentAttempt>
					return;
 8007900:	e039      	b.n	8007976 <DatabaseOperationsMenu+0x176>
				}
				case 'B':
				{
					SystemState = SYS_STATE_ADM_DB_DEL_ID;
 8007902:	4b22      	ldr	r3, [pc, #136]	; (800798c <DatabaseOperationsMenu+0x18c>)
 8007904:	2208      	movs	r2, #8
 8007906:	701a      	strb	r2, [r3, #0]
					return;
 8007908:	e035      	b.n	8007976 <DatabaseOperationsMenu+0x176>
				}
				case 'C':
				{
					SystemState = SYS_STATE_ADM_DB_EMPTY;
 800790a:	4b20      	ldr	r3, [pc, #128]	; (800798c <DatabaseOperationsMenu+0x18c>)
 800790c:	2207      	movs	r2, #7
 800790e:	701a      	strb	r2, [r3, #0]
					return;
 8007910:	e031      	b.n	8007976 <DatabaseOperationsMenu+0x176>
				}
				case 'D':
				{
					SystemState = SYS_STATE_ADM_SCREEN;
 8007912:	4b1e      	ldr	r3, [pc, #120]	; (800798c <DatabaseOperationsMenu+0x18c>)
 8007914:	2204      	movs	r2, #4
 8007916:	701a      	strb	r2, [r3, #0]
					return;
 8007918:	e02d      	b.n	8007976 <DatabaseOperationsMenu+0x176>
				}
				case '#':
				{
					SystemState = SYS_STATE_BEGIN;
 800791a:	4b1c      	ldr	r3, [pc, #112]	; (800798c <DatabaseOperationsMenu+0x18c>)
 800791c:	2200      	movs	r2, #0
 800791e:	701a      	strb	r2, [r3, #0]
					input_password[0] = '\0';
 8007920:	4b1b      	ldr	r3, [pc, #108]	; (8007990 <DatabaseOperationsMenu+0x190>)
 8007922:	2200      	movs	r2, #0
 8007924:	701a      	strb	r2, [r3, #0]
					input_password[1] = '\0';
 8007926:	4b1a      	ldr	r3, [pc, #104]	; (8007990 <DatabaseOperationsMenu+0x190>)
 8007928:	2200      	movs	r2, #0
 800792a:	705a      	strb	r2, [r3, #1]
					input_password[2] = '\0';
 800792c:	4b18      	ldr	r3, [pc, #96]	; (8007990 <DatabaseOperationsMenu+0x190>)
 800792e:	2200      	movs	r2, #0
 8007930:	709a      	strb	r2, [r3, #2]
					input_password[3] = '\0';
 8007932:	4b17      	ldr	r3, [pc, #92]	; (8007990 <DatabaseOperationsMenu+0x190>)
 8007934:	2200      	movs	r2, #0
 8007936:	70da      	strb	r2, [r3, #3]
					ST7735_FillScreen(ST7735_BLACK);
 8007938:	2000      	movs	r0, #0
 800793a:	f002 fb71 	bl	800a020 <ST7735_FillScreen>
					ST7735_DrawString(60, 50, "BYE!", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 800793e:	4b15      	ldr	r3, [pc, #84]	; (8007994 <DatabaseOperationsMenu+0x194>)
 8007940:	2200      	movs	r2, #0
 8007942:	9202      	str	r2, [sp, #8]
 8007944:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8007948:	9201      	str	r2, [sp, #4]
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	9200      	str	r2, [sp, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a11      	ldr	r2, [pc, #68]	; (8007998 <DatabaseOperationsMenu+0x198>)
 8007952:	2132      	movs	r1, #50	; 0x32
 8007954:	203c      	movs	r0, #60	; 0x3c
 8007956:	f002 fa4b 	bl	8009df0 <ST7735_DrawString>
					delay_ms(2000);
 800795a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800795e:	f7fe f95b 	bl	8005c18 <delay_ms>
					WelcomeScreen();
 8007962:	f7ff f85b 	bl	8006a1c <WelcomeScreen>
					return;
 8007966:	e006      	b.n	8007976 <DatabaseOperationsMenu+0x176>
				}
				default:
					DatabaseOperationsMenu();
 8007968:	f7ff ff4a 	bl	8007800 <DatabaseOperationsMenu>
	while(KEYPAD_NOT_PRESSED == key)
 800796c:	4b06      	ldr	r3, [pc, #24]	; (8007988 <DatabaseOperationsMenu+0x188>)
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	f43f af6b 	beq.w	800784c <DatabaseOperationsMenu+0x4c>
			}
		}
	}
}
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	2000003c 	.word	0x2000003c
 8007980:	0800db20 	.word	0x0800db20
 8007984:	0800db44 	.word	0x0800db44
 8007988:	20000710 	.word	0x20000710
 800798c:	20000711 	.word	0x20000711
 8007990:	2000072c 	.word	0x2000072c
 8007994:	20000044 	.word	0x20000044
 8007998:	0800db18 	.word	0x0800db18

0800799c <EmptyDBWarning>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void EmptyDBWarning(void)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af04      	add	r7, sp, #16
	ST7735_FillScreen(ST7735_BLACK);
 80079a2:	2000      	movs	r0, #0
 80079a4:	f002 fb3c 	bl	800a020 <ST7735_FillScreen>
	ST7735_DrawString(0, 0, "ARE YOU SURE YOU WANT TO EMPTY DATABASE?", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80079a8:	4b34      	ldr	r3, [pc, #208]	; (8007a7c <EmptyDBWarning+0xe0>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	9202      	str	r2, [sp, #8]
 80079ae:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80079b2:	9201      	str	r2, [sp, #4]
 80079b4:	685a      	ldr	r2, [r3, #4]
 80079b6:	9200      	str	r2, [sp, #0]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a31      	ldr	r2, [pc, #196]	; (8007a80 <EmptyDBWarning+0xe4>)
 80079bc:	2100      	movs	r1, #0
 80079be:	2000      	movs	r0, #0
 80079c0:	f002 fa16 	bl	8009df0 <ST7735_DrawString>
	ST7735_DrawString(20, 80, "A-YES D-NO", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 80079c4:	4b2f      	ldr	r3, [pc, #188]	; (8007a84 <EmptyDBWarning+0xe8>)
 80079c6:	2200      	movs	r2, #0
 80079c8:	9202      	str	r2, [sp, #8]
 80079ca:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80079ce:	9201      	str	r2, [sp, #4]
 80079d0:	685a      	ldr	r2, [r3, #4]
 80079d2:	9200      	str	r2, [sp, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a2c      	ldr	r2, [pc, #176]	; (8007a88 <EmptyDBWarning+0xec>)
 80079d8:	2150      	movs	r1, #80	; 0x50
 80079da:	2014      	movs	r0, #20
 80079dc:	f002 fa08 	bl	8009df0 <ST7735_DrawString>
	key = KEYPAD_NOT_PRESSED;
 80079e0:	4b2a      	ldr	r3, [pc, #168]	; (8007a8c <EmptyDBWarning+0xf0>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	701a      	strb	r2, [r3, #0]
	while(KEYPAD_NOT_PRESSED == key)
 80079e6:	e043      	b.n	8007a70 <EmptyDBWarning+0xd4>
	{
		key = Keypad4x4_Read();
 80079e8:	f001 f876 	bl	8008ad8 <Keypad4x4_Read>
 80079ec:	4603      	mov	r3, r0
 80079ee:	461a      	mov	r2, r3
 80079f0:	4b26      	ldr	r3, [pc, #152]	; (8007a8c <EmptyDBWarning+0xf0>)
 80079f2:	701a      	strb	r2, [r3, #0]
		if(KEYPAD_NOT_PRESSED != key)
 80079f4:	4b25      	ldr	r3, [pc, #148]	; (8007a8c <EmptyDBWarning+0xf0>)
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d039      	beq.n	8007a70 <EmptyDBWarning+0xd4>
		{
			switch(key)
 80079fc:	4b23      	ldr	r3, [pc, #140]	; (8007a8c <EmptyDBWarning+0xf0>)
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	2b44      	cmp	r3, #68	; 0x44
 8007a02:	d008      	beq.n	8007a16 <EmptyDBWarning+0x7a>
 8007a04:	2b44      	cmp	r3, #68	; 0x44
 8007a06:	dc31      	bgt.n	8007a6c <EmptyDBWarning+0xd0>
 8007a08:	2b23      	cmp	r3, #35	; 0x23
 8007a0a:	d008      	beq.n	8007a1e <EmptyDBWarning+0x82>
 8007a0c:	2b41      	cmp	r3, #65	; 0x41
 8007a0e:	d12d      	bne.n	8007a6c <EmptyDBWarning+0xd0>
			{
				case 'A':
				{
					EmptyDB();
 8007a10:	f000 fdb2 	bl	8008578 <EmptyDB>
					return;
 8007a14:	e030      	b.n	8007a78 <EmptyDBWarning+0xdc>
				}
				case 'D':
				{
					SystemState = SYS_STATE_ADM_DB_MENU;
 8007a16:	4b1e      	ldr	r3, [pc, #120]	; (8007a90 <EmptyDBWarning+0xf4>)
 8007a18:	2206      	movs	r2, #6
 8007a1a:	701a      	strb	r2, [r3, #0]
					return;
 8007a1c:	e02c      	b.n	8007a78 <EmptyDBWarning+0xdc>
				}
				case '#':
				{
					SystemState = SYS_STATE_BEGIN;
 8007a1e:	4b1c      	ldr	r3, [pc, #112]	; (8007a90 <EmptyDBWarning+0xf4>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	701a      	strb	r2, [r3, #0]
					input_password[0] = '\0';
 8007a24:	4b1b      	ldr	r3, [pc, #108]	; (8007a94 <EmptyDBWarning+0xf8>)
 8007a26:	2200      	movs	r2, #0
 8007a28:	701a      	strb	r2, [r3, #0]
					input_password[1] = '\0';
 8007a2a:	4b1a      	ldr	r3, [pc, #104]	; (8007a94 <EmptyDBWarning+0xf8>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	705a      	strb	r2, [r3, #1]
					input_password[2] = '\0';
 8007a30:	4b18      	ldr	r3, [pc, #96]	; (8007a94 <EmptyDBWarning+0xf8>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	709a      	strb	r2, [r3, #2]
					input_password[3] = '\0';
 8007a36:	4b17      	ldr	r3, [pc, #92]	; (8007a94 <EmptyDBWarning+0xf8>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	70da      	strb	r2, [r3, #3]
					ST7735_FillScreen(ST7735_BLACK);
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	f002 faef 	bl	800a020 <ST7735_FillScreen>
					ST7735_DrawString(60, 50, "BYE!", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 8007a42:	4b10      	ldr	r3, [pc, #64]	; (8007a84 <EmptyDBWarning+0xe8>)
 8007a44:	2200      	movs	r2, #0
 8007a46:	9202      	str	r2, [sp, #8]
 8007a48:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8007a4c:	9201      	str	r2, [sp, #4]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	9200      	str	r2, [sp, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a10      	ldr	r2, [pc, #64]	; (8007a98 <EmptyDBWarning+0xfc>)
 8007a56:	2132      	movs	r1, #50	; 0x32
 8007a58:	203c      	movs	r0, #60	; 0x3c
 8007a5a:	f002 f9c9 	bl	8009df0 <ST7735_DrawString>
					delay_ms(2000);
 8007a5e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007a62:	f7fe f8d9 	bl	8005c18 <delay_ms>
					WelcomeScreen();
 8007a66:	f7fe ffd9 	bl	8006a1c <WelcomeScreen>
					return;
 8007a6a:	e005      	b.n	8007a78 <EmptyDBWarning+0xdc>
				}
				default:
					EmptyDBWarning();
 8007a6c:	f7ff ff96 	bl	800799c <EmptyDBWarning>
	while(KEYPAD_NOT_PRESSED == key)
 8007a70:	4b06      	ldr	r3, [pc, #24]	; (8007a8c <EmptyDBWarning+0xf0>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d0b7      	beq.n	80079e8 <EmptyDBWarning+0x4c>
			}
		}
	}
}
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	2000003c 	.word	0x2000003c
 8007a80:	0800dbd8 	.word	0x0800dbd8
 8007a84:	20000044 	.word	0x20000044
 8007a88:	0800dc04 	.word	0x0800dc04
 8007a8c:	20000710 	.word	0x20000710
 8007a90:	20000711 	.word	0x20000711
 8007a94:	2000072c 	.word	0x2000072c
 8007a98:	0800db18 	.word	0x0800db18

08007a9c <ChangeAdminPassword>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void ChangeAdminPassword(void)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af04      	add	r7, sp, #16
	ST7735_FillScreen(ST7735_BLACK);
 8007aa2:	2000      	movs	r0, #0
 8007aa4:	f002 fabc 	bl	800a020 <ST7735_FillScreen>
	ST7735_DrawString(0, 0, "ARE YOU SURE YOU WANT TO CHANGE ADMIN PASSWORD?", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8007aa8:	4b34      	ldr	r3, [pc, #208]	; (8007b7c <ChangeAdminPassword+0xe0>)
 8007aaa:	2200      	movs	r2, #0
 8007aac:	9202      	str	r2, [sp, #8]
 8007aae:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8007ab2:	9201      	str	r2, [sp, #4]
 8007ab4:	685a      	ldr	r2, [r3, #4]
 8007ab6:	9200      	str	r2, [sp, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a31      	ldr	r2, [pc, #196]	; (8007b80 <ChangeAdminPassword+0xe4>)
 8007abc:	2100      	movs	r1, #0
 8007abe:	2000      	movs	r0, #0
 8007ac0:	f002 f996 	bl	8009df0 <ST7735_DrawString>
	ST7735_DrawString(20, 80, "A-YES D-NO", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 8007ac4:	4b2f      	ldr	r3, [pc, #188]	; (8007b84 <ChangeAdminPassword+0xe8>)
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	9202      	str	r2, [sp, #8]
 8007aca:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8007ace:	9201      	str	r2, [sp, #4]
 8007ad0:	685a      	ldr	r2, [r3, #4]
 8007ad2:	9200      	str	r2, [sp, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a2c      	ldr	r2, [pc, #176]	; (8007b88 <ChangeAdminPassword+0xec>)
 8007ad8:	2150      	movs	r1, #80	; 0x50
 8007ada:	2014      	movs	r0, #20
 8007adc:	f002 f988 	bl	8009df0 <ST7735_DrawString>
	key = KEYPAD_NOT_PRESSED;
 8007ae0:	4b2a      	ldr	r3, [pc, #168]	; (8007b8c <ChangeAdminPassword+0xf0>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	701a      	strb	r2, [r3, #0]
	while(KEYPAD_NOT_PRESSED == key)
 8007ae6:	e040      	b.n	8007b6a <ChangeAdminPassword+0xce>
	{
		key = Keypad4x4_Read();
 8007ae8:	f000 fff6 	bl	8008ad8 <Keypad4x4_Read>
 8007aec:	4603      	mov	r3, r0
 8007aee:	461a      	mov	r2, r3
 8007af0:	4b26      	ldr	r3, [pc, #152]	; (8007b8c <ChangeAdminPassword+0xf0>)
 8007af2:	701a      	strb	r2, [r3, #0]
		if(KEYPAD_NOT_PRESSED != key)
 8007af4:	4b25      	ldr	r3, [pc, #148]	; (8007b8c <ChangeAdminPassword+0xf0>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d036      	beq.n	8007b6a <ChangeAdminPassword+0xce>
		{
			switch(key)
 8007afc:	4b23      	ldr	r3, [pc, #140]	; (8007b8c <ChangeAdminPassword+0xf0>)
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	2b44      	cmp	r3, #68	; 0x44
 8007b02:	d037      	beq.n	8007b74 <ChangeAdminPassword+0xd8>
 8007b04:	2b44      	cmp	r3, #68	; 0x44
 8007b06:	dc2e      	bgt.n	8007b66 <ChangeAdminPassword+0xca>
 8007b08:	2b23      	cmp	r3, #35	; 0x23
 8007b0a:	d005      	beq.n	8007b18 <ChangeAdminPassword+0x7c>
 8007b0c:	2b41      	cmp	r3, #65	; 0x41
 8007b0e:	d12a      	bne.n	8007b66 <ChangeAdminPassword+0xca>
			{
				case 'A':
				{
					SystemState = SYS_STATE_ADM_NEW_PWD;
 8007b10:	4b1f      	ldr	r3, [pc, #124]	; (8007b90 <ChangeAdminPassword+0xf4>)
 8007b12:	220a      	movs	r2, #10
 8007b14:	701a      	strb	r2, [r3, #0]
					return;
 8007b16:	e02e      	b.n	8007b76 <ChangeAdminPassword+0xda>
				{
					return;
				}
				case '#':
				{
					SystemState = SYS_STATE_BEGIN;
 8007b18:	4b1d      	ldr	r3, [pc, #116]	; (8007b90 <ChangeAdminPassword+0xf4>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	701a      	strb	r2, [r3, #0]
					input_password[0] = '\0';
 8007b1e:	4b1d      	ldr	r3, [pc, #116]	; (8007b94 <ChangeAdminPassword+0xf8>)
 8007b20:	2200      	movs	r2, #0
 8007b22:	701a      	strb	r2, [r3, #0]
					input_password[1] = '\0';
 8007b24:	4b1b      	ldr	r3, [pc, #108]	; (8007b94 <ChangeAdminPassword+0xf8>)
 8007b26:	2200      	movs	r2, #0
 8007b28:	705a      	strb	r2, [r3, #1]
					input_password[2] = '\0';
 8007b2a:	4b1a      	ldr	r3, [pc, #104]	; (8007b94 <ChangeAdminPassword+0xf8>)
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	709a      	strb	r2, [r3, #2]
					input_password[3] = '\0';
 8007b30:	4b18      	ldr	r3, [pc, #96]	; (8007b94 <ChangeAdminPassword+0xf8>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	70da      	strb	r2, [r3, #3]
					ST7735_FillScreen(ST7735_BLACK);
 8007b36:	2000      	movs	r0, #0
 8007b38:	f002 fa72 	bl	800a020 <ST7735_FillScreen>
					ST7735_DrawString(60, 50, "BYE!", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 8007b3c:	4b11      	ldr	r3, [pc, #68]	; (8007b84 <ChangeAdminPassword+0xe8>)
 8007b3e:	2200      	movs	r2, #0
 8007b40:	9202      	str	r2, [sp, #8]
 8007b42:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8007b46:	9201      	str	r2, [sp, #4]
 8007b48:	685a      	ldr	r2, [r3, #4]
 8007b4a:	9200      	str	r2, [sp, #0]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a12      	ldr	r2, [pc, #72]	; (8007b98 <ChangeAdminPassword+0xfc>)
 8007b50:	2132      	movs	r1, #50	; 0x32
 8007b52:	203c      	movs	r0, #60	; 0x3c
 8007b54:	f002 f94c 	bl	8009df0 <ST7735_DrawString>
					delay_ms(2000);
 8007b58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007b5c:	f7fe f85c 	bl	8005c18 <delay_ms>
					WelcomeScreen();
 8007b60:	f7fe ff5c 	bl	8006a1c <WelcomeScreen>
					return;
 8007b64:	e007      	b.n	8007b76 <ChangeAdminPassword+0xda>
				}
				default:
					ChangeAdminPassword();
 8007b66:	f7ff ff99 	bl	8007a9c <ChangeAdminPassword>
	while(KEYPAD_NOT_PRESSED == key)
 8007b6a:	4b08      	ldr	r3, [pc, #32]	; (8007b8c <ChangeAdminPassword+0xf0>)
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d0ba      	beq.n	8007ae8 <ChangeAdminPassword+0x4c>
 8007b72:	e000      	b.n	8007b76 <ChangeAdminPassword+0xda>
					return;
 8007b74:	bf00      	nop
			}
		}
	}
}
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	2000003c 	.word	0x2000003c
 8007b80:	0800dc10 	.word	0x0800dc10
 8007b84:	20000044 	.word	0x20000044
 8007b88:	0800dc04 	.word	0x0800dc04
 8007b8c:	20000710 	.word	0x20000710
 8007b90:	20000711 	.word	0x20000711
 8007b94:	2000072c 	.word	0x2000072c
 8007b98:	0800db18 	.word	0x0800db18

08007b9c <ChangeUserPassword>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void ChangeUserPassword(void)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af04      	add	r7, sp, #16
	ST7735_FillScreen(ST7735_BLACK);
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	f002 fa3c 	bl	800a020 <ST7735_FillScreen>
	ST7735_DrawString(0, 0, "ARE YOU SURE YOU WANT TO CHANGE USER PASSWORD?", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8007ba8:	4b34      	ldr	r3, [pc, #208]	; (8007c7c <ChangeUserPassword+0xe0>)
 8007baa:	2200      	movs	r2, #0
 8007bac:	9202      	str	r2, [sp, #8]
 8007bae:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8007bb2:	9201      	str	r2, [sp, #4]
 8007bb4:	685a      	ldr	r2, [r3, #4]
 8007bb6:	9200      	str	r2, [sp, #0]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a31      	ldr	r2, [pc, #196]	; (8007c80 <ChangeUserPassword+0xe4>)
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	2000      	movs	r0, #0
 8007bc0:	f002 f916 	bl	8009df0 <ST7735_DrawString>
	ST7735_DrawString(20, 80, "A-YES D-NO", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 8007bc4:	4b2f      	ldr	r3, [pc, #188]	; (8007c84 <ChangeUserPassword+0xe8>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	9202      	str	r2, [sp, #8]
 8007bca:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8007bce:	9201      	str	r2, [sp, #4]
 8007bd0:	685a      	ldr	r2, [r3, #4]
 8007bd2:	9200      	str	r2, [sp, #0]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a2c      	ldr	r2, [pc, #176]	; (8007c88 <ChangeUserPassword+0xec>)
 8007bd8:	2150      	movs	r1, #80	; 0x50
 8007bda:	2014      	movs	r0, #20
 8007bdc:	f002 f908 	bl	8009df0 <ST7735_DrawString>
	key = KEYPAD_NOT_PRESSED;
 8007be0:	4b2a      	ldr	r3, [pc, #168]	; (8007c8c <ChangeUserPassword+0xf0>)
 8007be2:	2200      	movs	r2, #0
 8007be4:	701a      	strb	r2, [r3, #0]
	while(KEYPAD_NOT_PRESSED == key)
 8007be6:	e040      	b.n	8007c6a <ChangeUserPassword+0xce>
	{
		key = Keypad4x4_Read();
 8007be8:	f000 ff76 	bl	8008ad8 <Keypad4x4_Read>
 8007bec:	4603      	mov	r3, r0
 8007bee:	461a      	mov	r2, r3
 8007bf0:	4b26      	ldr	r3, [pc, #152]	; (8007c8c <ChangeUserPassword+0xf0>)
 8007bf2:	701a      	strb	r2, [r3, #0]
		if(KEYPAD_NOT_PRESSED != key)
 8007bf4:	4b25      	ldr	r3, [pc, #148]	; (8007c8c <ChangeUserPassword+0xf0>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d036      	beq.n	8007c6a <ChangeUserPassword+0xce>
		{
			switch(key)
 8007bfc:	4b23      	ldr	r3, [pc, #140]	; (8007c8c <ChangeUserPassword+0xf0>)
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	2b44      	cmp	r3, #68	; 0x44
 8007c02:	d037      	beq.n	8007c74 <ChangeUserPassword+0xd8>
 8007c04:	2b44      	cmp	r3, #68	; 0x44
 8007c06:	dc2e      	bgt.n	8007c66 <ChangeUserPassword+0xca>
 8007c08:	2b23      	cmp	r3, #35	; 0x23
 8007c0a:	d005      	beq.n	8007c18 <ChangeUserPassword+0x7c>
 8007c0c:	2b41      	cmp	r3, #65	; 0x41
 8007c0e:	d12a      	bne.n	8007c66 <ChangeUserPassword+0xca>
			{
				case 'A':
				{
					SystemState = SYS_STATE_ADM_NEW_USR_PWD;
 8007c10:	4b1f      	ldr	r3, [pc, #124]	; (8007c90 <ChangeUserPassword+0xf4>)
 8007c12:	2209      	movs	r2, #9
 8007c14:	701a      	strb	r2, [r3, #0]
					return;
 8007c16:	e02e      	b.n	8007c76 <ChangeUserPassword+0xda>
				{
					return;
				}
				case '#':
				{
					SystemState = SYS_STATE_BEGIN;
 8007c18:	4b1d      	ldr	r3, [pc, #116]	; (8007c90 <ChangeUserPassword+0xf4>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	701a      	strb	r2, [r3, #0]
					input_password[0] = '\0';
 8007c1e:	4b1d      	ldr	r3, [pc, #116]	; (8007c94 <ChangeUserPassword+0xf8>)
 8007c20:	2200      	movs	r2, #0
 8007c22:	701a      	strb	r2, [r3, #0]
					input_password[1] = '\0';
 8007c24:	4b1b      	ldr	r3, [pc, #108]	; (8007c94 <ChangeUserPassword+0xf8>)
 8007c26:	2200      	movs	r2, #0
 8007c28:	705a      	strb	r2, [r3, #1]
					input_password[2] = '\0';
 8007c2a:	4b1a      	ldr	r3, [pc, #104]	; (8007c94 <ChangeUserPassword+0xf8>)
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	709a      	strb	r2, [r3, #2]
					input_password[3] = '\0';
 8007c30:	4b18      	ldr	r3, [pc, #96]	; (8007c94 <ChangeUserPassword+0xf8>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	70da      	strb	r2, [r3, #3]
					ST7735_FillScreen(ST7735_BLACK);
 8007c36:	2000      	movs	r0, #0
 8007c38:	f002 f9f2 	bl	800a020 <ST7735_FillScreen>
					ST7735_DrawString(60, 50, "BYE!", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 8007c3c:	4b11      	ldr	r3, [pc, #68]	; (8007c84 <ChangeUserPassword+0xe8>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	9202      	str	r2, [sp, #8]
 8007c42:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8007c46:	9201      	str	r2, [sp, #4]
 8007c48:	685a      	ldr	r2, [r3, #4]
 8007c4a:	9200      	str	r2, [sp, #0]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a12      	ldr	r2, [pc, #72]	; (8007c98 <ChangeUserPassword+0xfc>)
 8007c50:	2132      	movs	r1, #50	; 0x32
 8007c52:	203c      	movs	r0, #60	; 0x3c
 8007c54:	f002 f8cc 	bl	8009df0 <ST7735_DrawString>
					delay_ms(2000);
 8007c58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007c5c:	f7fd ffdc 	bl	8005c18 <delay_ms>
					WelcomeScreen();
 8007c60:	f7fe fedc 	bl	8006a1c <WelcomeScreen>
					return;
 8007c64:	e007      	b.n	8007c76 <ChangeUserPassword+0xda>
				}
				default:
					ChangeUserPassword();
 8007c66:	f7ff ff99 	bl	8007b9c <ChangeUserPassword>
	while(KEYPAD_NOT_PRESSED == key)
 8007c6a:	4b08      	ldr	r3, [pc, #32]	; (8007c8c <ChangeUserPassword+0xf0>)
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0ba      	beq.n	8007be8 <ChangeUserPassword+0x4c>
 8007c72:	e000      	b.n	8007c76 <ChangeUserPassword+0xda>
					return;
 8007c74:	bf00      	nop
			}
		}
	}
}
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	2000003c 	.word	0x2000003c
 8007c80:	0800dc40 	.word	0x0800dc40
 8007c84:	20000044 	.word	0x20000044
 8007c88:	0800dc04 	.word	0x0800dc04
 8007c8c:	20000710 	.word	0x20000710
 8007c90:	20000711 	.word	0x20000711
 8007c94:	2000072c 	.word	0x2000072c
 8007c98:	0800db18 	.word	0x0800db18

08007c9c <ChangeAlarmWarning>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void ChangeAlarmWarning(void)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af04      	add	r7, sp, #16
	ST7735_FillScreen(ST7735_BLACK);
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	f002 f9bc 	bl	800a020 <ST7735_FillScreen>
	ST7735_DrawString(0, 0, "ARE YOU SURE YOU WANT TO MODIFY ALARM TIME?", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8007ca8:	4b36      	ldr	r3, [pc, #216]	; (8007d84 <ChangeAlarmWarning+0xe8>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	9202      	str	r2, [sp, #8]
 8007cae:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8007cb2:	9201      	str	r2, [sp, #4]
 8007cb4:	685a      	ldr	r2, [r3, #4]
 8007cb6:	9200      	str	r2, [sp, #0]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a33      	ldr	r2, [pc, #204]	; (8007d88 <ChangeAlarmWarning+0xec>)
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	f002 f896 	bl	8009df0 <ST7735_DrawString>
	ST7735_DrawString(20, 80, "A-YES D-NO", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 8007cc4:	4b31      	ldr	r3, [pc, #196]	; (8007d8c <ChangeAlarmWarning+0xf0>)
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	9202      	str	r2, [sp, #8]
 8007cca:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8007cce:	9201      	str	r2, [sp, #4]
 8007cd0:	685a      	ldr	r2, [r3, #4]
 8007cd2:	9200      	str	r2, [sp, #0]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a2e      	ldr	r2, [pc, #184]	; (8007d90 <ChangeAlarmWarning+0xf4>)
 8007cd8:	2150      	movs	r1, #80	; 0x50
 8007cda:	2014      	movs	r0, #20
 8007cdc:	f002 f888 	bl	8009df0 <ST7735_DrawString>
	key = KEYPAD_NOT_PRESSED;
 8007ce0:	4b2c      	ldr	r3, [pc, #176]	; (8007d94 <ChangeAlarmWarning+0xf8>)
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	701a      	strb	r2, [r3, #0]
	while(KEYPAD_NOT_PRESSED == key)
 8007ce6:	e046      	b.n	8007d76 <ChangeAlarmWarning+0xda>
	{
		key = Keypad4x4_Read();
 8007ce8:	f000 fef6 	bl	8008ad8 <Keypad4x4_Read>
 8007cec:	4603      	mov	r3, r0
 8007cee:	461a      	mov	r2, r3
 8007cf0:	4b28      	ldr	r3, [pc, #160]	; (8007d94 <ChangeAlarmWarning+0xf8>)
 8007cf2:	701a      	strb	r2, [r3, #0]
		if(KEYPAD_NOT_PRESSED != key)
 8007cf4:	4b27      	ldr	r3, [pc, #156]	; (8007d94 <ChangeAlarmWarning+0xf8>)
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d03c      	beq.n	8007d76 <ChangeAlarmWarning+0xda>
		{
			switch(key)
 8007cfc:	4b25      	ldr	r3, [pc, #148]	; (8007d94 <ChangeAlarmWarning+0xf8>)
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	2b44      	cmp	r3, #68	; 0x44
 8007d02:	d00c      	beq.n	8007d1e <ChangeAlarmWarning+0x82>
 8007d04:	2b44      	cmp	r3, #68	; 0x44
 8007d06:	dc34      	bgt.n	8007d72 <ChangeAlarmWarning+0xd6>
 8007d08:	2b23      	cmp	r3, #35	; 0x23
 8007d0a:	d00b      	beq.n	8007d24 <ChangeAlarmWarning+0x88>
 8007d0c:	2b41      	cmp	r3, #65	; 0x41
 8007d0e:	d130      	bne.n	8007d72 <ChangeAlarmWarning+0xd6>
			{
				case 'A':
				{
					SystemState = SYS_STATE_ADM_ALARM_TIME;
 8007d10:	4b21      	ldr	r3, [pc, #132]	; (8007d98 <ChangeAlarmWarning+0xfc>)
 8007d12:	220c      	movs	r2, #12
 8007d14:	701a      	strb	r2, [r3, #0]
					ST7735_FillScreen(ST7735_BLACK);
 8007d16:	2000      	movs	r0, #0
 8007d18:	f002 f982 	bl	800a020 <ST7735_FillScreen>
					return;
 8007d1c:	e02f      	b.n	8007d7e <ChangeAlarmWarning+0xe2>
				}
				case 'D':
				{
					AdminSettingsMenu();
 8007d1e:	f000 f9cf 	bl	80080c0 <AdminSettingsMenu>
					return;
 8007d22:	e02c      	b.n	8007d7e <ChangeAlarmWarning+0xe2>
				}
				case '#':
				{
					SystemState = SYS_STATE_BEGIN;
 8007d24:	4b1c      	ldr	r3, [pc, #112]	; (8007d98 <ChangeAlarmWarning+0xfc>)
 8007d26:	2200      	movs	r2, #0
 8007d28:	701a      	strb	r2, [r3, #0]
					input_password[0] = '\0';
 8007d2a:	4b1c      	ldr	r3, [pc, #112]	; (8007d9c <ChangeAlarmWarning+0x100>)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	701a      	strb	r2, [r3, #0]
					input_password[1] = '\0';
 8007d30:	4b1a      	ldr	r3, [pc, #104]	; (8007d9c <ChangeAlarmWarning+0x100>)
 8007d32:	2200      	movs	r2, #0
 8007d34:	705a      	strb	r2, [r3, #1]
					input_password[2] = '\0';
 8007d36:	4b19      	ldr	r3, [pc, #100]	; (8007d9c <ChangeAlarmWarning+0x100>)
 8007d38:	2200      	movs	r2, #0
 8007d3a:	709a      	strb	r2, [r3, #2]
					input_password[3] = '\0';
 8007d3c:	4b17      	ldr	r3, [pc, #92]	; (8007d9c <ChangeAlarmWarning+0x100>)
 8007d3e:	2200      	movs	r2, #0
 8007d40:	70da      	strb	r2, [r3, #3]
					ST7735_FillScreen(ST7735_BLACK);
 8007d42:	2000      	movs	r0, #0
 8007d44:	f002 f96c 	bl	800a020 <ST7735_FillScreen>
					ST7735_DrawString(60, 50, "BYE!", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 8007d48:	4b10      	ldr	r3, [pc, #64]	; (8007d8c <ChangeAlarmWarning+0xf0>)
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	9202      	str	r2, [sp, #8]
 8007d4e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8007d52:	9201      	str	r2, [sp, #4]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	9200      	str	r2, [sp, #0]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a11      	ldr	r2, [pc, #68]	; (8007da0 <ChangeAlarmWarning+0x104>)
 8007d5c:	2132      	movs	r1, #50	; 0x32
 8007d5e:	203c      	movs	r0, #60	; 0x3c
 8007d60:	f002 f846 	bl	8009df0 <ST7735_DrawString>
					delay_ms(2000);
 8007d64:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007d68:	f7fd ff56 	bl	8005c18 <delay_ms>
					WelcomeScreen();
 8007d6c:	f7fe fe56 	bl	8006a1c <WelcomeScreen>
					return;
 8007d70:	e005      	b.n	8007d7e <ChangeAlarmWarning+0xe2>
				}
				default:
					ChangeAlarmWarning();
 8007d72:	f7ff ff93 	bl	8007c9c <ChangeAlarmWarning>
	while(KEYPAD_NOT_PRESSED == key)
 8007d76:	4b07      	ldr	r3, [pc, #28]	; (8007d94 <ChangeAlarmWarning+0xf8>)
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d0b4      	beq.n	8007ce8 <ChangeAlarmWarning+0x4c>
			}
		}
	}
}
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	2000003c 	.word	0x2000003c
 8007d88:	0800dc70 	.word	0x0800dc70
 8007d8c:	20000044 	.word	0x20000044
 8007d90:	0800dc04 	.word	0x0800dc04
 8007d94:	20000710 	.word	0x20000710
 8007d98:	20000711 	.word	0x20000711
 8007d9c:	2000072c 	.word	0x2000072c
 8007da0:	0800db18 	.word	0x0800db18

08007da4 <SetNewAlarmTime>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void SetNewAlarmTime(void)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08a      	sub	sp, #40	; 0x28
 8007da8:	af04      	add	r7, sp, #16
    int digit_number = 0;
 8007daa:	2300      	movs	r3, #0
 8007dac:	617b      	str	r3, [r7, #20]
    int save = 0;
 8007dae:	2300      	movs	r3, #0
 8007db0:	613b      	str	r3, [r7, #16]
    ST7735_InvertColors(false);
 8007db2:	2000      	movs	r0, #0
 8007db4:	f002 f9b8 	bl	800a128 <ST7735_InvertColors>
    ST7735_DrawString(0, 0, "PLEASE ENTER NEW ALARM TIME[DEFAULT=15](PRESS 'D' TO SAVE)", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8007db8:	4b6b      	ldr	r3, [pc, #428]	; (8007f68 <SetNewAlarmTime+0x1c4>)
 8007dba:	2200      	movs	r2, #0
 8007dbc:	9202      	str	r2, [sp, #8]
 8007dbe:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8007dc2:	9201      	str	r2, [sp, #4]
 8007dc4:	685a      	ldr	r2, [r3, #4]
 8007dc6:	9200      	str	r2, [sp, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a68      	ldr	r2, [pc, #416]	; (8007f6c <SetNewAlarmTime+0x1c8>)
 8007dcc:	2100      	movs	r1, #0
 8007dce:	2000      	movs	r0, #0
 8007dd0:	f002 f80e 	bl	8009df0 <ST7735_DrawString>

    while ((digit_number < 3) && (SET != save))
 8007dd4:	e097      	b.n	8007f06 <SetNewAlarmTime+0x162>
    {
        key = KEYPAD_NOT_PRESSED;
 8007dd6:	4b66      	ldr	r3, [pc, #408]	; (8007f70 <SetNewAlarmTime+0x1cc>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	701a      	strb	r2, [r3, #0]
        key = Keypad4x4_Read();
 8007ddc:	f000 fe7c 	bl	8008ad8 <Keypad4x4_Read>
 8007de0:	4603      	mov	r3, r0
 8007de2:	461a      	mov	r2, r3
 8007de4:	4b62      	ldr	r3, [pc, #392]	; (8007f70 <SetNewAlarmTime+0x1cc>)
 8007de6:	701a      	strb	r2, [r3, #0]

        if (KEYPAD_NOT_PRESSED != key)
 8007de8:	4b61      	ldr	r3, [pc, #388]	; (8007f70 <SetNewAlarmTime+0x1cc>)
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f000 808a 	beq.w	8007f06 <SetNewAlarmTime+0x162>
        {
            if ((key >= '0' && key <= '9') || ('D' == key))
 8007df2:	4b5f      	ldr	r3, [pc, #380]	; (8007f70 <SetNewAlarmTime+0x1cc>)
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	2b2f      	cmp	r3, #47	; 0x2f
 8007df8:	d903      	bls.n	8007e02 <SetNewAlarmTime+0x5e>
 8007dfa:	4b5d      	ldr	r3, [pc, #372]	; (8007f70 <SetNewAlarmTime+0x1cc>)
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	2b39      	cmp	r3, #57	; 0x39
 8007e00:	d903      	bls.n	8007e0a <SetNewAlarmTime+0x66>
 8007e02:	4b5b      	ldr	r3, [pc, #364]	; (8007f70 <SetNewAlarmTime+0x1cc>)
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	2b44      	cmp	r3, #68	; 0x44
 8007e08:	d14d      	bne.n	8007ea6 <SetNewAlarmTime+0x102>
            {
                keypad_input[digit_number] = key;
 8007e0a:	4b59      	ldr	r3, [pc, #356]	; (8007f70 <SetNewAlarmTime+0x1cc>)
 8007e0c:	7819      	ldrb	r1, [r3, #0]
 8007e0e:	4a59      	ldr	r2, [pc, #356]	; (8007f74 <SetNewAlarmTime+0x1d0>)
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	4413      	add	r3, r2
 8007e14:	460a      	mov	r2, r1
 8007e16:	701a      	strb	r2, [r3, #0]

                char temp_string[2];
                temp_string[0] = key;
 8007e18:	4b55      	ldr	r3, [pc, #340]	; (8007f70 <SetNewAlarmTime+0x1cc>)
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	713b      	strb	r3, [r7, #4]
                temp_string[1] = '\0';
 8007e1e:	2300      	movs	r3, #0
 8007e20:	717b      	strb	r3, [r7, #5]

                ST7735_DrawString(30 + digit_number * 27.5, 100, temp_string, Font_16x26, ST7735_GREEN, ST7735_BLACK);
 8007e22:	6978      	ldr	r0, [r7, #20]
 8007e24:	f7f8 fb7e 	bl	8000524 <__aeabi_i2d>
 8007e28:	f04f 0200 	mov.w	r2, #0
 8007e2c:	4b52      	ldr	r3, [pc, #328]	; (8007f78 <SetNewAlarmTime+0x1d4>)
 8007e2e:	f7f8 fbe3 	bl	80005f8 <__aeabi_dmul>
 8007e32:	4602      	mov	r2, r0
 8007e34:	460b      	mov	r3, r1
 8007e36:	4610      	mov	r0, r2
 8007e38:	4619      	mov	r1, r3
 8007e3a:	f04f 0200 	mov.w	r2, #0
 8007e3e:	4b4f      	ldr	r3, [pc, #316]	; (8007f7c <SetNewAlarmTime+0x1d8>)
 8007e40:	f7f8 fa24 	bl	800028c <__adddf3>
 8007e44:	4602      	mov	r2, r0
 8007e46:	460b      	mov	r3, r1
 8007e48:	4610      	mov	r0, r2
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	f7f8 feac 	bl	8000ba8 <__aeabi_d2uiz>
 8007e50:	4603      	mov	r3, r0
 8007e52:	b298      	uxth	r0, r3
 8007e54:	4b4a      	ldr	r3, [pc, #296]	; (8007f80 <SetNewAlarmTime+0x1dc>)
 8007e56:	1d39      	adds	r1, r7, #4
 8007e58:	2200      	movs	r2, #0
 8007e5a:	9202      	str	r2, [sp, #8]
 8007e5c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8007e60:	9201      	str	r2, [sp, #4]
 8007e62:	685a      	ldr	r2, [r3, #4]
 8007e64:	9200      	str	r2, [sp, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	460a      	mov	r2, r1
 8007e6a:	2164      	movs	r1, #100	; 0x64
 8007e6c:	f001 ffc0 	bl	8009df0 <ST7735_DrawString>
                delay_ms(70);
 8007e70:	2046      	movs	r0, #70	; 0x46
 8007e72:	f7fd fed1 	bl	8005c18 <delay_ms>

                if (key >= '0' && key <= '9')
 8007e76:	4b3e      	ldr	r3, [pc, #248]	; (8007f70 <SetNewAlarmTime+0x1cc>)
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	2b2f      	cmp	r3, #47	; 0x2f
 8007e7c:	d907      	bls.n	8007e8e <SetNewAlarmTime+0xea>
 8007e7e:	4b3c      	ldr	r3, [pc, #240]	; (8007f70 <SetNewAlarmTime+0x1cc>)
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	2b39      	cmp	r3, #57	; 0x39
 8007e84:	d803      	bhi.n	8007e8e <SetNewAlarmTime+0xea>
                {
                    digit_number++;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	617b      	str	r3, [r7, #20]
 8007e8c:	e00a      	b.n	8007ea4 <SetNewAlarmTime+0x100>
                }
                else if ('D' == key)
 8007e8e:	4b38      	ldr	r3, [pc, #224]	; (8007f70 <SetNewAlarmTime+0x1cc>)
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	2b44      	cmp	r3, #68	; 0x44
 8007e94:	d137      	bne.n	8007f06 <SetNewAlarmTime+0x162>
                {
                    save++;
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	613b      	str	r3, [r7, #16]
                    delay_ms(300);
 8007e9c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007ea0:	f7fd feba 	bl	8005c18 <delay_ms>
            {
 8007ea4:	e02f      	b.n	8007f06 <SetNewAlarmTime+0x162>
                }
            }
            else if (('C' == key) && (digit_number > 0))
 8007ea6:	4b32      	ldr	r3, [pc, #200]	; (8007f70 <SetNewAlarmTime+0x1cc>)
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	2b43      	cmp	r3, #67	; 0x43
 8007eac:	d12b      	bne.n	8007f06 <SetNewAlarmTime+0x162>
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	dd28      	ble.n	8007f06 <SetNewAlarmTime+0x162>
            {
                ST7735_DrawString(30 + digit_number * 27.5, 100, " ", Font_16x26, ST7735_GREEN, ST7735_BLACK);
 8007eb4:	6978      	ldr	r0, [r7, #20]
 8007eb6:	f7f8 fb35 	bl	8000524 <__aeabi_i2d>
 8007eba:	f04f 0200 	mov.w	r2, #0
 8007ebe:	4b2e      	ldr	r3, [pc, #184]	; (8007f78 <SetNewAlarmTime+0x1d4>)
 8007ec0:	f7f8 fb9a 	bl	80005f8 <__aeabi_dmul>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	4610      	mov	r0, r2
 8007eca:	4619      	mov	r1, r3
 8007ecc:	f04f 0200 	mov.w	r2, #0
 8007ed0:	4b2a      	ldr	r3, [pc, #168]	; (8007f7c <SetNewAlarmTime+0x1d8>)
 8007ed2:	f7f8 f9db 	bl	800028c <__adddf3>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	460b      	mov	r3, r1
 8007eda:	4610      	mov	r0, r2
 8007edc:	4619      	mov	r1, r3
 8007ede:	f7f8 fe63 	bl	8000ba8 <__aeabi_d2uiz>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	b298      	uxth	r0, r3
 8007ee6:	4b26      	ldr	r3, [pc, #152]	; (8007f80 <SetNewAlarmTime+0x1dc>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	9202      	str	r2, [sp, #8]
 8007eec:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8007ef0:	9201      	str	r2, [sp, #4]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	9200      	str	r2, [sp, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a22      	ldr	r2, [pc, #136]	; (8007f84 <SetNewAlarmTime+0x1e0>)
 8007efa:	2164      	movs	r1, #100	; 0x64
 8007efc:	f001 ff78 	bl	8009df0 <ST7735_DrawString>
                digit_number--;
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	3b01      	subs	r3, #1
 8007f04:	617b      	str	r3, [r7, #20]
    while ((digit_number < 3) && (SET != save))
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	dc03      	bgt.n	8007f14 <SetNewAlarmTime+0x170>
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	f47f af61 	bne.w	8007dd6 <SetNewAlarmTime+0x32>
            }
        }
    }

    if ((SET == save) && (digit_number > 0))
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d121      	bne.n	8007f5e <SetNewAlarmTime+0x1ba>
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	dd1e      	ble.n	8007f5e <SetNewAlarmTime+0x1ba>
    {
        int alarm_value = 0;
 8007f20:	2300      	movs	r3, #0
 8007f22:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < digit_number; i++)
 8007f24:	2300      	movs	r3, #0
 8007f26:	60bb      	str	r3, [r7, #8]
 8007f28:	e00f      	b.n	8007f4a <SetNewAlarmTime+0x1a6>
        {
            alarm_value = alarm_value * 10 + (keypad_input[i] - '0');
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	4413      	add	r3, r2
 8007f32:	005b      	lsls	r3, r3, #1
 8007f34:	4619      	mov	r1, r3
 8007f36:	4a0f      	ldr	r2, [pc, #60]	; (8007f74 <SetNewAlarmTime+0x1d0>)
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	3b30      	subs	r3, #48	; 0x30
 8007f40:	440b      	add	r3, r1
 8007f42:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < digit_number; i++)
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	3301      	adds	r3, #1
 8007f48:	60bb      	str	r3, [r7, #8]
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	dbeb      	blt.n	8007f2a <SetNewAlarmTime+0x186>
        }

        alarm_time = alarm_value;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	4a0c      	ldr	r2, [pc, #48]	; (8007f88 <SetNewAlarmTime+0x1e4>)
 8007f56:	6013      	str	r3, [r2, #0]
        SystemState = SYS_STATE_ADM_SCREEN;
 8007f58:	4b0c      	ldr	r3, [pc, #48]	; (8007f8c <SetNewAlarmTime+0x1e8>)
 8007f5a:	2204      	movs	r2, #4
 8007f5c:	701a      	strb	r2, [r3, #0]
    }
}
 8007f5e:	bf00      	nop
 8007f60:	3718      	adds	r7, #24
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	2000003c 	.word	0x2000003c
 8007f6c:	0800dc9c 	.word	0x0800dc9c
 8007f70:	20000710 	.word	0x20000710
 8007f74:	20000718 	.word	0x20000718
 8007f78:	403b8000 	.word	0x403b8000
 8007f7c:	403e0000 	.word	0x403e0000
 8007f80:	2000004c 	.word	0x2000004c
 8007f84:	0800da84 	.word	0x0800da84
 8007f88:	20000024 	.word	0x20000024
 8007f8c:	20000711 	.word	0x20000711

08007f90 <TimeoutMessage>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void TimeoutMessage(void)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af04      	add	r7, sp, #16
	ST7735_FillScreen(ST7735_WHITE);
 8007f96:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007f9a:	f002 f841 	bl	800a020 <ST7735_FillScreen>
	ST7735_DrawString(0, 30, "    TIMEOUT.                   REAUTHORIZE                      PLEASE", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8007f9e:	4b0e      	ldr	r3, [pc, #56]	; (8007fd8 <TimeoutMessage+0x48>)
 8007fa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fa4:	9202      	str	r2, [sp, #8]
 8007fa6:	221f      	movs	r2, #31
 8007fa8:	9201      	str	r2, [sp, #4]
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	9200      	str	r2, [sp, #0]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a0a      	ldr	r2, [pc, #40]	; (8007fdc <TimeoutMessage+0x4c>)
 8007fb2:	211e      	movs	r1, #30
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	f001 ff1b 	bl	8009df0 <ST7735_DrawString>
	BuzzerAlert(BUZZER_ERROR_SOUND);
 8007fba:	2002      	movs	r0, #2
 8007fbc:	f7fe fbb8 	bl	8006730 <BuzzerAlert>
	delay_ms(500);
 8007fc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007fc4:	f7fd fe28 	bl	8005c18 <delay_ms>
	SystemState = SYS_STATE_BEGIN;
 8007fc8:	4b05      	ldr	r3, [pc, #20]	; (8007fe0 <TimeoutMessage+0x50>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	701a      	strb	r2, [r3, #0]
	WelcomeScreen();
 8007fce:	f7fe fd25 	bl	8006a1c <WelcomeScreen>
	return;
 8007fd2:	bf00      	nop
}
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	20000044 	.word	0x20000044
 8007fdc:	0800dcd8 	.word	0x0800dcd8
 8007fe0:	20000711 	.word	0x20000711

08007fe4 <PasswordConfirmation>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void PasswordConfirmation(void)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af04      	add	r7, sp, #16
	counter_1s = 0;
 8007fea:	4b2f      	ldr	r3, [pc, #188]	; (80080a8 <PasswordConfirmation+0xc4>)
 8007fec:	2200      	movs	r2, #0
 8007fee:	601a      	str	r2, [r3, #0]
	if(counter_1s < 20)
 8007ff0:	4b2d      	ldr	r3, [pc, #180]	; (80080a8 <PasswordConfirmation+0xc4>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2b13      	cmp	r3, #19
 8007ff6:	d851      	bhi.n	800809c <PasswordConfirmation+0xb8>
	{
		if((user_password[0] == input_password[0]) && (user_password[1] == input_password[1])
 8007ff8:	4b2c      	ldr	r3, [pc, #176]	; (80080ac <PasswordConfirmation+0xc8>)
 8007ffa:	781a      	ldrb	r2, [r3, #0]
 8007ffc:	4b2c      	ldr	r3, [pc, #176]	; (80080b0 <PasswordConfirmation+0xcc>)
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	429a      	cmp	r2, r3
 8008002:	d136      	bne.n	8008072 <PasswordConfirmation+0x8e>
 8008004:	4b29      	ldr	r3, [pc, #164]	; (80080ac <PasswordConfirmation+0xc8>)
 8008006:	785a      	ldrb	r2, [r3, #1]
 8008008:	4b29      	ldr	r3, [pc, #164]	; (80080b0 <PasswordConfirmation+0xcc>)
 800800a:	785b      	ldrb	r3, [r3, #1]
 800800c:	429a      	cmp	r2, r3
 800800e:	d130      	bne.n	8008072 <PasswordConfirmation+0x8e>
		&& (user_password[2] == input_password[2]) && (user_password[3] == input_password[3]))
 8008010:	4b26      	ldr	r3, [pc, #152]	; (80080ac <PasswordConfirmation+0xc8>)
 8008012:	789a      	ldrb	r2, [r3, #2]
 8008014:	4b26      	ldr	r3, [pc, #152]	; (80080b0 <PasswordConfirmation+0xcc>)
 8008016:	789b      	ldrb	r3, [r3, #2]
 8008018:	429a      	cmp	r2, r3
 800801a:	d12a      	bne.n	8008072 <PasswordConfirmation+0x8e>
 800801c:	4b23      	ldr	r3, [pc, #140]	; (80080ac <PasswordConfirmation+0xc8>)
 800801e:	78da      	ldrb	r2, [r3, #3]
 8008020:	4b23      	ldr	r3, [pc, #140]	; (80080b0 <PasswordConfirmation+0xcc>)
 8008022:	78db      	ldrb	r3, [r3, #3]
 8008024:	429a      	cmp	r2, r3
 8008026:	d124      	bne.n	8008072 <PasswordConfirmation+0x8e>
		{
			ST7735_FillScreen(ST7735_GREEN);
 8008028:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800802c:	f001 fff8 	bl	800a020 <ST7735_FillScreen>
			ST7735_DrawString(0, 50, "   CORRECT        PASSWORD", Font_11x18, ST7735_WHITE, ST7735_GREEN);
 8008030:	4b20      	ldr	r3, [pc, #128]	; (80080b4 <PasswordConfirmation+0xd0>)
 8008032:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8008036:	9202      	str	r2, [sp, #8]
 8008038:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800803c:	9201      	str	r2, [sp, #4]
 800803e:	685a      	ldr	r2, [r3, #4]
 8008040:	9200      	str	r2, [sp, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a1c      	ldr	r2, [pc, #112]	; (80080b8 <PasswordConfirmation+0xd4>)
 8008046:	2132      	movs	r1, #50	; 0x32
 8008048:	2000      	movs	r0, #0
 800804a:	f001 fed1 	bl	8009df0 <ST7735_DrawString>
			delay_ms(100);
 800804e:	2064      	movs	r0, #100	; 0x64
 8008050:	f7fd fde2 	bl	8005c18 <delay_ms>
			input_password[0] = '\0';
 8008054:	4b16      	ldr	r3, [pc, #88]	; (80080b0 <PasswordConfirmation+0xcc>)
 8008056:	2200      	movs	r2, #0
 8008058:	701a      	strb	r2, [r3, #0]
			input_password[1] = '\0';
 800805a:	4b15      	ldr	r3, [pc, #84]	; (80080b0 <PasswordConfirmation+0xcc>)
 800805c:	2200      	movs	r2, #0
 800805e:	705a      	strb	r2, [r3, #1]
			input_password[2] = '\0';
 8008060:	4b13      	ldr	r3, [pc, #76]	; (80080b0 <PasswordConfirmation+0xcc>)
 8008062:	2200      	movs	r2, #0
 8008064:	709a      	strb	r2, [r3, #2]
			input_password[3] = '\0';
 8008066:	4b12      	ldr	r3, [pc, #72]	; (80080b0 <PasswordConfirmation+0xcc>)
 8008068:	2200      	movs	r2, #0
 800806a:	70da      	strb	r2, [r3, #3]
			Unlock();
 800806c:	f000 f92e 	bl	80082cc <Unlock>
 8008070:	e017      	b.n	80080a2 <PasswordConfirmation+0xbe>
		}else
		{
			SystemState = SYS_STATE_BEGIN;
 8008072:	4b12      	ldr	r3, [pc, #72]	; (80080bc <PasswordConfirmation+0xd8>)
 8008074:	2200      	movs	r2, #0
 8008076:	701a      	strb	r2, [r3, #0]
			input_password[0] = '\0';
 8008078:	4b0d      	ldr	r3, [pc, #52]	; (80080b0 <PasswordConfirmation+0xcc>)
 800807a:	2200      	movs	r2, #0
 800807c:	701a      	strb	r2, [r3, #0]
			input_password[1] = '\0';
 800807e:	4b0c      	ldr	r3, [pc, #48]	; (80080b0 <PasswordConfirmation+0xcc>)
 8008080:	2200      	movs	r2, #0
 8008082:	705a      	strb	r2, [r3, #1]
			input_password[2] = '\0';
 8008084:	4b0a      	ldr	r3, [pc, #40]	; (80080b0 <PasswordConfirmation+0xcc>)
 8008086:	2200      	movs	r2, #0
 8008088:	709a      	strb	r2, [r3, #2]
			input_password[3] = '\0';
 800808a:	4b09      	ldr	r3, [pc, #36]	; (80080b0 <PasswordConfirmation+0xcc>)
 800808c:	2200      	movs	r2, #0
 800808e:	70da      	strb	r2, [r3, #3]
			BuzzerAlert(BUZZER_ALARM_SOUND);
 8008090:	2000      	movs	r0, #0
 8008092:	f7fe fb4d 	bl	8006730 <BuzzerAlert>
			WelcomeScreen();
 8008096:	f7fe fcc1 	bl	8006a1c <WelcomeScreen>
			return;
 800809a:	e002      	b.n	80080a2 <PasswordConfirmation+0xbe>
		}
	}
	else
	{
		TimeoutMessage();
 800809c:	f7ff ff78 	bl	8007f90 <TimeoutMessage>
		return;
 80080a0:	bf00      	nop
	}
}
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	20000714 	.word	0x20000714
 80080ac:	20000030 	.word	0x20000030
 80080b0:	2000072c 	.word	0x2000072c
 80080b4:	20000044 	.word	0x20000044
 80080b8:	0800dd20 	.word	0x0800dd20
 80080bc:	20000711 	.word	0x20000711

080080c0 <AdminSettingsMenu>:
/* @return				- none																			*/
/*																										*/
/* @Note				- '#' key is used to exit administrator settings								*/
/********************************************************************************************************/
void AdminSettingsMenu(void)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af04      	add	r7, sp, #16
	counter_1s = 0;
 80080c6:	4b77      	ldr	r3, [pc, #476]	; (80082a4 <AdminSettingsMenu+0x1e4>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	601a      	str	r2, [r3, #0]
	if((admin_password[0] == input_password[0]) && (admin_password[1] == input_password[1]) && (admin_password[2] == input_password[2])
 80080cc:	4b76      	ldr	r3, [pc, #472]	; (80082a8 <AdminSettingsMenu+0x1e8>)
 80080ce:	781a      	ldrb	r2, [r3, #0]
 80080d0:	4b76      	ldr	r3, [pc, #472]	; (80082ac <AdminSettingsMenu+0x1ec>)
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	f040 80ce 	bne.w	8008276 <AdminSettingsMenu+0x1b6>
 80080da:	4b73      	ldr	r3, [pc, #460]	; (80082a8 <AdminSettingsMenu+0x1e8>)
 80080dc:	785a      	ldrb	r2, [r3, #1]
 80080de:	4b73      	ldr	r3, [pc, #460]	; (80082ac <AdminSettingsMenu+0x1ec>)
 80080e0:	785b      	ldrb	r3, [r3, #1]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	f040 80c7 	bne.w	8008276 <AdminSettingsMenu+0x1b6>
 80080e8:	4b6f      	ldr	r3, [pc, #444]	; (80082a8 <AdminSettingsMenu+0x1e8>)
 80080ea:	789a      	ldrb	r2, [r3, #2]
 80080ec:	4b6f      	ldr	r3, [pc, #444]	; (80082ac <AdminSettingsMenu+0x1ec>)
 80080ee:	789b      	ldrb	r3, [r3, #2]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	f040 80c0 	bne.w	8008276 <AdminSettingsMenu+0x1b6>
	&& (admin_password[3] == input_password[3]) && (admin_password[4] == input_password[4]) && (admin_password[5] == input_password[5]))
 80080f6:	4b6c      	ldr	r3, [pc, #432]	; (80082a8 <AdminSettingsMenu+0x1e8>)
 80080f8:	78da      	ldrb	r2, [r3, #3]
 80080fa:	4b6c      	ldr	r3, [pc, #432]	; (80082ac <AdminSettingsMenu+0x1ec>)
 80080fc:	78db      	ldrb	r3, [r3, #3]
 80080fe:	429a      	cmp	r2, r3
 8008100:	f040 80b9 	bne.w	8008276 <AdminSettingsMenu+0x1b6>
 8008104:	4b68      	ldr	r3, [pc, #416]	; (80082a8 <AdminSettingsMenu+0x1e8>)
 8008106:	791a      	ldrb	r2, [r3, #4]
 8008108:	4b68      	ldr	r3, [pc, #416]	; (80082ac <AdminSettingsMenu+0x1ec>)
 800810a:	791b      	ldrb	r3, [r3, #4]
 800810c:	429a      	cmp	r2, r3
 800810e:	f040 80b2 	bne.w	8008276 <AdminSettingsMenu+0x1b6>
 8008112:	4b65      	ldr	r3, [pc, #404]	; (80082a8 <AdminSettingsMenu+0x1e8>)
 8008114:	795a      	ldrb	r2, [r3, #5]
 8008116:	4b65      	ldr	r3, [pc, #404]	; (80082ac <AdminSettingsMenu+0x1ec>)
 8008118:	795b      	ldrb	r3, [r3, #5]
 800811a:	429a      	cmp	r2, r3
 800811c:	f040 80ab 	bne.w	8008276 <AdminSettingsMenu+0x1b6>
	{
		ST7735_FillScreen(ST7735_BLACK);
 8008120:	2000      	movs	r0, #0
 8008122:	f001 ff7d 	bl	800a020 <ST7735_FillScreen>
		ST7735_DrawString(5, 0, "OPTIONS MENU", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 8008126:	4b62      	ldr	r3, [pc, #392]	; (80082b0 <AdminSettingsMenu+0x1f0>)
 8008128:	2200      	movs	r2, #0
 800812a:	9202      	str	r2, [sp, #8]
 800812c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8008130:	9201      	str	r2, [sp, #4]
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	9200      	str	r2, [sp, #0]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a5e      	ldr	r2, [pc, #376]	; (80082b4 <AdminSettingsMenu+0x1f4>)
 800813a:	2100      	movs	r1, #0
 800813c:	2005      	movs	r0, #5
 800813e:	f001 fe57 	bl	8009df0 <ST7735_DrawString>
		ST7735_DrawString(0, 30, "A-FINGERPRINT DATABASE OPTIONS                                      B-PASSWORD OPTIONS                           C-ALARM OPTIONS                              D-RESET", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8008142:	4b5d      	ldr	r3, [pc, #372]	; (80082b8 <AdminSettingsMenu+0x1f8>)
 8008144:	2200      	movs	r2, #0
 8008146:	9202      	str	r2, [sp, #8]
 8008148:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800814c:	9201      	str	r2, [sp, #4]
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	9200      	str	r2, [sp, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a59      	ldr	r2, [pc, #356]	; (80082bc <AdminSettingsMenu+0x1fc>)
 8008156:	211e      	movs	r1, #30
 8008158:	2000      	movs	r0, #0
 800815a:	f001 fe49 	bl	8009df0 <ST7735_DrawString>
		key = KEYPAD_NOT_PRESSED;
 800815e:	4b58      	ldr	r3, [pc, #352]	; (80082c0 <AdminSettingsMenu+0x200>)
 8008160:	2200      	movs	r2, #0
 8008162:	701a      	strb	r2, [r3, #0]
		while(KEYPAD_NOT_PRESSED == key)
 8008164:	e081      	b.n	800826a <AdminSettingsMenu+0x1aa>
		{
			key = Keypad4x4_Read();
 8008166:	f000 fcb7 	bl	8008ad8 <Keypad4x4_Read>
 800816a:	4603      	mov	r3, r0
 800816c:	461a      	mov	r2, r3
 800816e:	4b54      	ldr	r3, [pc, #336]	; (80082c0 <AdminSettingsMenu+0x200>)
 8008170:	701a      	strb	r2, [r3, #0]
			if(KEYPAD_NOT_PRESSED != key)
 8008172:	4b53      	ldr	r3, [pc, #332]	; (80082c0 <AdminSettingsMenu+0x200>)
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d077      	beq.n	800826a <AdminSettingsMenu+0x1aa>
			{
				switch(key)
 800817a:	4b51      	ldr	r3, [pc, #324]	; (80082c0 <AdminSettingsMenu+0x200>)
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	3b23      	subs	r3, #35	; 0x23
 8008180:	2b21      	cmp	r3, #33	; 0x21
 8008182:	d870      	bhi.n	8008266 <AdminSettingsMenu+0x1a6>
 8008184:	a201      	add	r2, pc, #4	; (adr r2, 800818c <AdminSettingsMenu+0xcc>)
 8008186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818a:	bf00      	nop
 800818c:	08008231 	.word	0x08008231
 8008190:	08008267 	.word	0x08008267
 8008194:	08008267 	.word	0x08008267
 8008198:	08008267 	.word	0x08008267
 800819c:	08008267 	.word	0x08008267
 80081a0:	08008267 	.word	0x08008267
 80081a4:	08008267 	.word	0x08008267
 80081a8:	08008267 	.word	0x08008267
 80081ac:	08008267 	.word	0x08008267
 80081b0:	08008267 	.word	0x08008267
 80081b4:	08008267 	.word	0x08008267
 80081b8:	08008267 	.word	0x08008267
 80081bc:	08008267 	.word	0x08008267
 80081c0:	08008267 	.word	0x08008267
 80081c4:	08008267 	.word	0x08008267
 80081c8:	08008267 	.word	0x08008267
 80081cc:	08008267 	.word	0x08008267
 80081d0:	08008267 	.word	0x08008267
 80081d4:	08008267 	.word	0x08008267
 80081d8:	08008267 	.word	0x08008267
 80081dc:	08008267 	.word	0x08008267
 80081e0:	08008267 	.word	0x08008267
 80081e4:	08008267 	.word	0x08008267
 80081e8:	08008267 	.word	0x08008267
 80081ec:	08008267 	.word	0x08008267
 80081f0:	08008267 	.word	0x08008267
 80081f4:	08008267 	.word	0x08008267
 80081f8:	08008267 	.word	0x08008267
 80081fc:	08008267 	.word	0x08008267
 8008200:	08008267 	.word	0x08008267
 8008204:	08008215 	.word	0x08008215
 8008208:	0800821d 	.word	0x0800821d
 800820c:	08008225 	.word	0x08008225
 8008210:	0800822d 	.word	0x0800822d
				{
					case 'A':
					{
						SystemState = SYS_STATE_ADM_DB_MENU;
 8008214:	4b2b      	ldr	r3, [pc, #172]	; (80082c4 <AdminSettingsMenu+0x204>)
 8008216:	2206      	movs	r2, #6
 8008218:	701a      	strb	r2, [r3, #0]
						return;
 800821a:	e041      	b.n	80082a0 <AdminSettingsMenu+0x1e0>
					}
					case 'B':
					{
						SystemState = SYS_STATE_ADM_PWD_MENU;
 800821c:	4b29      	ldr	r3, [pc, #164]	; (80082c4 <AdminSettingsMenu+0x204>)
 800821e:	2205      	movs	r2, #5
 8008220:	701a      	strb	r2, [r3, #0]
						return;
 8008222:	e03d      	b.n	80082a0 <AdminSettingsMenu+0x1e0>
					}
					case 'C':
					{
						SystemState = SYS_STATE_ADM_ALARM_MENU;
 8008224:	4b27      	ldr	r3, [pc, #156]	; (80082c4 <AdminSettingsMenu+0x204>)
 8008226:	220b      	movs	r2, #11
 8008228:	701a      	strb	r2, [r3, #0]
						return;
 800822a:	e039      	b.n	80082a0 <AdminSettingsMenu+0x1e0>
					}
					case 'D':
					{
						NVIC_SystemReset();  //reboot
 800822c:	f7fe fa6a 	bl	8006704 <__NVIC_SystemReset>
					}
					case '#':
					{
						SystemState = SYS_STATE_BEGIN;
 8008230:	4b24      	ldr	r3, [pc, #144]	; (80082c4 <AdminSettingsMenu+0x204>)
 8008232:	2200      	movs	r2, #0
 8008234:	701a      	strb	r2, [r3, #0]
						ST7735_FillScreen(ST7735_BLACK);
 8008236:	2000      	movs	r0, #0
 8008238:	f001 fef2 	bl	800a020 <ST7735_FillScreen>
						ST7735_DrawString(60, 50, "BYE!", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 800823c:	4b1c      	ldr	r3, [pc, #112]	; (80082b0 <AdminSettingsMenu+0x1f0>)
 800823e:	2200      	movs	r2, #0
 8008240:	9202      	str	r2, [sp, #8]
 8008242:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8008246:	9201      	str	r2, [sp, #4]
 8008248:	685a      	ldr	r2, [r3, #4]
 800824a:	9200      	str	r2, [sp, #0]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a1e      	ldr	r2, [pc, #120]	; (80082c8 <AdminSettingsMenu+0x208>)
 8008250:	2132      	movs	r1, #50	; 0x32
 8008252:	203c      	movs	r0, #60	; 0x3c
 8008254:	f001 fdcc 	bl	8009df0 <ST7735_DrawString>
						delay_ms(2000);
 8008258:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800825c:	f7fd fcdc 	bl	8005c18 <delay_ms>
						WelcomeScreen();
 8008260:	f7fe fbdc 	bl	8006a1c <WelcomeScreen>
						return;
 8008264:	e01c      	b.n	80082a0 <AdminSettingsMenu+0x1e0>
					}
					default:
						AdminSettingsMenu();
 8008266:	f7ff ff2b 	bl	80080c0 <AdminSettingsMenu>
		while(KEYPAD_NOT_PRESSED == key)
 800826a:	4b15      	ldr	r3, [pc, #84]	; (80082c0 <AdminSettingsMenu+0x200>)
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	f43f af79 	beq.w	8008166 <AdminSettingsMenu+0xa6>
	if((admin_password[0] == input_password[0]) && (admin_password[1] == input_password[1]) && (admin_password[2] == input_password[2])
 8008274:	e014      	b.n	80082a0 <AdminSettingsMenu+0x1e0>
			}
		}
	}
	else
	{
		SystemState = SYS_STATE_BEGIN;
 8008276:	4b13      	ldr	r3, [pc, #76]	; (80082c4 <AdminSettingsMenu+0x204>)
 8008278:	2200      	movs	r2, #0
 800827a:	701a      	strb	r2, [r3, #0]
		input_password[0] = '\0';
 800827c:	4b0b      	ldr	r3, [pc, #44]	; (80082ac <AdminSettingsMenu+0x1ec>)
 800827e:	2200      	movs	r2, #0
 8008280:	701a      	strb	r2, [r3, #0]
		input_password[1] = '\0';
 8008282:	4b0a      	ldr	r3, [pc, #40]	; (80082ac <AdminSettingsMenu+0x1ec>)
 8008284:	2200      	movs	r2, #0
 8008286:	705a      	strb	r2, [r3, #1]
		input_password[2] = '\0';
 8008288:	4b08      	ldr	r3, [pc, #32]	; (80082ac <AdminSettingsMenu+0x1ec>)
 800828a:	2200      	movs	r2, #0
 800828c:	709a      	strb	r2, [r3, #2]
		input_password[3] = '\0';
 800828e:	4b07      	ldr	r3, [pc, #28]	; (80082ac <AdminSettingsMenu+0x1ec>)
 8008290:	2200      	movs	r2, #0
 8008292:	70da      	strb	r2, [r3, #3]
		BuzzerAlert(BUZZER_ALARM_SOUND);
 8008294:	2000      	movs	r0, #0
 8008296:	f7fe fa4b 	bl	8006730 <BuzzerAlert>
		WelcomeScreen();
 800829a:	f7fe fbbf 	bl	8006a1c <WelcomeScreen>
		return;
 800829e:	bf00      	nop
	}
}
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	20000714 	.word	0x20000714
 80082a8:	20000028 	.word	0x20000028
 80082ac:	2000072c 	.word	0x2000072c
 80082b0:	20000044 	.word	0x20000044
 80082b4:	0800dd3c 	.word	0x0800dd3c
 80082b8:	2000003c 	.word	0x2000003c
 80082bc:	0800dd4c 	.word	0x0800dd4c
 80082c0:	20000710 	.word	0x20000710
 80082c4:	20000711 	.word	0x20000711
 80082c8:	0800db18 	.word	0x0800db18

080082cc <Unlock>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void Unlock(void)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af04      	add	r7, sp, #16
	//unlock relay
	GPIO_WritePin(GPIOD, GPIO_PIN_3, RESET);
 80082d2:	2200      	movs	r2, #0
 80082d4:	2103      	movs	r1, #3
 80082d6:	4899      	ldr	r0, [pc, #612]	; (800853c <Unlock+0x270>)
 80082d8:	f7f9 f9eb 	bl	80016b2 <GPIO_WritePin>
	BuzzerAlert(BUZZER_ACCESS_GRANTED_SOUND);
 80082dc:	2001      	movs	r0, #1
 80082de:	f7fe fa27 	bl	8006730 <BuzzerAlert>
	ST7735_FillScreen(ST7735_WHITE);
 80082e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80082e6:	f001 fe9b 	bl	800a020 <ST7735_FillScreen>
	ST7735_DrawString(0, 45, "10 SECONDS    LEFT TO PASS", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 80082ea:	4b95      	ldr	r3, [pc, #596]	; (8008540 <Unlock+0x274>)
 80082ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082f0:	9202      	str	r2, [sp, #8]
 80082f2:	221f      	movs	r2, #31
 80082f4:	9201      	str	r2, [sp, #4]
 80082f6:	685a      	ldr	r2, [r3, #4]
 80082f8:	9200      	str	r2, [sp, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a91      	ldr	r2, [pc, #580]	; (8008544 <Unlock+0x278>)
 80082fe:	212d      	movs	r1, #45	; 0x2d
 8008300:	2000      	movs	r0, #0
 8008302:	f001 fd75 	bl	8009df0 <ST7735_DrawString>
	delay_ms(1000);
 8008306:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800830a:	f7fd fc85 	bl	8005c18 <delay_ms>
	ST7735_DrawString(0, 45, "9 SECONDS LEFT     TO PASS ", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 800830e:	4b8c      	ldr	r3, [pc, #560]	; (8008540 <Unlock+0x274>)
 8008310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008314:	9202      	str	r2, [sp, #8]
 8008316:	221f      	movs	r2, #31
 8008318:	9201      	str	r2, [sp, #4]
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	9200      	str	r2, [sp, #0]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a89      	ldr	r2, [pc, #548]	; (8008548 <Unlock+0x27c>)
 8008322:	212d      	movs	r1, #45	; 0x2d
 8008324:	2000      	movs	r0, #0
 8008326:	f001 fd63 	bl	8009df0 <ST7735_DrawString>
	delay_ms(1000);
 800832a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800832e:	f7fd fc73 	bl	8005c18 <delay_ms>
	ST7735_DrawString(0, 45, "8 SECONDS LEFT     TO PASS ", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8008332:	4b83      	ldr	r3, [pc, #524]	; (8008540 <Unlock+0x274>)
 8008334:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008338:	9202      	str	r2, [sp, #8]
 800833a:	221f      	movs	r2, #31
 800833c:	9201      	str	r2, [sp, #4]
 800833e:	685a      	ldr	r2, [r3, #4]
 8008340:	9200      	str	r2, [sp, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a81      	ldr	r2, [pc, #516]	; (800854c <Unlock+0x280>)
 8008346:	212d      	movs	r1, #45	; 0x2d
 8008348:	2000      	movs	r0, #0
 800834a:	f001 fd51 	bl	8009df0 <ST7735_DrawString>
	delay_ms(1000);
 800834e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008352:	f7fd fc61 	bl	8005c18 <delay_ms>
	ST7735_DrawString(0, 45, "7 SECONDS LEFT     TO PASS ", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8008356:	4b7a      	ldr	r3, [pc, #488]	; (8008540 <Unlock+0x274>)
 8008358:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800835c:	9202      	str	r2, [sp, #8]
 800835e:	221f      	movs	r2, #31
 8008360:	9201      	str	r2, [sp, #4]
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	9200      	str	r2, [sp, #0]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a79      	ldr	r2, [pc, #484]	; (8008550 <Unlock+0x284>)
 800836a:	212d      	movs	r1, #45	; 0x2d
 800836c:	2000      	movs	r0, #0
 800836e:	f001 fd3f 	bl	8009df0 <ST7735_DrawString>
	delay_ms(1000);
 8008372:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008376:	f7fd fc4f 	bl	8005c18 <delay_ms>
	ST7735_DrawString(0, 45, "6 SECONDS LEFT     TO PASS ", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 800837a:	4b71      	ldr	r3, [pc, #452]	; (8008540 <Unlock+0x274>)
 800837c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008380:	9202      	str	r2, [sp, #8]
 8008382:	221f      	movs	r2, #31
 8008384:	9201      	str	r2, [sp, #4]
 8008386:	685a      	ldr	r2, [r3, #4]
 8008388:	9200      	str	r2, [sp, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a71      	ldr	r2, [pc, #452]	; (8008554 <Unlock+0x288>)
 800838e:	212d      	movs	r1, #45	; 0x2d
 8008390:	2000      	movs	r0, #0
 8008392:	f001 fd2d 	bl	8009df0 <ST7735_DrawString>
	delay_ms(1000);
 8008396:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800839a:	f7fd fc3d 	bl	8005c18 <delay_ms>
	ST7735_DrawString(0, 45, "5 SECONDS LEFT     TO PASS ", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 800839e:	4b68      	ldr	r3, [pc, #416]	; (8008540 <Unlock+0x274>)
 80083a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083a4:	9202      	str	r2, [sp, #8]
 80083a6:	221f      	movs	r2, #31
 80083a8:	9201      	str	r2, [sp, #4]
 80083aa:	685a      	ldr	r2, [r3, #4]
 80083ac:	9200      	str	r2, [sp, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a69      	ldr	r2, [pc, #420]	; (8008558 <Unlock+0x28c>)
 80083b2:	212d      	movs	r1, #45	; 0x2d
 80083b4:	2000      	movs	r0, #0
 80083b6:	f001 fd1b 	bl	8009df0 <ST7735_DrawString>
	delay_ms(1000);
 80083ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80083be:	f7fd fc2b 	bl	8005c18 <delay_ms>
	ST7735_DrawString(0, 45, "4 SECONDS LEFT     TO PASS ", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 80083c2:	4b5f      	ldr	r3, [pc, #380]	; (8008540 <Unlock+0x274>)
 80083c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083c8:	9202      	str	r2, [sp, #8]
 80083ca:	221f      	movs	r2, #31
 80083cc:	9201      	str	r2, [sp, #4]
 80083ce:	685a      	ldr	r2, [r3, #4]
 80083d0:	9200      	str	r2, [sp, #0]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a61      	ldr	r2, [pc, #388]	; (800855c <Unlock+0x290>)
 80083d6:	212d      	movs	r1, #45	; 0x2d
 80083d8:	2000      	movs	r0, #0
 80083da:	f001 fd09 	bl	8009df0 <ST7735_DrawString>
	delay_ms(1000);
 80083de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80083e2:	f7fd fc19 	bl	8005c18 <delay_ms>
	ST7735_FillScreen(ST7735_CYAN);
 80083e6:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80083ea:	f001 fe19 	bl	800a020 <ST7735_FillScreen>
	ST7735_DrawString(0, 45, "3 SECONDS LEFT   TO PASS!!", Font_11x18, ST7735_WHITE, ST7735_CYAN);
 80083ee:	4b54      	ldr	r3, [pc, #336]	; (8008540 <Unlock+0x274>)
 80083f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80083f4:	9202      	str	r2, [sp, #8]
 80083f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083fa:	9201      	str	r2, [sp, #4]
 80083fc:	685a      	ldr	r2, [r3, #4]
 80083fe:	9200      	str	r2, [sp, #0]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a57      	ldr	r2, [pc, #348]	; (8008560 <Unlock+0x294>)
 8008404:	212d      	movs	r1, #45	; 0x2d
 8008406:	2000      	movs	r0, #0
 8008408:	f001 fcf2 	bl	8009df0 <ST7735_DrawString>
	delay_ms(500);
 800840c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008410:	f7fd fc02 	bl	8005c18 <delay_ms>
	ST7735_FillScreen(ST7735_WHITE);
 8008414:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008418:	f001 fe02 	bl	800a020 <ST7735_FillScreen>
	ST7735_DrawString(0, 45, "3 SECONDS LEFT   TO PASS!!", Font_11x18, ST7735_CYAN, ST7735_WHITE);
 800841c:	4b48      	ldr	r3, [pc, #288]	; (8008540 <Unlock+0x274>)
 800841e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008422:	9202      	str	r2, [sp, #8]
 8008424:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008428:	9201      	str	r2, [sp, #4]
 800842a:	685a      	ldr	r2, [r3, #4]
 800842c:	9200      	str	r2, [sp, #0]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a4b      	ldr	r2, [pc, #300]	; (8008560 <Unlock+0x294>)
 8008432:	212d      	movs	r1, #45	; 0x2d
 8008434:	2000      	movs	r0, #0
 8008436:	f001 fcdb 	bl	8009df0 <ST7735_DrawString>
	delay_ms(500);
 800843a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800843e:	f7fd fbeb 	bl	8005c18 <delay_ms>
	ST7735_FillScreen(ST7735_GREEN);
 8008442:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8008446:	f001 fdeb 	bl	800a020 <ST7735_FillScreen>
	ST7735_DrawString(0, 45, "2 SECONDS LEFT   TO PASS!!", Font_11x18, ST7735_WHITE, ST7735_GREEN);
 800844a:	4b3d      	ldr	r3, [pc, #244]	; (8008540 <Unlock+0x274>)
 800844c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8008450:	9202      	str	r2, [sp, #8]
 8008452:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008456:	9201      	str	r2, [sp, #4]
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	9200      	str	r2, [sp, #0]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a41      	ldr	r2, [pc, #260]	; (8008564 <Unlock+0x298>)
 8008460:	212d      	movs	r1, #45	; 0x2d
 8008462:	2000      	movs	r0, #0
 8008464:	f001 fcc4 	bl	8009df0 <ST7735_DrawString>
	delay_ms(500);
 8008468:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800846c:	f7fd fbd4 	bl	8005c18 <delay_ms>
	ST7735_FillScreen(ST7735_WHITE);
 8008470:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008474:	f001 fdd4 	bl	800a020 <ST7735_FillScreen>
	ST7735_DrawString(0, 45, "2 SECONDS LEFT   TO PASS!!", Font_11x18, ST7735_GREEN, ST7735_WHITE);
 8008478:	4b31      	ldr	r3, [pc, #196]	; (8008540 <Unlock+0x274>)
 800847a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800847e:	9202      	str	r2, [sp, #8]
 8008480:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8008484:	9201      	str	r2, [sp, #4]
 8008486:	685a      	ldr	r2, [r3, #4]
 8008488:	9200      	str	r2, [sp, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a35      	ldr	r2, [pc, #212]	; (8008564 <Unlock+0x298>)
 800848e:	212d      	movs	r1, #45	; 0x2d
 8008490:	2000      	movs	r0, #0
 8008492:	f001 fcad 	bl	8009df0 <ST7735_DrawString>
	delay_ms(500);
 8008496:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800849a:	f7fd fbbd 	bl	8005c18 <delay_ms>
	ST7735_FillScreen(ST7735_MAGENTA);
 800849e:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80084a2:	f001 fdbd 	bl	800a020 <ST7735_FillScreen>
	ST7735_DrawString(0, 45, "1 SECOND LEFT    TO PASS! ", Font_11x18, ST7735_WHITE, ST7735_MAGENTA);
 80084a6:	4b26      	ldr	r3, [pc, #152]	; (8008540 <Unlock+0x274>)
 80084a8:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80084ac:	9202      	str	r2, [sp, #8]
 80084ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084b2:	9201      	str	r2, [sp, #4]
 80084b4:	685a      	ldr	r2, [r3, #4]
 80084b6:	9200      	str	r2, [sp, #0]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a2b      	ldr	r2, [pc, #172]	; (8008568 <Unlock+0x29c>)
 80084bc:	212d      	movs	r1, #45	; 0x2d
 80084be:	2000      	movs	r0, #0
 80084c0:	f001 fc96 	bl	8009df0 <ST7735_DrawString>
	delay_ms(500);
 80084c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80084c8:	f7fd fba6 	bl	8005c18 <delay_ms>
	ST7735_FillScreen(ST7735_WHITE);
 80084cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80084d0:	f001 fda6 	bl	800a020 <ST7735_FillScreen>
	ST7735_DrawString(0, 45, "1 SECONDS LEFT   TO PASS! ", Font_11x18, ST7735_MAGENTA, ST7735_WHITE);
 80084d4:	4b1a      	ldr	r3, [pc, #104]	; (8008540 <Unlock+0x274>)
 80084d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084da:	9202      	str	r2, [sp, #8]
 80084dc:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80084e0:	9201      	str	r2, [sp, #4]
 80084e2:	685a      	ldr	r2, [r3, #4]
 80084e4:	9200      	str	r2, [sp, #0]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a20      	ldr	r2, [pc, #128]	; (800856c <Unlock+0x2a0>)
 80084ea:	212d      	movs	r1, #45	; 0x2d
 80084ec:	2000      	movs	r0, #0
 80084ee:	f001 fc7f 	bl	8009df0 <ST7735_DrawString>
	delay_ms(1000);
 80084f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80084f6:	f7fd fb8f 	bl	8005c18 <delay_ms>
	ST7735_FillScreen(ST7735_WHITE);
 80084fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80084fe:	f001 fd8f 	bl	800a020 <ST7735_FillScreen>
	BuzzerAlert(BUZZER_ACCESS_GRANTED_SOUND);
 8008502:	2001      	movs	r0, #1
 8008504:	f7fe f914 	bl	8006730 <BuzzerAlert>
	//lock relay
	GPIO_WritePin(GPIOD,GPIO_PIN_3, SET);
 8008508:	2201      	movs	r2, #1
 800850a:	2103      	movs	r1, #3
 800850c:	480b      	ldr	r0, [pc, #44]	; (800853c <Unlock+0x270>)
 800850e:	f7f9 f8d0 	bl	80016b2 <GPIO_WritePin>
	WelcomeScreen();
 8008512:	f7fe fa83 	bl	8006a1c <WelcomeScreen>
	SystemState = SYS_STATE_BEGIN;
 8008516:	4b16      	ldr	r3, [pc, #88]	; (8008570 <Unlock+0x2a4>)
 8008518:	2200      	movs	r2, #0
 800851a:	701a      	strb	r2, [r3, #0]
	input_password[0] = '\0';
 800851c:	4b15      	ldr	r3, [pc, #84]	; (8008574 <Unlock+0x2a8>)
 800851e:	2200      	movs	r2, #0
 8008520:	701a      	strb	r2, [r3, #0]
	input_password[1] = '\0';
 8008522:	4b14      	ldr	r3, [pc, #80]	; (8008574 <Unlock+0x2a8>)
 8008524:	2200      	movs	r2, #0
 8008526:	705a      	strb	r2, [r3, #1]
	input_password[2] = '\0';
 8008528:	4b12      	ldr	r3, [pc, #72]	; (8008574 <Unlock+0x2a8>)
 800852a:	2200      	movs	r2, #0
 800852c:	709a      	strb	r2, [r3, #2]
	input_password[3] = '\0';
 800852e:	4b11      	ldr	r3, [pc, #68]	; (8008574 <Unlock+0x2a8>)
 8008530:	2200      	movs	r2, #0
 8008532:	70da      	strb	r2, [r3, #3]
	return;
 8008534:	bf00      	nop
}
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	40020c00 	.word	0x40020c00
 8008540:	20000044 	.word	0x20000044
 8008544:	0800ddf4 	.word	0x0800ddf4
 8008548:	0800de10 	.word	0x0800de10
 800854c:	0800de2c 	.word	0x0800de2c
 8008550:	0800de48 	.word	0x0800de48
 8008554:	0800de64 	.word	0x0800de64
 8008558:	0800de80 	.word	0x0800de80
 800855c:	0800de9c 	.word	0x0800de9c
 8008560:	0800deb8 	.word	0x0800deb8
 8008564:	0800ded4 	.word	0x0800ded4
 8008568:	0800def0 	.word	0x0800def0
 800856c:	0800df0c 	.word	0x0800df0c
 8008570:	20000711 	.word	0x20000711
 8008574:	2000072c 	.word	0x2000072c

08008578 <EmptyDB>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void EmptyDB(void)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b086      	sub	sp, #24
 800857c:	af04      	add	r7, sp, #16
	uint8_t empty_status = R308_Empty();
 800857e:	f000 fe39 	bl	80091f4 <R308_Empty>
 8008582:	4603      	mov	r3, r0
 8008584:	71fb      	strb	r3, [r7, #7]
	if(empty_status == 0)
 8008586:	79fb      	ldrb	r3, [r7, #7]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d119      	bne.n	80085c0 <EmptyDB+0x48>
	{
		ST7735_FillScreen(ST7735_BLACK);
 800858c:	2000      	movs	r0, #0
 800858e:	f001 fd47 	bl	800a020 <ST7735_FillScreen>
		ST7735_DrawString(35, 40, "DATABASE        EPMTIED", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 8008592:	4b19      	ldr	r3, [pc, #100]	; (80085f8 <EmptyDB+0x80>)
 8008594:	2200      	movs	r2, #0
 8008596:	9202      	str	r2, [sp, #8]
 8008598:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800859c:	9201      	str	r2, [sp, #4]
 800859e:	685a      	ldr	r2, [r3, #4]
 80085a0:	9200      	str	r2, [sp, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a15      	ldr	r2, [pc, #84]	; (80085fc <EmptyDB+0x84>)
 80085a6:	2128      	movs	r1, #40	; 0x28
 80085a8:	2023      	movs	r0, #35	; 0x23
 80085aa:	f001 fc21 	bl	8009df0 <ST7735_DrawString>
		delay_ms(1000);
 80085ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80085b2:	f7fd fb31 	bl	8005c18 <delay_ms>
		EnrollmentAttempt();
 80085b6:	f7fd feb9 	bl	800632c <EnrollmentAttempt>
		DatabaseOperationsMenu();
 80085ba:	f7ff f921 	bl	8007800 <DatabaseOperationsMenu>
		ST7735_FillScreen(ST7735_BLACK);
		ST7735_DrawString(25, 50, "ERROR", Font_11x18, ST7735_RED, ST7735_BLACK);
		delay_ms(500);
		AdminSettingsMenu();
	}
}
 80085be:	e016      	b.n	80085ee <EmptyDB+0x76>
		ST7735_FillScreen(ST7735_BLACK);
 80085c0:	2000      	movs	r0, #0
 80085c2:	f001 fd2d 	bl	800a020 <ST7735_FillScreen>
		ST7735_DrawString(25, 50, "ERROR", Font_11x18, ST7735_RED, ST7735_BLACK);
 80085c6:	4b0c      	ldr	r3, [pc, #48]	; (80085f8 <EmptyDB+0x80>)
 80085c8:	2200      	movs	r2, #0
 80085ca:	9202      	str	r2, [sp, #8]
 80085cc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80085d0:	9201      	str	r2, [sp, #4]
 80085d2:	685a      	ldr	r2, [r3, #4]
 80085d4:	9200      	str	r2, [sp, #0]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a09      	ldr	r2, [pc, #36]	; (8008600 <EmptyDB+0x88>)
 80085da:	2132      	movs	r1, #50	; 0x32
 80085dc:	2019      	movs	r0, #25
 80085de:	f001 fc07 	bl	8009df0 <ST7735_DrawString>
		delay_ms(500);
 80085e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80085e6:	f7fd fb17 	bl	8005c18 <delay_ms>
		AdminSettingsMenu();
 80085ea:	f7ff fd69 	bl	80080c0 <AdminSettingsMenu>
}
 80085ee:	bf00      	nop
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	20000044 	.word	0x20000044
 80085fc:	0800df28 	.word	0x0800df28
 8008600:	0800df40 	.word	0x0800df40

08008604 <Delete_ID>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void Delete_ID(void)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b08a      	sub	sp, #40	; 0x28
 8008608:	af04      	add	r7, sp, #16
	int digit_number = 0;
 800860a:	2300      	movs	r3, #0
 800860c:	617b      	str	r3, [r7, #20]
	int save = 0;
 800860e:	2300      	movs	r3, #0
 8008610:	613b      	str	r3, [r7, #16]
	int16_t fingerprintID = 0;
 8008612:	2300      	movs	r3, #0
 8008614:	80fb      	strh	r3, [r7, #6]
	ST7735_FillScreen(ST7735_BLACK);
 8008616:	2000      	movs	r0, #0
 8008618:	f001 fd02 	bl	800a020 <ST7735_FillScreen>
	ST7735_DrawString(0, 0, "PLEASE ENTER ID TO DELETE (PRESS 'D' TO SAVE)", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800861c:	4b6e      	ldr	r3, [pc, #440]	; (80087d8 <Delete_ID+0x1d4>)
 800861e:	2200      	movs	r2, #0
 8008620:	9202      	str	r2, [sp, #8]
 8008622:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8008626:	9201      	str	r2, [sp, #4]
 8008628:	685a      	ldr	r2, [r3, #4]
 800862a:	9200      	str	r2, [sp, #0]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a6b      	ldr	r2, [pc, #428]	; (80087dc <Delete_ID+0x1d8>)
 8008630:	2100      	movs	r1, #0
 8008632:	2000      	movs	r0, #0
 8008634:	f001 fbdc 	bl	8009df0 <ST7735_DrawString>

	while ((digit_number < 3) && (SET != save))
 8008638:	e097      	b.n	800876a <Delete_ID+0x166>
	{
		key = KEYPAD_NOT_PRESSED;
 800863a:	4b69      	ldr	r3, [pc, #420]	; (80087e0 <Delete_ID+0x1dc>)
 800863c:	2200      	movs	r2, #0
 800863e:	701a      	strb	r2, [r3, #0]
		key = Keypad4x4_Read();
 8008640:	f000 fa4a 	bl	8008ad8 <Keypad4x4_Read>
 8008644:	4603      	mov	r3, r0
 8008646:	461a      	mov	r2, r3
 8008648:	4b65      	ldr	r3, [pc, #404]	; (80087e0 <Delete_ID+0x1dc>)
 800864a:	701a      	strb	r2, [r3, #0]

		if (KEYPAD_NOT_PRESSED != key)
 800864c:	4b64      	ldr	r3, [pc, #400]	; (80087e0 <Delete_ID+0x1dc>)
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 808a 	beq.w	800876a <Delete_ID+0x166>
		{
			if ((key >= '0' && key <= '9') || ('D' == key))
 8008656:	4b62      	ldr	r3, [pc, #392]	; (80087e0 <Delete_ID+0x1dc>)
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	2b2f      	cmp	r3, #47	; 0x2f
 800865c:	d903      	bls.n	8008666 <Delete_ID+0x62>
 800865e:	4b60      	ldr	r3, [pc, #384]	; (80087e0 <Delete_ID+0x1dc>)
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	2b39      	cmp	r3, #57	; 0x39
 8008664:	d903      	bls.n	800866e <Delete_ID+0x6a>
 8008666:	4b5e      	ldr	r3, [pc, #376]	; (80087e0 <Delete_ID+0x1dc>)
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	2b44      	cmp	r3, #68	; 0x44
 800866c:	d14d      	bne.n	800870a <Delete_ID+0x106>
			{
				keypad_input[digit_number] = key;
 800866e:	4b5c      	ldr	r3, [pc, #368]	; (80087e0 <Delete_ID+0x1dc>)
 8008670:	7819      	ldrb	r1, [r3, #0]
 8008672:	4a5c      	ldr	r2, [pc, #368]	; (80087e4 <Delete_ID+0x1e0>)
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	4413      	add	r3, r2
 8008678:	460a      	mov	r2, r1
 800867a:	701a      	strb	r2, [r3, #0]

				char temp_string[2];
				temp_string[0] = key;
 800867c:	4b58      	ldr	r3, [pc, #352]	; (80087e0 <Delete_ID+0x1dc>)
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	713b      	strb	r3, [r7, #4]
				temp_string[1] = '\0';
 8008682:	2300      	movs	r3, #0
 8008684:	717b      	strb	r3, [r7, #5]

				ST7735_DrawString(30 + digit_number * 27.5, 100, temp_string, Font_16x26, ST7735_GREEN, ST7735_BLACK);
 8008686:	6978      	ldr	r0, [r7, #20]
 8008688:	f7f7 ff4c 	bl	8000524 <__aeabi_i2d>
 800868c:	f04f 0200 	mov.w	r2, #0
 8008690:	4b55      	ldr	r3, [pc, #340]	; (80087e8 <Delete_ID+0x1e4>)
 8008692:	f7f7 ffb1 	bl	80005f8 <__aeabi_dmul>
 8008696:	4602      	mov	r2, r0
 8008698:	460b      	mov	r3, r1
 800869a:	4610      	mov	r0, r2
 800869c:	4619      	mov	r1, r3
 800869e:	f04f 0200 	mov.w	r2, #0
 80086a2:	4b52      	ldr	r3, [pc, #328]	; (80087ec <Delete_ID+0x1e8>)
 80086a4:	f7f7 fdf2 	bl	800028c <__adddf3>
 80086a8:	4602      	mov	r2, r0
 80086aa:	460b      	mov	r3, r1
 80086ac:	4610      	mov	r0, r2
 80086ae:	4619      	mov	r1, r3
 80086b0:	f7f8 fa7a 	bl	8000ba8 <__aeabi_d2uiz>
 80086b4:	4603      	mov	r3, r0
 80086b6:	b298      	uxth	r0, r3
 80086b8:	4b4d      	ldr	r3, [pc, #308]	; (80087f0 <Delete_ID+0x1ec>)
 80086ba:	1d39      	adds	r1, r7, #4
 80086bc:	2200      	movs	r2, #0
 80086be:	9202      	str	r2, [sp, #8]
 80086c0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80086c4:	9201      	str	r2, [sp, #4]
 80086c6:	685a      	ldr	r2, [r3, #4]
 80086c8:	9200      	str	r2, [sp, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	460a      	mov	r2, r1
 80086ce:	2164      	movs	r1, #100	; 0x64
 80086d0:	f001 fb8e 	bl	8009df0 <ST7735_DrawString>
				delay_ms(70);
 80086d4:	2046      	movs	r0, #70	; 0x46
 80086d6:	f7fd fa9f 	bl	8005c18 <delay_ms>

				if (key >= '0' && key <= '9')
 80086da:	4b41      	ldr	r3, [pc, #260]	; (80087e0 <Delete_ID+0x1dc>)
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	2b2f      	cmp	r3, #47	; 0x2f
 80086e0:	d907      	bls.n	80086f2 <Delete_ID+0xee>
 80086e2:	4b3f      	ldr	r3, [pc, #252]	; (80087e0 <Delete_ID+0x1dc>)
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	2b39      	cmp	r3, #57	; 0x39
 80086e8:	d803      	bhi.n	80086f2 <Delete_ID+0xee>
				{
					digit_number++;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	3301      	adds	r3, #1
 80086ee:	617b      	str	r3, [r7, #20]
 80086f0:	e00a      	b.n	8008708 <Delete_ID+0x104>
				}
				else if ('D' == key)
 80086f2:	4b3b      	ldr	r3, [pc, #236]	; (80087e0 <Delete_ID+0x1dc>)
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	2b44      	cmp	r3, #68	; 0x44
 80086f8:	d137      	bne.n	800876a <Delete_ID+0x166>
				{
					save++;
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	3301      	adds	r3, #1
 80086fe:	613b      	str	r3, [r7, #16]
					delay_ms(300);
 8008700:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008704:	f7fd fa88 	bl	8005c18 <delay_ms>
			{
 8008708:	e02f      	b.n	800876a <Delete_ID+0x166>
				}
			}
			else if (('C' == key) && (digit_number > 0))
 800870a:	4b35      	ldr	r3, [pc, #212]	; (80087e0 <Delete_ID+0x1dc>)
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	2b43      	cmp	r3, #67	; 0x43
 8008710:	d12b      	bne.n	800876a <Delete_ID+0x166>
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	2b00      	cmp	r3, #0
 8008716:	dd28      	ble.n	800876a <Delete_ID+0x166>
			{
				ST7735_DrawString(30 + digit_number * 27.5, 100, " ", Font_16x26, ST7735_GREEN, ST7735_BLACK);
 8008718:	6978      	ldr	r0, [r7, #20]
 800871a:	f7f7 ff03 	bl	8000524 <__aeabi_i2d>
 800871e:	f04f 0200 	mov.w	r2, #0
 8008722:	4b31      	ldr	r3, [pc, #196]	; (80087e8 <Delete_ID+0x1e4>)
 8008724:	f7f7 ff68 	bl	80005f8 <__aeabi_dmul>
 8008728:	4602      	mov	r2, r0
 800872a:	460b      	mov	r3, r1
 800872c:	4610      	mov	r0, r2
 800872e:	4619      	mov	r1, r3
 8008730:	f04f 0200 	mov.w	r2, #0
 8008734:	4b2d      	ldr	r3, [pc, #180]	; (80087ec <Delete_ID+0x1e8>)
 8008736:	f7f7 fda9 	bl	800028c <__adddf3>
 800873a:	4602      	mov	r2, r0
 800873c:	460b      	mov	r3, r1
 800873e:	4610      	mov	r0, r2
 8008740:	4619      	mov	r1, r3
 8008742:	f7f8 fa31 	bl	8000ba8 <__aeabi_d2uiz>
 8008746:	4603      	mov	r3, r0
 8008748:	b298      	uxth	r0, r3
 800874a:	4b29      	ldr	r3, [pc, #164]	; (80087f0 <Delete_ID+0x1ec>)
 800874c:	2200      	movs	r2, #0
 800874e:	9202      	str	r2, [sp, #8]
 8008750:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8008754:	9201      	str	r2, [sp, #4]
 8008756:	685a      	ldr	r2, [r3, #4]
 8008758:	9200      	str	r2, [sp, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a25      	ldr	r2, [pc, #148]	; (80087f4 <Delete_ID+0x1f0>)
 800875e:	2164      	movs	r1, #100	; 0x64
 8008760:	f001 fb46 	bl	8009df0 <ST7735_DrawString>
				digit_number--;
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	3b01      	subs	r3, #1
 8008768:	617b      	str	r3, [r7, #20]
	while ((digit_number < 3) && (SET != save))
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	2b02      	cmp	r3, #2
 800876e:	dc03      	bgt.n	8008778 <Delete_ID+0x174>
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	2b01      	cmp	r3, #1
 8008774:	f47f af61 	bne.w	800863a <Delete_ID+0x36>
			}
		}
	}

	if ((SET == save) && (digit_number > 0))
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d128      	bne.n	80087d0 <Delete_ID+0x1cc>
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	2b00      	cmp	r3, #0
 8008782:	dd25      	ble.n	80087d0 <Delete_ID+0x1cc>
	{
		int16_t id_to_delete = 0;
 8008784:	2300      	movs	r3, #0
 8008786:	81fb      	strh	r3, [r7, #14]
		for (int i = 0; i < digit_number; i++)
 8008788:	2300      	movs	r3, #0
 800878a:	60bb      	str	r3, [r7, #8]
 800878c:	e012      	b.n	80087b4 <Delete_ID+0x1b0>
		{
			id_to_delete = id_to_delete * 10 + (keypad_input[i] - '0');
 800878e:	89fb      	ldrh	r3, [r7, #14]
 8008790:	461a      	mov	r2, r3
 8008792:	0092      	lsls	r2, r2, #2
 8008794:	4413      	add	r3, r2
 8008796:	005b      	lsls	r3, r3, #1
 8008798:	b29a      	uxth	r2, r3
 800879a:	4912      	ldr	r1, [pc, #72]	; (80087e4 <Delete_ID+0x1e0>)
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	440b      	add	r3, r1
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	4413      	add	r3, r2
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	3b30      	subs	r3, #48	; 0x30
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	81fb      	strh	r3, [r7, #14]
		for (int i = 0; i < digit_number; i++)
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	3301      	adds	r3, #1
 80087b2:	60bb      	str	r3, [r7, #8]
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	dbe8      	blt.n	800878e <Delete_ID+0x18a>
		}

		fingerprintID = id_to_delete;
 80087bc:	89fb      	ldrh	r3, [r7, #14]
 80087be:	80fb      	strh	r3, [r7, #6]

		R308_DeletChar(fingerprintID, 1);
 80087c0:	88fb      	ldrh	r3, [r7, #6]
 80087c2:	2101      	movs	r1, #1
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 fdcf 	bl	8009368 <R308_DeletChar>

		SystemState = SYS_STATE_ADM_SCREEN;
 80087ca:	4b0b      	ldr	r3, [pc, #44]	; (80087f8 <Delete_ID+0x1f4>)
 80087cc:	2204      	movs	r2, #4
 80087ce:	701a      	strb	r2, [r3, #0]
	}
}
 80087d0:	bf00      	nop
 80087d2:	3718      	adds	r7, #24
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	2000003c 	.word	0x2000003c
 80087dc:	0800df48 	.word	0x0800df48
 80087e0:	20000710 	.word	0x20000710
 80087e4:	20000718 	.word	0x20000718
 80087e8:	403b8000 	.word	0x403b8000
 80087ec:	403e0000 	.word	0x403e0000
 80087f0:	2000004c 	.word	0x2000004c
 80087f4:	0800da84 	.word	0x0800da84
 80087f8:	20000711 	.word	0x20000711

080087fc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	4603      	mov	r3, r0
 8008804:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8008806:	4b0e      	ldr	r3, [pc, #56]	; (8008840 <ITM_SendChar+0x44>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a0d      	ldr	r2, [pc, #52]	; (8008840 <ITM_SendChar+0x44>)
 800880c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008810:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8008812:	4b0c      	ldr	r3, [pc, #48]	; (8008844 <ITM_SendChar+0x48>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a0b      	ldr	r2, [pc, #44]	; (8008844 <ITM_SendChar+0x48>)
 8008818:	f043 0301 	orr.w	r3, r3, #1
 800881c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800881e:	bf00      	nop
 8008820:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	2b00      	cmp	r3, #0
 800882c:	d0f8      	beq.n	8008820 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800882e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008832:	79fb      	ldrb	r3, [r7, #7]
 8008834:	6013      	str	r3, [r2, #0]
}
 8008836:	bf00      	nop
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	bc80      	pop	{r7}
 800883e:	4770      	bx	lr
 8008840:	e000edfc 	.word	0xe000edfc
 8008844:	e0000e00 	.word	0xe0000e00

08008848 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008848:	b480      	push	{r7}
 800884a:	af00      	add	r7, sp, #0
  return 1;
 800884c:	2301      	movs	r3, #1
}
 800884e:	4618      	mov	r0, r3
 8008850:	46bd      	mov	sp, r7
 8008852:	bc80      	pop	{r7}
 8008854:	4770      	bx	lr

08008856 <_kill>:

int _kill(int pid, int sig)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b082      	sub	sp, #8
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008860:	f002 fe98 	bl	800b594 <__errno>
 8008864:	4603      	mov	r3, r0
 8008866:	2216      	movs	r2, #22
 8008868:	601a      	str	r2, [r3, #0]
  return -1;
 800886a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800886e:	4618      	mov	r0, r3
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <_exit>:

void _exit (int status)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b082      	sub	sp, #8
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800887e:	f04f 31ff 	mov.w	r1, #4294967295
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7ff ffe7 	bl	8008856 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008888:	e7fe      	b.n	8008888 <_exit+0x12>

0800888a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b086      	sub	sp, #24
 800888e:	af00      	add	r7, sp, #0
 8008890:	60f8      	str	r0, [r7, #12]
 8008892:	60b9      	str	r1, [r7, #8]
 8008894:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008896:	2300      	movs	r3, #0
 8008898:	617b      	str	r3, [r7, #20]
 800889a:	e00a      	b.n	80088b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800889c:	f3af 8000 	nop.w
 80088a0:	4601      	mov	r1, r0
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	1c5a      	adds	r2, r3, #1
 80088a6:	60ba      	str	r2, [r7, #8]
 80088a8:	b2ca      	uxtb	r2, r1
 80088aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	3301      	adds	r3, #1
 80088b0:	617b      	str	r3, [r7, #20]
 80088b2:	697a      	ldr	r2, [r7, #20]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	dbf0      	blt.n	800889c <_read+0x12>
  }

  return len;
 80088ba:	687b      	ldr	r3, [r7, #4]
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3718      	adds	r7, #24
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80088d0:	2300      	movs	r3, #0
 80088d2:	617b      	str	r3, [r7, #20]
 80088d4:	e009      	b.n	80088ea <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	1c5a      	adds	r2, r3, #1
 80088da:	60ba      	str	r2, [r7, #8]
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	4618      	mov	r0, r3
 80088e0:	f7ff ff8c 	bl	80087fc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	3301      	adds	r3, #1
 80088e8:	617b      	str	r3, [r7, #20]
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	dbf1      	blt.n	80088d6 <_write+0x12>
//    __io_putchar(*ptr++);
  }
  return len;
 80088f2:	687b      	ldr	r3, [r7, #4]
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3718      	adds	r7, #24
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <_close>:

int _close(int file)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008904:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008908:	4618      	mov	r0, r3
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	bc80      	pop	{r7}
 8008910:	4770      	bx	lr

08008912 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008912:	b480      	push	{r7}
 8008914:	b083      	sub	sp, #12
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
 800891a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008922:	605a      	str	r2, [r3, #4]
  return 0;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	370c      	adds	r7, #12
 800892a:	46bd      	mov	sp, r7
 800892c:	bc80      	pop	{r7}
 800892e:	4770      	bx	lr

08008930 <_isatty>:

int _isatty(int file)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008938:	2301      	movs	r3, #1
}
 800893a:	4618      	mov	r0, r3
 800893c:	370c      	adds	r7, #12
 800893e:	46bd      	mov	sp, r7
 8008940:	bc80      	pop	{r7}
 8008942:	4770      	bx	lr

08008944 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3714      	adds	r7, #20
 8008956:	46bd      	mov	sp, r7
 8008958:	bc80      	pop	{r7}
 800895a:	4770      	bx	lr

0800895c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008964:	4a14      	ldr	r2, [pc, #80]	; (80089b8 <_sbrk+0x5c>)
 8008966:	4b15      	ldr	r3, [pc, #84]	; (80089bc <_sbrk+0x60>)
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008970:	4b13      	ldr	r3, [pc, #76]	; (80089c0 <_sbrk+0x64>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d102      	bne.n	800897e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008978:	4b11      	ldr	r3, [pc, #68]	; (80089c0 <_sbrk+0x64>)
 800897a:	4a12      	ldr	r2, [pc, #72]	; (80089c4 <_sbrk+0x68>)
 800897c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800897e:	4b10      	ldr	r3, [pc, #64]	; (80089c0 <_sbrk+0x64>)
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4413      	add	r3, r2
 8008986:	693a      	ldr	r2, [r7, #16]
 8008988:	429a      	cmp	r2, r3
 800898a:	d207      	bcs.n	800899c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800898c:	f002 fe02 	bl	800b594 <__errno>
 8008990:	4603      	mov	r3, r0
 8008992:	220c      	movs	r2, #12
 8008994:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008996:	f04f 33ff 	mov.w	r3, #4294967295
 800899a:	e009      	b.n	80089b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800899c:	4b08      	ldr	r3, [pc, #32]	; (80089c0 <_sbrk+0x64>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80089a2:	4b07      	ldr	r3, [pc, #28]	; (80089c0 <_sbrk+0x64>)
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4413      	add	r3, r2
 80089aa:	4a05      	ldr	r2, [pc, #20]	; (80089c0 <_sbrk+0x64>)
 80089ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80089ae:	68fb      	ldr	r3, [r7, #12]
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3718      	adds	r7, #24
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	20020000 	.word	0x20020000
 80089bc:	00000400 	.word	0x00000400
 80089c0:	20000734 	.word	0x20000734
 80089c4:	20000888 	.word	0x20000888

080089c8 <Reset_Handler>:
 80089c8:	480d      	ldr	r0, [pc, #52]	; (8008a00 <LoopForever+0x2>)
 80089ca:	4685      	mov	sp, r0
 80089cc:	f3af 8000 	nop.w
 80089d0:	480c      	ldr	r0, [pc, #48]	; (8008a04 <LoopForever+0x6>)
 80089d2:	490d      	ldr	r1, [pc, #52]	; (8008a08 <LoopForever+0xa>)
 80089d4:	4a0d      	ldr	r2, [pc, #52]	; (8008a0c <LoopForever+0xe>)
 80089d6:	2300      	movs	r3, #0
 80089d8:	e002      	b.n	80089e0 <LoopCopyDataInit>

080089da <CopyDataInit>:
 80089da:	58d4      	ldr	r4, [r2, r3]
 80089dc:	50c4      	str	r4, [r0, r3]
 80089de:	3304      	adds	r3, #4

080089e0 <LoopCopyDataInit>:
 80089e0:	18c4      	adds	r4, r0, r3
 80089e2:	428c      	cmp	r4, r1
 80089e4:	d3f9      	bcc.n	80089da <CopyDataInit>
 80089e6:	4a0a      	ldr	r2, [pc, #40]	; (8008a10 <LoopForever+0x12>)
 80089e8:	4c0a      	ldr	r4, [pc, #40]	; (8008a14 <LoopForever+0x16>)
 80089ea:	2300      	movs	r3, #0
 80089ec:	e001      	b.n	80089f2 <LoopFillZerobss>

080089ee <FillZerobss>:
 80089ee:	6013      	str	r3, [r2, #0]
 80089f0:	3204      	adds	r2, #4

080089f2 <LoopFillZerobss>:
 80089f2:	42a2      	cmp	r2, r4
 80089f4:	d3fb      	bcc.n	80089ee <FillZerobss>
 80089f6:	f002 fdd3 	bl	800b5a0 <__libc_init_array>
 80089fa:	f7fd f9d5 	bl	8005da8 <main>

080089fe <LoopForever>:
 80089fe:	e7fe      	b.n	80089fe <LoopForever>
 8008a00:	20020000 	.word	0x20020000
 8008a04:	20000000 	.word	0x20000000
 8008a08:	2000021c 	.word	0x2000021c
 8008a0c:	08016e24 	.word	0x08016e24
 8008a10:	2000021c 	.word	0x2000021c
 8008a14:	20000888 	.word	0x20000888

08008a18 <ADC_IRQHandler>:
 8008a18:	e7fe      	b.n	8008a18 <ADC_IRQHandler>
	...

08008a1c <Keypad4x4_Init>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void Keypad4x4_Init(void)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
	GPIO_Handle_t Keypad4x4h = {0};
 8008a22:	463b      	mov	r3, r7
 8008a24:	2200      	movs	r2, #0
 8008a26:	601a      	str	r2, [r3, #0]
 8008a28:	605a      	str	r2, [r3, #4]
 8008a2a:	609a      	str	r2, [r3, #8]
 8008a2c:	60da      	str	r2, [r3, #12]

	Keypad4x4h.pGPIOx = KEYPAD_ROW_1_PORT;
 8008a2e:	4b28      	ldr	r3, [pc, #160]	; (8008ad0 <Keypad4x4_Init+0xb4>)
 8008a30:	603b      	str	r3, [r7, #0]
	Keypad4x4h.GPIO_Config.PinNumber = KEYPAD_ROW_1_PIN;
 8008a32:	230f      	movs	r3, #15
 8008a34:	607b      	str	r3, [r7, #4]
	Keypad4x4h.GPIO_Config.PinMode = GPIO_MODE_OUTPUT;
 8008a36:	2301      	movs	r3, #1
 8008a38:	723b      	strb	r3, [r7, #8]
	Keypad4x4h.GPIO_Config.PinOPType = GPIO_OUTPUT_PP;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	72fb      	strb	r3, [r7, #11]
	Keypad4x4h.GPIO_Config.PinPuPdControl = GPIO_PIN_NO_PUPD;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	72bb      	strb	r3, [r7, #10]
	Keypad4x4h.GPIO_Config.PinSpeed = GPIO_SPEED_LOW;
 8008a42:	2300      	movs	r3, #0
 8008a44:	727b      	strb	r3, [r7, #9]
	GPIO_Init(&Keypad4x4h);
 8008a46:	463b      	mov	r3, r7
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7f8 fbf5 	bl	8001238 <GPIO_Init>

	Keypad4x4h.pGPIOx = KEYPAD_ROW_2_PORT;
 8008a4e:	4b20      	ldr	r3, [pc, #128]	; (8008ad0 <Keypad4x4_Init+0xb4>)
 8008a50:	603b      	str	r3, [r7, #0]
	Keypad4x4h.GPIO_Config.PinNumber = KEYPAD_ROW_2_PIN;
 8008a52:	230d      	movs	r3, #13
 8008a54:	607b      	str	r3, [r7, #4]
	GPIO_Init(&Keypad4x4h);
 8008a56:	463b      	mov	r3, r7
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7f8 fbed 	bl	8001238 <GPIO_Init>

	Keypad4x4h.pGPIOx = KEYPAD_ROW_3_PORT;
 8008a5e:	4b1c      	ldr	r3, [pc, #112]	; (8008ad0 <Keypad4x4_Init+0xb4>)
 8008a60:	603b      	str	r3, [r7, #0]
	Keypad4x4h.GPIO_Config.PinNumber = KEYPAD_ROW_3_PIN;
 8008a62:	230b      	movs	r3, #11
 8008a64:	607b      	str	r3, [r7, #4]
	GPIO_Init(&Keypad4x4h);
 8008a66:	463b      	mov	r3, r7
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7f8 fbe5 	bl	8001238 <GPIO_Init>

	Keypad4x4h.pGPIOx = KEYPAD_ROW_4_PORT;
 8008a6e:	4b19      	ldr	r3, [pc, #100]	; (8008ad4 <Keypad4x4_Init+0xb8>)
 8008a70:	603b      	str	r3, [r7, #0]
	Keypad4x4h.GPIO_Config.PinNumber = KEYPAD_ROW_4_PIN;
 8008a72:	230f      	movs	r3, #15
 8008a74:	607b      	str	r3, [r7, #4]
	GPIO_Init(&Keypad4x4h);
 8008a76:	463b      	mov	r3, r7
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7f8 fbdd 	bl	8001238 <GPIO_Init>

	Keypad4x4h.pGPIOx = KEYPAD_COLUMN_1_PORT;
 8008a7e:	4b15      	ldr	r3, [pc, #84]	; (8008ad4 <Keypad4x4_Init+0xb8>)
 8008a80:	603b      	str	r3, [r7, #0]
	Keypad4x4h.GPIO_Config.PinNumber = KEYPAD_COLUMN_1_PIN;
 8008a82:	230d      	movs	r3, #13
 8008a84:	607b      	str	r3, [r7, #4]
	Keypad4x4h.GPIO_Config.PinMode = GPIO_MODE_INPUT;
 8008a86:	2300      	movs	r3, #0
 8008a88:	723b      	strb	r3, [r7, #8]
	Keypad4x4h.GPIO_Config.PinPuPdControl = GPIO_PIN_PULL_UP;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(&Keypad4x4h);
 8008a8e:	463b      	mov	r3, r7
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7f8 fbd1 	bl	8001238 <GPIO_Init>

	Keypad4x4h.pGPIOx = KEYPAD_COLUMN_2_PORT;
 8008a96:	4b0f      	ldr	r3, [pc, #60]	; (8008ad4 <Keypad4x4_Init+0xb8>)
 8008a98:	603b      	str	r3, [r7, #0]
	Keypad4x4h.GPIO_Config.PinNumber = KEYPAD_COLUMN_2_PIN;
 8008a9a:	230b      	movs	r3, #11
 8008a9c:	607b      	str	r3, [r7, #4]
	GPIO_Init(&Keypad4x4h);
 8008a9e:	463b      	mov	r3, r7
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7f8 fbc9 	bl	8001238 <GPIO_Init>

	Keypad4x4h.pGPIOx = KEYPAD_COLUMN_3_PORT;
 8008aa6:	4b0b      	ldr	r3, [pc, #44]	; (8008ad4 <Keypad4x4_Init+0xb8>)
 8008aa8:	603b      	str	r3, [r7, #0]
	Keypad4x4h.GPIO_Config.PinNumber = KEYPAD_COLUMN_3_PIN;
 8008aaa:	2309      	movs	r3, #9
 8008aac:	607b      	str	r3, [r7, #4]
	GPIO_Init(&Keypad4x4h);
 8008aae:	463b      	mov	r3, r7
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7f8 fbc1 	bl	8001238 <GPIO_Init>

	Keypad4x4h.pGPIOx = KEYPAD_COLUMN_4_PORT;
 8008ab6:	4b07      	ldr	r3, [pc, #28]	; (8008ad4 <Keypad4x4_Init+0xb8>)
 8008ab8:	603b      	str	r3, [r7, #0]
	Keypad4x4h.GPIO_Config.PinNumber = KEYPAD_COLUMN_4_PIN;
 8008aba:	2307      	movs	r3, #7
 8008abc:	607b      	str	r3, [r7, #4]
	GPIO_Init(&Keypad4x4h);
 8008abe:	463b      	mov	r3, r7
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7f8 fbb9 	bl	8001238 <GPIO_Init>
}
 8008ac6:	bf00      	nop
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	40020400 	.word	0x40020400
 8008ad4:	40021000 	.word	0x40021000

08008ad8 <Keypad4x4_Read>:
/* @return				- return the character value that corresponds to the given pin					*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
char Keypad4x4_Read(void)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
	char val;
	set_keypad_row(1);
 8008ade:	2001      	movs	r0, #1
 8008ae0:	f000 f836 	bl	8008b50 <set_keypad_row>
	val = read_keypad_column(1);
 8008ae4:	2001      	movs	r0, #1
 8008ae6:	f000 f875 	bl	8008bd4 <read_keypad_column>
 8008aea:	4603      	mov	r3, r0
 8008aec:	71fb      	strb	r3, [r7, #7]
	if(val)
 8008aee:	79fb      	ldrb	r3, [r7, #7]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <Keypad4x4_Read+0x20>
	{
		return val;
 8008af4:	79fb      	ldrb	r3, [r7, #7]
 8008af6:	e027      	b.n	8008b48 <Keypad4x4_Read+0x70>
	}

	set_keypad_row(2);
 8008af8:	2002      	movs	r0, #2
 8008afa:	f000 f829 	bl	8008b50 <set_keypad_row>
	val = read_keypad_column(2);
 8008afe:	2002      	movs	r0, #2
 8008b00:	f000 f868 	bl	8008bd4 <read_keypad_column>
 8008b04:	4603      	mov	r3, r0
 8008b06:	71fb      	strb	r3, [r7, #7]
	if(val)
 8008b08:	79fb      	ldrb	r3, [r7, #7]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <Keypad4x4_Read+0x3a>
	{
		return val;
 8008b0e:	79fb      	ldrb	r3, [r7, #7]
 8008b10:	e01a      	b.n	8008b48 <Keypad4x4_Read+0x70>
	}

	set_keypad_row(3);
 8008b12:	2003      	movs	r0, #3
 8008b14:	f000 f81c 	bl	8008b50 <set_keypad_row>
	val = read_keypad_column(3);
 8008b18:	2003      	movs	r0, #3
 8008b1a:	f000 f85b 	bl	8008bd4 <read_keypad_column>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	71fb      	strb	r3, [r7, #7]
	if(val)
 8008b22:	79fb      	ldrb	r3, [r7, #7]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d001      	beq.n	8008b2c <Keypad4x4_Read+0x54>
	{
		return val;
 8008b28:	79fb      	ldrb	r3, [r7, #7]
 8008b2a:	e00d      	b.n	8008b48 <Keypad4x4_Read+0x70>
	}

	set_keypad_row(4);
 8008b2c:	2004      	movs	r0, #4
 8008b2e:	f000 f80f 	bl	8008b50 <set_keypad_row>
	val = read_keypad_column(4);
 8008b32:	2004      	movs	r0, #4
 8008b34:	f000 f84e 	bl	8008bd4 <read_keypad_column>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	71fb      	strb	r3, [r7, #7]
	if(val)
 8008b3c:	79fb      	ldrb	r3, [r7, #7]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <Keypad4x4_Read+0x6e>
	{
		return val;
 8008b42:	79fb      	ldrb	r3, [r7, #7]
 8008b44:	e000      	b.n	8008b48 <Keypad4x4_Read+0x70>
	}

	return KEYPAD_NOT_PRESSED;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3708      	adds	r7, #8
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <set_keypad_row>:


static void set_keypad_row(uint8_t row)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	4603      	mov	r3, r0
 8008b58:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePin(KEYPAD_ROW_1_PORT, KEYPAD_ROW_1_PIN, SET);
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	210f      	movs	r1, #15
 8008b5e:	481b      	ldr	r0, [pc, #108]	; (8008bcc <set_keypad_row+0x7c>)
 8008b60:	f7f8 fda7 	bl	80016b2 <GPIO_WritePin>
	GPIO_WritePin(KEYPAD_ROW_2_PORT, KEYPAD_ROW_2_PIN, SET);
 8008b64:	2201      	movs	r2, #1
 8008b66:	210d      	movs	r1, #13
 8008b68:	4818      	ldr	r0, [pc, #96]	; (8008bcc <set_keypad_row+0x7c>)
 8008b6a:	f7f8 fda2 	bl	80016b2 <GPIO_WritePin>
	GPIO_WritePin(KEYPAD_ROW_3_PORT, KEYPAD_ROW_3_PIN, SET);
 8008b6e:	2201      	movs	r2, #1
 8008b70:	210b      	movs	r1, #11
 8008b72:	4816      	ldr	r0, [pc, #88]	; (8008bcc <set_keypad_row+0x7c>)
 8008b74:	f7f8 fd9d 	bl	80016b2 <GPIO_WritePin>
	GPIO_WritePin(KEYPAD_ROW_4_PORT, KEYPAD_ROW_4_PIN, SET);
 8008b78:	2201      	movs	r2, #1
 8008b7a:	210f      	movs	r1, #15
 8008b7c:	4814      	ldr	r0, [pc, #80]	; (8008bd0 <set_keypad_row+0x80>)
 8008b7e:	f7f8 fd98 	bl	80016b2 <GPIO_WritePin>

	if(1 == row)
 8008b82:	79fb      	ldrb	r3, [r7, #7]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d104      	bne.n	8008b92 <set_keypad_row+0x42>
	{
		GPIO_WritePin(KEYPAD_ROW_1_PORT, KEYPAD_ROW_1_PIN, RESET);
 8008b88:	2200      	movs	r2, #0
 8008b8a:	210f      	movs	r1, #15
 8008b8c:	480f      	ldr	r0, [pc, #60]	; (8008bcc <set_keypad_row+0x7c>)
 8008b8e:	f7f8 fd90 	bl	80016b2 <GPIO_WritePin>
	}
	if(2 == row)
 8008b92:	79fb      	ldrb	r3, [r7, #7]
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d104      	bne.n	8008ba2 <set_keypad_row+0x52>
	{
		GPIO_WritePin(KEYPAD_ROW_2_PORT, KEYPAD_ROW_2_PIN, RESET);
 8008b98:	2200      	movs	r2, #0
 8008b9a:	210d      	movs	r1, #13
 8008b9c:	480b      	ldr	r0, [pc, #44]	; (8008bcc <set_keypad_row+0x7c>)
 8008b9e:	f7f8 fd88 	bl	80016b2 <GPIO_WritePin>
	}
	if(3 == row)
 8008ba2:	79fb      	ldrb	r3, [r7, #7]
 8008ba4:	2b03      	cmp	r3, #3
 8008ba6:	d104      	bne.n	8008bb2 <set_keypad_row+0x62>
	{
		GPIO_WritePin(KEYPAD_ROW_3_PORT, KEYPAD_ROW_3_PIN, RESET);
 8008ba8:	2200      	movs	r2, #0
 8008baa:	210b      	movs	r1, #11
 8008bac:	4807      	ldr	r0, [pc, #28]	; (8008bcc <set_keypad_row+0x7c>)
 8008bae:	f7f8 fd80 	bl	80016b2 <GPIO_WritePin>
	}
	if(4 == row)
 8008bb2:	79fb      	ldrb	r3, [r7, #7]
 8008bb4:	2b04      	cmp	r3, #4
 8008bb6:	d104      	bne.n	8008bc2 <set_keypad_row+0x72>
	{
		GPIO_WritePin(KEYPAD_ROW_4_PORT, KEYPAD_ROW_4_PIN, RESET);
 8008bb8:	2200      	movs	r2, #0
 8008bba:	210f      	movs	r1, #15
 8008bbc:	4804      	ldr	r0, [pc, #16]	; (8008bd0 <set_keypad_row+0x80>)
 8008bbe:	f7f8 fd78 	bl	80016b2 <GPIO_WritePin>
	}
}
 8008bc2:	bf00      	nop
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	40020400 	.word	0x40020400
 8008bd0:	40021000 	.word	0x40021000

08008bd4 <read_keypad_column>:

static char read_keypad_column(uint8_t row)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	4603      	mov	r3, r0
 8008bdc:	71fb      	strb	r3, [r7, #7]
	if(RESET == GPIO_ReadPin(KEYPAD_COLUMN_1_PORT, KEYPAD_COLUMN_1_PIN))
 8008bde:	210d      	movs	r1, #13
 8008be0:	482d      	ldr	r0, [pc, #180]	; (8008c98 <read_keypad_column+0xc4>)
 8008be2:	f7f8 fd4f 	bl	8001684 <GPIO_ReadPin>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d10d      	bne.n	8008c08 <read_keypad_column+0x34>
	{
		while(RESET == GPIO_ReadPin(KEYPAD_COLUMN_1_PORT, KEYPAD_COLUMN_1_PIN))
 8008bec:	bf00      	nop
 8008bee:	210d      	movs	r1, #13
 8008bf0:	4829      	ldr	r0, [pc, #164]	; (8008c98 <read_keypad_column+0xc4>)
 8008bf2:	f7f8 fd47 	bl	8001684 <GPIO_ReadPin>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d0f8      	beq.n	8008bee <read_keypad_column+0x1a>
		{

		}
		return Keypad_Button_Chars[row-1][0];
 8008bfc:	79fb      	ldrb	r3, [r7, #7]
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	4a26      	ldr	r2, [pc, #152]	; (8008c9c <read_keypad_column+0xc8>)
 8008c02:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8008c06:	e042      	b.n	8008c8e <read_keypad_column+0xba>
	}

	if(RESET == GPIO_ReadPin(KEYPAD_COLUMN_2_PORT, KEYPAD_COLUMN_2_PIN))
 8008c08:	210b      	movs	r1, #11
 8008c0a:	4823      	ldr	r0, [pc, #140]	; (8008c98 <read_keypad_column+0xc4>)
 8008c0c:	f7f8 fd3a 	bl	8001684 <GPIO_ReadPin>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10e      	bne.n	8008c34 <read_keypad_column+0x60>
	{
		while(RESET == GPIO_ReadPin(KEYPAD_COLUMN_2_PORT, KEYPAD_COLUMN_2_PIN))
 8008c16:	bf00      	nop
 8008c18:	210b      	movs	r1, #11
 8008c1a:	481f      	ldr	r0, [pc, #124]	; (8008c98 <read_keypad_column+0xc4>)
 8008c1c:	f7f8 fd32 	bl	8001684 <GPIO_ReadPin>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d0f8      	beq.n	8008c18 <read_keypad_column+0x44>
		{

		}
		return Keypad_Button_Chars[row-1][1];
 8008c26:	79fb      	ldrb	r3, [r7, #7]
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	4a1c      	ldr	r2, [pc, #112]	; (8008c9c <read_keypad_column+0xc8>)
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	4413      	add	r3, r2
 8008c30:	785b      	ldrb	r3, [r3, #1]
 8008c32:	e02c      	b.n	8008c8e <read_keypad_column+0xba>
	}

	if(RESET == GPIO_ReadPin(KEYPAD_COLUMN_3_PORT, KEYPAD_COLUMN_3_PIN))
 8008c34:	2109      	movs	r1, #9
 8008c36:	4818      	ldr	r0, [pc, #96]	; (8008c98 <read_keypad_column+0xc4>)
 8008c38:	f7f8 fd24 	bl	8001684 <GPIO_ReadPin>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d10e      	bne.n	8008c60 <read_keypad_column+0x8c>
	{
		while(RESET == GPIO_ReadPin(KEYPAD_COLUMN_3_PORT, KEYPAD_COLUMN_3_PIN))
 8008c42:	bf00      	nop
 8008c44:	2109      	movs	r1, #9
 8008c46:	4814      	ldr	r0, [pc, #80]	; (8008c98 <read_keypad_column+0xc4>)
 8008c48:	f7f8 fd1c 	bl	8001684 <GPIO_ReadPin>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d0f8      	beq.n	8008c44 <read_keypad_column+0x70>
		{

		}
		return Keypad_Button_Chars[row-1][2];
 8008c52:	79fb      	ldrb	r3, [r7, #7]
 8008c54:	3b01      	subs	r3, #1
 8008c56:	4a11      	ldr	r2, [pc, #68]	; (8008c9c <read_keypad_column+0xc8>)
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	789b      	ldrb	r3, [r3, #2]
 8008c5e:	e016      	b.n	8008c8e <read_keypad_column+0xba>
	}

	if(RESET == GPIO_ReadPin(KEYPAD_COLUMN_4_PORT, KEYPAD_COLUMN_4_PIN))
 8008c60:	2107      	movs	r1, #7
 8008c62:	480d      	ldr	r0, [pc, #52]	; (8008c98 <read_keypad_column+0xc4>)
 8008c64:	f7f8 fd0e 	bl	8001684 <GPIO_ReadPin>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d10e      	bne.n	8008c8c <read_keypad_column+0xb8>
	{
		while(RESET == GPIO_ReadPin(KEYPAD_COLUMN_4_PORT, KEYPAD_COLUMN_4_PIN))
 8008c6e:	bf00      	nop
 8008c70:	2107      	movs	r1, #7
 8008c72:	4809      	ldr	r0, [pc, #36]	; (8008c98 <read_keypad_column+0xc4>)
 8008c74:	f7f8 fd06 	bl	8001684 <GPIO_ReadPin>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d0f8      	beq.n	8008c70 <read_keypad_column+0x9c>
		{

		}
		return Keypad_Button_Chars[row-1][3];
 8008c7e:	79fb      	ldrb	r3, [r7, #7]
 8008c80:	3b01      	subs	r3, #1
 8008c82:	4a06      	ldr	r2, [pc, #24]	; (8008c9c <read_keypad_column+0xc8>)
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	78db      	ldrb	r3, [r3, #3]
 8008c8a:	e000      	b.n	8008c8e <read_keypad_column+0xba>
	}

	return KEYPAD_NOT_PRESSED;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	40021000 	.word	0x40021000
 8008c9c:	0800df84 	.word	0x0800df84

08008ca0 <destrocore>:

#include <logo.h>
#include <pictures.h>

void destrocore(void)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af02      	add	r7, sp, #8
	ST7735_FillScreen(ST7735_BLACK);
 8008ca6:	2000      	movs	r0, #0
 8008ca8:	f001 f9ba 	bl	800a020 <ST7735_FillScreen>
	ST7735_DrawImage(35, 0, 86 , 128, (const uint16_t*) dstr);
 8008cac:	4b05      	ldr	r3, [pc, #20]	; (8008cc4 <destrocore+0x24>)
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	2380      	movs	r3, #128	; 0x80
 8008cb2:	2256      	movs	r2, #86	; 0x56
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	2023      	movs	r0, #35	; 0x23
 8008cb8:	f001 f9ce 	bl	800a058 <ST7735_DrawImage>
}
 8008cbc:	bf00      	nop
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	0800df94 	.word	0x0800df94

08008cc8 <fingerprint_icon>:

void fingerprint_icon(void)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af02      	add	r7, sp, #8
	ST7735_DrawImage(53, 70, 40 , 40, (const uint16_t*) fingerprintIMG);
 8008cce:	4b05      	ldr	r3, [pc, #20]	; (8008ce4 <fingerprint_icon+0x1c>)
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	2328      	movs	r3, #40	; 0x28
 8008cd4:	2228      	movs	r2, #40	; 0x28
 8008cd6:	2146      	movs	r1, #70	; 0x46
 8008cd8:	2035      	movs	r0, #53	; 0x35
 8008cda:	f001 f9bd 	bl	800a058 <ST7735_DrawImage>
}
 8008cde:	bf00      	nop
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	08013594 	.word	0x08013594

08008ce8 <alert_icon>:


void alert_icon()
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af04      	add	r7, sp, #16
	ST7735_FillTriangle(55, 40, 75, 5, 95, 40, ST7735_YELLOW);
 8008cee:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8008cf2:	9302      	str	r3, [sp, #8]
 8008cf4:	2328      	movs	r3, #40	; 0x28
 8008cf6:	9301      	str	r3, [sp, #4]
 8008cf8:	235f      	movs	r3, #95	; 0x5f
 8008cfa:	9300      	str	r3, [sp, #0]
 8008cfc:	2305      	movs	r3, #5
 8008cfe:	224b      	movs	r2, #75	; 0x4b
 8008d00:	2128      	movs	r1, #40	; 0x28
 8008d02:	2037      	movs	r0, #55	; 0x37
 8008d04:	f001 fa74 	bl	800a1f0 <ST7735_FillTriangle>
	ST7735_DrawString(70,18,"!", Font_11x18, ST7735_BLACK, ST7735_YELLOW);
 8008d08:	4b14      	ldr	r3, [pc, #80]	; (8008d5c <alert_icon+0x74>)
 8008d0a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8008d0e:	9202      	str	r2, [sp, #8]
 8008d10:	2200      	movs	r2, #0
 8008d12:	9201      	str	r2, [sp, #4]
 8008d14:	685a      	ldr	r2, [r3, #4]
 8008d16:	9200      	str	r2, [sp, #0]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a11      	ldr	r2, [pc, #68]	; (8008d60 <alert_icon+0x78>)
 8008d1c:	2112      	movs	r1, #18
 8008d1e:	2046      	movs	r0, #70	; 0x46
 8008d20:	f001 f866 	bl	8009df0 <ST7735_DrawString>
	ST7735_DrawTriangle(55, 40, 75, 5, 95, 40, ST7735_BLACK);
 8008d24:	2300      	movs	r3, #0
 8008d26:	9302      	str	r3, [sp, #8]
 8008d28:	2328      	movs	r3, #40	; 0x28
 8008d2a:	9301      	str	r3, [sp, #4]
 8008d2c:	235f      	movs	r3, #95	; 0x5f
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	2305      	movs	r3, #5
 8008d32:	224b      	movs	r2, #75	; 0x4b
 8008d34:	2128      	movs	r1, #40	; 0x28
 8008d36:	2037      	movs	r0, #55	; 0x37
 8008d38:	f001 fa20 	bl	800a17c <ST7735_DrawTriangle>
	ST7735_DrawTriangle(56, 39, 75, 6, 94, 39, ST7735_BLACK);
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	9302      	str	r3, [sp, #8]
 8008d40:	2327      	movs	r3, #39	; 0x27
 8008d42:	9301      	str	r3, [sp, #4]
 8008d44:	235e      	movs	r3, #94	; 0x5e
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	2306      	movs	r3, #6
 8008d4a:	224b      	movs	r2, #75	; 0x4b
 8008d4c:	2127      	movs	r1, #39	; 0x27
 8008d4e:	2038      	movs	r0, #56	; 0x38
 8008d50:	f001 fa14 	bl	800a17c <ST7735_DrawTriangle>
}
 8008d54:	bf00      	nop
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	20000044 	.word	0x20000044
 8008d60:	0800df78 	.word	0x0800df78

08008d64 <R308_USART_Init>:
/* @return				- none																			*/
/*																										*/
/* @Note				- initializes USART defined in r308.h as R308_USART								*/
/********************************************************************************************************/
void R308_USART_Init(USART_CircBuff_t * pR308Handle, uint32_t baudrate)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b086      	sub	sp, #24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
	GPIO_Handle_t R308_USART_GPIO = {0};
 8008d6e:	f107 0308 	add.w	r3, r7, #8
 8008d72:	2200      	movs	r2, #0
 8008d74:	601a      	str	r2, [r3, #0]
 8008d76:	605a      	str	r2, [r3, #4]
 8008d78:	609a      	str	r2, [r3, #8]
 8008d7a:	60da      	str	r2, [r3, #12]

	if(USART1 == pR308Handle->USART_handle.pUSARTx)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a4d      	ldr	r2, [pc, #308]	; (8008eb8 <R308_USART_Init+0x154>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d135      	bne.n	8008df2 <R308_USART_Init+0x8e>
	{
		//GPIO initialization
		R308_USART_GPIO.pGPIOx = GPIOA;
 8008d86:	4b4d      	ldr	r3, [pc, #308]	; (8008ebc <R308_USART_Init+0x158>)
 8008d88:	60bb      	str	r3, [r7, #8]
		R308_USART_GPIO.GPIO_Config.PinMode = GPIO_MODE_AF;
 8008d8a:	2302      	movs	r3, #2
 8008d8c:	743b      	strb	r3, [r7, #16]
		R308_USART_GPIO.GPIO_Config.PinAltFuncMode = 7;
 8008d8e:	2307      	movs	r3, #7
 8008d90:	753b      	strb	r3, [r7, #20]
		R308_USART_GPIO.GPIO_Config.PinOPType = GPIO_OUTPUT_PP;
 8008d92:	2300      	movs	r3, #0
 8008d94:	74fb      	strb	r3, [r7, #19]
		R308_USART_GPIO.GPIO_Config.PinSpeed = GPIO_SPEED_HIGH;
 8008d96:	2303      	movs	r3, #3
 8008d98:	747b      	strb	r3, [r7, #17]
		R308_USART_GPIO.GPIO_Config.PinPuPdControl = GPIO_PIN_PULL_UP;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	74bb      	strb	r3, [r7, #18]
		//TX
		R308_USART_GPIO.GPIO_Config.PinNumber = GPIO_PIN_9;
 8008d9e:	2309      	movs	r3, #9
 8008da0:	60fb      	str	r3, [r7, #12]
		GPIO_Init(&R308_USART_GPIO);
 8008da2:	f107 0308 	add.w	r3, r7, #8
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7f8 fa46 	bl	8001238 <GPIO_Init>
		//RX
		R308_USART_GPIO.GPIO_Config.PinNumber = GPIO_PIN_10;
 8008dac:	230a      	movs	r3, #10
 8008dae:	60fb      	str	r3, [r7, #12]
		GPIO_Init(&R308_USART_GPIO);
 8008db0:	f107 0308 	add.w	r3, r7, #8
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7f8 fa3f 	bl	8001238 <GPIO_Init>

		pR308Handle->USART_handle.USART_Config.USART_Baud = baudrate;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	683a      	ldr	r2, [r7, #0]
 8008dbe:	609a      	str	r2, [r3, #8]
		pR308Handle->USART_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	735a      	strb	r2, [r3, #13]
		pR308Handle->USART_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	731a      	strb	r2, [r3, #12]
		pR308Handle->USART_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	739a      	strb	r2, [r3, #14]
		pR308Handle->USART_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2202      	movs	r2, #2
 8008dd6:	711a      	strb	r2, [r3, #4]
		pR308Handle->USART_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	73da      	strb	r2, [r3, #15]
		USART_Init(&pR308Handle->USART_handle);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7fc fc6b 	bl	80056bc <USART_Init>

		USART_IRQInterruptConfig(USART1_IRQn, 3, ENABLE);
 8008de6:	2201      	movs	r2, #1
 8008de8:	2103      	movs	r1, #3
 8008dea:	2025      	movs	r0, #37	; 0x25
 8008dec:	f7fc fe38 	bl	8005a60 <USART_IRQInterruptConfig>
 8008df0:	e03b      	b.n	8008e6a <R308_USART_Init+0x106>

	}else if(USART3 == pR308Handle->USART_handle.pUSARTx)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a32      	ldr	r2, [pc, #200]	; (8008ec0 <R308_USART_Init+0x15c>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d136      	bne.n	8008e6a <R308_USART_Init+0x106>
	{
		//GPIO initialization
		R308_USART_GPIO.GPIO_Config.PinMode = GPIO_MODE_AF;
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	743b      	strb	r3, [r7, #16]
		R308_USART_GPIO.GPIO_Config.PinAltFuncMode = 7;
 8008e00:	2307      	movs	r3, #7
 8008e02:	753b      	strb	r3, [r7, #20]
		R308_USART_GPIO.GPIO_Config.PinOPType = GPIO_OUTPUT_PP;
 8008e04:	2300      	movs	r3, #0
 8008e06:	74fb      	strb	r3, [r7, #19]
		R308_USART_GPIO.GPIO_Config.PinSpeed = GPIO_SPEED_HIGH;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	747b      	strb	r3, [r7, #17]
		R308_USART_GPIO.GPIO_Config.PinPuPdControl = GPIO_PIN_NO_PUPD;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	74bb      	strb	r3, [r7, #18]
		//TX
		R308_USART_GPIO.pGPIOx = GPIOB;
 8008e10:	4b2c      	ldr	r3, [pc, #176]	; (8008ec4 <R308_USART_Init+0x160>)
 8008e12:	60bb      	str	r3, [r7, #8]
		R308_USART_GPIO.GPIO_Config.PinNumber = GPIO_PIN_10;
 8008e14:	230a      	movs	r3, #10
 8008e16:	60fb      	str	r3, [r7, #12]
		GPIO_Init(&R308_USART_GPIO);
 8008e18:	f107 0308 	add.w	r3, r7, #8
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7f8 fa0b 	bl	8001238 <GPIO_Init>
		//RX
		R308_USART_GPIO.pGPIOx = GPIOD;
 8008e22:	4b29      	ldr	r3, [pc, #164]	; (8008ec8 <R308_USART_Init+0x164>)
 8008e24:	60bb      	str	r3, [r7, #8]
		R308_USART_GPIO.GPIO_Config.PinNumber = GPIO_PIN_9;
 8008e26:	2309      	movs	r3, #9
 8008e28:	60fb      	str	r3, [r7, #12]
		GPIO_Init(&R308_USART_GPIO);
 8008e2a:	f107 0308 	add.w	r3, r7, #8
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7f8 fa02 	bl	8001238 <GPIO_Init>

		pR308Handle->USART_handle.USART_Config.USART_Baud = baudrate;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	683a      	ldr	r2, [r7, #0]
 8008e38:	609a      	str	r2, [r3, #8]
		pR308Handle->USART_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	735a      	strb	r2, [r3, #13]
		pR308Handle->USART_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	731a      	strb	r2, [r3, #12]
		pR308Handle->USART_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	739a      	strb	r2, [r3, #14]
		pR308Handle->USART_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	711a      	strb	r2, [r3, #4]
		pR308Handle->USART_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	73da      	strb	r2, [r3, #15]
		USART_Init(&pR308Handle->USART_handle);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7fc fc2e 	bl	80056bc <USART_Init>

		USART_IRQInterruptConfig(USART3_IRQn, 3, ENABLE);
 8008e60:	2201      	movs	r2, #1
 8008e62:	2103      	movs	r1, #3
 8008e64:	2027      	movs	r0, #39	; 0x27
 8008e66:	f7fc fdfb 	bl	8005a60 <USART_IRQInterruptConfig>
	}

	pR308Handle->USART_handle.pUSARTx->CR1.bit.txeie = RESET;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	68d3      	ldr	r3, [r2, #12]
 8008e70:	f36f 13c7 	bfc	r3, #7, #1
 8008e74:	60d3      	str	r3, [r2, #12]
	USART_ClearFlag(pR308Handle->USART_handle.pUSARTx, USART_SR_RXNE);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2105      	movs	r1, #5
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7fc fd8d 	bl	800599c <USART_ClearFlag>
	pR308Handle->USART_handle.pUSARTx->CR1.bit.rxneie = SET;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	68d3      	ldr	r3, [r2, #12]
 8008e88:	f043 0320 	orr.w	r3, r3, #32
 8008e8c:	60d3      	str	r3, [r2, #12]

	pR308Handle->TX_head = 0;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	84da      	strh	r2, [r3, #38]	; 0x26
	pR308Handle->RX_head = 0;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	855a      	strh	r2, [r3, #42]	; 0x2a
	pR308Handle->TX_tail = 0;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	851a      	strh	r2, [r3, #40]	; 0x28
	pR308Handle->RX_tail = 0;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	859a      	strh	r2, [r3, #44]	; 0x2c

	pR308Handle->Timeout = 500;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008eac:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8008eae:	bf00      	nop
 8008eb0:	3718      	adds	r7, #24
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	40011000 	.word	0x40011000
 8008ebc:	40020000 	.word	0x40020000
 8008ec0:	40004800 	.word	0x40004800
 8008ec4:	40020400 	.word	0x40020400
 8008ec8:	40020c00 	.word	0x40020c00

08008ecc <R308_USART_WriteByte>:
/* @return				- returns 1 after writing to DR is done											*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
uint16_t R308_USART_WriteByte(uint8_t ch)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	71fb      	strb	r3, [r7, #7]
	uint16_t current_head = R308_USART_h.TX_head;
 8008ed6:	4b22      	ldr	r3, [pc, #136]	; (8008f60 <R308_USART_WriteByte+0x94>)
 8008ed8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008eda:	81fb      	strh	r3, [r7, #14]
	uint16_t current_tail = R308_USART_h.TX_tail;
 8008edc:	4b20      	ldr	r3, [pc, #128]	; (8008f60 <R308_USART_WriteByte+0x94>)
 8008ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ee0:	81bb      	strh	r3, [r7, #12]

	// if TX DR is empty write to DR
	if((current_head == current_tail) && (RESET != USART_GetFlagStatus(R308_USART_h.USART_handle.pUSARTx, USART_SR_TXE)))
 8008ee2:	89fa      	ldrh	r2, [r7, #14]
 8008ee4:	89bb      	ldrh	r3, [r7, #12]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d114      	bne.n	8008f14 <R308_USART_WriteByte+0x48>
 8008eea:	4b1d      	ldr	r3, [pc, #116]	; (8008f60 <R308_USART_WriteByte+0x94>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2107      	movs	r1, #7
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7fc fcf1 	bl	80058d8 <USART_GetFlagStatus>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00b      	beq.n	8008f14 <R308_USART_WriteByte+0x48>
	{
		R308_USART_h.USART_handle.pUSARTx->DR.bit.dr = ch;
 8008efc:	4b18      	ldr	r3, [pc, #96]	; (8008f60 <R308_USART_WriteByte+0x94>)
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	79fb      	ldrb	r3, [r7, #7]
 8008f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f06:	b299      	uxth	r1, r3
 8008f08:	6853      	ldr	r3, [r2, #4]
 8008f0a:	f361 0308 	bfi	r3, r1, #0, #9
 8008f0e:	6053      	str	r3, [r2, #4]
		return 1;
 8008f10:	2301      	movs	r3, #1
 8008f12:	e020      	b.n	8008f56 <R308_USART_WriteByte+0x8a>
	}

	//circular buffer cycling mechanism
	uint16_t i = (current_head + 1) % TX_BUFFER_SIZE;
 8008f14:	89fb      	ldrh	r3, [r7, #14]
 8008f16:	3301      	adds	r3, #1
 8008f18:	425a      	negs	r2, r3
 8008f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f22:	bf58      	it	pl
 8008f24:	4253      	negpl	r3, r2
 8008f26:	817b      	strh	r3, [r7, #10]

	// if buffer is full wait for empty place
	while(i == R308_USART_h.TX_tail)
 8008f28:	bf00      	nop
 8008f2a:	4b0d      	ldr	r3, [pc, #52]	; (8008f60 <R308_USART_WriteByte+0x94>)
 8008f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	897a      	ldrh	r2, [r7, #10]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d0f9      	beq.n	8008f2a <R308_USART_WriteByte+0x5e>
	{

	}

	R308_USART_h.TX_Buffer[current_head] = ch;
 8008f36:	89fb      	ldrh	r3, [r7, #14]
 8008f38:	4a09      	ldr	r2, [pc, #36]	; (8008f60 <R308_USART_WriteByte+0x94>)
 8008f3a:	4413      	add	r3, r2
 8008f3c:	79fa      	ldrb	r2, [r7, #7]
 8008f3e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	R308_USART_h.TX_head = i;
 8008f42:	4a07      	ldr	r2, [pc, #28]	; (8008f60 <R308_USART_WriteByte+0x94>)
 8008f44:	897b      	ldrh	r3, [r7, #10]
 8008f46:	84d3      	strh	r3, [r2, #38]	; 0x26

	R308_USART_h.USART_handle.pUSARTx->CR1.bit.txeie = SET;
 8008f48:	4b05      	ldr	r3, [pc, #20]	; (8008f60 <R308_USART_WriteByte+0x94>)
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	68d3      	ldr	r3, [r2, #12]
 8008f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f52:	60d3      	str	r3, [r2, #12]

	return 1;
 8008f54:	2301      	movs	r3, #1
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	2000023c 	.word	0x2000023c

08008f64 <R308_USART_ReadByte>:
/* @return				- return one byte from TX data register; -1 if RX buffer is empty				*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
int16_t R308_USART_ReadByte(void)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
	uint16_t current_head = R308_USART_h.RX_head;
 8008f6a:	4b11      	ldr	r3, [pc, #68]	; (8008fb0 <R308_USART_ReadByte+0x4c>)
 8008f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f6e:	80fb      	strh	r3, [r7, #6]
	uint16_t current_tail = R308_USART_h.RX_tail;
 8008f70:	4b0f      	ldr	r3, [pc, #60]	; (8008fb0 <R308_USART_ReadByte+0x4c>)
 8008f72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f74:	80bb      	strh	r3, [r7, #4]

	// if there is no data in RX buffer
	if( current_head == current_tail)
 8008f76:	88fa      	ldrh	r2, [r7, #6]
 8008f78:	88bb      	ldrh	r3, [r7, #4]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d102      	bne.n	8008f84 <R308_USART_ReadByte+0x20>
	{
		return -1;
 8008f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f82:	e00f      	b.n	8008fa4 <R308_USART_ReadByte+0x40>
	}
	else
	{
		uint8_t ch = R308_USART_h.RX_Buffer[current_tail];
 8008f84:	88bb      	ldrh	r3, [r7, #4]
 8008f86:	4a0a      	ldr	r2, [pc, #40]	; (8008fb0 <R308_USART_ReadByte+0x4c>)
 8008f88:	4413      	add	r3, r2
 8008f8a:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
 8008f8e:	70fb      	strb	r3, [r7, #3]
		R308_USART_h.RX_tail = (uint16_t)(current_tail + 1) % RX_BUFFER_SIZE;
 8008f90:	88bb      	ldrh	r3, [r7, #4]
 8008f92:	3301      	adds	r3, #1
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f9a:	b29a      	uxth	r2, r3
 8008f9c:	4b04      	ldr	r3, [pc, #16]	; (8008fb0 <R308_USART_ReadByte+0x4c>)
 8008f9e:	859a      	strh	r2, [r3, #44]	; 0x2c
		return ch;
 8008fa0:	78fb      	ldrb	r3, [r7, #3]
 8008fa2:	b21b      	sxth	r3, r3
	}
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bc80      	pop	{r7}
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	2000023c 	.word	0x2000023c

08008fb4 <R308_USART_Write>:
/* @return				- number of bytes transmitted													*/
/*																										*/
/* @Note				- non-blocking function															*/
/********************************************************************************************************/
uint16_t R308_USART_Write(const uint8_t * byte, uint16_t length)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	807b      	strh	r3, [r7, #2]
	uint16_t num = 0;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	81fb      	strh	r3, [r7, #14]

	while(length--)
 8008fc4:	e00c      	b.n	8008fe0 <R308_USART_Write+0x2c>
	{
		if(R308_USART_WriteByte(*byte++))
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	1c5a      	adds	r2, r3, #1
 8008fca:	607a      	str	r2, [r7, #4]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7ff ff7c 	bl	8008ecc <R308_USART_WriteByte>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d008      	beq.n	8008fec <R308_USART_Write+0x38>
		{
			num++;
 8008fda:	89fb      	ldrh	r3, [r7, #14]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	81fb      	strh	r3, [r7, #14]
	while(length--)
 8008fe0:	887b      	ldrh	r3, [r7, #2]
 8008fe2:	1e5a      	subs	r2, r3, #1
 8008fe4:	807a      	strh	r2, [r7, #2]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1ed      	bne.n	8008fc6 <R308_USART_Write+0x12>
 8008fea:	e000      	b.n	8008fee <R308_USART_Write+0x3a>
		}
		else break;
 8008fec:	bf00      	nop
	}

	return num;
 8008fee:	89fb      	ldrh	r3, [r7, #14]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <R308_USART_Read>:
/* @return				- number of bytes received														*/
/*																										*/
/* @Note				- non-blocking function															*/
/********************************************************************************************************/
uint16_t R308_USART_Read(uint8_t * byte, uint16_t length)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	460b      	mov	r3, r1
 8009002:	807b      	strh	r3, [r7, #2]
    uint16_t num = 0;
 8009004:	2300      	movs	r3, #0
 8009006:	81fb      	strh	r3, [r7, #14]

    while (num < length)
 8009008:	e010      	b.n	800902c <R308_USART_Read+0x34>
    {
        int16_t ch = r308_usart_non_blocking_read_byte();
 800900a:	f000 fa1f 	bl	800944c <r308_usart_non_blocking_read_byte>
 800900e:	4603      	mov	r3, r0
 8009010:	81bb      	strh	r3, [r7, #12]
        if (ch < 0)
 8009012:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009016:	2b00      	cmp	r3, #0
 8009018:	db0d      	blt.n	8009036 <R308_USART_Read+0x3e>
        {
            break;
        }

        *byte++ = (uint8_t)ch;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	1c5a      	adds	r2, r3, #1
 800901e:	607a      	str	r2, [r7, #4]
 8009020:	89ba      	ldrh	r2, [r7, #12]
 8009022:	b2d2      	uxtb	r2, r2
 8009024:	701a      	strb	r2, [r3, #0]
        num++;
 8009026:	89fb      	ldrh	r3, [r7, #14]
 8009028:	3301      	adds	r3, #1
 800902a:	81fb      	strh	r3, [r7, #14]
    while (num < length)
 800902c:	89fa      	ldrh	r2, [r7, #14]
 800902e:	887b      	ldrh	r3, [r7, #2]
 8009030:	429a      	cmp	r2, r3
 8009032:	d3ea      	bcc.n	800900a <R308_USART_Read+0x12>
 8009034:	e000      	b.n	8009038 <R308_USART_Read+0x40>
            break;
 8009036:	bf00      	nop
    }

    return num;
 8009038:	89fb      	ldrh	r3, [r7, #14]
}
 800903a:	4618      	mov	r0, r3
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
	...

08009044 <R308_USART_GetNumOfAvailableRxBytes>:
/* @return				- returns number of available bytes in RX_Buffer								*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
uint16_t R308_USART_GetNumOfAvailableRxBytes(void)
{
 8009044:	b480      	push	{r7}
 8009046:	af00      	add	r7, sp, #0
	return((uint16_t)(RX_BUFFER_SIZE + R308_USART_h.RX_head - R308_USART_h.RX_tail)) % RX_BUFFER_SIZE;
 8009048:	4b08      	ldr	r3, [pc, #32]	; (800906c <R308_USART_GetNumOfAvailableRxBytes+0x28>)
 800904a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800904c:	b29a      	uxth	r2, r3
 800904e:	4b07      	ldr	r3, [pc, #28]	; (800906c <R308_USART_GetNumOfAvailableRxBytes+0x28>)
 8009050:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009052:	b29b      	uxth	r3, r3
 8009054:	1ad3      	subs	r3, r2, r3
 8009056:	b29b      	uxth	r3, r3
 8009058:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800905c:	b29b      	uxth	r3, r3
 800905e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009062:	b29b      	uxth	r3, r3
}
 8009064:	4618      	mov	r0, r3
 8009066:	46bd      	mov	sp, r7
 8009068:	bc80      	pop	{r7}
 800906a:	4770      	bx	lr
 800906c:	2000023c 	.word	0x2000023c

08009070 <R308_Init>:
/* @return				- 0 if OK and 1 if there's an error												*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
uint8_t R308_Init(R308_Handle_t *pR308Handle)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
    uint32_t start = GetTick();
 8009078:	f7f9 f80a 	bl	8002090 <GetTick>
 800907c:	60f8      	str	r0, [r7, #12]
    while (GetTick() - start < 1000); // 1000 ms delay
 800907e:	bf00      	nop
 8009080:	f7f9 f806 	bl	8002090 <GetTick>
 8009084:	4602      	mov	r2, r0
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800908e:	d3f7      	bcc.n	8009080 <R308_Init+0x10>

    pR308Handle->buffer[0] = R308_VERIFY_PASSWORD;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2213      	movs	r2, #19
 8009094:	721a      	strb	r2, [r3, #8]
    pR308Handle->buffer[1] = (pR308Handle->Password >> 24) & 0xFF;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	0e1b      	lsrs	r3, r3, #24
 800909c:	b2da      	uxtb	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	725a      	strb	r2, [r3, #9]
    pR308Handle->buffer[2] = (pR308Handle->Password >> 16) & 0xFF;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	0c1b      	lsrs	r3, r3, #16
 80090a8:	b2da      	uxtb	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	729a      	strb	r2, [r3, #10]
    pR308Handle->buffer[3] = (pR308Handle->Password >> 8) & 0xFF;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	0a1b      	lsrs	r3, r3, #8
 80090b4:	b2da      	uxtb	r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	72da      	strb	r2, [r3, #11]
    pR308Handle->buffer[4] = pR308Handle->Password & 0xFF;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	731a      	strb	r2, [r3, #12]
    r308_write_packet(pR308Handle, R308_COMMAND_PACKET, pR308Handle->buffer, 5);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f103 0208 	add.w	r2, r3, #8
 80090ca:	2305      	movs	r3, #5
 80090cc:	2101      	movs	r1, #1
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 f9de 	bl	8009490 <r308_write_packet>

    uint8_t confirm_code = 0;
 80090d4:	2300      	movs	r3, #0
 80090d6:	727b      	strb	r3, [r7, #9]
    int16_t length = r308_read_ack_package(pR308Handle, &confirm_code);
 80090d8:	f107 0309 	add.w	r3, r7, #9
 80090dc:	4619      	mov	r1, r3
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fb80 	bl	80097e4 <r308_read_ack_package>
 80090e4:	4603      	mov	r3, r0
 80090e6:	817b      	strh	r3, [r7, #10]

    if (length < 0 || R308_SUCCESS != confirm_code)
 80090e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	db02      	blt.n	80090f6 <R308_Init+0x86>
 80090f0:	7a7b      	ldrb	r3, [r7, #9]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d001      	beq.n	80090fa <R308_Init+0x8a>
    {
    	return 0;
 80090f6:	2300      	movs	r3, #0
 80090f8:	e000      	b.n	80090fc <R308_Init+0x8c>
    }
    return 1;
 80090fa:	2301      	movs	r3, #1
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <R308_GetImage>:
/* @Note				- Command to detect finger and store the detected finger image in ImageBuffer 	*/
/*						  while returning successful confirmation code; if there is no finger, returned */
/*						  confirmation code	(rc) would be “can’t detect finger”							*/
/********************************************************************************************************/
int16_t R308_GetImage(void)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
	R308h.buffer[0] = R308_GET_IMAGE;
 800910a:	4b0f      	ldr	r3, [pc, #60]	; (8009148 <R308_GetImage+0x44>)
 800910c:	2201      	movs	r2, #1
 800910e:	721a      	strb	r2, [r3, #8]
	r308_write_packet(&R308h, R308_COMMAND_PACKET, R308h.buffer, 1);
 8009110:	2301      	movs	r3, #1
 8009112:	4a0e      	ldr	r2, [pc, #56]	; (800914c <R308_GetImage+0x48>)
 8009114:	2101      	movs	r1, #1
 8009116:	480c      	ldr	r0, [pc, #48]	; (8009148 <R308_GetImage+0x44>)
 8009118:	f000 f9ba 	bl	8009490 <r308_write_packet>
	uint8_t confirm_code = 0;
 800911c:	2300      	movs	r3, #0
 800911e:	717b      	strb	r3, [r7, #5]
	int16_t ack_package = r308_read_ack_package(&R308h, &confirm_code);
 8009120:	1d7b      	adds	r3, r7, #5
 8009122:	4619      	mov	r1, r3
 8009124:	4808      	ldr	r0, [pc, #32]	; (8009148 <R308_GetImage+0x44>)
 8009126:	f000 fb5d 	bl	80097e4 <r308_read_ack_package>
 800912a:	4603      	mov	r3, r0
 800912c:	80fb      	strh	r3, [r7, #6]

	if(ack_package < 0)
 800912e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009132:	2b00      	cmp	r3, #0
 8009134:	da02      	bge.n	800913c <R308_GetImage+0x38>
	{
		return ack_package;
 8009136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800913a:	e001      	b.n	8009140 <R308_GetImage+0x3c>
	}

	return confirm_code;
 800913c:	797b      	ldrb	r3, [r7, #5]
 800913e:	b21b      	sxth	r3, r3
}
 8009140:	4618      	mov	r0, r3
 8009142:	3708      	adds	r7, #8
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	2000066c 	.word	0x2000066c
 800914c:	20000674 	.word	0x20000674

08009150 <R308_GenChar>:
/* 					      ImageBuffer and store the file in CharBuffer1 or CharBuffer2. BufferID of 	*/
/*						  CharBuffer1 and CharBuffer2 are 1h and 2h respectively. Other values(except 	*/
/*						  1h, 2h) would be processed as CharBuffer2.									*/
/********************************************************************************************************/
int16_t R308_GenChar(uint8_t bufferID)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	4603      	mov	r3, r0
 8009158:	71fb      	strb	r3, [r7, #7]
	R308h.buffer[0] = R308_GEN_CHAR;
 800915a:	4b11      	ldr	r3, [pc, #68]	; (80091a0 <R308_GenChar+0x50>)
 800915c:	2202      	movs	r2, #2
 800915e:	721a      	strb	r2, [r3, #8]
	R308h.buffer[1] = bufferID;
 8009160:	4a0f      	ldr	r2, [pc, #60]	; (80091a0 <R308_GenChar+0x50>)
 8009162:	79fb      	ldrb	r3, [r7, #7]
 8009164:	7253      	strb	r3, [r2, #9]
	r308_write_packet(&R308h, R308_COMMAND_PACKET, R308h.buffer, 2);
 8009166:	2302      	movs	r3, #2
 8009168:	4a0e      	ldr	r2, [pc, #56]	; (80091a4 <R308_GenChar+0x54>)
 800916a:	2101      	movs	r1, #1
 800916c:	480c      	ldr	r0, [pc, #48]	; (80091a0 <R308_GenChar+0x50>)
 800916e:	f000 f98f 	bl	8009490 <r308_write_packet>
	uint8_t confirm_code = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	737b      	strb	r3, [r7, #13]
	int16_t ack_package = r308_read_ack_package(&R308h, &confirm_code);
 8009176:	f107 030d 	add.w	r3, r7, #13
 800917a:	4619      	mov	r1, r3
 800917c:	4808      	ldr	r0, [pc, #32]	; (80091a0 <R308_GenChar+0x50>)
 800917e:	f000 fb31 	bl	80097e4 <r308_read_ack_package>
 8009182:	4603      	mov	r3, r0
 8009184:	81fb      	strh	r3, [r7, #14]
	if(ack_package < 0 )
 8009186:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800918a:	2b00      	cmp	r3, #0
 800918c:	da02      	bge.n	8009194 <R308_GenChar+0x44>
	{
		return ack_package;
 800918e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009192:	e001      	b.n	8009198 <R308_GenChar+0x48>
	}
	return confirm_code;
 8009194:	7b7b      	ldrb	r3, [r7, #13]
 8009196:	b21b      	sxth	r3, r3
}
 8009198:	4618      	mov	r0, r3
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	2000066c 	.word	0x2000066c
 80091a4:	20000674 	.word	0x20000674

080091a8 <R308_RegModel>:
/* @Note				- Command to combine information of character files from CharBuffer1 and 		*/
/*						  CharBuffer2andgenerate a template which is stored back in both CharBuffer1 and*/
/*						  CharBuffer2																	*/
/********************************************************************************************************/
int16_t R308_RegModel(void)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
	R308h.buffer[0] = R308_REG_MODEL;
 80091ae:	4b0f      	ldr	r3, [pc, #60]	; (80091ec <R308_RegModel+0x44>)
 80091b0:	2205      	movs	r2, #5
 80091b2:	721a      	strb	r2, [r3, #8]
	r308_write_packet(&R308h, R308_COMMAND_PACKET, R308h.buffer, 1);
 80091b4:	2301      	movs	r3, #1
 80091b6:	4a0e      	ldr	r2, [pc, #56]	; (80091f0 <R308_RegModel+0x48>)
 80091b8:	2101      	movs	r1, #1
 80091ba:	480c      	ldr	r0, [pc, #48]	; (80091ec <R308_RegModel+0x44>)
 80091bc:	f000 f968 	bl	8009490 <r308_write_packet>
	uint8_t confirm_code = 0;
 80091c0:	2300      	movs	r3, #0
 80091c2:	717b      	strb	r3, [r7, #5]
	int16_t ack_package = r308_read_ack_package(&R308h, &confirm_code);
 80091c4:	1d7b      	adds	r3, r7, #5
 80091c6:	4619      	mov	r1, r3
 80091c8:	4808      	ldr	r0, [pc, #32]	; (80091ec <R308_RegModel+0x44>)
 80091ca:	f000 fb0b 	bl	80097e4 <r308_read_ack_package>
 80091ce:	4603      	mov	r3, r0
 80091d0:	80fb      	strh	r3, [r7, #6]
	if(ack_package < 0)
 80091d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	da02      	bge.n	80091e0 <R308_RegModel+0x38>
	{
		return ack_package;
 80091da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80091de:	e001      	b.n	80091e4 <R308_RegModel+0x3c>
	}

	return confirm_code;
 80091e0:	797b      	ldrb	r3, [r7, #5]
 80091e2:	b21b      	sxth	r3, r3
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	2000066c 	.word	0x2000066c
 80091f0:	20000674 	.word	0x20000674

080091f4 <R308_Empty>:
/* @Note				- Command to combine information of character files from CharBuffer1 and 		*/
/*						  CharBuffer2andgenerate a template which is stored back in both CharBuffer1 and*/
/*						  CharBuffer2																	*/
/********************************************************************************************************/
int16_t R308_Empty(void)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
	R308h.buffer[0] = R308_EMPTY_DATABASE;
 80091fa:	4b0f      	ldr	r3, [pc, #60]	; (8009238 <R308_Empty+0x44>)
 80091fc:	220d      	movs	r2, #13
 80091fe:	721a      	strb	r2, [r3, #8]
	r308_write_packet(&R308h, R308_COMMAND_PACKET, R308h.buffer, 1);
 8009200:	2301      	movs	r3, #1
 8009202:	4a0e      	ldr	r2, [pc, #56]	; (800923c <R308_Empty+0x48>)
 8009204:	2101      	movs	r1, #1
 8009206:	480c      	ldr	r0, [pc, #48]	; (8009238 <R308_Empty+0x44>)
 8009208:	f000 f942 	bl	8009490 <r308_write_packet>
	uint8_t confirm_code = 0;
 800920c:	2300      	movs	r3, #0
 800920e:	717b      	strb	r3, [r7, #5]
	int16_t ack_package = r308_read_ack_package(&R308h, &confirm_code);
 8009210:	1d7b      	adds	r3, r7, #5
 8009212:	4619      	mov	r1, r3
 8009214:	4808      	ldr	r0, [pc, #32]	; (8009238 <R308_Empty+0x44>)
 8009216:	f000 fae5 	bl	80097e4 <r308_read_ack_package>
 800921a:	4603      	mov	r3, r0
 800921c:	80fb      	strh	r3, [r7, #6]
	if(ack_package < 0)
 800921e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009222:	2b00      	cmp	r3, #0
 8009224:	da02      	bge.n	800922c <R308_Empty+0x38>
	{
		return ack_package;
 8009226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800922a:	e001      	b.n	8009230 <R308_Empty+0x3c>
	}

	return confirm_code;
 800922c:	797b      	ldrb	r3, [r7, #5]
 800922e:	b21b      	sxth	r3, r3
}
 8009230:	4618      	mov	r0, r3
 8009232:	3708      	adds	r7, #8
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	2000066c 	.word	0x2000066c
 800923c:	20000674 	.word	0x20000674

08009240 <R308_Store>:
/*						  designated location of Flash library. BufferID of CharBuffer1 and CharBuffer2 */
/*						  are 1h and 2h respectively. Other values(except 1h, 2h) would be processed as */
/*						  CharBuffer2																	*/
/********************************************************************************************************/
int16_t R308_Store(uint8_t bufferID, uint16_t templateID)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	4603      	mov	r3, r0
 8009248:	460a      	mov	r2, r1
 800924a:	71fb      	strb	r3, [r7, #7]
 800924c:	4613      	mov	r3, r2
 800924e:	80bb      	strh	r3, [r7, #4]
	R308h.buffer[0] = R308_STORE;
 8009250:	4b16      	ldr	r3, [pc, #88]	; (80092ac <R308_Store+0x6c>)
 8009252:	2206      	movs	r2, #6
 8009254:	721a      	strb	r2, [r3, #8]
	R308h.buffer[1] = bufferID;
 8009256:	4a15      	ldr	r2, [pc, #84]	; (80092ac <R308_Store+0x6c>)
 8009258:	79fb      	ldrb	r3, [r7, #7]
 800925a:	7253      	strb	r3, [r2, #9]
	R308h.buffer[2] = templateID >> 8;
 800925c:	88bb      	ldrh	r3, [r7, #4]
 800925e:	0a1b      	lsrs	r3, r3, #8
 8009260:	b29b      	uxth	r3, r3
 8009262:	b2da      	uxtb	r2, r3
 8009264:	4b11      	ldr	r3, [pc, #68]	; (80092ac <R308_Store+0x6c>)
 8009266:	729a      	strb	r2, [r3, #10]
	R308h.buffer[3] = templateID & 0xFF;
 8009268:	88bb      	ldrh	r3, [r7, #4]
 800926a:	b2da      	uxtb	r2, r3
 800926c:	4b0f      	ldr	r3, [pc, #60]	; (80092ac <R308_Store+0x6c>)
 800926e:	72da      	strb	r2, [r3, #11]
	r308_write_packet(&R308h, R308_COMMAND_PACKET, R308h.buffer, 4);
 8009270:	2304      	movs	r3, #4
 8009272:	4a0f      	ldr	r2, [pc, #60]	; (80092b0 <R308_Store+0x70>)
 8009274:	2101      	movs	r1, #1
 8009276:	480d      	ldr	r0, [pc, #52]	; (80092ac <R308_Store+0x6c>)
 8009278:	f000 f90a 	bl	8009490 <r308_write_packet>
	uint8_t confirm_code = 0;
 800927c:	2300      	movs	r3, #0
 800927e:	737b      	strb	r3, [r7, #13]
	int16_t ack_package = r308_read_ack_package(&R308h, &confirm_code);
 8009280:	f107 030d 	add.w	r3, r7, #13
 8009284:	4619      	mov	r1, r3
 8009286:	4809      	ldr	r0, [pc, #36]	; (80092ac <R308_Store+0x6c>)
 8009288:	f000 faac 	bl	80097e4 <r308_read_ack_package>
 800928c:	4603      	mov	r3, r0
 800928e:	81fb      	strh	r3, [r7, #14]
	if(ack_package < 0)
 8009290:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009294:	2b00      	cmp	r3, #0
 8009296:	da02      	bge.n	800929e <R308_Store+0x5e>
	{
		return ack_package;
 8009298:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800929c:	e001      	b.n	80092a2 <R308_Store+0x62>
	}

	return confirm_code;
 800929e:	7b7b      	ldrb	r3, [r7, #13]
 80092a0:	b21b      	sxth	r3, r3
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3710      	adds	r7, #16
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	2000066c 	.word	0x2000066c
 80092b0:	20000674 	.word	0x20000674

080092b4 <R308_SearchDatabase>:
/*																										*/
/* @Note				- to search the whole finger library for the template that matches the one in 	*/
/*						  CharBuffer1orCharBuffer2. When found, PageID will be returned					*/
/********************************************************************************************************/
int16_t R308_SearchDatabase(uint16_t * fingerID, uint8_t bufferID)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	460b      	mov	r3, r1
 80092be:	70fb      	strb	r3, [r7, #3]
	R308h.buffer[0] = R308_SEARCH;
 80092c0:	4b27      	ldr	r3, [pc, #156]	; (8009360 <R308_SearchDatabase+0xac>)
 80092c2:	2204      	movs	r2, #4
 80092c4:	721a      	strb	r2, [r3, #8]
	R308h.buffer[1] = bufferID;
 80092c6:	4a26      	ldr	r2, [pc, #152]	; (8009360 <R308_SearchDatabase+0xac>)
 80092c8:	78fb      	ldrb	r3, [r7, #3]
 80092ca:	7253      	strb	r3, [r2, #9]
	R308h.buffer[2] = 0x0;	//starting page 0
 80092cc:	4b24      	ldr	r3, [pc, #144]	; (8009360 <R308_SearchDatabase+0xac>)
 80092ce:	2200      	movs	r2, #0
 80092d0:	729a      	strb	r2, [r3, #10]
	R308h.buffer[3] = 0x0;	//0 searching numbers
 80092d2:	4b23      	ldr	r3, [pc, #140]	; (8009360 <R308_SearchDatabase+0xac>)
 80092d4:	2200      	movs	r2, #0
 80092d6:	72da      	strb	r2, [r3, #11]
	R308h.buffer[4] = (uint8_t)(500 >> 8);	// capacity
 80092d8:	4b21      	ldr	r3, [pc, #132]	; (8009360 <R308_SearchDatabase+0xac>)
 80092da:	2201      	movs	r2, #1
 80092dc:	731a      	strb	r2, [r3, #12]
	R308h.buffer[5] = (uint8_t)(500 & 0xFF);
 80092de:	4b20      	ldr	r3, [pc, #128]	; (8009360 <R308_SearchDatabase+0xac>)
 80092e0:	22f4      	movs	r2, #244	; 0xf4
 80092e2:	735a      	strb	r2, [r3, #13]

	r308_write_packet(&R308h, R308_COMMAND_PACKET, R308h.buffer, 6);
 80092e4:	2306      	movs	r3, #6
 80092e6:	4a1f      	ldr	r2, [pc, #124]	; (8009364 <R308_SearchDatabase+0xb0>)
 80092e8:	2101      	movs	r1, #1
 80092ea:	481d      	ldr	r0, [pc, #116]	; (8009360 <R308_SearchDatabase+0xac>)
 80092ec:	f000 f8d0 	bl	8009490 <r308_write_packet>
	uint8_t confirm_code = 0;
 80092f0:	2300      	movs	r3, #0
 80092f2:	737b      	strb	r3, [r7, #13]
	int16_t length = r308_read_ack_package(&R308h, &confirm_code);
 80092f4:	f107 030d 	add.w	r3, r7, #13
 80092f8:	4619      	mov	r1, r3
 80092fa:	4819      	ldr	r0, [pc, #100]	; (8009360 <R308_SearchDatabase+0xac>)
 80092fc:	f000 fa72 	bl	80097e4 <r308_read_ack_package>
 8009300:	4603      	mov	r3, r0
 8009302:	81fb      	strh	r3, [r7, #14]
	if(length < 0)
 8009304:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009308:	2b00      	cmp	r3, #0
 800930a:	da02      	bge.n	8009312 <R308_SearchDatabase+0x5e>
	{
		return length;
 800930c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009310:	e022      	b.n	8009358 <R308_SearchDatabase+0xa4>
	}
	if(R308_SUCCESS != confirm_code)
 8009312:	7b7b      	ldrb	r3, [r7, #13]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d002      	beq.n	800931e <R308_SearchDatabase+0x6a>
	{
		return confirm_code;
 8009318:	7b7b      	ldrb	r3, [r7, #13]
 800931a:	b21b      	sxth	r3, r3
 800931c:	e01c      	b.n	8009358 <R308_SearchDatabase+0xa4>
	}
	if(4 != length)
 800931e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009322:	2b04      	cmp	r3, #4
 8009324:	d002      	beq.n	800932c <R308_SearchDatabase+0x78>
	{
		return -2;
 8009326:	f06f 0301 	mvn.w	r3, #1
 800932a:	e015      	b.n	8009358 <R308_SearchDatabase+0xa4>
	}

	*fingerID = R308h.buffer[1];
 800932c:	4b0c      	ldr	r3, [pc, #48]	; (8009360 <R308_SearchDatabase+0xac>)
 800932e:	7a5b      	ldrb	r3, [r3, #9]
 8009330:	b29a      	uxth	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	801a      	strh	r2, [r3, #0]
	*fingerID = (*fingerID << 8);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	881b      	ldrh	r3, [r3, #0]
 800933a:	021b      	lsls	r3, r3, #8
 800933c:	b29a      	uxth	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	801a      	strh	r2, [r3, #0]
	*fingerID |= R308h.buffer[2];
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	881a      	ldrh	r2, [r3, #0]
 8009346:	4b06      	ldr	r3, [pc, #24]	; (8009360 <R308_SearchDatabase+0xac>)
 8009348:	7a9b      	ldrb	r3, [r3, #10]
 800934a:	b29b      	uxth	r3, r3
 800934c:	4313      	orrs	r3, r2
 800934e:	b29a      	uxth	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	801a      	strh	r2, [r3, #0]

	return confirm_code;
 8009354:	7b7b      	ldrb	r3, [r7, #13]
 8009356:	b21b      	sxth	r3, r3
}
 8009358:	4618      	mov	r0, r3
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	2000066c 	.word	0x2000066c
 8009364:	20000674 	.word	0x20000674

08009368 <R308_DeletChar>:
/*																										*/
/* @Note				- to search the whole finger library for the template that matches the one in 	*/
/*						  CharBuffer1orCharBuffer2. When found, PageID will be returned					*/
/********************************************************************************************************/
int16_t R308_DeletChar(uint16_t templateID, uint16_t num_to_delete)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	4603      	mov	r3, r0
 8009370:	460a      	mov	r2, r1
 8009372:	80fb      	strh	r3, [r7, #6]
 8009374:	4613      	mov	r3, r2
 8009376:	80bb      	strh	r3, [r7, #4]
	R308h.buffer[0] = R308_DELETE;
 8009378:	4b19      	ldr	r3, [pc, #100]	; (80093e0 <R308_DeletChar+0x78>)
 800937a:	220c      	movs	r2, #12
 800937c:	721a      	strb	r2, [r3, #8]
	R308h.buffer[1] = templateID >> 8;
 800937e:	88fb      	ldrh	r3, [r7, #6]
 8009380:	0a1b      	lsrs	r3, r3, #8
 8009382:	b29b      	uxth	r3, r3
 8009384:	b2da      	uxtb	r2, r3
 8009386:	4b16      	ldr	r3, [pc, #88]	; (80093e0 <R308_DeletChar+0x78>)
 8009388:	725a      	strb	r2, [r3, #9]
	R308h.buffer[2] = templateID & 0xFF;
 800938a:	88fb      	ldrh	r3, [r7, #6]
 800938c:	b2da      	uxtb	r2, r3
 800938e:	4b14      	ldr	r3, [pc, #80]	; (80093e0 <R308_DeletChar+0x78>)
 8009390:	729a      	strb	r2, [r3, #10]
	R308h.buffer[3] = num_to_delete >> 8;
 8009392:	88bb      	ldrh	r3, [r7, #4]
 8009394:	0a1b      	lsrs	r3, r3, #8
 8009396:	b29b      	uxth	r3, r3
 8009398:	b2da      	uxtb	r2, r3
 800939a:	4b11      	ldr	r3, [pc, #68]	; (80093e0 <R308_DeletChar+0x78>)
 800939c:	72da      	strb	r2, [r3, #11]
	R308h.buffer[4] = num_to_delete & 0xFF;
 800939e:	88bb      	ldrh	r3, [r7, #4]
 80093a0:	b2da      	uxtb	r2, r3
 80093a2:	4b0f      	ldr	r3, [pc, #60]	; (80093e0 <R308_DeletChar+0x78>)
 80093a4:	731a      	strb	r2, [r3, #12]

	r308_write_packet(&R308h, R308_COMMAND_PACKET, R308h.buffer, 5);
 80093a6:	2305      	movs	r3, #5
 80093a8:	4a0e      	ldr	r2, [pc, #56]	; (80093e4 <R308_DeletChar+0x7c>)
 80093aa:	2101      	movs	r1, #1
 80093ac:	480c      	ldr	r0, [pc, #48]	; (80093e0 <R308_DeletChar+0x78>)
 80093ae:	f000 f86f 	bl	8009490 <r308_write_packet>
	uint8_t confirm_code = 0;
 80093b2:	2300      	movs	r3, #0
 80093b4:	737b      	strb	r3, [r7, #13]
	int16_t ack_package = r308_read_ack_package(&R308h, &confirm_code);
 80093b6:	f107 030d 	add.w	r3, r7, #13
 80093ba:	4619      	mov	r1, r3
 80093bc:	4808      	ldr	r0, [pc, #32]	; (80093e0 <R308_DeletChar+0x78>)
 80093be:	f000 fa11 	bl	80097e4 <r308_read_ack_package>
 80093c2:	4603      	mov	r3, r0
 80093c4:	81fb      	strh	r3, [r7, #14]
	if(ack_package < 0)
 80093c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	da02      	bge.n	80093d4 <R308_DeletChar+0x6c>
	{
		return ack_package;
 80093ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80093d2:	e001      	b.n	80093d8 <R308_DeletChar+0x70>
	}

	return confirm_code;
 80093d4:	7b7b      	ldrb	r3, [r7, #13]
 80093d6:	b21b      	sxth	r3, r3
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	2000066c 	.word	0x2000066c
 80093e4:	20000674 	.word	0x20000674

080093e8 <R308_TemplateNum>:
/* @return				- 0 if OK and error code if there's an error									*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
int16_t R308_TemplateNum(void)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
	R308h.buffer[0] = R308_TEMPLATE_NUM;
 80093ee:	4b0f      	ldr	r3, [pc, #60]	; (800942c <R308_TemplateNum+0x44>)
 80093f0:	221d      	movs	r2, #29
 80093f2:	721a      	strb	r2, [r3, #8]
	r308_write_packet(&R308h, R308_COMMAND_PACKET, R308h.buffer, 1);
 80093f4:	2301      	movs	r3, #1
 80093f6:	4a0e      	ldr	r2, [pc, #56]	; (8009430 <R308_TemplateNum+0x48>)
 80093f8:	2101      	movs	r1, #1
 80093fa:	480c      	ldr	r0, [pc, #48]	; (800942c <R308_TemplateNum+0x44>)
 80093fc:	f000 f848 	bl	8009490 <r308_write_packet>
	uint8_t template_count = 0;
 8009400:	2300      	movs	r3, #0
 8009402:	717b      	strb	r3, [r7, #5]
	int16_t ack_package = r308_read_temp_num_bytes(&R308h, &template_count);
 8009404:	1d7b      	adds	r3, r7, #5
 8009406:	4619      	mov	r1, r3
 8009408:	4808      	ldr	r0, [pc, #32]	; (800942c <R308_TemplateNum+0x44>)
 800940a:	f000 fa19 	bl	8009840 <r308_read_temp_num_bytes>
 800940e:	4603      	mov	r3, r0
 8009410:	80fb      	strh	r3, [r7, #6]
	if(ack_package < 0)
 8009412:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009416:	2b00      	cmp	r3, #0
 8009418:	da02      	bge.n	8009420 <R308_TemplateNum+0x38>
	{
		return ack_package;
 800941a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800941e:	e001      	b.n	8009424 <R308_TemplateNum+0x3c>
	}

	return template_count;
 8009420:	797b      	ldrb	r3, [r7, #5]
 8009422:	b21b      	sxth	r3, r3
}
 8009424:	4618      	mov	r0, r3
 8009426:	3708      	adds	r7, #8
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}
 800942c:	2000066c 	.word	0x2000066c
 8009430:	20000674 	.word	0x20000674

08009434 <USART1_IRQHandler>:




void USART1_IRQHandler(void)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	af00      	add	r7, sp, #0
    r308_irq_handler();
 8009438:	f000 fa38 	bl	80098ac <r308_irq_handler>
}
 800943c:	bf00      	nop
 800943e:	bd80      	pop	{r7, pc}

08009440 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	af00      	add	r7, sp, #0
	r308_irq_handler();
 8009444:	f000 fa32 	bl	80098ac <r308_irq_handler>
}
 8009448:	bf00      	nop
 800944a:	bd80      	pop	{r7, pc}

0800944c <r308_usart_non_blocking_read_byte>:


//helper APIs
static int16_t r308_usart_non_blocking_read_byte(void)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
	int16_t ch;
	uint32_t Tick = GetTick();
 8009452:	f7f8 fe1d 	bl	8002090 <GetTick>
 8009456:	6078      	str	r0, [r7, #4]

	do{
		ch = R308_USART_ReadByte();
 8009458:	f7ff fd84 	bl	8008f64 <R308_USART_ReadByte>
 800945c:	4603      	mov	r3, r0
 800945e:	807b      	strh	r3, [r7, #2]
		if( ch >= 0 )
 8009460:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009464:	2b00      	cmp	r3, #0
 8009466:	db02      	blt.n	800946e <r308_usart_non_blocking_read_byte+0x22>
		{
			return ch;
 8009468:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800946c:	e00a      	b.n	8009484 <r308_usart_non_blocking_read_byte+0x38>
		}
	}while((GetTick() - Tick) < R308_USART_h.Timeout);
 800946e:	f7f8 fe0f 	bl	8002090 <GetTick>
 8009472:	4602      	mov	r2, r0
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	4a04      	ldr	r2, [pc, #16]	; (800948c <r308_usart_non_blocking_read_byte+0x40>)
 800947a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800947c:	4293      	cmp	r3, r2
 800947e:	d3eb      	bcc.n	8009458 <r308_usart_non_blocking_read_byte+0xc>

	// return -1 is timed out
	return -1;
 8009480:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009484:	4618      	mov	r0, r3
 8009486:	3708      	adds	r7, #8
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}
 800948c:	2000023c 	.word	0x2000023c

08009490 <r308_write_packet>:


void r308_write_packet(R308_Handle_t *pR308Handle, uint8_t packettype, uint8_t *packet, uint16_t length)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b088      	sub	sp, #32
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	607a      	str	r2, [r7, #4]
 800949a:	461a      	mov	r2, r3
 800949c:	460b      	mov	r3, r1
 800949e:	72fb      	strb	r3, [r7, #11]
 80094a0:	4613      	mov	r3, r2
 80094a2:	813b      	strh	r3, [r7, #8]
	length += 2;
 80094a4:	893b      	ldrh	r3, [r7, #8]
 80094a6:	3302      	adds	r3, #2
 80094a8:	813b      	strh	r3, [r7, #8]

	uint8_t preamble[] = {
 80094aa:	23ef      	movs	r3, #239	; 0xef
 80094ac:	753b      	strb	r3, [r7, #20]
 80094ae:	2301      	movs	r3, #1
 80094b0:	757b      	strb	r3, [r7, #21]
							(uint8_t)(R308_START_CODE >> 8),
							(uint8_t)R308_START_CODE,
	                        (uint8_t)(pR308Handle->Address >> 24),
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	0e1b      	lsrs	r3, r3, #24
 80094b8:	b2db      	uxtb	r3, r3
	uint8_t preamble[] = {
 80094ba:	75bb      	strb	r3, [r7, #22]
							(uint8_t)(pR308Handle->Address >> 16),
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	0c1b      	lsrs	r3, r3, #16
 80094c2:	b2db      	uxtb	r3, r3
	uint8_t preamble[] = {
 80094c4:	75fb      	strb	r3, [r7, #23]
	                        (uint8_t)(pR308Handle->Address >> 8),
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	0a1b      	lsrs	r3, r3, #8
 80094cc:	b2db      	uxtb	r3, r3
	uint8_t preamble[] = {
 80094ce:	763b      	strb	r3, [r7, #24]
							(uint8_t)(pR308Handle->Address),
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	b2db      	uxtb	r3, r3
	uint8_t preamble[] = {
 80094d6:	767b      	strb	r3, [r7, #25]
 80094d8:	7afb      	ldrb	r3, [r7, #11]
 80094da:	76bb      	strb	r3, [r7, #26]
							(uint8_t)packettype,
							(uint8_t)(length >> 8),
 80094dc:	893b      	ldrh	r3, [r7, #8]
 80094de:	0a1b      	lsrs	r3, r3, #8
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	b2db      	uxtb	r3, r3
	uint8_t preamble[] = {
 80094e4:	76fb      	strb	r3, [r7, #27]
							(uint8_t)(length)
 80094e6:	893b      	ldrh	r3, [r7, #8]
 80094e8:	b2db      	uxtb	r3, r3
	uint8_t preamble[] = {
 80094ea:	773b      	strb	r3, [r7, #28]
						};

    R308_USART_Write((uint8_t *)preamble, sizeof(preamble));
 80094ec:	f107 0314 	add.w	r3, r7, #20
 80094f0:	2109      	movs	r1, #9
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7ff fd5e 	bl	8008fb4 <R308_USART_Write>

    uint16_t sum = (length >> 8) + (length & 0xFF) + packettype;
 80094f8:	893b      	ldrh	r3, [r7, #8]
 80094fa:	0a1b      	lsrs	r3, r3, #8
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	893b      	ldrh	r3, [r7, #8]
 8009500:	b2db      	uxtb	r3, r3
 8009502:	b29b      	uxth	r3, r3
 8009504:	4413      	add	r3, r2
 8009506:	b29a      	uxth	r2, r3
 8009508:	7afb      	ldrb	r3, [r7, #11]
 800950a:	b29b      	uxth	r3, r3
 800950c:	4413      	add	r3, r2
 800950e:	b29b      	uxth	r3, r3
 8009510:	827b      	strh	r3, [r7, #18]
	for (uint8_t i = 0; i < length - 2; i++)
 8009512:	2300      	movs	r3, #0
 8009514:	77fb      	strb	r3, [r7, #31]
 8009516:	e012      	b.n	800953e <r308_write_packet+0xae>
	{
		R308_USART_Write(&packet[i], 1);
 8009518:	7ffb      	ldrb	r3, [r7, #31]
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	4413      	add	r3, r2
 800951e:	2101      	movs	r1, #1
 8009520:	4618      	mov	r0, r3
 8009522:	f7ff fd47 	bl	8008fb4 <R308_USART_Write>
		sum += packet[i];
 8009526:	7ffb      	ldrb	r3, [r7, #31]
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	4413      	add	r3, r2
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	b29a      	uxth	r2, r3
 8009530:	8a7b      	ldrh	r3, [r7, #18]
 8009532:	4413      	add	r3, r2
 8009534:	b29b      	uxth	r3, r3
 8009536:	827b      	strh	r3, [r7, #18]
	for (uint8_t i = 0; i < length - 2; i++)
 8009538:	7ffb      	ldrb	r3, [r7, #31]
 800953a:	3301      	adds	r3, #1
 800953c:	77fb      	strb	r3, [r7, #31]
 800953e:	7ffa      	ldrb	r2, [r7, #31]
 8009540:	893b      	ldrh	r3, [r7, #8]
 8009542:	3b02      	subs	r3, #2
 8009544:	429a      	cmp	r2, r3
 8009546:	dbe7      	blt.n	8009518 <r308_write_packet+0x88>
	}

	R308_USART_Write((uint8_t *)(&sum) + 1, 1);
 8009548:	f107 0312 	add.w	r3, r7, #18
 800954c:	3301      	adds	r3, #1
 800954e:	2101      	movs	r1, #1
 8009550:	4618      	mov	r0, r3
 8009552:	f7ff fd2f 	bl	8008fb4 <R308_USART_Write>
	R308_USART_Write((uint8_t *)&sum, 1);
 8009556:	f107 0312 	add.w	r3, r7, #18
 800955a:	2101      	movs	r1, #1
 800955c:	4618      	mov	r0, r3
 800955e:	f7ff fd29 	bl	8008fb4 <R308_USART_Write>
}
 8009562:	bf00      	nop
 8009564:	3720      	adds	r7, #32
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
	...

0800956c <r308_get_reply>:

int16_t r308_get_reply(R308_Handle_t *pR308Handle, uint8_t *replyBuf, uint16_t buffer_length, uint8_t *packetID)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b08c      	sub	sp, #48	; 0x30
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	603b      	str	r3, [r7, #0]
 8009578:	4613      	mov	r3, r2
 800957a:	80fb      	strh	r3, [r7, #6]
	R308_State_t state = R308_STATE_READ_HEADER;
 800957c:	2300      	movs	r3, #0
 800957e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    uint16_t header = 0;
 8009582:	2300      	movs	r3, #0
 8009584:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint16_t length = 0;
 8009586:	2300      	movs	r3, #0
 8009588:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint8_t pID = 0;
 800958a:	2300      	movs	r3, #0
 800958c:	75fb      	strb	r3, [r7, #23]
    uint16_t checksum = 0;
 800958e:	2300      	movs	r3, #0
 8009590:	853b      	strh	r3, [r7, #40]	; 0x28
    uint16_t remain = 0;
 8009592:	2300      	movs	r3, #0
 8009594:	84fb      	strh	r3, [r7, #38]	; 0x26

    uint32_t last_read = GetTick();
 8009596:	f7f8 fd7b 	bl	8002090 <GetTick>
 800959a:	6238      	str	r0, [r7, #32]

    while ((uint32_t)(GetTick() - last_read) < 2000)
 800959c:	bf00      	nop
 800959e:	e10a      	b.n	80097b6 <r308_get_reply+0x24a>
    {
        switch(state)
 80095a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80095a4:	2b05      	cmp	r3, #5
 80095a6:	f200 8106 	bhi.w	80097b6 <r308_get_reply+0x24a>
 80095aa:	a201      	add	r2, pc, #4	; (adr r2, 80095b0 <r308_get_reply+0x44>)
 80095ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b0:	080095c9 	.word	0x080095c9
 80095b4:	08009611 	.word	0x08009611
 80095b8:	08009681 	.word	0x08009681
 80095bc:	080096b1 	.word	0x080096b1
 80095c0:	08009721 	.word	0x08009721
 80095c4:	0800976b 	.word	0x0800976b
        {
            case R308_STATE_READ_HEADER:
            {
                if(0 == R308_USART_GetNumOfAvailableRxBytes())
 80095c8:	f7ff fd3c 	bl	8009044 <R308_USART_GetNumOfAvailableRxBytes>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d100      	bne.n	80095d4 <r308_get_reply+0x68>
 80095d2:	e0f0      	b.n	80097b6 <r308_get_reply+0x24a>
                {
                	continue;
                }

                last_read = GetTick();
 80095d4:	f7f8 fd5c 	bl	8002090 <GetTick>
 80095d8:	6238      	str	r0, [r7, #32]
                uint8_t byte;
                R308_USART_Read(&byte, 1);
 80095da:	f107 0316 	add.w	r3, r7, #22
 80095de:	2101      	movs	r1, #1
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7ff fd09 	bl	8008ff8 <R308_USART_Read>

                header = (header << 8);
 80095e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80095e8:	021b      	lsls	r3, r3, #8
 80095ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
                header |= byte;
 80095ec:	7dbb      	ldrb	r3, [r7, #22]
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80095f2:	4313      	orrs	r3, r2
 80095f4:	85bb      	strh	r3, [r7, #44]	; 0x2c
                if(R308_START_CODE != header)
 80095f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80095f8:	f64e 7201 	movw	r2, #61185	; 0xef01
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d105      	bne.n	800960c <r308_get_reply+0xa0>
                {
                	break;
                }

                state = R308_STATE_READ_ADDRESS;
 8009600:	2301      	movs	r3, #1
 8009602:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                header = 0;
 8009606:	2300      	movs	r3, #0
 8009608:	85bb      	strh	r3, [r7, #44]	; 0x2c
                break;
 800960a:	e0d4      	b.n	80097b6 <r308_get_reply+0x24a>
                	break;
 800960c:	bf00      	nop
 800960e:	e0d2      	b.n	80097b6 <r308_get_reply+0x24a>
            }
            case R308_STATE_READ_ADDRESS:
            {
                if(R308_USART_GetNumOfAvailableRxBytes() < 4)
 8009610:	f7ff fd18 	bl	8009044 <R308_USART_GetNumOfAvailableRxBytes>
 8009614:	4603      	mov	r3, r0
 8009616:	2b03      	cmp	r3, #3
 8009618:	d800      	bhi.n	800961c <r308_get_reply+0xb0>
                {
                	continue;
 800961a:	e0cc      	b.n	80097b6 <r308_get_reply+0x24a>
                }

                last_read = GetTick();
 800961c:	f7f8 fd38 	bl	8002090 <GetTick>
 8009620:	6238      	str	r0, [r7, #32]
                R308_USART_Read(R308h.buffer, 4);
 8009622:	2104      	movs	r1, #4
 8009624:	486d      	ldr	r0, [pc, #436]	; (80097dc <r308_get_reply+0x270>)
 8009626:	f7ff fce7 	bl	8008ff8 <R308_USART_Read>
                uint32_t addr = R308h.buffer[0];
 800962a:	4b6d      	ldr	r3, [pc, #436]	; (80097e0 <r308_get_reply+0x274>)
 800962c:	7a1b      	ldrb	r3, [r3, #8]
 800962e:	61bb      	str	r3, [r7, #24]
                addr = (addr << 8);
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	021b      	lsls	r3, r3, #8
 8009634:	61bb      	str	r3, [r7, #24]
                addr |= R308h.buffer[1];
 8009636:	4b6a      	ldr	r3, [pc, #424]	; (80097e0 <r308_get_reply+0x274>)
 8009638:	7a5b      	ldrb	r3, [r3, #9]
 800963a:	461a      	mov	r2, r3
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	4313      	orrs	r3, r2
 8009640:	61bb      	str	r3, [r7, #24]
                addr = (addr << 8);
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	021b      	lsls	r3, r3, #8
 8009646:	61bb      	str	r3, [r7, #24]
                addr |= R308h.buffer[2];
 8009648:	4b65      	ldr	r3, [pc, #404]	; (80097e0 <r308_get_reply+0x274>)
 800964a:	7a9b      	ldrb	r3, [r3, #10]
 800964c:	461a      	mov	r2, r3
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	4313      	orrs	r3, r2
 8009652:	61bb      	str	r3, [r7, #24]
                addr = (addr << 8);
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	021b      	lsls	r3, r3, #8
 8009658:	61bb      	str	r3, [r7, #24]
                addr |= R308h.buffer[3];
 800965a:	4b61      	ldr	r3, [pc, #388]	; (80097e0 <r308_get_reply+0x274>)
 800965c:	7adb      	ldrb	r3, [r3, #11]
 800965e:	461a      	mov	r2, r3
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	4313      	orrs	r3, r2
 8009664:	61bb      	str	r3, [r7, #24]

                if (addr != R308h.Address)
 8009666:	4b5e      	ldr	r3, [pc, #376]	; (80097e0 <r308_get_reply+0x274>)
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	69ba      	ldr	r2, [r7, #24]
 800966c:	429a      	cmp	r2, r3
 800966e:	d003      	beq.n	8009678 <r308_get_reply+0x10c>
                {
                    state = R308_STATE_READ_HEADER;
 8009670:	2300      	movs	r3, #0
 8009672:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    //wrong address
                    break;
 8009676:	e09e      	b.n	80097b6 <r308_get_reply+0x24a>
                }

                state = R308_STATE_READ_PID;
 8009678:	2302      	movs	r3, #2
 800967a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                break;
 800967e:	e09a      	b.n	80097b6 <r308_get_reply+0x24a>
			}
            case R308_STATE_READ_PID:
            {
                if(0 == R308_USART_GetNumOfAvailableRxBytes())
 8009680:	f7ff fce0 	bl	8009044 <R308_USART_GetNumOfAvailableRxBytes>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d100      	bne.n	800968c <r308_get_reply+0x120>
                {
                	continue;
 800968a:	e094      	b.n	80097b6 <r308_get_reply+0x24a>
                }

                last_read = GetTick();
 800968c:	f7f8 fd00 	bl	8002090 <GetTick>
 8009690:	6238      	str	r0, [r7, #32]
                R308_USART_Read(&pID, 1);
 8009692:	f107 0317 	add.w	r3, r7, #23
 8009696:	2101      	movs	r1, #1
 8009698:	4618      	mov	r0, r3
 800969a:	f7ff fcad 	bl	8008ff8 <R308_USART_Read>
                checksum = pID;
 800969e:	7dfb      	ldrb	r3, [r7, #23]
 80096a0:	853b      	strh	r3, [r7, #40]	; 0x28
                *packetID = pID;
 80096a2:	7dfa      	ldrb	r2, [r7, #23]
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	701a      	strb	r2, [r3, #0]

                state = R308_STATE_READ_LENGTH;
 80096a8:	2303      	movs	r3, #3
 80096aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                break;
 80096ae:	e082      	b.n	80097b6 <r308_get_reply+0x24a>
			}
            case R308_STATE_READ_LENGTH:
            {
                if(R308_USART_GetNumOfAvailableRxBytes() < 2)
 80096b0:	f7ff fcc8 	bl	8009044 <R308_USART_GetNumOfAvailableRxBytes>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d800      	bhi.n	80096bc <r308_get_reply+0x150>
                {
                	continue;
 80096ba:	e07c      	b.n	80097b6 <r308_get_reply+0x24a>
                }

                last_read = GetTick();
 80096bc:	f7f8 fce8 	bl	8002090 <GetTick>
 80096c0:	6238      	str	r0, [r7, #32]
                R308_USART_Read(R308h.buffer, 2);
 80096c2:	2102      	movs	r1, #2
 80096c4:	4845      	ldr	r0, [pc, #276]	; (80097dc <r308_get_reply+0x270>)
 80096c6:	f7ff fc97 	bl	8008ff8 <R308_USART_Read>
                length = R308h.buffer[0];
 80096ca:	4b45      	ldr	r3, [pc, #276]	; (80097e0 <r308_get_reply+0x274>)
 80096cc:	7a1b      	ldrb	r3, [r3, #8]
 80096ce:	857b      	strh	r3, [r7, #42]	; 0x2a
                length = (length << 8);
 80096d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80096d2:	021b      	lsls	r3, r3, #8
 80096d4:	857b      	strh	r3, [r7, #42]	; 0x2a
                length |= R308h.buffer[1];
 80096d6:	4b42      	ldr	r3, [pc, #264]	; (80097e0 <r308_get_reply+0x274>)
 80096d8:	7a5b      	ldrb	r3, [r3, #9]
 80096da:	b29a      	uxth	r2, r3
 80096dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80096de:	4313      	orrs	r3, r2
 80096e0:	857b      	strh	r3, [r7, #42]	; 0x2a

                //TODO: possible issue here
                if(length > 256 + 2 || (length > buffer_length + 2))
 80096e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80096e4:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 80096e8:	d804      	bhi.n	80096f4 <r308_get_reply+0x188>
 80096ea:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80096ec:	88fb      	ldrh	r3, [r7, #6]
 80096ee:	3302      	adds	r3, #2
 80096f0:	429a      	cmp	r2, r3
 80096f2:	dd03      	ble.n	80096fc <r308_get_reply+0x190>
                {
                    state = R308_STATE_READ_HEADER;
 80096f4:	2300      	movs	r3, #0
 80096f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    //packet too long
                    continue;
 80096fa:	e05c      	b.n	80097b6 <r308_get_reply+0x24a>
                }

                /* num of bytes left to read */
                remain = length;
 80096fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80096fe:	84fb      	strh	r3, [r7, #38]	; 0x26

                checksum = checksum + R308h.buffer[0];
 8009700:	4b37      	ldr	r3, [pc, #220]	; (80097e0 <r308_get_reply+0x274>)
 8009702:	7a1b      	ldrb	r3, [r3, #8]
 8009704:	b29a      	uxth	r2, r3
 8009706:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009708:	4413      	add	r3, r2
 800970a:	853b      	strh	r3, [r7, #40]	; 0x28
                checksum = checksum + R308h.buffer[1];
 800970c:	4b34      	ldr	r3, [pc, #208]	; (80097e0 <r308_get_reply+0x274>)
 800970e:	7a5b      	ldrb	r3, [r3, #9]
 8009710:	b29a      	uxth	r2, r3
 8009712:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009714:	4413      	add	r3, r2
 8009716:	853b      	strh	r3, [r7, #40]	; 0x28
                state = R308_STATE_READ_CONTENTS;
 8009718:	2304      	movs	r3, #4
 800971a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                break;
 800971e:	e04a      	b.n	80097b6 <r308_get_reply+0x24a>
            }
            case R308_STATE_READ_CONTENTS:
			{
				if (remain <= 2) {
 8009720:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009722:	2b02      	cmp	r3, #2
 8009724:	d803      	bhi.n	800972e <r308_get_reply+0x1c2>
					state = R308_STATE_READ_CHECKSUM;
 8009726:	2305      	movs	r3, #5
 8009728:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800972c:	e043      	b.n	80097b6 <r308_get_reply+0x24a>
				}

				if (R308_USART_GetNumOfAvailableRxBytes() == 0)
 800972e:	f7ff fc89 	bl	8009044 <R308_USART_GetNumOfAvailableRxBytes>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d100      	bne.n	800973a <r308_get_reply+0x1ce>
 8009738:	e03d      	b.n	80097b6 <r308_get_reply+0x24a>
				{
					continue;
				}

				last_read = GetTick();
 800973a:	f7f8 fca9 	bl	8002090 <GetTick>
 800973e:	6238      	str	r0, [r7, #32]

				uint8_t byte;
				R308_USART_Read(&byte, 1);
 8009740:	f107 0315 	add.w	r3, r7, #21
 8009744:	2101      	movs	r1, #1
 8009746:	4618      	mov	r0, r3
 8009748:	f7ff fc56 	bl	8008ff8 <R308_USART_Read>

				*replyBuf++ = byte;
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	1c5a      	adds	r2, r3, #1
 8009750:	60ba      	str	r2, [r7, #8]
 8009752:	7d7a      	ldrb	r2, [r7, #21]
 8009754:	701a      	strb	r2, [r3, #0]

				checksum += byte;
 8009756:	7d7b      	ldrb	r3, [r7, #21]
 8009758:	b29a      	uxth	r2, r3
 800975a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800975c:	4413      	add	r3, r2
 800975e:	853b      	strh	r3, [r7, #40]	; 0x28
				remain--;
 8009760:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009762:	3b01      	subs	r3, #1
 8009764:	84fb      	strh	r3, [r7, #38]	; 0x26
				break;
 8009766:	bf00      	nop
 8009768:	e025      	b.n	80097b6 <r308_get_reply+0x24a>
			}
            case R308_STATE_READ_CHECKSUM:
            {
                if(R308_USART_GetNumOfAvailableRxBytes() < 2)
 800976a:	f7ff fc6b 	bl	8009044 <R308_USART_GetNumOfAvailableRxBytes>
 800976e:	4603      	mov	r3, r0
 8009770:	2b01      	cmp	r3, #1
 8009772:	d91f      	bls.n	80097b4 <r308_get_reply+0x248>
                {
                	continue;
                }

                last_read = GetTick();
 8009774:	f7f8 fc8c 	bl	8002090 <GetTick>
 8009778:	6238      	str	r0, [r7, #32]
                uint8_t temp[2];
                R308_USART_Read(temp, 2);
 800977a:	f107 0310 	add.w	r3, r7, #16
 800977e:	2102      	movs	r1, #2
 8009780:	4618      	mov	r0, r3
 8009782:	f7ff fc39 	bl	8008ff8 <R308_USART_Read>
                uint16_t to_check = temp[0];
 8009786:	7c3b      	ldrb	r3, [r7, #16]
 8009788:	83fb      	strh	r3, [r7, #30]
                to_check = (to_check << 8);
 800978a:	8bfb      	ldrh	r3, [r7, #30]
 800978c:	021b      	lsls	r3, r3, #8
 800978e:	83fb      	strh	r3, [r7, #30]
                to_check |= temp[1];
 8009790:	7c7b      	ldrb	r3, [r7, #17]
 8009792:	b29a      	uxth	r2, r3
 8009794:	8bfb      	ldrh	r3, [r7, #30]
 8009796:	4313      	orrs	r3, r2
 8009798:	83fb      	strh	r3, [r7, #30]

                if(to_check != checksum)
 800979a:	8bfa      	ldrh	r2, [r7, #30]
 800979c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800979e:	429a      	cmp	r2, r3
 80097a0:	d003      	beq.n	80097aa <r308_get_reply+0x23e>
                {
                    state = R308_STATE_READ_HEADER;
 80097a2:	2300      	movs	r3, #0
 80097a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					//wrong checksum
                    continue;
 80097a8:	e005      	b.n	80097b6 <r308_get_reply+0x24a>
                }

                //without checksum
                return length - 2;
 80097aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80097ac:	3b02      	subs	r3, #2
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	b21b      	sxth	r3, r3
 80097b2:	e00f      	b.n	80097d4 <r308_get_reply+0x268>
                	continue;
 80097b4:	bf00      	nop
    while ((uint32_t)(GetTick() - last_read) < 2000)
 80097b6:	f7f8 fc6b 	bl	8002090 <GetTick>
 80097ba:	4602      	mov	r2, r0
 80097bc:	6a3b      	ldr	r3, [r7, #32]
 80097be:	1ad3      	subs	r3, r2, r3
 80097c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80097c4:	f4ff aeec 	bcc.w	80095a0 <r308_get_reply+0x34>
        }
    }

//	ST7735_FillScreen(ST7735_RED);
//	ST7735_DrawString(35, 50, "RESPONSE        TIMEOUT", Font_11x18, ST7735_WHITE, ST7735_RED);
	delay_ms(1000);
 80097c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80097cc:	f7fc fa24 	bl	8005c18 <delay_ms>
    return -1;
 80097d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3730      	adds	r7, #48	; 0x30
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	20000674 	.word	0x20000674
 80097e0:	2000066c 	.word	0x2000066c

080097e4 <r308_read_ack_package>:



static int16_t r308_read_ack_package(R308_Handle_t *pR308Handle, uint8_t *ack_package)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
	uint8_t packetID = 0;
 80097ee:	2300      	movs	r3, #0
 80097f0:	737b      	strb	r3, [r7, #13]
	int16_t length = r308_get_reply(pR308Handle, R308h.buffer, 33, &packetID);
 80097f2:	f107 030d 	add.w	r3, r7, #13
 80097f6:	2221      	movs	r2, #33	; 0x21
 80097f8:	4910      	ldr	r1, [pc, #64]	; (800983c <r308_read_ack_package+0x58>)
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f7ff feb6 	bl	800956c <r308_get_reply>
 8009800:	4603      	mov	r3, r0
 8009802:	81fb      	strh	r3, [r7, #14]

	//timed out
	if(length < 0)
 8009804:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009808:	2b00      	cmp	r3, #0
 800980a:	da02      	bge.n	8009812 <r308_read_ack_package+0x2e>
	{
		return length;
 800980c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009810:	e00f      	b.n	8009832 <r308_read_ack_package+0x4e>
	}

	// wrong packet ID
	if (R308_ACK_PACKET != packetID)
 8009812:	7b7b      	ldrb	r3, [r7, #13]
 8009814:	2b07      	cmp	r3, #7
 8009816:	d002      	beq.n	800981e <r308_read_ack_package+0x3a>
	{
		return -2;
 8009818:	f06f 0301 	mvn.w	r3, #1
 800981c:	e009      	b.n	8009832 <r308_read_ack_package+0x4e>
	}

	*ack_package = pR308Handle->buffer[0];
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	7a1a      	ldrb	r2, [r3, #8]
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	701a      	strb	r2, [r3, #0]


	// confirmation code
	return --length;
 8009826:	89fb      	ldrh	r3, [r7, #14]
 8009828:	3b01      	subs	r3, #1
 800982a:	b29b      	uxth	r3, r3
 800982c:	81fb      	strh	r3, [r7, #14]
 800982e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8009832:	4618      	mov	r0, r3
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	20000674 	.word	0x20000674

08009840 <r308_read_temp_num_bytes>:


static int16_t r308_read_temp_num_bytes(R308_Handle_t *pR308Handle, uint8_t *template_count)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
	uint8_t packetID = 0;
 800984a:	2300      	movs	r3, #0
 800984c:	737b      	strb	r3, [r7, #13]
	int16_t length = r308_get_reply(pR308Handle, R308h.buffer, 33, &packetID);
 800984e:	f107 030d 	add.w	r3, r7, #13
 8009852:	2221      	movs	r2, #33	; 0x21
 8009854:	4914      	ldr	r1, [pc, #80]	; (80098a8 <r308_read_temp_num_bytes+0x68>)
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7ff fe88 	bl	800956c <r308_get_reply>
 800985c:	4603      	mov	r3, r0
 800985e:	81fb      	strh	r3, [r7, #14]

	//timed out
	if(length < 0)
 8009860:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009864:	2b00      	cmp	r3, #0
 8009866:	da02      	bge.n	800986e <r308_read_temp_num_bytes+0x2e>
	{
		return length;
 8009868:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800986c:	e017      	b.n	800989e <r308_read_temp_num_bytes+0x5e>
	}

	// wrong packet ID
	if (R308_ACK_PACKET != packetID)
 800986e:	7b7b      	ldrb	r3, [r7, #13]
 8009870:	2b07      	cmp	r3, #7
 8009872:	d002      	beq.n	800987a <r308_read_temp_num_bytes+0x3a>
	{
		return -2;
 8009874:	f06f 0301 	mvn.w	r3, #1
 8009878:	e011      	b.n	800989e <r308_read_temp_num_bytes+0x5e>
	}

	// get template count from 11th and 12th bytes
	*template_count = (pR308Handle->buffer[1] << 8) | pR308Handle->buffer[2];
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	7a5b      	ldrb	r3, [r3, #9]
 800987e:	021b      	lsls	r3, r3, #8
 8009880:	b25a      	sxtb	r2, r3
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	7a9b      	ldrb	r3, [r3, #10]
 8009886:	b25b      	sxtb	r3, r3
 8009888:	4313      	orrs	r3, r2
 800988a:	b25b      	sxtb	r3, r3
 800988c:	b2da      	uxtb	r2, r3
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	701a      	strb	r2, [r3, #0]

	// confirmation code
	return --length;
 8009892:	89fb      	ldrh	r3, [r7, #14]
 8009894:	3b01      	subs	r3, #1
 8009896:	b29b      	uxth	r3, r3
 8009898:	81fb      	strh	r3, [r7, #14]
 800989a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	20000674 	.word	0x20000674

080098ac <r308_irq_handler>:


static void r308_irq_handler(void)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
    USART_RegDef_t *h_r308_usart = R308_USART_h.USART_handle.pUSARTx;
 80098b2:	4b3a      	ldr	r3, [pc, #232]	; (800999c <r308_irq_handler+0xf0>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	60fb      	str	r3, [r7, #12]

    // Check for Overrun Error first
    if (SET == USART_GetFlagStatus(h_r308_usart, USART_SR_ORE))
 80098b8:	2103      	movs	r1, #3
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f7fc f80c 	bl	80058d8 <USART_GetFlagStatus>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d103      	bne.n	80098ce <r308_irq_handler+0x22>
    {
        // Handle Overrun Error (e.g., clear the flag)
        USART_ClearFlag(h_r308_usart, USART_SR_ORE);
 80098c6:	2103      	movs	r1, #3
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f7fc f867 	bl	800599c <USART_ClearFlag>
    }

    // Check for Receive Data Register Not Empty
    if (SET == USART_GetFlagStatus(h_r308_usart, USART_SR_RXNE))
 80098ce:	2105      	movs	r1, #5
 80098d0:	68f8      	ldr	r0, [r7, #12]
 80098d2:	f7fc f801 	bl	80058d8 <USART_GetFlagStatus>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d11f      	bne.n	800991c <r308_irq_handler+0x70>
    {
        unsigned char ch = h_r308_usart->DR.bit.dr;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	72fb      	strb	r3, [r7, #11]
        uint16_t k = (uint16_t)(R308_USART_h.RX_head + 1) % RX_BUFFER_SIZE;
 80098e8:	4b2c      	ldr	r3, [pc, #176]	; (800999c <r308_irq_handler+0xf0>)
 80098ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	3301      	adds	r3, #1
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098f6:	813b      	strh	r3, [r7, #8]

        // Prevent overflow
        if (k != R308_USART_h.RX_tail)
 80098f8:	4b28      	ldr	r3, [pc, #160]	; (800999c <r308_irq_handler+0xf0>)
 80098fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	893a      	ldrh	r2, [r7, #8]
 8009900:	429a      	cmp	r2, r3
 8009902:	d00b      	beq.n	800991c <r308_irq_handler+0x70>
        {
            R308_USART_h.RX_Buffer[R308_USART_h.RX_head] = ch;
 8009904:	4b25      	ldr	r3, [pc, #148]	; (800999c <r308_irq_handler+0xf0>)
 8009906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009908:	b29b      	uxth	r3, r3
 800990a:	461a      	mov	r2, r3
 800990c:	4b23      	ldr	r3, [pc, #140]	; (800999c <r308_irq_handler+0xf0>)
 800990e:	4413      	add	r3, r2
 8009910:	7afa      	ldrb	r2, [r7, #11]
 8009912:	f883 222e 	strb.w	r2, [r3, #558]	; 0x22e
            R308_USART_h.RX_head = k;
 8009916:	4a21      	ldr	r2, [pc, #132]	; (800999c <r308_irq_handler+0xf0>)
 8009918:	893b      	ldrh	r3, [r7, #8]
 800991a:	8553      	strh	r3, [r2, #42]	; 0x2a
            // Handle buffer overflow (e.g., discard the oldest data)
        }
    }

    // Check for Transmit Data Register Empty
    if (SET == USART_GetFlagStatus(h_r308_usart, USART_SR_TXE))
 800991c:	2107      	movs	r1, #7
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	f7fb ffda 	bl	80058d8 <USART_GetFlagStatus>
 8009924:	4603      	mov	r3, r0
 8009926:	2b01      	cmp	r3, #1
 8009928:	d134      	bne.n	8009994 <r308_irq_handler+0xe8>
    {
        if (R308_USART_h.TX_head != R308_USART_h.TX_tail)
 800992a:	4b1c      	ldr	r3, [pc, #112]	; (800999c <r308_irq_handler+0xf0>)
 800992c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800992e:	b29a      	uxth	r2, r3
 8009930:	4b1a      	ldr	r3, [pc, #104]	; (800999c <r308_irq_handler+0xf0>)
 8009932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009934:	b29b      	uxth	r3, r3
 8009936:	429a      	cmp	r2, r3
 8009938:	d01f      	beq.n	800997a <r308_irq_handler+0xce>
        {
            unsigned char ch = R308_USART_h.TX_Buffer[R308_USART_h.TX_tail];
 800993a:	4b18      	ldr	r3, [pc, #96]	; (800999c <r308_irq_handler+0xf0>)
 800993c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800993e:	b29b      	uxth	r3, r3
 8009940:	461a      	mov	r2, r3
 8009942:	4b16      	ldr	r3, [pc, #88]	; (800999c <r308_irq_handler+0xf0>)
 8009944:	4413      	add	r3, r2
 8009946:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800994a:	71fb      	strb	r3, [r7, #7]
            R308_USART_h.TX_tail = (R308_USART_h.TX_tail + 1) % TX_BUFFER_SIZE;
 800994c:	4b13      	ldr	r3, [pc, #76]	; (800999c <r308_irq_handler+0xf0>)
 800994e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009950:	b29b      	uxth	r3, r3
 8009952:	3301      	adds	r3, #1
 8009954:	425a      	negs	r2, r3
 8009956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800995a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800995e:	bf58      	it	pl
 8009960:	4253      	negpl	r3, r2
 8009962:	b29a      	uxth	r2, r3
 8009964:	4b0d      	ldr	r3, [pc, #52]	; (800999c <r308_irq_handler+0xf0>)
 8009966:	851a      	strh	r2, [r3, #40]	; 0x28
            h_r308_usart->DR.bit.dr = ch;
 8009968:	79fb      	ldrb	r3, [r7, #7]
 800996a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800996e:	b299      	uxth	r1, r3
 8009970:	68fa      	ldr	r2, [r7, #12]
 8009972:	6853      	ldr	r3, [r2, #4]
 8009974:	f361 0308 	bfi	r3, r1, #0, #9
 8009978:	6053      	str	r3, [r2, #4]
        }

        if (R308_USART_h.TX_head == R308_USART_h.TX_tail)
 800997a:	4b08      	ldr	r3, [pc, #32]	; (800999c <r308_irq_handler+0xf0>)
 800997c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800997e:	b29a      	uxth	r2, r3
 8009980:	4b06      	ldr	r3, [pc, #24]	; (800999c <r308_irq_handler+0xf0>)
 8009982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009984:	b29b      	uxth	r3, r3
 8009986:	429a      	cmp	r2, r3
 8009988:	d104      	bne.n	8009994 <r308_irq_handler+0xe8>
        {
            // Buffer is empty; disable TXE
            h_r308_usart->CR1.bit.txeie = RESET;
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	68d3      	ldr	r3, [r2, #12]
 800998e:	f36f 13c7 	bfc	r3, #7, #1
 8009992:	60d3      	str	r3, [r2, #12]
        }
    }
}
 8009994:	bf00      	nop
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	2000023c 	.word	0x2000023c

080099a0 <ST7735_Reset>:
static void ST7735_ExecuteCommandList(const uint8_t *addr);
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1);
static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, Font_t font, uint16_t color, uint16_t bgcolor);

static void ST7735_Reset()
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	af00      	add	r7, sp, #0
	TFT_RES_L();
 80099a4:	2200      	movs	r2, #0
 80099a6:	2102      	movs	r1, #2
 80099a8:	4806      	ldr	r0, [pc, #24]	; (80099c4 <ST7735_Reset+0x24>)
 80099aa:	f7f7 fe82 	bl	80016b2 <GPIO_WritePin>
	delay_ms(20);
 80099ae:	2014      	movs	r0, #20
 80099b0:	f7fc f932 	bl	8005c18 <delay_ms>
	TFT_RES_H();
 80099b4:	2201      	movs	r2, #1
 80099b6:	2102      	movs	r1, #2
 80099b8:	4802      	ldr	r0, [pc, #8]	; (80099c4 <ST7735_Reset+0x24>)
 80099ba:	f7f7 fe7a 	bl	80016b2 <GPIO_WritePin>
}
 80099be:	bf00      	nop
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	40020800 	.word	0x40020800

080099c8 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	4603      	mov	r3, r0
 80099d0:	71fb      	strb	r3, [r7, #7]
	TFT_DC_C();
 80099d2:	2200      	movs	r2, #0
 80099d4:	2100      	movs	r1, #0
 80099d6:	4807      	ldr	r0, [pc, #28]	; (80099f4 <ST7735_WriteCommand+0x2c>)
 80099d8:	f7f7 fe6b 	bl	80016b2 <GPIO_WritePin>
#ifdef USE_SPI_DMA
	SPI_SendDataIT(ST7735_SPI_PORT, &cmd, sizeof(cmd));
#else
	SPI_SendData(ST7735_SPI_PORT, &cmd, sizeof(cmd));
 80099dc:	4b06      	ldr	r3, [pc, #24]	; (80099f8 <ST7735_WriteCommand+0x30>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	1df9      	adds	r1, r7, #7
 80099e2:	2201      	movs	r2, #1
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7f8 faaf 	bl	8001f48 <SPI_SendData>
#endif
}
 80099ea:	bf00      	nop
 80099ec:	3708      	adds	r7, #8
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	40020000 	.word	0x40020000
 80099f8:	20000698 	.word	0x20000698

080099fc <ST7735_WriteData>:

static void ST7735_WriteData(SPI_Handle_t *pSPIHandle,uint8_t* buff, size_t buff_size)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	607a      	str	r2, [r7, #4]
	TFT_DC_D();
 8009a08:	2201      	movs	r2, #1
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	4806      	ldr	r0, [pc, #24]	; (8009a28 <ST7735_WriteData+0x2c>)
 8009a0e:	f7f7 fe50 	bl	80016b2 <GPIO_WritePin>
#ifdef USE_SPI_DMA
	SPI_SendDataIT(ST7735_SPI_PORT, buff, buff_size);
	while(ST7735Handle->TxState == SPI_BUSY_IN_TX);
#else
	SPI_SendData(ST7735_SPI_PORT, buff, buff_size);
 8009a12:	4b06      	ldr	r3, [pc, #24]	; (8009a2c <ST7735_WriteData+0x30>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	68b9      	ldr	r1, [r7, #8]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7f8 fa94 	bl	8001f48 <SPI_SendData>
#endif
}
 8009a20:	bf00      	nop
 8009a22:	3710      	adds	r7, #16
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	40020000 	.word	0x40020000
 8009a2c:	20000698 	.word	0x20000698

08009a30 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	1c5a      	adds	r2, r3, #1
 8009a3c:	607a      	str	r2, [r7, #4]
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	73fb      	strb	r3, [r7, #15]
    while(numCommands--)
 8009a42:	e035      	b.n	8009ab0 <ST7735_ExecuteCommandList+0x80>
    {
    	uint8_t cmd = *addr++;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	1c5a      	adds	r2, r3, #1
 8009a48:	607a      	str	r2, [r7, #4]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8009a4e:	7afb      	ldrb	r3, [r7, #11]
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7ff ffb9 	bl	80099c8 <ST7735_WriteCommand>

        numArgs = *addr++;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	1c5a      	adds	r2, r3, #1
 8009a5a:	607a      	str	r2, [r7, #4]
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8009a60:	7abb      	ldrb	r3, [r7, #10]
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a68:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8009a6a:	7abb      	ldrb	r3, [r7, #10]
 8009a6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a70:	72bb      	strb	r3, [r7, #10]
        if(numArgs)
 8009a72:	7abb      	ldrb	r3, [r7, #10]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d009      	beq.n	8009a8c <ST7735_ExecuteCommandList+0x5c>
        {
            ST7735_WriteData(&ST7735Handle,(uint8_t*)addr, numArgs);
 8009a78:	7abb      	ldrb	r3, [r7, #10]
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	6879      	ldr	r1, [r7, #4]
 8009a7e:	4811      	ldr	r0, [pc, #68]	; (8009ac4 <ST7735_ExecuteCommandList+0x94>)
 8009a80:	f7ff ffbc 	bl	80099fc <ST7735_WriteData>
            addr += numArgs;
 8009a84:	7abb      	ldrb	r3, [r7, #10]
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	4413      	add	r3, r2
 8009a8a:	607b      	str	r3, [r7, #4]
        }

        if(ms)
 8009a8c:	89bb      	ldrh	r3, [r7, #12]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d00e      	beq.n	8009ab0 <ST7735_ExecuteCommandList+0x80>
        {
            ms = *addr++;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	1c5a      	adds	r2, r3, #1
 8009a96:	607a      	str	r2, [r7, #4]
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8009a9c:	89bb      	ldrh	r3, [r7, #12]
 8009a9e:	2bff      	cmp	r3, #255	; 0xff
 8009aa0:	d102      	bne.n	8009aa8 <ST7735_ExecuteCommandList+0x78>
 8009aa2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009aa6:	81bb      	strh	r3, [r7, #12]
            delay_ms(ms);
 8009aa8:	89bb      	ldrh	r3, [r7, #12]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fc f8b4 	bl	8005c18 <delay_ms>
    while(numCommands--)
 8009ab0:	7bfb      	ldrb	r3, [r7, #15]
 8009ab2:	1e5a      	subs	r2, r3, #1
 8009ab4:	73fa      	strb	r2, [r7, #15]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1c4      	bne.n	8009a44 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8009aba:	bf00      	nop
 8009abc:	bf00      	nop
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	20000698 	.word	0x20000698

08009ac8 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8009ac8:	b590      	push	{r4, r7, lr}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	4604      	mov	r4, r0
 8009ad0:	4608      	mov	r0, r1
 8009ad2:	4611      	mov	r1, r2
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	4623      	mov	r3, r4
 8009ad8:	71fb      	strb	r3, [r7, #7]
 8009ada:	4603      	mov	r3, r0
 8009adc:	71bb      	strb	r3, [r7, #6]
 8009ade:	460b      	mov	r3, r1
 8009ae0:	717b      	strb	r3, [r7, #5]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8009ae6:	202a      	movs	r0, #42	; 0x2a
 8009ae8:	f7ff ff6e 	bl	80099c8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8009aec:	2300      	movs	r3, #0
 8009aee:	733b      	strb	r3, [r7, #12]
 8009af0:	4b18      	ldr	r3, [pc, #96]	; (8009b54 <ST7735_SetAddressWindow+0x8c>)
 8009af2:	781a      	ldrb	r2, [r3, #0]
 8009af4:	79fb      	ldrb	r3, [r7, #7]
 8009af6:	4413      	add	r3, r2
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	737b      	strb	r3, [r7, #13]
 8009afc:	2300      	movs	r3, #0
 8009afe:	73bb      	strb	r3, [r7, #14]
 8009b00:	4b14      	ldr	r3, [pc, #80]	; (8009b54 <ST7735_SetAddressWindow+0x8c>)
 8009b02:	781a      	ldrb	r2, [r3, #0]
 8009b04:	797b      	ldrb	r3, [r7, #5]
 8009b06:	4413      	add	r3, r2
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(&ST7735Handle, data, sizeof(data));
 8009b0c:	f107 030c 	add.w	r3, r7, #12
 8009b10:	2204      	movs	r2, #4
 8009b12:	4619      	mov	r1, r3
 8009b14:	4810      	ldr	r0, [pc, #64]	; (8009b58 <ST7735_SetAddressWindow+0x90>)
 8009b16:	f7ff ff71 	bl	80099fc <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8009b1a:	202b      	movs	r0, #43	; 0x2b
 8009b1c:	f7ff ff54 	bl	80099c8 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8009b20:	4b0e      	ldr	r3, [pc, #56]	; (8009b5c <ST7735_SetAddressWindow+0x94>)
 8009b22:	781a      	ldrb	r2, [r3, #0]
 8009b24:	79bb      	ldrb	r3, [r7, #6]
 8009b26:	4413      	add	r3, r2
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8009b2c:	4b0b      	ldr	r3, [pc, #44]	; (8009b5c <ST7735_SetAddressWindow+0x94>)
 8009b2e:	781a      	ldrb	r2, [r3, #0]
 8009b30:	793b      	ldrb	r3, [r7, #4]
 8009b32:	4413      	add	r3, r2
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(&ST7735Handle,data, sizeof(data));
 8009b38:	f107 030c 	add.w	r3, r7, #12
 8009b3c:	2204      	movs	r2, #4
 8009b3e:	4619      	mov	r1, r3
 8009b40:	4805      	ldr	r0, [pc, #20]	; (8009b58 <ST7735_SetAddressWindow+0x90>)
 8009b42:	f7ff ff5b 	bl	80099fc <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8009b46:	202c      	movs	r0, #44	; 0x2c
 8009b48:	f7ff ff3e 	bl	80099c8 <ST7735_WriteCommand>
}
 8009b4c:	bf00      	nop
 8009b4e:	3714      	adds	r7, #20
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd90      	pop	{r4, r7, pc}
 8009b54:	20000739 	.word	0x20000739
 8009b58:	20000698 	.word	0x20000698
 8009b5c:	2000073a 	.word	0x2000073a

08009b60 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, Font_t font, uint16_t color, uint16_t bgcolor)
{
 8009b60:	b082      	sub	sp, #8
 8009b62:	b590      	push	{r4, r7, lr}
 8009b64:	b089      	sub	sp, #36	; 0x24
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	637b      	str	r3, [r7, #52]	; 0x34
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	80fb      	strh	r3, [r7, #6]
 8009b6e:	460b      	mov	r3, r1
 8009b70:	80bb      	strh	r3, [r7, #4]
 8009b72:	4613      	mov	r3, r2
 8009b74:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8009b76:	88fb      	ldrh	r3, [r7, #6]
 8009b78:	b2d8      	uxtb	r0, r3
 8009b7a:	88bb      	ldrh	r3, [r7, #4]
 8009b7c:	b2d9      	uxtb	r1, r3
 8009b7e:	88fb      	ldrh	r3, [r7, #6]
 8009b80:	b2da      	uxtb	r2, r3
 8009b82:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009b86:	4413      	add	r3, r2
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	b2dc      	uxtb	r4, r3
 8009b8e:	88bb      	ldrh	r3, [r7, #4]
 8009b90:	b2da      	uxtb	r2, r3
 8009b92:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009b96:	4413      	add	r3, r2
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	4622      	mov	r2, r4
 8009ba0:	f7ff ff92 	bl	8009ac8 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++)
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	61fb      	str	r3, [r7, #28]
 8009ba8:	e045      	b.n	8009c36 <ST7735_WriteChar+0xd6>
    {
        b = font.data[(ch - 32) * font.height + i];
 8009baa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bac:	78fb      	ldrb	r3, [r7, #3]
 8009bae:	3b20      	subs	r3, #32
 8009bb0:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8009bb4:	fb01 f303 	mul.w	r3, r1, r3
 8009bb8:	4619      	mov	r1, r3
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	440b      	add	r3, r1
 8009bbe:	005b      	lsls	r3, r3, #1
 8009bc0:	4413      	add	r3, r2
 8009bc2:	881b      	ldrh	r3, [r3, #0]
 8009bc4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++)
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	61bb      	str	r3, [r7, #24]
 8009bca:	e02b      	b.n	8009c24 <ST7735_WriteChar+0xc4>
        {
            if((b << j) & 0x8000)
 8009bcc:	697a      	ldr	r2, [r7, #20]
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8009bd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d00f      	beq.n	8009bfc <ST7735_WriteChar+0x9c>
            {
                uint8_t data[] = { color >> 8, color & 0xFF };
 8009bdc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009bde:	0a1b      	lsrs	r3, r3, #8
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	743b      	strb	r3, [r7, #16]
 8009be6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(&ST7735Handle,data, sizeof(data));
 8009bec:	f107 0310 	add.w	r3, r7, #16
 8009bf0:	2202      	movs	r2, #2
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	4817      	ldr	r0, [pc, #92]	; (8009c54 <ST7735_WriteChar+0xf4>)
 8009bf6:	f7ff ff01 	bl	80099fc <ST7735_WriteData>
 8009bfa:	e010      	b.n	8009c1e <ST7735_WriteChar+0xbe>
            }
            else
            {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8009bfc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009c00:	0a1b      	lsrs	r3, r3, #8
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	733b      	strb	r3, [r7, #12]
 8009c08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(&ST7735Handle, data, sizeof(data));
 8009c10:	f107 030c 	add.w	r3, r7, #12
 8009c14:	2202      	movs	r2, #2
 8009c16:	4619      	mov	r1, r3
 8009c18:	480e      	ldr	r0, [pc, #56]	; (8009c54 <ST7735_WriteChar+0xf4>)
 8009c1a:	f7ff feef 	bl	80099fc <ST7735_WriteData>
        for(j = 0; j < font.width; j++)
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	3301      	adds	r3, #1
 8009c22:	61bb      	str	r3, [r7, #24]
 8009c24:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009c28:	461a      	mov	r2, r3
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d3cd      	bcc.n	8009bcc <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++)
 8009c30:	69fb      	ldr	r3, [r7, #28]
 8009c32:	3301      	adds	r3, #1
 8009c34:	61fb      	str	r3, [r7, #28]
 8009c36:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	69fb      	ldr	r3, [r7, #28]
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d3b3      	bcc.n	8009baa <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8009c42:	bf00      	nop
 8009c44:	bf00      	nop
 8009c46:	3724      	adds	r7, #36	; 0x24
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8009c4e:	b002      	add	sp, #8
 8009c50:	4770      	bx	lr
 8009c52:	bf00      	nop
 8009c54:	20000698 	.word	0x20000698

08009c58 <ST7735_Init>:

void ST7735_Init()
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	af00      	add	r7, sp, #0
	ST7735_GPIO_Init();
 8009c5c:	f000 f820 	bl	8009ca0 <ST7735_GPIO_Init>
	TFT_CS_L();
 8009c60:	2200      	movs	r2, #0
 8009c62:	2100      	movs	r1, #0
 8009c64:	480a      	ldr	r0, [pc, #40]	; (8009c90 <ST7735_Init+0x38>)
 8009c66:	f7f7 fd24 	bl	80016b2 <GPIO_WritePin>
    ST7735_Reset();
 8009c6a:	f7ff fe99 	bl	80099a0 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8009c6e:	4809      	ldr	r0, [pc, #36]	; (8009c94 <ST7735_Init+0x3c>)
 8009c70:	f7ff fede 	bl	8009a30 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8009c74:	4808      	ldr	r0, [pc, #32]	; (8009c98 <ST7735_Init+0x40>)
 8009c76:	f7ff fedb 	bl	8009a30 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8009c7a:	4808      	ldr	r0, [pc, #32]	; (8009c9c <ST7735_Init+0x44>)
 8009c7c:	f7ff fed8 	bl	8009a30 <ST7735_ExecuteCommandList>
    TFT_CS_H();
 8009c80:	2201      	movs	r2, #1
 8009c82:	2100      	movs	r1, #0
 8009c84:	4802      	ldr	r0, [pc, #8]	; (8009c90 <ST7735_Init+0x38>)
 8009c86:	f7f7 fd14 	bl	80016b2 <GPIO_WritePin>
}
 8009c8a:	bf00      	nop
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	40020800 	.word	0x40020800
 8009c94:	08014214 	.word	0x08014214
 8009c98:	08014250 	.word	0x08014250
 8009c9c:	08014260 	.word	0x08014260

08009ca0 <ST7735_GPIO_Init>:


static void ST7735_GPIO_Init(void)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0

	GPIO_Handle_t ST7735_Pins;
	//CS
	ST7735_Pins.pGPIOx = ST7735_CS_GPIO_Port;
 8009ca6:	4b2b      	ldr	r3, [pc, #172]	; (8009d54 <ST7735_GPIO_Init+0xb4>)
 8009ca8:	603b      	str	r3, [r7, #0]
	ST7735_Pins.GPIO_Config.PinMode = GPIO_MODE_OUTPUT;
 8009caa:	2301      	movs	r3, #1
 8009cac:	723b      	strb	r3, [r7, #8]
	ST7735_Pins.GPIO_Config.PinOPType = GPIO_OUTPUT_PP;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	72fb      	strb	r3, [r7, #11]
	ST7735_Pins.GPIO_Config.PinPuPdControl = GPIO_PIN_NO_PUPD;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	72bb      	strb	r3, [r7, #10]
	ST7735_Pins.GPIO_Config.PinSpeed = GPIO_SPEED_LOW;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	727b      	strb	r3, [r7, #9]
	ST7735_Pins.GPIO_Config.PinNumber = ST7735_CS_Pin;		//CS pin
 8009cba:	2300      	movs	r3, #0
 8009cbc:	607b      	str	r3, [r7, #4]
	GPIO_Init(&ST7735_Pins);
 8009cbe:	463b      	mov	r3, r7
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7f7 fab9 	bl	8001238 <GPIO_Init>

	memset(&ST7735_Pins, 0, sizeof(ST7735_Pins));
 8009cc6:	463b      	mov	r3, r7
 8009cc8:	2210      	movs	r2, #16
 8009cca:	2100      	movs	r1, #0
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f001 fc0f 	bl	800b4f0 <memset>

	//RES
	ST7735_Pins.pGPIOx = ST7735_RES_GPIO_Port;
 8009cd2:	4b20      	ldr	r3, [pc, #128]	; (8009d54 <ST7735_GPIO_Init+0xb4>)
 8009cd4:	603b      	str	r3, [r7, #0]
	ST7735_Pins.GPIO_Config.PinMode = GPIO_MODE_OUTPUT;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	723b      	strb	r3, [r7, #8]
	ST7735_Pins.GPIO_Config.PinOPType = GPIO_OUTPUT_PP;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	72fb      	strb	r3, [r7, #11]
	ST7735_Pins.GPIO_Config.PinPuPdControl = GPIO_PIN_NO_PUPD;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	72bb      	strb	r3, [r7, #10]
	ST7735_Pins.GPIO_Config.PinSpeed = GPIO_SPEED_LOW;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	727b      	strb	r3, [r7, #9]
	ST7735_Pins.GPIO_Config.PinNumber = ST7735_RES_Pin;		//RES pin
 8009ce6:	2302      	movs	r3, #2
 8009ce8:	607b      	str	r3, [r7, #4]
	GPIO_Init(&ST7735_Pins);
 8009cea:	463b      	mov	r3, r7
 8009cec:	4618      	mov	r0, r3
 8009cee:	f7f7 faa3 	bl	8001238 <GPIO_Init>

	memset(&ST7735_Pins, 0, sizeof(ST7735_Pins));
 8009cf2:	463b      	mov	r3, r7
 8009cf4:	2210      	movs	r2, #16
 8009cf6:	2100      	movs	r1, #0
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f001 fbf9 	bl	800b4f0 <memset>

	//DC
	ST7735_Pins.pGPIOx = ST7735_DC_GPIO_Port;
 8009cfe:	4b16      	ldr	r3, [pc, #88]	; (8009d58 <ST7735_GPIO_Init+0xb8>)
 8009d00:	603b      	str	r3, [r7, #0]
	ST7735_Pins.GPIO_Config.PinMode = GPIO_MODE_OUTPUT;
 8009d02:	2301      	movs	r3, #1
 8009d04:	723b      	strb	r3, [r7, #8]
	ST7735_Pins.GPIO_Config.PinOPType = GPIO_OUTPUT_PP;
 8009d06:	2300      	movs	r3, #0
 8009d08:	72fb      	strb	r3, [r7, #11]
	ST7735_Pins.GPIO_Config.PinPuPdControl = GPIO_PIN_NO_PUPD;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	72bb      	strb	r3, [r7, #10]
	ST7735_Pins.GPIO_Config.PinSpeed = GPIO_SPEED_LOW;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	727b      	strb	r3, [r7, #9]
	ST7735_Pins.GPIO_Config.PinNumber = ST7735_DC_Pin;
 8009d12:	2300      	movs	r3, #0
 8009d14:	607b      	str	r3, [r7, #4]
	GPIO_Init(&ST7735_Pins);
 8009d16:	463b      	mov	r3, r7
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7f7 fa8d 	bl	8001238 <GPIO_Init>

	memset(&ST7735_Pins, 0, sizeof(ST7735_Pins));
 8009d1e:	463b      	mov	r3, r7
 8009d20:	2210      	movs	r2, #16
 8009d22:	2100      	movs	r1, #0
 8009d24:	4618      	mov	r0, r3
 8009d26:	f001 fbe3 	bl	800b4f0 <memset>

	//BL
	ST7735_Pins.pGPIOx = ST7735_BL_GPIO_Port;
 8009d2a:	4b0b      	ldr	r3, [pc, #44]	; (8009d58 <ST7735_GPIO_Init+0xb8>)
 8009d2c:	603b      	str	r3, [r7, #0]
	ST7735_Pins.GPIO_Config.PinMode = GPIO_MODE_OUTPUT;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	723b      	strb	r3, [r7, #8]
	ST7735_Pins.GPIO_Config.PinOPType = GPIO_OUTPUT_PP;
 8009d32:	2300      	movs	r3, #0
 8009d34:	72fb      	strb	r3, [r7, #11]
	ST7735_Pins.GPIO_Config.PinPuPdControl = GPIO_PIN_NO_PUPD;
 8009d36:	2300      	movs	r3, #0
 8009d38:	72bb      	strb	r3, [r7, #10]
	ST7735_Pins.GPIO_Config.PinSpeed = GPIO_SPEED_LOW;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	727b      	strb	r3, [r7, #9]
	ST7735_Pins.GPIO_Config.PinNumber = ST7735_BL_Pin;
 8009d3e:	2302      	movs	r3, #2
 8009d40:	607b      	str	r3, [r7, #4]
	GPIO_Init(&ST7735_Pins);
 8009d42:	463b      	mov	r3, r7
 8009d44:	4618      	mov	r0, r3
 8009d46:	f7f7 fa77 	bl	8001238 <GPIO_Init>
}
 8009d4a:	bf00      	nop
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	40020800 	.word	0x40020800
 8009d58:	40020000 	.word	0x40020000

08009d5c <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	4603      	mov	r3, r0
 8009d64:	80fb      	strh	r3, [r7, #6]
 8009d66:	460b      	mov	r3, r1
 8009d68:	80bb      	strh	r3, [r7, #4]
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8009d6e:	88fb      	ldrh	r3, [r7, #6]
 8009d70:	4a1b      	ldr	r2, [pc, #108]	; (8009de0 <ST7735_DrawPixel+0x84>)
 8009d72:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009d76:	4293      	cmp	r3, r2
 8009d78:	da2d      	bge.n	8009dd6 <ST7735_DrawPixel+0x7a>
 8009d7a:	88bb      	ldrh	r3, [r7, #4]
 8009d7c:	4a19      	ldr	r2, [pc, #100]	; (8009de4 <ST7735_DrawPixel+0x88>)
 8009d7e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009d82:	4293      	cmp	r3, r2
 8009d84:	da27      	bge.n	8009dd6 <ST7735_DrawPixel+0x7a>
        return;

    TFT_CS_L();
 8009d86:	2200      	movs	r2, #0
 8009d88:	2100      	movs	r1, #0
 8009d8a:	4817      	ldr	r0, [pc, #92]	; (8009de8 <ST7735_DrawPixel+0x8c>)
 8009d8c:	f7f7 fc91 	bl	80016b2 <GPIO_WritePin>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8009d90:	88fb      	ldrh	r3, [r7, #6]
 8009d92:	b2d8      	uxtb	r0, r3
 8009d94:	88bb      	ldrh	r3, [r7, #4]
 8009d96:	b2d9      	uxtb	r1, r3
 8009d98:	88fb      	ldrh	r3, [r7, #6]
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	b2da      	uxtb	r2, r3
 8009da0:	88bb      	ldrh	r3, [r7, #4]
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	3301      	adds	r3, #1
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	f7ff fe8e 	bl	8009ac8 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8009dac:	887b      	ldrh	r3, [r7, #2]
 8009dae:	0a1b      	lsrs	r3, r3, #8
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	733b      	strb	r3, [r7, #12]
 8009db6:	887b      	ldrh	r3, [r7, #2]
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(&ST7735Handle, data, sizeof(data));
 8009dbc:	f107 030c 	add.w	r3, r7, #12
 8009dc0:	2202      	movs	r2, #2
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	4809      	ldr	r0, [pc, #36]	; (8009dec <ST7735_DrawPixel+0x90>)
 8009dc6:	f7ff fe19 	bl	80099fc <ST7735_WriteData>

    TFT_CS_H();
 8009dca:	2201      	movs	r2, #1
 8009dcc:	2100      	movs	r1, #0
 8009dce:	4806      	ldr	r0, [pc, #24]	; (8009de8 <ST7735_DrawPixel+0x8c>)
 8009dd0:	f7f7 fc6f 	bl	80016b2 <GPIO_WritePin>
 8009dd4:	e000      	b.n	8009dd8 <ST7735_DrawPixel+0x7c>
        return;
 8009dd6:	bf00      	nop
}
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	2000003a 	.word	0x2000003a
 8009de4:	20000038 	.word	0x20000038
 8009de8:	40020800 	.word	0x40020800
 8009dec:	20000698 	.word	0x20000698

08009df0 <ST7735_DrawString>:

void ST7735_DrawString(uint16_t x, uint16_t y, const char* str, Font_t font, uint16_t color, uint16_t bgcolor)
{
 8009df0:	b082      	sub	sp, #8
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b086      	sub	sp, #24
 8009df6:	af04      	add	r7, sp, #16
 8009df8:	603a      	str	r2, [r7, #0]
 8009dfa:	617b      	str	r3, [r7, #20]
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	80fb      	strh	r3, [r7, #6]
 8009e00:	460b      	mov	r3, r1
 8009e02:	80bb      	strh	r3, [r7, #4]
	TFT_CS_L();
 8009e04:	2200      	movs	r2, #0
 8009e06:	2100      	movs	r1, #0
 8009e08:	4824      	ldr	r0, [pc, #144]	; (8009e9c <ST7735_DrawString+0xac>)
 8009e0a:	f7f7 fc52 	bl	80016b2 <GPIO_WritePin>

    while(*str)
 8009e0e:	e033      	b.n	8009e78 <ST7735_DrawString+0x88>
    {
        if(x + font.width >= _width)
 8009e10:	88fb      	ldrh	r3, [r7, #6]
 8009e12:	7d3a      	ldrb	r2, [r7, #20]
 8009e14:	4413      	add	r3, r2
 8009e16:	4a22      	ldr	r2, [pc, #136]	; (8009ea0 <ST7735_DrawString+0xb0>)
 8009e18:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	db16      	blt.n	8009e4e <ST7735_DrawString+0x5e>
        {
            x = 0;
 8009e20:	2300      	movs	r3, #0
 8009e22:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8009e24:	7d7b      	ldrb	r3, [r7, #21]
 8009e26:	b29a      	uxth	r2, r3
 8009e28:	88bb      	ldrh	r3, [r7, #4]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height)
 8009e2e:	88bb      	ldrh	r3, [r7, #4]
 8009e30:	7d7a      	ldrb	r2, [r7, #21]
 8009e32:	4413      	add	r3, r2
 8009e34:	4a1b      	ldr	r2, [pc, #108]	; (8009ea4 <ST7735_DrawString+0xb4>)
 8009e36:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	da21      	bge.n	8009e82 <ST7735_DrawString+0x92>
            {
                break;
            }

            if(*str == ' ')
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	2b20      	cmp	r3, #32
 8009e44:	d103      	bne.n	8009e4e <ST7735_DrawString+0x5e>
            {
                // skip spaces in the beginning of the new line
                str++;
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	603b      	str	r3, [r7, #0]
                continue;
 8009e4c:	e014      	b.n	8009e78 <ST7735_DrawString+0x88>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	781a      	ldrb	r2, [r3, #0]
 8009e52:	88b9      	ldrh	r1, [r7, #4]
 8009e54:	88f8      	ldrh	r0, [r7, #6]
 8009e56:	8c3b      	ldrh	r3, [r7, #32]
 8009e58:	9302      	str	r3, [sp, #8]
 8009e5a:	8bbb      	ldrh	r3, [r7, #28]
 8009e5c:	9301      	str	r3, [sp, #4]
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	9300      	str	r3, [sp, #0]
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	f7ff fe7c 	bl	8009b60 <ST7735_WriteChar>
        x += font.width;
 8009e68:	7d3b      	ldrb	r3, [r7, #20]
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	88fb      	ldrh	r3, [r7, #6]
 8009e6e:	4413      	add	r3, r2
 8009e70:	80fb      	strh	r3, [r7, #6]
        str++;
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	3301      	adds	r3, #1
 8009e76:	603b      	str	r3, [r7, #0]
    while(*str)
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d1c7      	bne.n	8009e10 <ST7735_DrawString+0x20>
 8009e80:	e000      	b.n	8009e84 <ST7735_DrawString+0x94>
                break;
 8009e82:	bf00      	nop
    }
    TFT_CS_H();
 8009e84:	2201      	movs	r2, #1
 8009e86:	2100      	movs	r1, #0
 8009e88:	4804      	ldr	r0, [pc, #16]	; (8009e9c <ST7735_DrawString+0xac>)
 8009e8a:	f7f7 fc12 	bl	80016b2 <GPIO_WritePin>
}
 8009e8e:	bf00      	nop
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e98:	b002      	add	sp, #8
 8009e9a:	4770      	bx	lr
 8009e9c:	40020800 	.word	0x40020800
 8009ea0:	2000003a 	.word	0x2000003a
 8009ea4:	20000038 	.word	0x20000038

08009ea8 <ST7735_Print>:


void ST7735_Print(uint16_t x, uint16_t y, const char* str, float value, Font_t font, uint16_t color, uint16_t bgcolor)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b096      	sub	sp, #88	; 0x58
 8009eac:	af04      	add	r7, sp, #16
 8009eae:	60ba      	str	r2, [r7, #8]
 8009eb0:	607b      	str	r3, [r7, #4]
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	81fb      	strh	r3, [r7, #14]
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	81bb      	strh	r3, [r7, #12]
    char buffer[50]; // Buffer to hold the combined string. Adjust size as needed.
    sprintf(buffer, "%s%.1f", str, value); // Combine the string and the float value.
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f7f6 fb44 	bl	8000548 <__aeabi_f2d>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	f107 0014 	add.w	r0, r7, #20
 8009ec8:	e9cd 2300 	strd	r2, r3, [sp]
 8009ecc:	68ba      	ldr	r2, [r7, #8]
 8009ece:	490b      	ldr	r1, [pc, #44]	; (8009efc <ST7735_Print+0x54>)
 8009ed0:	f001 fa16 	bl	800b300 <siprintf>
    ST7735_DrawString(x, y, buffer, font, color, bgcolor);
 8009ed4:	f107 0214 	add.w	r2, r7, #20
 8009ed8:	89b9      	ldrh	r1, [r7, #12]
 8009eda:	89f8      	ldrh	r0, [r7, #14]
 8009edc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009ee0:	9302      	str	r3, [sp, #8]
 8009ee2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8009ee6:	9301      	str	r3, [sp, #4]
 8009ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009eee:	f7ff ff7f 	bl	8009df0 <ST7735_DrawString>
}
 8009ef2:	bf00      	nop
 8009ef4:	3748      	adds	r7, #72	; 0x48
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	0800df7c 	.word	0x0800df7c

08009f00 <ST7735_FillRectangle>:
//    }
//    TFT_CS_H();
//}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8009f00:	b590      	push	{r4, r7, lr}
 8009f02:	b085      	sub	sp, #20
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	4604      	mov	r4, r0
 8009f08:	4608      	mov	r0, r1
 8009f0a:	4611      	mov	r1, r2
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	4623      	mov	r3, r4
 8009f10:	80fb      	strh	r3, [r7, #6]
 8009f12:	4603      	mov	r3, r0
 8009f14:	80bb      	strh	r3, [r7, #4]
 8009f16:	460b      	mov	r3, r1
 8009f18:	807b      	strh	r3, [r7, #2]
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= _width) || (y >= _height)) return;
 8009f1e:	88fb      	ldrh	r3, [r7, #6]
 8009f20:	4a3a      	ldr	r2, [pc, #232]	; (800a00c <ST7735_FillRectangle+0x10c>)
 8009f22:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009f26:	4293      	cmp	r3, r2
 8009f28:	da6c      	bge.n	800a004 <ST7735_FillRectangle+0x104>
 8009f2a:	88bb      	ldrh	r3, [r7, #4]
 8009f2c:	4a38      	ldr	r2, [pc, #224]	; (800a010 <ST7735_FillRectangle+0x110>)
 8009f2e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009f32:	4293      	cmp	r3, r2
 8009f34:	da66      	bge.n	800a004 <ST7735_FillRectangle+0x104>
    if((x + w - 1) >= _width) w = _width - x;
 8009f36:	88fa      	ldrh	r2, [r7, #6]
 8009f38:	887b      	ldrh	r3, [r7, #2]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	4a33      	ldr	r2, [pc, #204]	; (800a00c <ST7735_FillRectangle+0x10c>)
 8009f3e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009f42:	4293      	cmp	r3, r2
 8009f44:	dd06      	ble.n	8009f54 <ST7735_FillRectangle+0x54>
 8009f46:	4b31      	ldr	r3, [pc, #196]	; (800a00c <ST7735_FillRectangle+0x10c>)
 8009f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f4c:	b29a      	uxth	r2, r3
 8009f4e:	88fb      	ldrh	r3, [r7, #6]
 8009f50:	1ad3      	subs	r3, r2, r3
 8009f52:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8009f54:	88ba      	ldrh	r2, [r7, #4]
 8009f56:	883b      	ldrh	r3, [r7, #0]
 8009f58:	4413      	add	r3, r2
 8009f5a:	4a2d      	ldr	r2, [pc, #180]	; (800a010 <ST7735_FillRectangle+0x110>)
 8009f5c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009f60:	4293      	cmp	r3, r2
 8009f62:	dd06      	ble.n	8009f72 <ST7735_FillRectangle+0x72>
 8009f64:	4b2a      	ldr	r3, [pc, #168]	; (800a010 <ST7735_FillRectangle+0x110>)
 8009f66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	88bb      	ldrh	r3, [r7, #4]
 8009f6e:	1ad3      	subs	r3, r2, r3
 8009f70:	803b      	strh	r3, [r7, #0]

    TFT_CS_L();
 8009f72:	2200      	movs	r2, #0
 8009f74:	2100      	movs	r1, #0
 8009f76:	4827      	ldr	r0, [pc, #156]	; (800a014 <ST7735_FillRectangle+0x114>)
 8009f78:	f7f7 fb9b 	bl	80016b2 <GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8009f7c:	88fb      	ldrh	r3, [r7, #6]
 8009f7e:	b2d8      	uxtb	r0, r3
 8009f80:	88bb      	ldrh	r3, [r7, #4]
 8009f82:	b2d9      	uxtb	r1, r3
 8009f84:	88fb      	ldrh	r3, [r7, #6]
 8009f86:	b2da      	uxtb	r2, r3
 8009f88:	887b      	ldrh	r3, [r7, #2]
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	4413      	add	r3, r2
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	3b01      	subs	r3, #1
 8009f92:	b2dc      	uxtb	r4, r3
 8009f94:	88bb      	ldrh	r3, [r7, #4]
 8009f96:	b2da      	uxtb	r2, r3
 8009f98:	883b      	ldrh	r3, [r7, #0]
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	4413      	add	r3, r2
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	3b01      	subs	r3, #1
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	4622      	mov	r2, r4
 8009fa6:	f7ff fd8f 	bl	8009ac8 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8009faa:	8c3b      	ldrh	r3, [r7, #32]
 8009fac:	0a1b      	lsrs	r3, r3, #8
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	733b      	strb	r3, [r7, #12]
 8009fb4:	8c3b      	ldrh	r3, [r7, #32]
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	737b      	strb	r3, [r7, #13]
    TFT_DC_D();
 8009fba:	2201      	movs	r2, #1
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	4816      	ldr	r0, [pc, #88]	; (800a018 <ST7735_FillRectangle+0x118>)
 8009fc0:	f7f7 fb77 	bl	80016b2 <GPIO_WritePin>
    for(y = h; y > 0; y--)
 8009fc4:	883b      	ldrh	r3, [r7, #0]
 8009fc6:	80bb      	strh	r3, [r7, #4]
 8009fc8:	e013      	b.n	8009ff2 <ST7735_FillRectangle+0xf2>
    {
        for(x = w; x > 0; x--)
 8009fca:	887b      	ldrh	r3, [r7, #2]
 8009fcc:	80fb      	strh	r3, [r7, #6]
 8009fce:	e00a      	b.n	8009fe6 <ST7735_FillRectangle+0xe6>
        {
#ifdef USE_SPI_DMA
        	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, data, sizeof(data));
        	//while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
        	SPI_SendData(ST7735_SPI_PORT, data, sizeof(data));
 8009fd0:	4b12      	ldr	r3, [pc, #72]	; (800a01c <ST7735_FillRectangle+0x11c>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f107 010c 	add.w	r1, r7, #12
 8009fd8:	2202      	movs	r2, #2
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7f7 ffb4 	bl	8001f48 <SPI_SendData>
        for(x = w; x > 0; x--)
 8009fe0:	88fb      	ldrh	r3, [r7, #6]
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	80fb      	strh	r3, [r7, #6]
 8009fe6:	88fb      	ldrh	r3, [r7, #6]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d1f1      	bne.n	8009fd0 <ST7735_FillRectangle+0xd0>
    for(y = h; y > 0; y--)
 8009fec:	88bb      	ldrh	r3, [r7, #4]
 8009fee:	3b01      	subs	r3, #1
 8009ff0:	80bb      	strh	r3, [r7, #4]
 8009ff2:	88bb      	ldrh	r3, [r7, #4]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1e8      	bne.n	8009fca <ST7735_FillRectangle+0xca>
#endif
        }
    }
    TFT_CS_H();
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	4805      	ldr	r0, [pc, #20]	; (800a014 <ST7735_FillRectangle+0x114>)
 8009ffe:	f7f7 fb58 	bl	80016b2 <GPIO_WritePin>
 800a002:	e000      	b.n	800a006 <ST7735_FillRectangle+0x106>
    if((x >= _width) || (y >= _height)) return;
 800a004:	bf00      	nop
}
 800a006:	3714      	adds	r7, #20
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd90      	pop	{r4, r7, pc}
 800a00c:	2000003a 	.word	0x2000003a
 800a010:	20000038 	.word	0x20000038
 800a014:	40020800 	.word	0x40020800
 800a018:	40020000 	.word	0x40020000
 800a01c:	20000698 	.word	0x20000698

0800a020 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af02      	add	r7, sp, #8
 800a026:	4603      	mov	r3, r0
 800a028:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, _width, _height, color);
 800a02a:	4b09      	ldr	r3, [pc, #36]	; (800a050 <ST7735_FillScreen+0x30>)
 800a02c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a030:	b29a      	uxth	r2, r3
 800a032:	4b08      	ldr	r3, [pc, #32]	; (800a054 <ST7735_FillScreen+0x34>)
 800a034:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a038:	b299      	uxth	r1, r3
 800a03a:	88fb      	ldrh	r3, [r7, #6]
 800a03c:	9300      	str	r3, [sp, #0]
 800a03e:	460b      	mov	r3, r1
 800a040:	2100      	movs	r1, #0
 800a042:	2000      	movs	r0, #0
 800a044:	f7ff ff5c 	bl	8009f00 <ST7735_FillRectangle>
}
 800a048:	bf00      	nop
 800a04a:	3708      	adds	r7, #8
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	2000003a 	.word	0x2000003a
 800a054:	20000038 	.word	0x20000038

0800a058 <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data)
{
 800a058:	b590      	push	{r4, r7, lr}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	4604      	mov	r4, r0
 800a060:	4608      	mov	r0, r1
 800a062:	4611      	mov	r1, r2
 800a064:	461a      	mov	r2, r3
 800a066:	4623      	mov	r3, r4
 800a068:	80fb      	strh	r3, [r7, #6]
 800a06a:	4603      	mov	r3, r0
 800a06c:	80bb      	strh	r3, [r7, #4]
 800a06e:	460b      	mov	r3, r1
 800a070:	807b      	strh	r3, [r7, #2]
 800a072:	4613      	mov	r3, r2
 800a074:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 800a076:	88fb      	ldrh	r3, [r7, #6]
 800a078:	4a27      	ldr	r2, [pc, #156]	; (800a118 <ST7735_DrawImage+0xc0>)
 800a07a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800a07e:	4293      	cmp	r3, r2
 800a080:	da41      	bge.n	800a106 <ST7735_DrawImage+0xae>
 800a082:	88bb      	ldrh	r3, [r7, #4]
 800a084:	4a25      	ldr	r2, [pc, #148]	; (800a11c <ST7735_DrawImage+0xc4>)
 800a086:	f9b2 2000 	ldrsh.w	r2, [r2]
 800a08a:	4293      	cmp	r3, r2
 800a08c:	da3b      	bge.n	800a106 <ST7735_DrawImage+0xae>
    if((x + w - 1) >= _width) return;
 800a08e:	88fa      	ldrh	r2, [r7, #6]
 800a090:	887b      	ldrh	r3, [r7, #2]
 800a092:	4413      	add	r3, r2
 800a094:	4a20      	ldr	r2, [pc, #128]	; (800a118 <ST7735_DrawImage+0xc0>)
 800a096:	f9b2 2000 	ldrsh.w	r2, [r2]
 800a09a:	4293      	cmp	r3, r2
 800a09c:	dc35      	bgt.n	800a10a <ST7735_DrawImage+0xb2>
    if((y + h - 1) >= _height) return;
 800a09e:	88ba      	ldrh	r2, [r7, #4]
 800a0a0:	883b      	ldrh	r3, [r7, #0]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	4a1d      	ldr	r2, [pc, #116]	; (800a11c <ST7735_DrawImage+0xc4>)
 800a0a6:	f9b2 2000 	ldrsh.w	r2, [r2]
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	dc2f      	bgt.n	800a10e <ST7735_DrawImage+0xb6>

    TFT_CS_L();
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	481b      	ldr	r0, [pc, #108]	; (800a120 <ST7735_DrawImage+0xc8>)
 800a0b4:	f7f7 fafd 	bl	80016b2 <GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800a0b8:	88fb      	ldrh	r3, [r7, #6]
 800a0ba:	b2d8      	uxtb	r0, r3
 800a0bc:	88bb      	ldrh	r3, [r7, #4]
 800a0be:	b2d9      	uxtb	r1, r3
 800a0c0:	88fb      	ldrh	r3, [r7, #6]
 800a0c2:	b2da      	uxtb	r2, r3
 800a0c4:	887b      	ldrh	r3, [r7, #2]
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	4413      	add	r3, r2
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	3b01      	subs	r3, #1
 800a0ce:	b2dc      	uxtb	r4, r3
 800a0d0:	88bb      	ldrh	r3, [r7, #4]
 800a0d2:	b2da      	uxtb	r2, r3
 800a0d4:	883b      	ldrh	r3, [r7, #0]
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	4413      	add	r3, r2
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	4622      	mov	r2, r4
 800a0e2:	f7ff fcf1 	bl	8009ac8 <ST7735_SetAddressWindow>
    ST7735_WriteData(&ST7735Handle, (uint8_t*)data, sizeof(uint16_t)*w*h);
 800a0e6:	887b      	ldrh	r3, [r7, #2]
 800a0e8:	883a      	ldrh	r2, [r7, #0]
 800a0ea:	fb02 f303 	mul.w	r3, r2, r3
 800a0ee:	005b      	lsls	r3, r3, #1
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	69b9      	ldr	r1, [r7, #24]
 800a0f4:	480b      	ldr	r0, [pc, #44]	; (800a124 <ST7735_DrawImage+0xcc>)
 800a0f6:	f7ff fc81 	bl	80099fc <ST7735_WriteData>
    TFT_CS_H();
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	2100      	movs	r1, #0
 800a0fe:	4808      	ldr	r0, [pc, #32]	; (800a120 <ST7735_DrawImage+0xc8>)
 800a100:	f7f7 fad7 	bl	80016b2 <GPIO_WritePin>
 800a104:	e004      	b.n	800a110 <ST7735_DrawImage+0xb8>
    if((x >= _width) || (y >= _height)) return;
 800a106:	bf00      	nop
 800a108:	e002      	b.n	800a110 <ST7735_DrawImage+0xb8>
    if((x + w - 1) >= _width) return;
 800a10a:	bf00      	nop
 800a10c:	e000      	b.n	800a110 <ST7735_DrawImage+0xb8>
    if((y + h - 1) >= _height) return;
 800a10e:	bf00      	nop
}
 800a110:	370c      	adds	r7, #12
 800a112:	46bd      	mov	sp, r7
 800a114:	bd90      	pop	{r4, r7, pc}
 800a116:	bf00      	nop
 800a118:	2000003a 	.word	0x2000003a
 800a11c:	20000038 	.word	0x20000038
 800a120:	40020800 	.word	0x40020800
 800a124:	20000698 	.word	0x20000698

0800a128 <ST7735_InvertColors>:

void ST7735_InvertColors(bool invert)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	4603      	mov	r3, r0
 800a130:	71fb      	strb	r3, [r7, #7]
	TFT_CS_L();
 800a132:	2200      	movs	r2, #0
 800a134:	2100      	movs	r1, #0
 800a136:	480a      	ldr	r0, [pc, #40]	; (800a160 <ST7735_InvertColors+0x38>)
 800a138:	f7f7 fabb 	bl	80016b2 <GPIO_WritePin>
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
 800a13c:	79fb      	ldrb	r3, [r7, #7]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d001      	beq.n	800a146 <ST7735_InvertColors+0x1e>
 800a142:	2321      	movs	r3, #33	; 0x21
 800a144:	e000      	b.n	800a148 <ST7735_InvertColors+0x20>
 800a146:	2320      	movs	r3, #32
 800a148:	4618      	mov	r0, r3
 800a14a:	f7ff fc3d 	bl	80099c8 <ST7735_WriteCommand>
    TFT_CS_H();
 800a14e:	2201      	movs	r2, #1
 800a150:	2100      	movs	r1, #0
 800a152:	4803      	ldr	r0, [pc, #12]	; (800a160 <ST7735_InvertColors+0x38>)
 800a154:	f7f7 faad 	bl	80016b2 <GPIO_WritePin>
}
 800a158:	bf00      	nop
 800a15a:	3708      	adds	r7, #8
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	40020800 	.word	0x40020800

0800a164 <ST7735_Backlight_On>:

void ST7735_Backlight_On(void)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	af00      	add	r7, sp, #0
	TFT_BL_H();
 800a168:	2201      	movs	r2, #1
 800a16a:	2102      	movs	r1, #2
 800a16c:	4802      	ldr	r0, [pc, #8]	; (800a178 <ST7735_Backlight_On+0x14>)
 800a16e:	f7f7 faa0 	bl	80016b2 <GPIO_WritePin>
}
 800a172:	bf00      	nop
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	40020000 	.word	0x40020000

0800a17c <ST7735_DrawTriangle>:
** Function name:           drawTriangle
** Description:             Draw a triangle outline using 3 arbitrary points
***************************************************************************************/
// Draw a triangle
void ST7735_DrawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800a17c:	b590      	push	{r4, r7, lr}
 800a17e:	b085      	sub	sp, #20
 800a180:	af02      	add	r7, sp, #8
 800a182:	4604      	mov	r4, r0
 800a184:	4608      	mov	r0, r1
 800a186:	4611      	mov	r1, r2
 800a188:	461a      	mov	r2, r3
 800a18a:	4623      	mov	r3, r4
 800a18c:	80fb      	strh	r3, [r7, #6]
 800a18e:	4603      	mov	r3, r0
 800a190:	80bb      	strh	r3, [r7, #4]
 800a192:	460b      	mov	r3, r1
 800a194:	807b      	strh	r3, [r7, #2]
 800a196:	4613      	mov	r3, r2
 800a198:	803b      	strh	r3, [r7, #0]
  ST7735_DrawLine(x0, y0, x1, y1, color);
 800a19a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800a19e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800a1a2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a1a6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a1aa:	8c3b      	ldrh	r3, [r7, #32]
 800a1ac:	9300      	str	r3, [sp, #0]
 800a1ae:	4623      	mov	r3, r4
 800a1b0:	f000 f983 	bl	800a4ba <ST7735_DrawLine>
  ST7735_DrawLine(x1, y1, x2, y2, color);
 800a1b4:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 800a1b8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800a1bc:	f9b7 1000 	ldrsh.w	r1, [r7]
 800a1c0:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800a1c4:	8c3b      	ldrh	r3, [r7, #32]
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	4623      	mov	r3, r4
 800a1ca:	f000 f976 	bl	800a4ba <ST7735_DrawLine>
  ST7735_DrawLine(x2, y2, x0, y0, color);
 800a1ce:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800a1d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a1d6:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 800a1da:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800a1de:	8c3b      	ldrh	r3, [r7, #32]
 800a1e0:	9300      	str	r3, [sp, #0]
 800a1e2:	4623      	mov	r3, r4
 800a1e4:	f000 f969 	bl	800a4ba <ST7735_DrawLine>
}
 800a1e8:	bf00      	nop
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd90      	pop	{r4, r7, pc}

0800a1f0 <ST7735_FillTriangle>:
** Function name:           fillTriangle
** Description:             Draw a filled triangle using 3 arbitrary points
***************************************************************************************/
// Fill a triangle - original Adafruit function works well and code footprint is small
void ST7735_FillTriangle( int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800a1f0:	b590      	push	{r4, r7, lr}
 800a1f2:	b08d      	sub	sp, #52	; 0x34
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	4604      	mov	r4, r0
 800a1f8:	4608      	mov	r0, r1
 800a1fa:	4611      	mov	r1, r2
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	4623      	mov	r3, r4
 800a200:	80fb      	strh	r3, [r7, #6]
 800a202:	4603      	mov	r3, r0
 800a204:	80bb      	strh	r3, [r7, #4]
 800a206:	460b      	mov	r3, r1
 800a208:	807b      	strh	r3, [r7, #2]
 800a20a:	4613      	mov	r3, r2
 800a20c:	803b      	strh	r3, [r7, #0]
  int16_t a, b, y, last;

  // Sort coordinates by Y order (y2 >= y1 >= y0)
  if (y0 > y1)
 800a20e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a212:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a216:	429a      	cmp	r2, r3
 800a218:	dd0b      	ble.n	800a232 <ST7735_FillTriangle+0x42>
  {
	  SWAP_INT16_T(y0, y1); SWAP_INT16_T(x0, x1);
 800a21a:	88bb      	ldrh	r3, [r7, #4]
 800a21c:	847b      	strh	r3, [r7, #34]	; 0x22
 800a21e:	883b      	ldrh	r3, [r7, #0]
 800a220:	80bb      	strh	r3, [r7, #4]
 800a222:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a224:	803b      	strh	r3, [r7, #0]
 800a226:	88fb      	ldrh	r3, [r7, #6]
 800a228:	843b      	strh	r3, [r7, #32]
 800a22a:	887b      	ldrh	r3, [r7, #2]
 800a22c:	80fb      	strh	r3, [r7, #6]
 800a22e:	8c3b      	ldrh	r3, [r7, #32]
 800a230:	807b      	strh	r3, [r7, #2]
  }

  if (y1 > y2)
 800a232:	f9b7 2000 	ldrsh.w	r2, [r7]
 800a236:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800a23a:	429a      	cmp	r2, r3
 800a23c:	dd0f      	ble.n	800a25e <ST7735_FillTriangle+0x6e>
  {
	  SWAP_INT16_T(y2, y1); SWAP_INT16_T(x2, x1);
 800a23e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a242:	83fb      	strh	r3, [r7, #30]
 800a244:	883b      	ldrh	r3, [r7, #0]
 800a246:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a24a:	8bfb      	ldrh	r3, [r7, #30]
 800a24c:	803b      	strh	r3, [r7, #0]
 800a24e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a252:	83bb      	strh	r3, [r7, #28]
 800a254:	887b      	ldrh	r3, [r7, #2]
 800a256:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a25a:	8bbb      	ldrh	r3, [r7, #28]
 800a25c:	807b      	strh	r3, [r7, #2]
  }

  if (y0 > y1)
 800a25e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a262:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a266:	429a      	cmp	r2, r3
 800a268:	dd0b      	ble.n	800a282 <ST7735_FillTriangle+0x92>
  {
	  SWAP_INT16_T(y0, y1); SWAP_INT16_T(x0, x1);
 800a26a:	88bb      	ldrh	r3, [r7, #4]
 800a26c:	837b      	strh	r3, [r7, #26]
 800a26e:	883b      	ldrh	r3, [r7, #0]
 800a270:	80bb      	strh	r3, [r7, #4]
 800a272:	8b7b      	ldrh	r3, [r7, #26]
 800a274:	803b      	strh	r3, [r7, #0]
 800a276:	88fb      	ldrh	r3, [r7, #6]
 800a278:	833b      	strh	r3, [r7, #24]
 800a27a:	887b      	ldrh	r3, [r7, #2]
 800a27c:	80fb      	strh	r3, [r7, #6]
 800a27e:	8b3b      	ldrh	r3, [r7, #24]
 800a280:	807b      	strh	r3, [r7, #2]
  }

  if (y0 == y2)
 800a282:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a286:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d137      	bne.n	800a2fe <ST7735_FillTriangle+0x10e>
  { // Handle awkward all-on-same-line case as its own thing
    a = b = x0;
 800a28e:	88fb      	ldrh	r3, [r7, #6]
 800a290:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a292:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a294:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (x1 < a)      a = x1;
 800a296:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800a29a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	da02      	bge.n	800a2a8 <ST7735_FillTriangle+0xb8>
 800a2a2:	887b      	ldrh	r3, [r7, #2]
 800a2a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a2a6:	e007      	b.n	800a2b8 <ST7735_FillTriangle+0xc8>
    else if (x1 > b) b = x1;
 800a2a8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800a2ac:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	dd01      	ble.n	800a2b8 <ST7735_FillTriangle+0xc8>
 800a2b4:	887b      	ldrh	r3, [r7, #2]
 800a2b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (x2 < a)      a = x2;
 800a2b8:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 800a2bc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	da03      	bge.n	800a2cc <ST7735_FillTriangle+0xdc>
 800a2c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a2c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a2ca:	e008      	b.n	800a2de <ST7735_FillTriangle+0xee>
    else if (x2 > b) b = x2;
 800a2cc:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 800a2d0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	dd02      	ble.n	800a2de <ST7735_FillTriangle+0xee>
 800a2d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a2dc:	85bb      	strh	r3, [r7, #44]	; 0x2c
    ST7735_DrawFastHLine(a, y0, b - a + 1, color);
 800a2de:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a2e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a2e2:	1ad3      	subs	r3, r2, r3
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	b21a      	sxth	r2, r3
 800a2ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a2f0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a2f4:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800a2f8:	f000 f97e 	bl	800a5f8 <ST7735_DrawFastHLine>
    return;
 800a2fc:	e0da      	b.n	800a4b4 <ST7735_FillTriangle+0x2c4>
  }

  int16_t
  dx01 = x1 - x0,
 800a2fe:	887a      	ldrh	r2, [r7, #2]
 800a300:	88fb      	ldrh	r3, [r7, #6]
 800a302:	1ad3      	subs	r3, r2, r3
 800a304:	b29b      	uxth	r3, r3
 800a306:	82fb      	strh	r3, [r7, #22]
  dy01 = y1 - y0,
 800a308:	883a      	ldrh	r2, [r7, #0]
 800a30a:	88bb      	ldrh	r3, [r7, #4]
 800a30c:	1ad3      	subs	r3, r2, r3
 800a30e:	b29b      	uxth	r3, r3
 800a310:	82bb      	strh	r3, [r7, #20]
  dx02 = x2 - x0,
 800a312:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a316:	88fb      	ldrh	r3, [r7, #6]
 800a318:	1ad3      	subs	r3, r2, r3
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	827b      	strh	r3, [r7, #18]
  dy02 = y2 - y0,
 800a31e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800a322:	88bb      	ldrh	r3, [r7, #4]
 800a324:	1ad3      	subs	r3, r2, r3
 800a326:	b29b      	uxth	r3, r3
 800a328:	823b      	strh	r3, [r7, #16]
  dx12 = x2 - x1,
 800a32a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a32e:	887b      	ldrh	r3, [r7, #2]
 800a330:	1ad3      	subs	r3, r2, r3
 800a332:	b29b      	uxth	r3, r3
 800a334:	81fb      	strh	r3, [r7, #14]
  dy12 = y2 - y1,
 800a336:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800a33a:	883b      	ldrh	r3, [r7, #0]
 800a33c:	1ad3      	subs	r3, r2, r3
 800a33e:	b29b      	uxth	r3, r3
 800a340:	81bb      	strh	r3, [r7, #12]
  sa   = 0,
 800a342:	2300      	movs	r3, #0
 800a344:	84fb      	strh	r3, [r7, #38]	; 0x26
  sb   = 0;
 800a346:	2300      	movs	r3, #0
 800a348:	84bb      	strh	r3, [r7, #36]	; 0x24
  // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
  // is included here (and second loop will be skipped, avoiding a /0
  // error there), otherwise scanline y1 is skipped here and handled
  // in the second loop...which also avoids a /0 error here if y0=y1
  // (flat-topped triangle).
  if (y1 == y2) last = y1;  // Include y1 scanline
 800a34a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800a34e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800a352:	429a      	cmp	r2, r3
 800a354:	d102      	bne.n	800a35c <ST7735_FillTriangle+0x16c>
 800a356:	883b      	ldrh	r3, [r7, #0]
 800a358:	853b      	strh	r3, [r7, #40]	; 0x28
 800a35a:	e003      	b.n	800a364 <ST7735_FillTriangle+0x174>
  else         last = y1 - 1; // Skip it
 800a35c:	883b      	ldrh	r3, [r7, #0]
 800a35e:	3b01      	subs	r3, #1
 800a360:	b29b      	uxth	r3, r3
 800a362:	853b      	strh	r3, [r7, #40]	; 0x28

  for (y = y0; y <= last; y++)
 800a364:	88bb      	ldrh	r3, [r7, #4]
 800a366:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a368:	e040      	b.n	800a3ec <ST7735_FillTriangle+0x1fc>
  {
    a   = x0 + sa / dy01;
 800a36a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800a36e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a372:	fb92 f3f3 	sdiv	r3, r2, r3
 800a376:	b29a      	uxth	r2, r3
 800a378:	88fb      	ldrh	r3, [r7, #6]
 800a37a:	4413      	add	r3, r2
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x0 + sb / dy02;
 800a380:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800a384:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a388:	fb92 f3f3 	sdiv	r3, r2, r3
 800a38c:	b29a      	uxth	r2, r3
 800a38e:	88fb      	ldrh	r3, [r7, #6]
 800a390:	4413      	add	r3, r2
 800a392:	b29b      	uxth	r3, r3
 800a394:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx01;
 800a396:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a398:	8afb      	ldrh	r3, [r7, #22]
 800a39a:	4413      	add	r3, r2
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 800a3a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a3a2:	8a7b      	ldrh	r3, [r7, #18]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (a > b) SWAP_INT16_T(a, b);
 800a3aa:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800a3ae:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	dd05      	ble.n	800a3c2 <ST7735_FillTriangle+0x1d2>
 800a3b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3b8:	813b      	strh	r3, [r7, #8]
 800a3ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a3bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a3be:	893b      	ldrh	r3, [r7, #8]
 800a3c0:	85bb      	strh	r3, [r7, #44]	; 0x2c
    ST7735_DrawFastHLine(a, y, b - a + 1, color);
 800a3c2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a3c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	b21a      	sxth	r2, r3
 800a3d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a3d4:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 800a3d8:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800a3dc:	f000 f90c 	bl	800a5f8 <ST7735_DrawFastHLine>
  for (y = y0; y <= last; y++)
 800a3e0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a3ec:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800a3f0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	ddb8      	ble.n	800a36a <ST7735_FillTriangle+0x17a>
  }

  // For lower part of triangle, find scanline crossings for segments
  // 0-2 and 1-2.  This loop is skipped if y1=y2.
  sa = dx12 * (y - y1);
 800a3f8:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800a3fc:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	b29a      	uxth	r2, r3
 800a404:	89fb      	ldrh	r3, [r7, #14]
 800a406:	fb12 f303 	smulbb	r3, r2, r3
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	84fb      	strh	r3, [r7, #38]	; 0x26
  sb = dx02 * (y - y0);
 800a40e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800a412:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	b29a      	uxth	r2, r3
 800a41a:	8a7b      	ldrh	r3, [r7, #18]
 800a41c:	fb12 f303 	smulbb	r3, r2, r3
 800a420:	b29b      	uxth	r3, r3
 800a422:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (; y <= y2; y++)
 800a424:	e040      	b.n	800a4a8 <ST7735_FillTriangle+0x2b8>
  {
    a   = x1 + sa / dy12;
 800a426:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800a42a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a42e:	fb92 f3f3 	sdiv	r3, r2, r3
 800a432:	b29a      	uxth	r2, r3
 800a434:	887b      	ldrh	r3, [r7, #2]
 800a436:	4413      	add	r3, r2
 800a438:	b29b      	uxth	r3, r3
 800a43a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x0 + sb / dy02;
 800a43c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800a440:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a444:	fb92 f3f3 	sdiv	r3, r2, r3
 800a448:	b29a      	uxth	r2, r3
 800a44a:	88fb      	ldrh	r3, [r7, #6]
 800a44c:	4413      	add	r3, r2
 800a44e:	b29b      	uxth	r3, r3
 800a450:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx12;
 800a452:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a454:	89fb      	ldrh	r3, [r7, #14]
 800a456:	4413      	add	r3, r2
 800a458:	b29b      	uxth	r3, r3
 800a45a:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 800a45c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a45e:	8a7b      	ldrh	r3, [r7, #18]
 800a460:	4413      	add	r3, r2
 800a462:	b29b      	uxth	r3, r3
 800a464:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (a > b) SWAP_INT16_T(a, b);
 800a466:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800a46a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800a46e:	429a      	cmp	r2, r3
 800a470:	dd05      	ble.n	800a47e <ST7735_FillTriangle+0x28e>
 800a472:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a474:	817b      	strh	r3, [r7, #10]
 800a476:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a478:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a47a:	897b      	ldrh	r3, [r7, #10]
 800a47c:	85bb      	strh	r3, [r7, #44]	; 0x2c
    ST7735_DrawFastHLine(a, y, b - a + 1, color);
 800a47e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a480:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a482:	1ad3      	subs	r3, r2, r3
 800a484:	b29b      	uxth	r3, r3
 800a486:	3301      	adds	r3, #1
 800a488:	b29b      	uxth	r3, r3
 800a48a:	b21a      	sxth	r2, r3
 800a48c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a490:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 800a494:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800a498:	f000 f8ae 	bl	800a5f8 <ST7735_DrawFastHLine>
  for (; y <= y2; y++)
 800a49c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a4a8:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800a4ac:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	ddb8      	ble.n	800a426 <ST7735_FillTriangle+0x236>
  }
}
 800a4b4:	3734      	adds	r7, #52	; 0x34
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd90      	pop	{r4, r7, pc}

0800a4ba <ST7735_DrawLine>:
** Description:             draw a line between 2 arbitrary points
***************************************************************************************/

// Slower but more compact line drawing function
void ST7735_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800a4ba:	b590      	push	{r4, r7, lr}
 800a4bc:	b089      	sub	sp, #36	; 0x24
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	4604      	mov	r4, r0
 800a4c2:	4608      	mov	r0, r1
 800a4c4:	4611      	mov	r1, r2
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	4623      	mov	r3, r4
 800a4ca:	80fb      	strh	r3, [r7, #6]
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	80bb      	strh	r3, [r7, #4]
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	807b      	strh	r3, [r7, #2]
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800a4d8:	f9b7 2000 	ldrsh.w	r2, [r7]
 800a4dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a4e0:	1ad3      	subs	r3, r2, r3
 800a4e2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800a4e6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800a4ea:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800a4ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a4f2:	1acb      	subs	r3, r1, r3
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	bfb8      	it	lt
 800a4f8:	425b      	neglt	r3, r3
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	bfcc      	ite	gt
 800a4fe:	2301      	movgt	r3, #1
 800a500:	2300      	movle	r3, #0
 800a502:	b2db      	uxtb	r3, r3
 800a504:	837b      	strh	r3, [r7, #26]
	if (steep)
 800a506:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00b      	beq.n	800a526 <ST7735_DrawLine+0x6c>
	{
		SWAP_INT16_T(x0, y0);
 800a50e:	88fb      	ldrh	r3, [r7, #6]
 800a510:	833b      	strh	r3, [r7, #24]
 800a512:	88bb      	ldrh	r3, [r7, #4]
 800a514:	80fb      	strh	r3, [r7, #6]
 800a516:	8b3b      	ldrh	r3, [r7, #24]
 800a518:	80bb      	strh	r3, [r7, #4]
		SWAP_INT16_T(x1, y1);
 800a51a:	887b      	ldrh	r3, [r7, #2]
 800a51c:	82fb      	strh	r3, [r7, #22]
 800a51e:	883b      	ldrh	r3, [r7, #0]
 800a520:	807b      	strh	r3, [r7, #2]
 800a522:	8afb      	ldrh	r3, [r7, #22]
 800a524:	803b      	strh	r3, [r7, #0]
	}

	if (x0 > x1)
 800a526:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a52a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a52e:	429a      	cmp	r2, r3
 800a530:	dd0b      	ble.n	800a54a <ST7735_DrawLine+0x90>
	{
		SWAP_INT16_T(x0, x1);
 800a532:	88fb      	ldrh	r3, [r7, #6]
 800a534:	82bb      	strh	r3, [r7, #20]
 800a536:	887b      	ldrh	r3, [r7, #2]
 800a538:	80fb      	strh	r3, [r7, #6]
 800a53a:	8abb      	ldrh	r3, [r7, #20]
 800a53c:	807b      	strh	r3, [r7, #2]
		SWAP_INT16_T(y0, y1);
 800a53e:	88bb      	ldrh	r3, [r7, #4]
 800a540:	827b      	strh	r3, [r7, #18]
 800a542:	883b      	ldrh	r3, [r7, #0]
 800a544:	80bb      	strh	r3, [r7, #4]
 800a546:	8a7b      	ldrh	r3, [r7, #18]
 800a548:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x1 - x0;
 800a54a:	887a      	ldrh	r2, [r7, #2]
 800a54c:	88fb      	ldrh	r3, [r7, #6]
 800a54e:	1ad3      	subs	r3, r2, r3
 800a550:	b29b      	uxth	r3, r3
 800a552:	823b      	strh	r3, [r7, #16]
	dy = abs(y1 - y0);
 800a554:	f9b7 2000 	ldrsh.w	r2, [r7]
 800a558:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a55c:	1ad3      	subs	r3, r2, r3
 800a55e:	2b00      	cmp	r3, #0
 800a560:	bfb8      	it	lt
 800a562:	425b      	neglt	r3, r3
 800a564:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 800a566:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a56a:	0fda      	lsrs	r2, r3, #31
 800a56c:	4413      	add	r3, r2
 800a56e:	105b      	asrs	r3, r3, #1
 800a570:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y0 < y1)
 800a572:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a576:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	da02      	bge.n	800a584 <ST7735_DrawLine+0xca>
	{
		ystep = 1;
 800a57e:	2301      	movs	r3, #1
 800a580:	83bb      	strh	r3, [r7, #28]
 800a582:	e02d      	b.n	800a5e0 <ST7735_DrawLine+0x126>
	}
	else
	{
		ystep = -1;
 800a584:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a588:	83bb      	strh	r3, [r7, #28]
	}

	for (; x0<=x1; x0++)
 800a58a:	e029      	b.n	800a5e0 <ST7735_DrawLine+0x126>
	{
		if (steep)
 800a58c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d006      	beq.n	800a5a2 <ST7735_DrawLine+0xe8>
		{
			ST7735_DrawPixel(y0, x0, color);
 800a594:	88bb      	ldrh	r3, [r7, #4]
 800a596:	88f9      	ldrh	r1, [r7, #6]
 800a598:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7ff fbde 	bl	8009d5c <ST7735_DrawPixel>
 800a5a0:	e005      	b.n	800a5ae <ST7735_DrawLine+0xf4>
		}
		else
		{
			ST7735_DrawPixel(x0, y0, color);
 800a5a2:	88fb      	ldrh	r3, [r7, #6]
 800a5a4:	88b9      	ldrh	r1, [r7, #4]
 800a5a6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7ff fbd7 	bl	8009d5c <ST7735_DrawPixel>
		}
		err -= dy;
 800a5ae:	8bfa      	ldrh	r2, [r7, #30]
 800a5b0:	89fb      	ldrh	r3, [r7, #14]
 800a5b2:	1ad3      	subs	r3, r2, r3
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	83fb      	strh	r3, [r7, #30]
		if (err < 0)
 800a5b8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	da09      	bge.n	800a5d4 <ST7735_DrawLine+0x11a>
		{
			y0 += ystep;
 800a5c0:	88ba      	ldrh	r2, [r7, #4]
 800a5c2:	8bbb      	ldrh	r3, [r7, #28]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	80bb      	strh	r3, [r7, #4]
			err += dx;
 800a5ca:	8bfa      	ldrh	r2, [r7, #30]
 800a5cc:	8a3b      	ldrh	r3, [r7, #16]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	83fb      	strh	r3, [r7, #30]
	for (; x0<=x1; x0++)
 800a5d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	3301      	adds	r3, #1
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	80fb      	strh	r3, [r7, #6]
 800a5e0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a5e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	ddcf      	ble.n	800a58c <ST7735_DrawLine+0xd2>
		}
	}
}
 800a5ec:	bf00      	nop
 800a5ee:	bf00      	nop
 800a5f0:	3724      	adds	r7, #36	; 0x24
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd90      	pop	{r4, r7, pc}
	...

0800a5f8 <ST7735_DrawFastHLine>:
/***************************************************************************************
** Function name:           drawFastHLine
** Description:             draw a horizontal line
***************************************************************************************/
void ST7735_DrawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 800a5f8:	b590      	push	{r4, r7, lr}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af02      	add	r7, sp, #8
 800a5fe:	4604      	mov	r4, r0
 800a600:	4608      	mov	r0, r1
 800a602:	4611      	mov	r1, r2
 800a604:	461a      	mov	r2, r3
 800a606:	4623      	mov	r3, r4
 800a608:	80fb      	strh	r3, [r7, #6]
 800a60a:	4603      	mov	r3, r0
 800a60c:	80bb      	strh	r3, [r7, #4]
 800a60e:	460b      	mov	r3, r1
 800a610:	807b      	strh	r3, [r7, #2]
 800a612:	4613      	mov	r3, r2
 800a614:	803b      	strh	r3, [r7, #0]
  // Rudimentary clipping
  if ((x >= _width) || (y >= _height)) return;
 800a616:	4b1b      	ldr	r3, [pc, #108]	; (800a684 <ST7735_DrawFastHLine+0x8c>)
 800a618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a61c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a620:	429a      	cmp	r2, r3
 800a622:	da2b      	bge.n	800a67c <ST7735_DrawFastHLine+0x84>
 800a624:	4b18      	ldr	r3, [pc, #96]	; (800a688 <ST7735_DrawFastHLine+0x90>)
 800a626:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a62a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a62e:	429a      	cmp	r2, r3
 800a630:	da24      	bge.n	800a67c <ST7735_DrawFastHLine+0x84>
  if ((x + w - 1) >= _width)  w = _width - x;
 800a632:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a636:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a63a:	4413      	add	r3, r2
 800a63c:	4a11      	ldr	r2, [pc, #68]	; (800a684 <ST7735_DrawFastHLine+0x8c>)
 800a63e:	f9b2 2000 	ldrsh.w	r2, [r2]
 800a642:	4293      	cmp	r3, r2
 800a644:	dd07      	ble.n	800a656 <ST7735_DrawFastHLine+0x5e>
 800a646:	4b0f      	ldr	r3, [pc, #60]	; (800a684 <ST7735_DrawFastHLine+0x8c>)
 800a648:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a64c:	b29a      	uxth	r2, r3
 800a64e:	88fb      	ldrh	r3, [r7, #6]
 800a650:	1ad3      	subs	r3, r2, r3
 800a652:	b29b      	uxth	r3, r3
 800a654:	807b      	strh	r3, [r7, #2]

  ST7735_DrawLine(x, y, x + w - 1, y, color);
 800a656:	88fa      	ldrh	r2, [r7, #6]
 800a658:	887b      	ldrh	r3, [r7, #2]
 800a65a:	4413      	add	r3, r2
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	3b01      	subs	r3, #1
 800a660:	b29b      	uxth	r3, r3
 800a662:	b21a      	sxth	r2, r3
 800a664:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800a668:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a66c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a670:	883b      	ldrh	r3, [r7, #0]
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	4623      	mov	r3, r4
 800a676:	f7ff ff20 	bl	800a4ba <ST7735_DrawLine>
 800a67a:	e000      	b.n	800a67e <ST7735_DrawFastHLine+0x86>
  if ((x >= _width) || (y >= _height)) return;
 800a67c:	bf00      	nop
}
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	bd90      	pop	{r4, r7, pc}
 800a684:	2000003a 	.word	0x2000003a
 800a688:	20000038 	.word	0x20000038

0800a68c <ST7735_SetRotation>:
/***************************************************************************************
** Function name:           setRotation
** Description:             rotate the screen orientation m = 0-3
***************************************************************************************/
void ST7735_SetRotation(uint8_t m)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	4603      	mov	r3, r0
 800a694:	71fb      	strb	r3, [r7, #7]
  _value_rotation = m % 4;
 800a696:	79fb      	ldrb	r3, [r7, #7]
 800a698:	f003 0303 	and.w	r3, r3, #3
 800a69c:	b2da      	uxtb	r2, r3
 800a69e:	4b4b      	ldr	r3, [pc, #300]	; (800a7cc <ST7735_SetRotation+0x140>)
 800a6a0:	701a      	strb	r2, [r3, #0]

  TFT_CS_L();
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	484a      	ldr	r0, [pc, #296]	; (800a7d0 <ST7735_SetRotation+0x144>)
 800a6a8:	f7f7 f803 	bl	80016b2 <GPIO_WritePin>

  ST7735_WriteCommand(ST7735_MADCTL);
 800a6ac:	2036      	movs	r0, #54	; 0x36
 800a6ae:	f7ff f98b 	bl	80099c8 <ST7735_WriteCommand>

  switch (_value_rotation)
 800a6b2:	4b46      	ldr	r3, [pc, #280]	; (800a7cc <ST7735_SetRotation+0x140>)
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	2b03      	cmp	r3, #3
 800a6b8:	d87e      	bhi.n	800a7b8 <ST7735_SetRotation+0x12c>
 800a6ba:	a201      	add	r2, pc, #4	; (adr r2, 800a6c0 <ST7735_SetRotation+0x34>)
 800a6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c0:	0800a6d1 	.word	0x0800a6d1
 800a6c4:	0800a70f 	.word	0x0800a70f
 800a6c8:	0800a74d 	.word	0x0800a74d
 800a6cc:	0800a77b 	.word	0x0800a77b
  {
    case 0:
    {
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[1] | _data_rotation[3]);
 800a6d0:	4b40      	ldr	r3, [pc, #256]	; (800a7d4 <ST7735_SetRotation+0x148>)
 800a6d2:	781a      	ldrb	r2, [r3, #0]
 800a6d4:	4b3f      	ldr	r3, [pc, #252]	; (800a7d4 <ST7735_SetRotation+0x148>)
 800a6d6:	785b      	ldrb	r3, [r3, #1]
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	b2da      	uxtb	r2, r3
 800a6dc:	4b3d      	ldr	r3, [pc, #244]	; (800a7d4 <ST7735_SetRotation+0x148>)
 800a6de:	78db      	ldrb	r3, [r3, #3]
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	73fb      	strb	r3, [r7, #15]
    	ST7735_WriteData(&ST7735Handle,&d_r, sizeof(d_r));
 800a6e6:	f107 030f 	add.w	r3, r7, #15
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	483a      	ldr	r0, [pc, #232]	; (800a7d8 <ST7735_SetRotation+0x14c>)
 800a6f0:	f7ff f984 	bl	80099fc <ST7735_WriteData>
        _width  = ST7735_WIDTH;
 800a6f4:	4b39      	ldr	r3, [pc, #228]	; (800a7dc <ST7735_SetRotation+0x150>)
 800a6f6:	2280      	movs	r2, #128	; 0x80
 800a6f8:	801a      	strh	r2, [r3, #0]
        _height = ST7735_HEIGHT;
 800a6fa:	4b39      	ldr	r3, [pc, #228]	; (800a7e0 <ST7735_SetRotation+0x154>)
 800a6fc:	22a0      	movs	r2, #160	; 0xa0
 800a6fe:	801a      	strh	r2, [r3, #0]
        _xstart = ST7735_XSTART;
 800a700:	4b38      	ldr	r3, [pc, #224]	; (800a7e4 <ST7735_SetRotation+0x158>)
 800a702:	2200      	movs	r2, #0
 800a704:	701a      	strb	r2, [r3, #0]
		_ystart = ST7735_YSTART;
 800a706:	4b38      	ldr	r3, [pc, #224]	; (800a7e8 <ST7735_SetRotation+0x15c>)
 800a708:	2200      	movs	r2, #0
 800a70a:	701a      	strb	r2, [r3, #0]
    }
     break;
 800a70c:	e054      	b.n	800a7b8 <ST7735_SetRotation+0x12c>
    case 1:
    {
    	uint8_t d_r = (_data_rotation[1] | _data_rotation[2] | _data_rotation[3]);
 800a70e:	4b31      	ldr	r3, [pc, #196]	; (800a7d4 <ST7735_SetRotation+0x148>)
 800a710:	785a      	ldrb	r2, [r3, #1]
 800a712:	4b30      	ldr	r3, [pc, #192]	; (800a7d4 <ST7735_SetRotation+0x148>)
 800a714:	789b      	ldrb	r3, [r3, #2]
 800a716:	4313      	orrs	r3, r2
 800a718:	b2da      	uxtb	r2, r3
 800a71a:	4b2e      	ldr	r3, [pc, #184]	; (800a7d4 <ST7735_SetRotation+0x148>)
 800a71c:	78db      	ldrb	r3, [r3, #3]
 800a71e:	4313      	orrs	r3, r2
 800a720:	b2db      	uxtb	r3, r3
 800a722:	73bb      	strb	r3, [r7, #14]
    	ST7735_WriteData(&ST7735Handle, &d_r, sizeof(d_r));
 800a724:	f107 030e 	add.w	r3, r7, #14
 800a728:	2201      	movs	r2, #1
 800a72a:	4619      	mov	r1, r3
 800a72c:	482a      	ldr	r0, [pc, #168]	; (800a7d8 <ST7735_SetRotation+0x14c>)
 800a72e:	f7ff f965 	bl	80099fc <ST7735_WriteData>
    	_width  = ST7735_HEIGHT;
 800a732:	4b2a      	ldr	r3, [pc, #168]	; (800a7dc <ST7735_SetRotation+0x150>)
 800a734:	22a0      	movs	r2, #160	; 0xa0
 800a736:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_WIDTH;
 800a738:	4b29      	ldr	r3, [pc, #164]	; (800a7e0 <ST7735_SetRotation+0x154>)
 800a73a:	2280      	movs	r2, #128	; 0x80
 800a73c:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_YSTART;
 800a73e:	4b29      	ldr	r3, [pc, #164]	; (800a7e4 <ST7735_SetRotation+0x158>)
 800a740:	2200      	movs	r2, #0
 800a742:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_XSTART;
 800a744:	4b28      	ldr	r3, [pc, #160]	; (800a7e8 <ST7735_SetRotation+0x15c>)
 800a746:	2200      	movs	r2, #0
 800a748:	701a      	strb	r2, [r3, #0]
    }
      break;
 800a74a:	e035      	b.n	800a7b8 <ST7735_SetRotation+0x12c>
    case 2:
    {
    	uint8_t d_r = _data_rotation[3];
 800a74c:	4b21      	ldr	r3, [pc, #132]	; (800a7d4 <ST7735_SetRotation+0x148>)
 800a74e:	78db      	ldrb	r3, [r3, #3]
 800a750:	737b      	strb	r3, [r7, #13]
    	ST7735_WriteData(&ST7735Handle, &d_r, sizeof(d_r));
 800a752:	f107 030d 	add.w	r3, r7, #13
 800a756:	2201      	movs	r2, #1
 800a758:	4619      	mov	r1, r3
 800a75a:	481f      	ldr	r0, [pc, #124]	; (800a7d8 <ST7735_SetRotation+0x14c>)
 800a75c:	f7ff f94e 	bl	80099fc <ST7735_WriteData>
    	_width  = ST7735_WIDTH;
 800a760:	4b1e      	ldr	r3, [pc, #120]	; (800a7dc <ST7735_SetRotation+0x150>)
 800a762:	2280      	movs	r2, #128	; 0x80
 800a764:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_HEIGHT;
 800a766:	4b1e      	ldr	r3, [pc, #120]	; (800a7e0 <ST7735_SetRotation+0x154>)
 800a768:	22a0      	movs	r2, #160	; 0xa0
 800a76a:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_XSTART;
 800a76c:	4b1d      	ldr	r3, [pc, #116]	; (800a7e4 <ST7735_SetRotation+0x158>)
 800a76e:	2200      	movs	r2, #0
 800a770:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_YSTART;
 800a772:	4b1d      	ldr	r3, [pc, #116]	; (800a7e8 <ST7735_SetRotation+0x15c>)
 800a774:	2200      	movs	r2, #0
 800a776:	701a      	strb	r2, [r3, #0]
    }
      break;
 800a778:	e01e      	b.n	800a7b8 <ST7735_SetRotation+0x12c>
    case 3:
    {
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[2] | _data_rotation[3]);
 800a77a:	4b16      	ldr	r3, [pc, #88]	; (800a7d4 <ST7735_SetRotation+0x148>)
 800a77c:	781a      	ldrb	r2, [r3, #0]
 800a77e:	4b15      	ldr	r3, [pc, #84]	; (800a7d4 <ST7735_SetRotation+0x148>)
 800a780:	789b      	ldrb	r3, [r3, #2]
 800a782:	4313      	orrs	r3, r2
 800a784:	b2da      	uxtb	r2, r3
 800a786:	4b13      	ldr	r3, [pc, #76]	; (800a7d4 <ST7735_SetRotation+0x148>)
 800a788:	78db      	ldrb	r3, [r3, #3]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	733b      	strb	r3, [r7, #12]
    	ST7735_WriteData(&ST7735Handle, &d_r, sizeof(d_r));
 800a790:	f107 030c 	add.w	r3, r7, #12
 800a794:	2201      	movs	r2, #1
 800a796:	4619      	mov	r1, r3
 800a798:	480f      	ldr	r0, [pc, #60]	; (800a7d8 <ST7735_SetRotation+0x14c>)
 800a79a:	f7ff f92f 	bl	80099fc <ST7735_WriteData>
    	_width  = ST7735_HEIGHT;
 800a79e:	4b0f      	ldr	r3, [pc, #60]	; (800a7dc <ST7735_SetRotation+0x150>)
 800a7a0:	22a0      	movs	r2, #160	; 0xa0
 800a7a2:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_WIDTH;
 800a7a4:	4b0e      	ldr	r3, [pc, #56]	; (800a7e0 <ST7735_SetRotation+0x154>)
 800a7a6:	2280      	movs	r2, #128	; 0x80
 800a7a8:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_YSTART;
 800a7aa:	4b0e      	ldr	r3, [pc, #56]	; (800a7e4 <ST7735_SetRotation+0x158>)
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_XSTART;
 800a7b0:	4b0d      	ldr	r3, [pc, #52]	; (800a7e8 <ST7735_SetRotation+0x15c>)
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	701a      	strb	r2, [r3, #0]
    }
      break;
 800a7b6:	bf00      	nop
  }
  TFT_CS_H();
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	2100      	movs	r1, #0
 800a7bc:	4804      	ldr	r0, [pc, #16]	; (800a7d0 <ST7735_SetRotation+0x144>)
 800a7be:	f7f6 ff78 	bl	80016b2 <GPIO_WritePin>
}
 800a7c2:	bf00      	nop
 800a7c4:	3710      	adds	r7, #16
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	20000738 	.word	0x20000738
 800a7d0:	40020800 	.word	0x40020800
 800a7d4:	20000034 	.word	0x20000034
 800a7d8:	20000698 	.word	0x20000698
 800a7dc:	2000003a 	.word	0x2000003a
 800a7e0:	20000038 	.word	0x20000038
 800a7e4:	20000739 	.word	0x20000739
 800a7e8:	2000073a 	.word	0x2000073a

0800a7ec <__cvt>:
 800a7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f0:	b088      	sub	sp, #32
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	461f      	mov	r7, r3
 800a7f6:	4614      	mov	r4, r2
 800a7f8:	bfb8      	it	lt
 800a7fa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800a7fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a800:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a802:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800a806:	bfb6      	itet	lt
 800a808:	461f      	movlt	r7, r3
 800a80a:	2300      	movge	r3, #0
 800a80c:	232d      	movlt	r3, #45	; 0x2d
 800a80e:	7013      	strb	r3, [r2, #0]
 800a810:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a812:	f023 0820 	bic.w	r8, r3, #32
 800a816:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a81a:	d005      	beq.n	800a828 <__cvt+0x3c>
 800a81c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a820:	d100      	bne.n	800a824 <__cvt+0x38>
 800a822:	3501      	adds	r5, #1
 800a824:	2302      	movs	r3, #2
 800a826:	e000      	b.n	800a82a <__cvt+0x3e>
 800a828:	2303      	movs	r3, #3
 800a82a:	aa07      	add	r2, sp, #28
 800a82c:	9204      	str	r2, [sp, #16]
 800a82e:	aa06      	add	r2, sp, #24
 800a830:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a834:	e9cd 3500 	strd	r3, r5, [sp]
 800a838:	4622      	mov	r2, r4
 800a83a:	463b      	mov	r3, r7
 800a83c:	f000 ff5c 	bl	800b6f8 <_dtoa_r>
 800a840:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a844:	4606      	mov	r6, r0
 800a846:	d102      	bne.n	800a84e <__cvt+0x62>
 800a848:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a84a:	07db      	lsls	r3, r3, #31
 800a84c:	d522      	bpl.n	800a894 <__cvt+0xa8>
 800a84e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a852:	eb06 0905 	add.w	r9, r6, r5
 800a856:	d110      	bne.n	800a87a <__cvt+0x8e>
 800a858:	7833      	ldrb	r3, [r6, #0]
 800a85a:	2b30      	cmp	r3, #48	; 0x30
 800a85c:	d10a      	bne.n	800a874 <__cvt+0x88>
 800a85e:	2200      	movs	r2, #0
 800a860:	2300      	movs	r3, #0
 800a862:	4620      	mov	r0, r4
 800a864:	4639      	mov	r1, r7
 800a866:	f7f6 f92f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a86a:	b918      	cbnz	r0, 800a874 <__cvt+0x88>
 800a86c:	f1c5 0501 	rsb	r5, r5, #1
 800a870:	f8ca 5000 	str.w	r5, [sl]
 800a874:	f8da 3000 	ldr.w	r3, [sl]
 800a878:	4499      	add	r9, r3
 800a87a:	2200      	movs	r2, #0
 800a87c:	2300      	movs	r3, #0
 800a87e:	4620      	mov	r0, r4
 800a880:	4639      	mov	r1, r7
 800a882:	f7f6 f921 	bl	8000ac8 <__aeabi_dcmpeq>
 800a886:	b108      	cbz	r0, 800a88c <__cvt+0xa0>
 800a888:	f8cd 901c 	str.w	r9, [sp, #28]
 800a88c:	2230      	movs	r2, #48	; 0x30
 800a88e:	9b07      	ldr	r3, [sp, #28]
 800a890:	454b      	cmp	r3, r9
 800a892:	d307      	bcc.n	800a8a4 <__cvt+0xb8>
 800a894:	9b07      	ldr	r3, [sp, #28]
 800a896:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a898:	1b9b      	subs	r3, r3, r6
 800a89a:	4630      	mov	r0, r6
 800a89c:	6013      	str	r3, [r2, #0]
 800a89e:	b008      	add	sp, #32
 800a8a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8a4:	1c59      	adds	r1, r3, #1
 800a8a6:	9107      	str	r1, [sp, #28]
 800a8a8:	701a      	strb	r2, [r3, #0]
 800a8aa:	e7f0      	b.n	800a88e <__cvt+0xa2>

0800a8ac <__exponent>:
 800a8ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2900      	cmp	r1, #0
 800a8b2:	bfb8      	it	lt
 800a8b4:	4249      	neglt	r1, r1
 800a8b6:	f803 2b02 	strb.w	r2, [r3], #2
 800a8ba:	bfb4      	ite	lt
 800a8bc:	222d      	movlt	r2, #45	; 0x2d
 800a8be:	222b      	movge	r2, #43	; 0x2b
 800a8c0:	2909      	cmp	r1, #9
 800a8c2:	7042      	strb	r2, [r0, #1]
 800a8c4:	dd2a      	ble.n	800a91c <__exponent+0x70>
 800a8c6:	f10d 0207 	add.w	r2, sp, #7
 800a8ca:	4617      	mov	r7, r2
 800a8cc:	260a      	movs	r6, #10
 800a8ce:	4694      	mov	ip, r2
 800a8d0:	fb91 f5f6 	sdiv	r5, r1, r6
 800a8d4:	fb06 1415 	mls	r4, r6, r5, r1
 800a8d8:	3430      	adds	r4, #48	; 0x30
 800a8da:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a8de:	460c      	mov	r4, r1
 800a8e0:	2c63      	cmp	r4, #99	; 0x63
 800a8e2:	f102 32ff 	add.w	r2, r2, #4294967295
 800a8e6:	4629      	mov	r1, r5
 800a8e8:	dcf1      	bgt.n	800a8ce <__exponent+0x22>
 800a8ea:	3130      	adds	r1, #48	; 0x30
 800a8ec:	f1ac 0402 	sub.w	r4, ip, #2
 800a8f0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a8f4:	1c41      	adds	r1, r0, #1
 800a8f6:	4622      	mov	r2, r4
 800a8f8:	42ba      	cmp	r2, r7
 800a8fa:	d30a      	bcc.n	800a912 <__exponent+0x66>
 800a8fc:	f10d 0209 	add.w	r2, sp, #9
 800a900:	eba2 020c 	sub.w	r2, r2, ip
 800a904:	42bc      	cmp	r4, r7
 800a906:	bf88      	it	hi
 800a908:	2200      	movhi	r2, #0
 800a90a:	4413      	add	r3, r2
 800a90c:	1a18      	subs	r0, r3, r0
 800a90e:	b003      	add	sp, #12
 800a910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a912:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a916:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a91a:	e7ed      	b.n	800a8f8 <__exponent+0x4c>
 800a91c:	2330      	movs	r3, #48	; 0x30
 800a91e:	3130      	adds	r1, #48	; 0x30
 800a920:	7083      	strb	r3, [r0, #2]
 800a922:	70c1      	strb	r1, [r0, #3]
 800a924:	1d03      	adds	r3, r0, #4
 800a926:	e7f1      	b.n	800a90c <__exponent+0x60>

0800a928 <_printf_float>:
 800a928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a92c:	b091      	sub	sp, #68	; 0x44
 800a92e:	460c      	mov	r4, r1
 800a930:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800a934:	4616      	mov	r6, r2
 800a936:	461f      	mov	r7, r3
 800a938:	4605      	mov	r5, r0
 800a93a:	f000 fde1 	bl	800b500 <_localeconv_r>
 800a93e:	6803      	ldr	r3, [r0, #0]
 800a940:	9309      	str	r3, [sp, #36]	; 0x24
 800a942:	4618      	mov	r0, r3
 800a944:	f7f5 fc94 	bl	8000270 <strlen>
 800a948:	2300      	movs	r3, #0
 800a94a:	930e      	str	r3, [sp, #56]	; 0x38
 800a94c:	f8d8 3000 	ldr.w	r3, [r8]
 800a950:	900a      	str	r0, [sp, #40]	; 0x28
 800a952:	3307      	adds	r3, #7
 800a954:	f023 0307 	bic.w	r3, r3, #7
 800a958:	f103 0208 	add.w	r2, r3, #8
 800a95c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a960:	f8d4 b000 	ldr.w	fp, [r4]
 800a964:	f8c8 2000 	str.w	r2, [r8]
 800a968:	e9d3 a800 	ldrd	sl, r8, [r3]
 800a96c:	4652      	mov	r2, sl
 800a96e:	4643      	mov	r3, r8
 800a970:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a974:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800a978:	930b      	str	r3, [sp, #44]	; 0x2c
 800a97a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a97c:	4b9c      	ldr	r3, [pc, #624]	; (800abf0 <_printf_float+0x2c8>)
 800a97e:	f04f 32ff 	mov.w	r2, #4294967295
 800a982:	4650      	mov	r0, sl
 800a984:	f7f6 f8d2 	bl	8000b2c <__aeabi_dcmpun>
 800a988:	bb70      	cbnz	r0, 800a9e8 <_printf_float+0xc0>
 800a98a:	4b99      	ldr	r3, [pc, #612]	; (800abf0 <_printf_float+0x2c8>)
 800a98c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a98e:	f04f 32ff 	mov.w	r2, #4294967295
 800a992:	4650      	mov	r0, sl
 800a994:	f7f6 f8ac 	bl	8000af0 <__aeabi_dcmple>
 800a998:	bb30      	cbnz	r0, 800a9e8 <_printf_float+0xc0>
 800a99a:	2200      	movs	r2, #0
 800a99c:	2300      	movs	r3, #0
 800a99e:	4650      	mov	r0, sl
 800a9a0:	4641      	mov	r1, r8
 800a9a2:	f7f6 f89b 	bl	8000adc <__aeabi_dcmplt>
 800a9a6:	b110      	cbz	r0, 800a9ae <_printf_float+0x86>
 800a9a8:	232d      	movs	r3, #45	; 0x2d
 800a9aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9ae:	4a91      	ldr	r2, [pc, #580]	; (800abf4 <_printf_float+0x2cc>)
 800a9b0:	4b91      	ldr	r3, [pc, #580]	; (800abf8 <_printf_float+0x2d0>)
 800a9b2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a9b6:	bf94      	ite	ls
 800a9b8:	4690      	movls	r8, r2
 800a9ba:	4698      	movhi	r8, r3
 800a9bc:	2303      	movs	r3, #3
 800a9be:	6123      	str	r3, [r4, #16]
 800a9c0:	f02b 0304 	bic.w	r3, fp, #4
 800a9c4:	6023      	str	r3, [r4, #0]
 800a9c6:	f04f 0a00 	mov.w	sl, #0
 800a9ca:	9700      	str	r7, [sp, #0]
 800a9cc:	4633      	mov	r3, r6
 800a9ce:	aa0f      	add	r2, sp, #60	; 0x3c
 800a9d0:	4621      	mov	r1, r4
 800a9d2:	4628      	mov	r0, r5
 800a9d4:	f000 f9d4 	bl	800ad80 <_printf_common>
 800a9d8:	3001      	adds	r0, #1
 800a9da:	f040 808f 	bne.w	800aafc <_printf_float+0x1d4>
 800a9de:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e2:	b011      	add	sp, #68	; 0x44
 800a9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e8:	4652      	mov	r2, sl
 800a9ea:	4643      	mov	r3, r8
 800a9ec:	4650      	mov	r0, sl
 800a9ee:	4641      	mov	r1, r8
 800a9f0:	f7f6 f89c 	bl	8000b2c <__aeabi_dcmpun>
 800a9f4:	b140      	cbz	r0, 800aa08 <_printf_float+0xe0>
 800a9f6:	f1b8 0f00 	cmp.w	r8, #0
 800a9fa:	bfbc      	itt	lt
 800a9fc:	232d      	movlt	r3, #45	; 0x2d
 800a9fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aa02:	4a7e      	ldr	r2, [pc, #504]	; (800abfc <_printf_float+0x2d4>)
 800aa04:	4b7e      	ldr	r3, [pc, #504]	; (800ac00 <_printf_float+0x2d8>)
 800aa06:	e7d4      	b.n	800a9b2 <_printf_float+0x8a>
 800aa08:	6863      	ldr	r3, [r4, #4]
 800aa0a:	1c5a      	adds	r2, r3, #1
 800aa0c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800aa10:	d142      	bne.n	800aa98 <_printf_float+0x170>
 800aa12:	2306      	movs	r3, #6
 800aa14:	6063      	str	r3, [r4, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	9206      	str	r2, [sp, #24]
 800aa1a:	aa0e      	add	r2, sp, #56	; 0x38
 800aa1c:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800aa20:	aa0d      	add	r2, sp, #52	; 0x34
 800aa22:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800aa26:	9203      	str	r2, [sp, #12]
 800aa28:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800aa2c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800aa30:	6023      	str	r3, [r4, #0]
 800aa32:	6863      	ldr	r3, [r4, #4]
 800aa34:	9300      	str	r3, [sp, #0]
 800aa36:	4652      	mov	r2, sl
 800aa38:	4643      	mov	r3, r8
 800aa3a:	4628      	mov	r0, r5
 800aa3c:	910b      	str	r1, [sp, #44]	; 0x2c
 800aa3e:	f7ff fed5 	bl	800a7ec <__cvt>
 800aa42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa44:	2947      	cmp	r1, #71	; 0x47
 800aa46:	4680      	mov	r8, r0
 800aa48:	990d      	ldr	r1, [sp, #52]	; 0x34
 800aa4a:	d108      	bne.n	800aa5e <_printf_float+0x136>
 800aa4c:	1cc8      	adds	r0, r1, #3
 800aa4e:	db02      	blt.n	800aa56 <_printf_float+0x12e>
 800aa50:	6863      	ldr	r3, [r4, #4]
 800aa52:	4299      	cmp	r1, r3
 800aa54:	dd40      	ble.n	800aad8 <_printf_float+0x1b0>
 800aa56:	f1a9 0902 	sub.w	r9, r9, #2
 800aa5a:	fa5f f989 	uxtb.w	r9, r9
 800aa5e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800aa62:	d81f      	bhi.n	800aaa4 <_printf_float+0x17c>
 800aa64:	3901      	subs	r1, #1
 800aa66:	464a      	mov	r2, r9
 800aa68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aa6c:	910d      	str	r1, [sp, #52]	; 0x34
 800aa6e:	f7ff ff1d 	bl	800a8ac <__exponent>
 800aa72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa74:	1813      	adds	r3, r2, r0
 800aa76:	2a01      	cmp	r2, #1
 800aa78:	4682      	mov	sl, r0
 800aa7a:	6123      	str	r3, [r4, #16]
 800aa7c:	dc02      	bgt.n	800aa84 <_printf_float+0x15c>
 800aa7e:	6822      	ldr	r2, [r4, #0]
 800aa80:	07d2      	lsls	r2, r2, #31
 800aa82:	d501      	bpl.n	800aa88 <_printf_float+0x160>
 800aa84:	3301      	adds	r3, #1
 800aa86:	6123      	str	r3, [r4, #16]
 800aa88:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d09c      	beq.n	800a9ca <_printf_float+0xa2>
 800aa90:	232d      	movs	r3, #45	; 0x2d
 800aa92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa96:	e798      	b.n	800a9ca <_printf_float+0xa2>
 800aa98:	2947      	cmp	r1, #71	; 0x47
 800aa9a:	d1bc      	bne.n	800aa16 <_printf_float+0xee>
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d1ba      	bne.n	800aa16 <_printf_float+0xee>
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	e7b7      	b.n	800aa14 <_printf_float+0xec>
 800aaa4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800aaa8:	d118      	bne.n	800aadc <_printf_float+0x1b4>
 800aaaa:	2900      	cmp	r1, #0
 800aaac:	6863      	ldr	r3, [r4, #4]
 800aaae:	dd0b      	ble.n	800aac8 <_printf_float+0x1a0>
 800aab0:	6121      	str	r1, [r4, #16]
 800aab2:	b913      	cbnz	r3, 800aaba <_printf_float+0x192>
 800aab4:	6822      	ldr	r2, [r4, #0]
 800aab6:	07d0      	lsls	r0, r2, #31
 800aab8:	d502      	bpl.n	800aac0 <_printf_float+0x198>
 800aaba:	3301      	adds	r3, #1
 800aabc:	440b      	add	r3, r1
 800aabe:	6123      	str	r3, [r4, #16]
 800aac0:	65a1      	str	r1, [r4, #88]	; 0x58
 800aac2:	f04f 0a00 	mov.w	sl, #0
 800aac6:	e7df      	b.n	800aa88 <_printf_float+0x160>
 800aac8:	b913      	cbnz	r3, 800aad0 <_printf_float+0x1a8>
 800aaca:	6822      	ldr	r2, [r4, #0]
 800aacc:	07d2      	lsls	r2, r2, #31
 800aace:	d501      	bpl.n	800aad4 <_printf_float+0x1ac>
 800aad0:	3302      	adds	r3, #2
 800aad2:	e7f4      	b.n	800aabe <_printf_float+0x196>
 800aad4:	2301      	movs	r3, #1
 800aad6:	e7f2      	b.n	800aabe <_printf_float+0x196>
 800aad8:	f04f 0967 	mov.w	r9, #103	; 0x67
 800aadc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aade:	4299      	cmp	r1, r3
 800aae0:	db05      	blt.n	800aaee <_printf_float+0x1c6>
 800aae2:	6823      	ldr	r3, [r4, #0]
 800aae4:	6121      	str	r1, [r4, #16]
 800aae6:	07d8      	lsls	r0, r3, #31
 800aae8:	d5ea      	bpl.n	800aac0 <_printf_float+0x198>
 800aaea:	1c4b      	adds	r3, r1, #1
 800aaec:	e7e7      	b.n	800aabe <_printf_float+0x196>
 800aaee:	2900      	cmp	r1, #0
 800aaf0:	bfd4      	ite	le
 800aaf2:	f1c1 0202 	rsble	r2, r1, #2
 800aaf6:	2201      	movgt	r2, #1
 800aaf8:	4413      	add	r3, r2
 800aafa:	e7e0      	b.n	800aabe <_printf_float+0x196>
 800aafc:	6823      	ldr	r3, [r4, #0]
 800aafe:	055a      	lsls	r2, r3, #21
 800ab00:	d407      	bmi.n	800ab12 <_printf_float+0x1ea>
 800ab02:	6923      	ldr	r3, [r4, #16]
 800ab04:	4642      	mov	r2, r8
 800ab06:	4631      	mov	r1, r6
 800ab08:	4628      	mov	r0, r5
 800ab0a:	47b8      	blx	r7
 800ab0c:	3001      	adds	r0, #1
 800ab0e:	d12b      	bne.n	800ab68 <_printf_float+0x240>
 800ab10:	e765      	b.n	800a9de <_printf_float+0xb6>
 800ab12:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ab16:	f240 80dc 	bls.w	800acd2 <_printf_float+0x3aa>
 800ab1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab1e:	2200      	movs	r2, #0
 800ab20:	2300      	movs	r3, #0
 800ab22:	f7f5 ffd1 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab26:	2800      	cmp	r0, #0
 800ab28:	d033      	beq.n	800ab92 <_printf_float+0x26a>
 800ab2a:	4a36      	ldr	r2, [pc, #216]	; (800ac04 <_printf_float+0x2dc>)
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	4631      	mov	r1, r6
 800ab30:	4628      	mov	r0, r5
 800ab32:	47b8      	blx	r7
 800ab34:	3001      	adds	r0, #1
 800ab36:	f43f af52 	beq.w	800a9de <_printf_float+0xb6>
 800ab3a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	db02      	blt.n	800ab48 <_printf_float+0x220>
 800ab42:	6823      	ldr	r3, [r4, #0]
 800ab44:	07d8      	lsls	r0, r3, #31
 800ab46:	d50f      	bpl.n	800ab68 <_printf_float+0x240>
 800ab48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab4c:	4631      	mov	r1, r6
 800ab4e:	4628      	mov	r0, r5
 800ab50:	47b8      	blx	r7
 800ab52:	3001      	adds	r0, #1
 800ab54:	f43f af43 	beq.w	800a9de <_printf_float+0xb6>
 800ab58:	f04f 0800 	mov.w	r8, #0
 800ab5c:	f104 091a 	add.w	r9, r4, #26
 800ab60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab62:	3b01      	subs	r3, #1
 800ab64:	4543      	cmp	r3, r8
 800ab66:	dc09      	bgt.n	800ab7c <_printf_float+0x254>
 800ab68:	6823      	ldr	r3, [r4, #0]
 800ab6a:	079b      	lsls	r3, r3, #30
 800ab6c:	f100 8103 	bmi.w	800ad76 <_printf_float+0x44e>
 800ab70:	68e0      	ldr	r0, [r4, #12]
 800ab72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab74:	4298      	cmp	r0, r3
 800ab76:	bfb8      	it	lt
 800ab78:	4618      	movlt	r0, r3
 800ab7a:	e732      	b.n	800a9e2 <_printf_float+0xba>
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	464a      	mov	r2, r9
 800ab80:	4631      	mov	r1, r6
 800ab82:	4628      	mov	r0, r5
 800ab84:	47b8      	blx	r7
 800ab86:	3001      	adds	r0, #1
 800ab88:	f43f af29 	beq.w	800a9de <_printf_float+0xb6>
 800ab8c:	f108 0801 	add.w	r8, r8, #1
 800ab90:	e7e6      	b.n	800ab60 <_printf_float+0x238>
 800ab92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	dc37      	bgt.n	800ac08 <_printf_float+0x2e0>
 800ab98:	4a1a      	ldr	r2, [pc, #104]	; (800ac04 <_printf_float+0x2dc>)
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	4631      	mov	r1, r6
 800ab9e:	4628      	mov	r0, r5
 800aba0:	47b8      	blx	r7
 800aba2:	3001      	adds	r0, #1
 800aba4:	f43f af1b 	beq.w	800a9de <_printf_float+0xb6>
 800aba8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800abac:	4313      	orrs	r3, r2
 800abae:	d102      	bne.n	800abb6 <_printf_float+0x28e>
 800abb0:	6823      	ldr	r3, [r4, #0]
 800abb2:	07d9      	lsls	r1, r3, #31
 800abb4:	d5d8      	bpl.n	800ab68 <_printf_float+0x240>
 800abb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800abba:	4631      	mov	r1, r6
 800abbc:	4628      	mov	r0, r5
 800abbe:	47b8      	blx	r7
 800abc0:	3001      	adds	r0, #1
 800abc2:	f43f af0c 	beq.w	800a9de <_printf_float+0xb6>
 800abc6:	f04f 0900 	mov.w	r9, #0
 800abca:	f104 0a1a 	add.w	sl, r4, #26
 800abce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abd0:	425b      	negs	r3, r3
 800abd2:	454b      	cmp	r3, r9
 800abd4:	dc01      	bgt.n	800abda <_printf_float+0x2b2>
 800abd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abd8:	e794      	b.n	800ab04 <_printf_float+0x1dc>
 800abda:	2301      	movs	r3, #1
 800abdc:	4652      	mov	r2, sl
 800abde:	4631      	mov	r1, r6
 800abe0:	4628      	mov	r0, r5
 800abe2:	47b8      	blx	r7
 800abe4:	3001      	adds	r0, #1
 800abe6:	f43f aefa 	beq.w	800a9de <_printf_float+0xb6>
 800abea:	f109 0901 	add.w	r9, r9, #1
 800abee:	e7ee      	b.n	800abce <_printf_float+0x2a6>
 800abf0:	7fefffff 	.word	0x7fefffff
 800abf4:	08016aa0 	.word	0x08016aa0
 800abf8:	08016aa4 	.word	0x08016aa4
 800abfc:	08016aa8 	.word	0x08016aa8
 800ac00:	08016aac 	.word	0x08016aac
 800ac04:	08016ab0 	.word	0x08016ab0
 800ac08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	bfa8      	it	ge
 800ac10:	461a      	movge	r2, r3
 800ac12:	2a00      	cmp	r2, #0
 800ac14:	4691      	mov	r9, r2
 800ac16:	dc37      	bgt.n	800ac88 <_printf_float+0x360>
 800ac18:	f04f 0b00 	mov.w	fp, #0
 800ac1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac20:	f104 021a 	add.w	r2, r4, #26
 800ac24:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ac28:	ebaa 0309 	sub.w	r3, sl, r9
 800ac2c:	455b      	cmp	r3, fp
 800ac2e:	dc33      	bgt.n	800ac98 <_printf_float+0x370>
 800ac30:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ac34:	429a      	cmp	r2, r3
 800ac36:	db3b      	blt.n	800acb0 <_printf_float+0x388>
 800ac38:	6823      	ldr	r3, [r4, #0]
 800ac3a:	07da      	lsls	r2, r3, #31
 800ac3c:	d438      	bmi.n	800acb0 <_printf_float+0x388>
 800ac3e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800ac42:	eba2 0903 	sub.w	r9, r2, r3
 800ac46:	eba2 020a 	sub.w	r2, r2, sl
 800ac4a:	4591      	cmp	r9, r2
 800ac4c:	bfa8      	it	ge
 800ac4e:	4691      	movge	r9, r2
 800ac50:	f1b9 0f00 	cmp.w	r9, #0
 800ac54:	dc34      	bgt.n	800acc0 <_printf_float+0x398>
 800ac56:	f04f 0800 	mov.w	r8, #0
 800ac5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac5e:	f104 0a1a 	add.w	sl, r4, #26
 800ac62:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ac66:	1a9b      	subs	r3, r3, r2
 800ac68:	eba3 0309 	sub.w	r3, r3, r9
 800ac6c:	4543      	cmp	r3, r8
 800ac6e:	f77f af7b 	ble.w	800ab68 <_printf_float+0x240>
 800ac72:	2301      	movs	r3, #1
 800ac74:	4652      	mov	r2, sl
 800ac76:	4631      	mov	r1, r6
 800ac78:	4628      	mov	r0, r5
 800ac7a:	47b8      	blx	r7
 800ac7c:	3001      	adds	r0, #1
 800ac7e:	f43f aeae 	beq.w	800a9de <_printf_float+0xb6>
 800ac82:	f108 0801 	add.w	r8, r8, #1
 800ac86:	e7ec      	b.n	800ac62 <_printf_float+0x33a>
 800ac88:	4613      	mov	r3, r2
 800ac8a:	4631      	mov	r1, r6
 800ac8c:	4642      	mov	r2, r8
 800ac8e:	4628      	mov	r0, r5
 800ac90:	47b8      	blx	r7
 800ac92:	3001      	adds	r0, #1
 800ac94:	d1c0      	bne.n	800ac18 <_printf_float+0x2f0>
 800ac96:	e6a2      	b.n	800a9de <_printf_float+0xb6>
 800ac98:	2301      	movs	r3, #1
 800ac9a:	4631      	mov	r1, r6
 800ac9c:	4628      	mov	r0, r5
 800ac9e:	920b      	str	r2, [sp, #44]	; 0x2c
 800aca0:	47b8      	blx	r7
 800aca2:	3001      	adds	r0, #1
 800aca4:	f43f ae9b 	beq.w	800a9de <_printf_float+0xb6>
 800aca8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800acaa:	f10b 0b01 	add.w	fp, fp, #1
 800acae:	e7b9      	b.n	800ac24 <_printf_float+0x2fc>
 800acb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800acb4:	4631      	mov	r1, r6
 800acb6:	4628      	mov	r0, r5
 800acb8:	47b8      	blx	r7
 800acba:	3001      	adds	r0, #1
 800acbc:	d1bf      	bne.n	800ac3e <_printf_float+0x316>
 800acbe:	e68e      	b.n	800a9de <_printf_float+0xb6>
 800acc0:	464b      	mov	r3, r9
 800acc2:	eb08 020a 	add.w	r2, r8, sl
 800acc6:	4631      	mov	r1, r6
 800acc8:	4628      	mov	r0, r5
 800acca:	47b8      	blx	r7
 800accc:	3001      	adds	r0, #1
 800acce:	d1c2      	bne.n	800ac56 <_printf_float+0x32e>
 800acd0:	e685      	b.n	800a9de <_printf_float+0xb6>
 800acd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acd4:	2a01      	cmp	r2, #1
 800acd6:	dc01      	bgt.n	800acdc <_printf_float+0x3b4>
 800acd8:	07db      	lsls	r3, r3, #31
 800acda:	d539      	bpl.n	800ad50 <_printf_float+0x428>
 800acdc:	2301      	movs	r3, #1
 800acde:	4642      	mov	r2, r8
 800ace0:	4631      	mov	r1, r6
 800ace2:	4628      	mov	r0, r5
 800ace4:	47b8      	blx	r7
 800ace6:	3001      	adds	r0, #1
 800ace8:	f43f ae79 	beq.w	800a9de <_printf_float+0xb6>
 800acec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800acf0:	4631      	mov	r1, r6
 800acf2:	4628      	mov	r0, r5
 800acf4:	47b8      	blx	r7
 800acf6:	3001      	adds	r0, #1
 800acf8:	f43f ae71 	beq.w	800a9de <_printf_float+0xb6>
 800acfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad00:	2200      	movs	r2, #0
 800ad02:	2300      	movs	r3, #0
 800ad04:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800ad08:	f7f5 fede 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad0c:	b9d8      	cbnz	r0, 800ad46 <_printf_float+0x41e>
 800ad0e:	f109 33ff 	add.w	r3, r9, #4294967295
 800ad12:	f108 0201 	add.w	r2, r8, #1
 800ad16:	4631      	mov	r1, r6
 800ad18:	4628      	mov	r0, r5
 800ad1a:	47b8      	blx	r7
 800ad1c:	3001      	adds	r0, #1
 800ad1e:	d10e      	bne.n	800ad3e <_printf_float+0x416>
 800ad20:	e65d      	b.n	800a9de <_printf_float+0xb6>
 800ad22:	2301      	movs	r3, #1
 800ad24:	464a      	mov	r2, r9
 800ad26:	4631      	mov	r1, r6
 800ad28:	4628      	mov	r0, r5
 800ad2a:	47b8      	blx	r7
 800ad2c:	3001      	adds	r0, #1
 800ad2e:	f43f ae56 	beq.w	800a9de <_printf_float+0xb6>
 800ad32:	f108 0801 	add.w	r8, r8, #1
 800ad36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad38:	3b01      	subs	r3, #1
 800ad3a:	4543      	cmp	r3, r8
 800ad3c:	dcf1      	bgt.n	800ad22 <_printf_float+0x3fa>
 800ad3e:	4653      	mov	r3, sl
 800ad40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ad44:	e6df      	b.n	800ab06 <_printf_float+0x1de>
 800ad46:	f04f 0800 	mov.w	r8, #0
 800ad4a:	f104 091a 	add.w	r9, r4, #26
 800ad4e:	e7f2      	b.n	800ad36 <_printf_float+0x40e>
 800ad50:	2301      	movs	r3, #1
 800ad52:	4642      	mov	r2, r8
 800ad54:	e7df      	b.n	800ad16 <_printf_float+0x3ee>
 800ad56:	2301      	movs	r3, #1
 800ad58:	464a      	mov	r2, r9
 800ad5a:	4631      	mov	r1, r6
 800ad5c:	4628      	mov	r0, r5
 800ad5e:	47b8      	blx	r7
 800ad60:	3001      	adds	r0, #1
 800ad62:	f43f ae3c 	beq.w	800a9de <_printf_float+0xb6>
 800ad66:	f108 0801 	add.w	r8, r8, #1
 800ad6a:	68e3      	ldr	r3, [r4, #12]
 800ad6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ad6e:	1a5b      	subs	r3, r3, r1
 800ad70:	4543      	cmp	r3, r8
 800ad72:	dcf0      	bgt.n	800ad56 <_printf_float+0x42e>
 800ad74:	e6fc      	b.n	800ab70 <_printf_float+0x248>
 800ad76:	f04f 0800 	mov.w	r8, #0
 800ad7a:	f104 0919 	add.w	r9, r4, #25
 800ad7e:	e7f4      	b.n	800ad6a <_printf_float+0x442>

0800ad80 <_printf_common>:
 800ad80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad84:	4616      	mov	r6, r2
 800ad86:	4699      	mov	r9, r3
 800ad88:	688a      	ldr	r2, [r1, #8]
 800ad8a:	690b      	ldr	r3, [r1, #16]
 800ad8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ad90:	4293      	cmp	r3, r2
 800ad92:	bfb8      	it	lt
 800ad94:	4613      	movlt	r3, r2
 800ad96:	6033      	str	r3, [r6, #0]
 800ad98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ad9c:	4607      	mov	r7, r0
 800ad9e:	460c      	mov	r4, r1
 800ada0:	b10a      	cbz	r2, 800ada6 <_printf_common+0x26>
 800ada2:	3301      	adds	r3, #1
 800ada4:	6033      	str	r3, [r6, #0]
 800ada6:	6823      	ldr	r3, [r4, #0]
 800ada8:	0699      	lsls	r1, r3, #26
 800adaa:	bf42      	ittt	mi
 800adac:	6833      	ldrmi	r3, [r6, #0]
 800adae:	3302      	addmi	r3, #2
 800adb0:	6033      	strmi	r3, [r6, #0]
 800adb2:	6825      	ldr	r5, [r4, #0]
 800adb4:	f015 0506 	ands.w	r5, r5, #6
 800adb8:	d106      	bne.n	800adc8 <_printf_common+0x48>
 800adba:	f104 0a19 	add.w	sl, r4, #25
 800adbe:	68e3      	ldr	r3, [r4, #12]
 800adc0:	6832      	ldr	r2, [r6, #0]
 800adc2:	1a9b      	subs	r3, r3, r2
 800adc4:	42ab      	cmp	r3, r5
 800adc6:	dc26      	bgt.n	800ae16 <_printf_common+0x96>
 800adc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800adcc:	1e13      	subs	r3, r2, #0
 800adce:	6822      	ldr	r2, [r4, #0]
 800add0:	bf18      	it	ne
 800add2:	2301      	movne	r3, #1
 800add4:	0692      	lsls	r2, r2, #26
 800add6:	d42b      	bmi.n	800ae30 <_printf_common+0xb0>
 800add8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800addc:	4649      	mov	r1, r9
 800adde:	4638      	mov	r0, r7
 800ade0:	47c0      	blx	r8
 800ade2:	3001      	adds	r0, #1
 800ade4:	d01e      	beq.n	800ae24 <_printf_common+0xa4>
 800ade6:	6823      	ldr	r3, [r4, #0]
 800ade8:	6922      	ldr	r2, [r4, #16]
 800adea:	f003 0306 	and.w	r3, r3, #6
 800adee:	2b04      	cmp	r3, #4
 800adf0:	bf02      	ittt	eq
 800adf2:	68e5      	ldreq	r5, [r4, #12]
 800adf4:	6833      	ldreq	r3, [r6, #0]
 800adf6:	1aed      	subeq	r5, r5, r3
 800adf8:	68a3      	ldr	r3, [r4, #8]
 800adfa:	bf0c      	ite	eq
 800adfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae00:	2500      	movne	r5, #0
 800ae02:	4293      	cmp	r3, r2
 800ae04:	bfc4      	itt	gt
 800ae06:	1a9b      	subgt	r3, r3, r2
 800ae08:	18ed      	addgt	r5, r5, r3
 800ae0a:	2600      	movs	r6, #0
 800ae0c:	341a      	adds	r4, #26
 800ae0e:	42b5      	cmp	r5, r6
 800ae10:	d11a      	bne.n	800ae48 <_printf_common+0xc8>
 800ae12:	2000      	movs	r0, #0
 800ae14:	e008      	b.n	800ae28 <_printf_common+0xa8>
 800ae16:	2301      	movs	r3, #1
 800ae18:	4652      	mov	r2, sl
 800ae1a:	4649      	mov	r1, r9
 800ae1c:	4638      	mov	r0, r7
 800ae1e:	47c0      	blx	r8
 800ae20:	3001      	adds	r0, #1
 800ae22:	d103      	bne.n	800ae2c <_printf_common+0xac>
 800ae24:	f04f 30ff 	mov.w	r0, #4294967295
 800ae28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae2c:	3501      	adds	r5, #1
 800ae2e:	e7c6      	b.n	800adbe <_printf_common+0x3e>
 800ae30:	18e1      	adds	r1, r4, r3
 800ae32:	1c5a      	adds	r2, r3, #1
 800ae34:	2030      	movs	r0, #48	; 0x30
 800ae36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ae3a:	4422      	add	r2, r4
 800ae3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ae40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ae44:	3302      	adds	r3, #2
 800ae46:	e7c7      	b.n	800add8 <_printf_common+0x58>
 800ae48:	2301      	movs	r3, #1
 800ae4a:	4622      	mov	r2, r4
 800ae4c:	4649      	mov	r1, r9
 800ae4e:	4638      	mov	r0, r7
 800ae50:	47c0      	blx	r8
 800ae52:	3001      	adds	r0, #1
 800ae54:	d0e6      	beq.n	800ae24 <_printf_common+0xa4>
 800ae56:	3601      	adds	r6, #1
 800ae58:	e7d9      	b.n	800ae0e <_printf_common+0x8e>
	...

0800ae5c <_printf_i>:
 800ae5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae60:	7e0f      	ldrb	r7, [r1, #24]
 800ae62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ae64:	2f78      	cmp	r7, #120	; 0x78
 800ae66:	4691      	mov	r9, r2
 800ae68:	4680      	mov	r8, r0
 800ae6a:	460c      	mov	r4, r1
 800ae6c:	469a      	mov	sl, r3
 800ae6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ae72:	d807      	bhi.n	800ae84 <_printf_i+0x28>
 800ae74:	2f62      	cmp	r7, #98	; 0x62
 800ae76:	d80a      	bhi.n	800ae8e <_printf_i+0x32>
 800ae78:	2f00      	cmp	r7, #0
 800ae7a:	f000 80d4 	beq.w	800b026 <_printf_i+0x1ca>
 800ae7e:	2f58      	cmp	r7, #88	; 0x58
 800ae80:	f000 80c0 	beq.w	800b004 <_printf_i+0x1a8>
 800ae84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ae8c:	e03a      	b.n	800af04 <_printf_i+0xa8>
 800ae8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ae92:	2b15      	cmp	r3, #21
 800ae94:	d8f6      	bhi.n	800ae84 <_printf_i+0x28>
 800ae96:	a101      	add	r1, pc, #4	; (adr r1, 800ae9c <_printf_i+0x40>)
 800ae98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae9c:	0800aef5 	.word	0x0800aef5
 800aea0:	0800af09 	.word	0x0800af09
 800aea4:	0800ae85 	.word	0x0800ae85
 800aea8:	0800ae85 	.word	0x0800ae85
 800aeac:	0800ae85 	.word	0x0800ae85
 800aeb0:	0800ae85 	.word	0x0800ae85
 800aeb4:	0800af09 	.word	0x0800af09
 800aeb8:	0800ae85 	.word	0x0800ae85
 800aebc:	0800ae85 	.word	0x0800ae85
 800aec0:	0800ae85 	.word	0x0800ae85
 800aec4:	0800ae85 	.word	0x0800ae85
 800aec8:	0800b00d 	.word	0x0800b00d
 800aecc:	0800af35 	.word	0x0800af35
 800aed0:	0800afc7 	.word	0x0800afc7
 800aed4:	0800ae85 	.word	0x0800ae85
 800aed8:	0800ae85 	.word	0x0800ae85
 800aedc:	0800b02f 	.word	0x0800b02f
 800aee0:	0800ae85 	.word	0x0800ae85
 800aee4:	0800af35 	.word	0x0800af35
 800aee8:	0800ae85 	.word	0x0800ae85
 800aeec:	0800ae85 	.word	0x0800ae85
 800aef0:	0800afcf 	.word	0x0800afcf
 800aef4:	682b      	ldr	r3, [r5, #0]
 800aef6:	1d1a      	adds	r2, r3, #4
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	602a      	str	r2, [r5, #0]
 800aefc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af04:	2301      	movs	r3, #1
 800af06:	e09f      	b.n	800b048 <_printf_i+0x1ec>
 800af08:	6820      	ldr	r0, [r4, #0]
 800af0a:	682b      	ldr	r3, [r5, #0]
 800af0c:	0607      	lsls	r7, r0, #24
 800af0e:	f103 0104 	add.w	r1, r3, #4
 800af12:	6029      	str	r1, [r5, #0]
 800af14:	d501      	bpl.n	800af1a <_printf_i+0xbe>
 800af16:	681e      	ldr	r6, [r3, #0]
 800af18:	e003      	b.n	800af22 <_printf_i+0xc6>
 800af1a:	0646      	lsls	r6, r0, #25
 800af1c:	d5fb      	bpl.n	800af16 <_printf_i+0xba>
 800af1e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800af22:	2e00      	cmp	r6, #0
 800af24:	da03      	bge.n	800af2e <_printf_i+0xd2>
 800af26:	232d      	movs	r3, #45	; 0x2d
 800af28:	4276      	negs	r6, r6
 800af2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af2e:	485a      	ldr	r0, [pc, #360]	; (800b098 <_printf_i+0x23c>)
 800af30:	230a      	movs	r3, #10
 800af32:	e012      	b.n	800af5a <_printf_i+0xfe>
 800af34:	682b      	ldr	r3, [r5, #0]
 800af36:	6820      	ldr	r0, [r4, #0]
 800af38:	1d19      	adds	r1, r3, #4
 800af3a:	6029      	str	r1, [r5, #0]
 800af3c:	0605      	lsls	r5, r0, #24
 800af3e:	d501      	bpl.n	800af44 <_printf_i+0xe8>
 800af40:	681e      	ldr	r6, [r3, #0]
 800af42:	e002      	b.n	800af4a <_printf_i+0xee>
 800af44:	0641      	lsls	r1, r0, #25
 800af46:	d5fb      	bpl.n	800af40 <_printf_i+0xe4>
 800af48:	881e      	ldrh	r6, [r3, #0]
 800af4a:	4853      	ldr	r0, [pc, #332]	; (800b098 <_printf_i+0x23c>)
 800af4c:	2f6f      	cmp	r7, #111	; 0x6f
 800af4e:	bf0c      	ite	eq
 800af50:	2308      	moveq	r3, #8
 800af52:	230a      	movne	r3, #10
 800af54:	2100      	movs	r1, #0
 800af56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800af5a:	6865      	ldr	r5, [r4, #4]
 800af5c:	60a5      	str	r5, [r4, #8]
 800af5e:	2d00      	cmp	r5, #0
 800af60:	bfa2      	ittt	ge
 800af62:	6821      	ldrge	r1, [r4, #0]
 800af64:	f021 0104 	bicge.w	r1, r1, #4
 800af68:	6021      	strge	r1, [r4, #0]
 800af6a:	b90e      	cbnz	r6, 800af70 <_printf_i+0x114>
 800af6c:	2d00      	cmp	r5, #0
 800af6e:	d04b      	beq.n	800b008 <_printf_i+0x1ac>
 800af70:	4615      	mov	r5, r2
 800af72:	fbb6 f1f3 	udiv	r1, r6, r3
 800af76:	fb03 6711 	mls	r7, r3, r1, r6
 800af7a:	5dc7      	ldrb	r7, [r0, r7]
 800af7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800af80:	4637      	mov	r7, r6
 800af82:	42bb      	cmp	r3, r7
 800af84:	460e      	mov	r6, r1
 800af86:	d9f4      	bls.n	800af72 <_printf_i+0x116>
 800af88:	2b08      	cmp	r3, #8
 800af8a:	d10b      	bne.n	800afa4 <_printf_i+0x148>
 800af8c:	6823      	ldr	r3, [r4, #0]
 800af8e:	07de      	lsls	r6, r3, #31
 800af90:	d508      	bpl.n	800afa4 <_printf_i+0x148>
 800af92:	6923      	ldr	r3, [r4, #16]
 800af94:	6861      	ldr	r1, [r4, #4]
 800af96:	4299      	cmp	r1, r3
 800af98:	bfde      	ittt	le
 800af9a:	2330      	movle	r3, #48	; 0x30
 800af9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800afa0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800afa4:	1b52      	subs	r2, r2, r5
 800afa6:	6122      	str	r2, [r4, #16]
 800afa8:	f8cd a000 	str.w	sl, [sp]
 800afac:	464b      	mov	r3, r9
 800afae:	aa03      	add	r2, sp, #12
 800afb0:	4621      	mov	r1, r4
 800afb2:	4640      	mov	r0, r8
 800afb4:	f7ff fee4 	bl	800ad80 <_printf_common>
 800afb8:	3001      	adds	r0, #1
 800afba:	d14a      	bne.n	800b052 <_printf_i+0x1f6>
 800afbc:	f04f 30ff 	mov.w	r0, #4294967295
 800afc0:	b004      	add	sp, #16
 800afc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afc6:	6823      	ldr	r3, [r4, #0]
 800afc8:	f043 0320 	orr.w	r3, r3, #32
 800afcc:	6023      	str	r3, [r4, #0]
 800afce:	4833      	ldr	r0, [pc, #204]	; (800b09c <_printf_i+0x240>)
 800afd0:	2778      	movs	r7, #120	; 0x78
 800afd2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800afd6:	6823      	ldr	r3, [r4, #0]
 800afd8:	6829      	ldr	r1, [r5, #0]
 800afda:	061f      	lsls	r7, r3, #24
 800afdc:	f851 6b04 	ldr.w	r6, [r1], #4
 800afe0:	d402      	bmi.n	800afe8 <_printf_i+0x18c>
 800afe2:	065f      	lsls	r7, r3, #25
 800afe4:	bf48      	it	mi
 800afe6:	b2b6      	uxthmi	r6, r6
 800afe8:	07df      	lsls	r7, r3, #31
 800afea:	bf48      	it	mi
 800afec:	f043 0320 	orrmi.w	r3, r3, #32
 800aff0:	6029      	str	r1, [r5, #0]
 800aff2:	bf48      	it	mi
 800aff4:	6023      	strmi	r3, [r4, #0]
 800aff6:	b91e      	cbnz	r6, 800b000 <_printf_i+0x1a4>
 800aff8:	6823      	ldr	r3, [r4, #0]
 800affa:	f023 0320 	bic.w	r3, r3, #32
 800affe:	6023      	str	r3, [r4, #0]
 800b000:	2310      	movs	r3, #16
 800b002:	e7a7      	b.n	800af54 <_printf_i+0xf8>
 800b004:	4824      	ldr	r0, [pc, #144]	; (800b098 <_printf_i+0x23c>)
 800b006:	e7e4      	b.n	800afd2 <_printf_i+0x176>
 800b008:	4615      	mov	r5, r2
 800b00a:	e7bd      	b.n	800af88 <_printf_i+0x12c>
 800b00c:	682b      	ldr	r3, [r5, #0]
 800b00e:	6826      	ldr	r6, [r4, #0]
 800b010:	6961      	ldr	r1, [r4, #20]
 800b012:	1d18      	adds	r0, r3, #4
 800b014:	6028      	str	r0, [r5, #0]
 800b016:	0635      	lsls	r5, r6, #24
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	d501      	bpl.n	800b020 <_printf_i+0x1c4>
 800b01c:	6019      	str	r1, [r3, #0]
 800b01e:	e002      	b.n	800b026 <_printf_i+0x1ca>
 800b020:	0670      	lsls	r0, r6, #25
 800b022:	d5fb      	bpl.n	800b01c <_printf_i+0x1c0>
 800b024:	8019      	strh	r1, [r3, #0]
 800b026:	2300      	movs	r3, #0
 800b028:	6123      	str	r3, [r4, #16]
 800b02a:	4615      	mov	r5, r2
 800b02c:	e7bc      	b.n	800afa8 <_printf_i+0x14c>
 800b02e:	682b      	ldr	r3, [r5, #0]
 800b030:	1d1a      	adds	r2, r3, #4
 800b032:	602a      	str	r2, [r5, #0]
 800b034:	681d      	ldr	r5, [r3, #0]
 800b036:	6862      	ldr	r2, [r4, #4]
 800b038:	2100      	movs	r1, #0
 800b03a:	4628      	mov	r0, r5
 800b03c:	f7f5 f8c8 	bl	80001d0 <memchr>
 800b040:	b108      	cbz	r0, 800b046 <_printf_i+0x1ea>
 800b042:	1b40      	subs	r0, r0, r5
 800b044:	6060      	str	r0, [r4, #4]
 800b046:	6863      	ldr	r3, [r4, #4]
 800b048:	6123      	str	r3, [r4, #16]
 800b04a:	2300      	movs	r3, #0
 800b04c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b050:	e7aa      	b.n	800afa8 <_printf_i+0x14c>
 800b052:	6923      	ldr	r3, [r4, #16]
 800b054:	462a      	mov	r2, r5
 800b056:	4649      	mov	r1, r9
 800b058:	4640      	mov	r0, r8
 800b05a:	47d0      	blx	sl
 800b05c:	3001      	adds	r0, #1
 800b05e:	d0ad      	beq.n	800afbc <_printf_i+0x160>
 800b060:	6823      	ldr	r3, [r4, #0]
 800b062:	079b      	lsls	r3, r3, #30
 800b064:	d413      	bmi.n	800b08e <_printf_i+0x232>
 800b066:	68e0      	ldr	r0, [r4, #12]
 800b068:	9b03      	ldr	r3, [sp, #12]
 800b06a:	4298      	cmp	r0, r3
 800b06c:	bfb8      	it	lt
 800b06e:	4618      	movlt	r0, r3
 800b070:	e7a6      	b.n	800afc0 <_printf_i+0x164>
 800b072:	2301      	movs	r3, #1
 800b074:	4632      	mov	r2, r6
 800b076:	4649      	mov	r1, r9
 800b078:	4640      	mov	r0, r8
 800b07a:	47d0      	blx	sl
 800b07c:	3001      	adds	r0, #1
 800b07e:	d09d      	beq.n	800afbc <_printf_i+0x160>
 800b080:	3501      	adds	r5, #1
 800b082:	68e3      	ldr	r3, [r4, #12]
 800b084:	9903      	ldr	r1, [sp, #12]
 800b086:	1a5b      	subs	r3, r3, r1
 800b088:	42ab      	cmp	r3, r5
 800b08a:	dcf2      	bgt.n	800b072 <_printf_i+0x216>
 800b08c:	e7eb      	b.n	800b066 <_printf_i+0x20a>
 800b08e:	2500      	movs	r5, #0
 800b090:	f104 0619 	add.w	r6, r4, #25
 800b094:	e7f5      	b.n	800b082 <_printf_i+0x226>
 800b096:	bf00      	nop
 800b098:	08016ab2 	.word	0x08016ab2
 800b09c:	08016ac3 	.word	0x08016ac3

0800b0a0 <std>:
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	b510      	push	{r4, lr}
 800b0a4:	4604      	mov	r4, r0
 800b0a6:	e9c0 3300 	strd	r3, r3, [r0]
 800b0aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b0ae:	6083      	str	r3, [r0, #8]
 800b0b0:	8181      	strh	r1, [r0, #12]
 800b0b2:	6643      	str	r3, [r0, #100]	; 0x64
 800b0b4:	81c2      	strh	r2, [r0, #14]
 800b0b6:	6183      	str	r3, [r0, #24]
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	2208      	movs	r2, #8
 800b0bc:	305c      	adds	r0, #92	; 0x5c
 800b0be:	f000 fa17 	bl	800b4f0 <memset>
 800b0c2:	4b0d      	ldr	r3, [pc, #52]	; (800b0f8 <std+0x58>)
 800b0c4:	6263      	str	r3, [r4, #36]	; 0x24
 800b0c6:	4b0d      	ldr	r3, [pc, #52]	; (800b0fc <std+0x5c>)
 800b0c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b0ca:	4b0d      	ldr	r3, [pc, #52]	; (800b100 <std+0x60>)
 800b0cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b0ce:	4b0d      	ldr	r3, [pc, #52]	; (800b104 <std+0x64>)
 800b0d0:	6323      	str	r3, [r4, #48]	; 0x30
 800b0d2:	4b0d      	ldr	r3, [pc, #52]	; (800b108 <std+0x68>)
 800b0d4:	6224      	str	r4, [r4, #32]
 800b0d6:	429c      	cmp	r4, r3
 800b0d8:	d006      	beq.n	800b0e8 <std+0x48>
 800b0da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b0de:	4294      	cmp	r4, r2
 800b0e0:	d002      	beq.n	800b0e8 <std+0x48>
 800b0e2:	33d0      	adds	r3, #208	; 0xd0
 800b0e4:	429c      	cmp	r4, r3
 800b0e6:	d105      	bne.n	800b0f4 <std+0x54>
 800b0e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0f0:	f000 ba7a 	b.w	800b5e8 <__retarget_lock_init_recursive>
 800b0f4:	bd10      	pop	{r4, pc}
 800b0f6:	bf00      	nop
 800b0f8:	0800b341 	.word	0x0800b341
 800b0fc:	0800b363 	.word	0x0800b363
 800b100:	0800b39b 	.word	0x0800b39b
 800b104:	0800b3bf 	.word	0x0800b3bf
 800b108:	2000073c 	.word	0x2000073c

0800b10c <stdio_exit_handler>:
 800b10c:	4a02      	ldr	r2, [pc, #8]	; (800b118 <stdio_exit_handler+0xc>)
 800b10e:	4903      	ldr	r1, [pc, #12]	; (800b11c <stdio_exit_handler+0x10>)
 800b110:	4803      	ldr	r0, [pc, #12]	; (800b120 <stdio_exit_handler+0x14>)
 800b112:	f000 b869 	b.w	800b1e8 <_fwalk_sglue>
 800b116:	bf00      	nop
 800b118:	20000054 	.word	0x20000054
 800b11c:	0800d1d9 	.word	0x0800d1d9
 800b120:	20000060 	.word	0x20000060

0800b124 <cleanup_stdio>:
 800b124:	6841      	ldr	r1, [r0, #4]
 800b126:	4b0c      	ldr	r3, [pc, #48]	; (800b158 <cleanup_stdio+0x34>)
 800b128:	4299      	cmp	r1, r3
 800b12a:	b510      	push	{r4, lr}
 800b12c:	4604      	mov	r4, r0
 800b12e:	d001      	beq.n	800b134 <cleanup_stdio+0x10>
 800b130:	f002 f852 	bl	800d1d8 <_fflush_r>
 800b134:	68a1      	ldr	r1, [r4, #8]
 800b136:	4b09      	ldr	r3, [pc, #36]	; (800b15c <cleanup_stdio+0x38>)
 800b138:	4299      	cmp	r1, r3
 800b13a:	d002      	beq.n	800b142 <cleanup_stdio+0x1e>
 800b13c:	4620      	mov	r0, r4
 800b13e:	f002 f84b 	bl	800d1d8 <_fflush_r>
 800b142:	68e1      	ldr	r1, [r4, #12]
 800b144:	4b06      	ldr	r3, [pc, #24]	; (800b160 <cleanup_stdio+0x3c>)
 800b146:	4299      	cmp	r1, r3
 800b148:	d004      	beq.n	800b154 <cleanup_stdio+0x30>
 800b14a:	4620      	mov	r0, r4
 800b14c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b150:	f002 b842 	b.w	800d1d8 <_fflush_r>
 800b154:	bd10      	pop	{r4, pc}
 800b156:	bf00      	nop
 800b158:	2000073c 	.word	0x2000073c
 800b15c:	200007a4 	.word	0x200007a4
 800b160:	2000080c 	.word	0x2000080c

0800b164 <global_stdio_init.part.0>:
 800b164:	b510      	push	{r4, lr}
 800b166:	4b0b      	ldr	r3, [pc, #44]	; (800b194 <global_stdio_init.part.0+0x30>)
 800b168:	4c0b      	ldr	r4, [pc, #44]	; (800b198 <global_stdio_init.part.0+0x34>)
 800b16a:	4a0c      	ldr	r2, [pc, #48]	; (800b19c <global_stdio_init.part.0+0x38>)
 800b16c:	601a      	str	r2, [r3, #0]
 800b16e:	4620      	mov	r0, r4
 800b170:	2200      	movs	r2, #0
 800b172:	2104      	movs	r1, #4
 800b174:	f7ff ff94 	bl	800b0a0 <std>
 800b178:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b17c:	2201      	movs	r2, #1
 800b17e:	2109      	movs	r1, #9
 800b180:	f7ff ff8e 	bl	800b0a0 <std>
 800b184:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b188:	2202      	movs	r2, #2
 800b18a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b18e:	2112      	movs	r1, #18
 800b190:	f7ff bf86 	b.w	800b0a0 <std>
 800b194:	20000874 	.word	0x20000874
 800b198:	2000073c 	.word	0x2000073c
 800b19c:	0800b10d 	.word	0x0800b10d

0800b1a0 <__sfp_lock_acquire>:
 800b1a0:	4801      	ldr	r0, [pc, #4]	; (800b1a8 <__sfp_lock_acquire+0x8>)
 800b1a2:	f000 ba22 	b.w	800b5ea <__retarget_lock_acquire_recursive>
 800b1a6:	bf00      	nop
 800b1a8:	2000087d 	.word	0x2000087d

0800b1ac <__sfp_lock_release>:
 800b1ac:	4801      	ldr	r0, [pc, #4]	; (800b1b4 <__sfp_lock_release+0x8>)
 800b1ae:	f000 ba1d 	b.w	800b5ec <__retarget_lock_release_recursive>
 800b1b2:	bf00      	nop
 800b1b4:	2000087d 	.word	0x2000087d

0800b1b8 <__sinit>:
 800b1b8:	b510      	push	{r4, lr}
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	f7ff fff0 	bl	800b1a0 <__sfp_lock_acquire>
 800b1c0:	6a23      	ldr	r3, [r4, #32]
 800b1c2:	b11b      	cbz	r3, 800b1cc <__sinit+0x14>
 800b1c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1c8:	f7ff bff0 	b.w	800b1ac <__sfp_lock_release>
 800b1cc:	4b04      	ldr	r3, [pc, #16]	; (800b1e0 <__sinit+0x28>)
 800b1ce:	6223      	str	r3, [r4, #32]
 800b1d0:	4b04      	ldr	r3, [pc, #16]	; (800b1e4 <__sinit+0x2c>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d1f5      	bne.n	800b1c4 <__sinit+0xc>
 800b1d8:	f7ff ffc4 	bl	800b164 <global_stdio_init.part.0>
 800b1dc:	e7f2      	b.n	800b1c4 <__sinit+0xc>
 800b1de:	bf00      	nop
 800b1e0:	0800b125 	.word	0x0800b125
 800b1e4:	20000874 	.word	0x20000874

0800b1e8 <_fwalk_sglue>:
 800b1e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1ec:	4607      	mov	r7, r0
 800b1ee:	4688      	mov	r8, r1
 800b1f0:	4614      	mov	r4, r2
 800b1f2:	2600      	movs	r6, #0
 800b1f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b1f8:	f1b9 0901 	subs.w	r9, r9, #1
 800b1fc:	d505      	bpl.n	800b20a <_fwalk_sglue+0x22>
 800b1fe:	6824      	ldr	r4, [r4, #0]
 800b200:	2c00      	cmp	r4, #0
 800b202:	d1f7      	bne.n	800b1f4 <_fwalk_sglue+0xc>
 800b204:	4630      	mov	r0, r6
 800b206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b20a:	89ab      	ldrh	r3, [r5, #12]
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d907      	bls.n	800b220 <_fwalk_sglue+0x38>
 800b210:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b214:	3301      	adds	r3, #1
 800b216:	d003      	beq.n	800b220 <_fwalk_sglue+0x38>
 800b218:	4629      	mov	r1, r5
 800b21a:	4638      	mov	r0, r7
 800b21c:	47c0      	blx	r8
 800b21e:	4306      	orrs	r6, r0
 800b220:	3568      	adds	r5, #104	; 0x68
 800b222:	e7e9      	b.n	800b1f8 <_fwalk_sglue+0x10>

0800b224 <iprintf>:
 800b224:	b40f      	push	{r0, r1, r2, r3}
 800b226:	b507      	push	{r0, r1, r2, lr}
 800b228:	4906      	ldr	r1, [pc, #24]	; (800b244 <iprintf+0x20>)
 800b22a:	ab04      	add	r3, sp, #16
 800b22c:	6808      	ldr	r0, [r1, #0]
 800b22e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b232:	6881      	ldr	r1, [r0, #8]
 800b234:	9301      	str	r3, [sp, #4]
 800b236:	f001 fe33 	bl	800cea0 <_vfiprintf_r>
 800b23a:	b003      	add	sp, #12
 800b23c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b240:	b004      	add	sp, #16
 800b242:	4770      	bx	lr
 800b244:	200000ac 	.word	0x200000ac

0800b248 <_puts_r>:
 800b248:	6a03      	ldr	r3, [r0, #32]
 800b24a:	b570      	push	{r4, r5, r6, lr}
 800b24c:	6884      	ldr	r4, [r0, #8]
 800b24e:	4605      	mov	r5, r0
 800b250:	460e      	mov	r6, r1
 800b252:	b90b      	cbnz	r3, 800b258 <_puts_r+0x10>
 800b254:	f7ff ffb0 	bl	800b1b8 <__sinit>
 800b258:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b25a:	07db      	lsls	r3, r3, #31
 800b25c:	d405      	bmi.n	800b26a <_puts_r+0x22>
 800b25e:	89a3      	ldrh	r3, [r4, #12]
 800b260:	0598      	lsls	r0, r3, #22
 800b262:	d402      	bmi.n	800b26a <_puts_r+0x22>
 800b264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b266:	f000 f9c0 	bl	800b5ea <__retarget_lock_acquire_recursive>
 800b26a:	89a3      	ldrh	r3, [r4, #12]
 800b26c:	0719      	lsls	r1, r3, #28
 800b26e:	d513      	bpl.n	800b298 <_puts_r+0x50>
 800b270:	6923      	ldr	r3, [r4, #16]
 800b272:	b18b      	cbz	r3, 800b298 <_puts_r+0x50>
 800b274:	3e01      	subs	r6, #1
 800b276:	68a3      	ldr	r3, [r4, #8]
 800b278:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b27c:	3b01      	subs	r3, #1
 800b27e:	60a3      	str	r3, [r4, #8]
 800b280:	b9e9      	cbnz	r1, 800b2be <_puts_r+0x76>
 800b282:	2b00      	cmp	r3, #0
 800b284:	da2e      	bge.n	800b2e4 <_puts_r+0x9c>
 800b286:	4622      	mov	r2, r4
 800b288:	210a      	movs	r1, #10
 800b28a:	4628      	mov	r0, r5
 800b28c:	f000 f89b 	bl	800b3c6 <__swbuf_r>
 800b290:	3001      	adds	r0, #1
 800b292:	d007      	beq.n	800b2a4 <_puts_r+0x5c>
 800b294:	250a      	movs	r5, #10
 800b296:	e007      	b.n	800b2a8 <_puts_r+0x60>
 800b298:	4621      	mov	r1, r4
 800b29a:	4628      	mov	r0, r5
 800b29c:	f000 f8d0 	bl	800b440 <__swsetup_r>
 800b2a0:	2800      	cmp	r0, #0
 800b2a2:	d0e7      	beq.n	800b274 <_puts_r+0x2c>
 800b2a4:	f04f 35ff 	mov.w	r5, #4294967295
 800b2a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2aa:	07da      	lsls	r2, r3, #31
 800b2ac:	d405      	bmi.n	800b2ba <_puts_r+0x72>
 800b2ae:	89a3      	ldrh	r3, [r4, #12]
 800b2b0:	059b      	lsls	r3, r3, #22
 800b2b2:	d402      	bmi.n	800b2ba <_puts_r+0x72>
 800b2b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2b6:	f000 f999 	bl	800b5ec <__retarget_lock_release_recursive>
 800b2ba:	4628      	mov	r0, r5
 800b2bc:	bd70      	pop	{r4, r5, r6, pc}
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	da04      	bge.n	800b2cc <_puts_r+0x84>
 800b2c2:	69a2      	ldr	r2, [r4, #24]
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	dc06      	bgt.n	800b2d6 <_puts_r+0x8e>
 800b2c8:	290a      	cmp	r1, #10
 800b2ca:	d004      	beq.n	800b2d6 <_puts_r+0x8e>
 800b2cc:	6823      	ldr	r3, [r4, #0]
 800b2ce:	1c5a      	adds	r2, r3, #1
 800b2d0:	6022      	str	r2, [r4, #0]
 800b2d2:	7019      	strb	r1, [r3, #0]
 800b2d4:	e7cf      	b.n	800b276 <_puts_r+0x2e>
 800b2d6:	4622      	mov	r2, r4
 800b2d8:	4628      	mov	r0, r5
 800b2da:	f000 f874 	bl	800b3c6 <__swbuf_r>
 800b2de:	3001      	adds	r0, #1
 800b2e0:	d1c9      	bne.n	800b276 <_puts_r+0x2e>
 800b2e2:	e7df      	b.n	800b2a4 <_puts_r+0x5c>
 800b2e4:	6823      	ldr	r3, [r4, #0]
 800b2e6:	250a      	movs	r5, #10
 800b2e8:	1c5a      	adds	r2, r3, #1
 800b2ea:	6022      	str	r2, [r4, #0]
 800b2ec:	701d      	strb	r5, [r3, #0]
 800b2ee:	e7db      	b.n	800b2a8 <_puts_r+0x60>

0800b2f0 <puts>:
 800b2f0:	4b02      	ldr	r3, [pc, #8]	; (800b2fc <puts+0xc>)
 800b2f2:	4601      	mov	r1, r0
 800b2f4:	6818      	ldr	r0, [r3, #0]
 800b2f6:	f7ff bfa7 	b.w	800b248 <_puts_r>
 800b2fa:	bf00      	nop
 800b2fc:	200000ac 	.word	0x200000ac

0800b300 <siprintf>:
 800b300:	b40e      	push	{r1, r2, r3}
 800b302:	b500      	push	{lr}
 800b304:	b09c      	sub	sp, #112	; 0x70
 800b306:	ab1d      	add	r3, sp, #116	; 0x74
 800b308:	9002      	str	r0, [sp, #8]
 800b30a:	9006      	str	r0, [sp, #24]
 800b30c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b310:	4809      	ldr	r0, [pc, #36]	; (800b338 <siprintf+0x38>)
 800b312:	9107      	str	r1, [sp, #28]
 800b314:	9104      	str	r1, [sp, #16]
 800b316:	4909      	ldr	r1, [pc, #36]	; (800b33c <siprintf+0x3c>)
 800b318:	f853 2b04 	ldr.w	r2, [r3], #4
 800b31c:	9105      	str	r1, [sp, #20]
 800b31e:	6800      	ldr	r0, [r0, #0]
 800b320:	9301      	str	r3, [sp, #4]
 800b322:	a902      	add	r1, sp, #8
 800b324:	f001 fc96 	bl	800cc54 <_svfiprintf_r>
 800b328:	9b02      	ldr	r3, [sp, #8]
 800b32a:	2200      	movs	r2, #0
 800b32c:	701a      	strb	r2, [r3, #0]
 800b32e:	b01c      	add	sp, #112	; 0x70
 800b330:	f85d eb04 	ldr.w	lr, [sp], #4
 800b334:	b003      	add	sp, #12
 800b336:	4770      	bx	lr
 800b338:	200000ac 	.word	0x200000ac
 800b33c:	ffff0208 	.word	0xffff0208

0800b340 <__sread>:
 800b340:	b510      	push	{r4, lr}
 800b342:	460c      	mov	r4, r1
 800b344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b348:	f000 f900 	bl	800b54c <_read_r>
 800b34c:	2800      	cmp	r0, #0
 800b34e:	bfab      	itete	ge
 800b350:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b352:	89a3      	ldrhlt	r3, [r4, #12]
 800b354:	181b      	addge	r3, r3, r0
 800b356:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b35a:	bfac      	ite	ge
 800b35c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b35e:	81a3      	strhlt	r3, [r4, #12]
 800b360:	bd10      	pop	{r4, pc}

0800b362 <__swrite>:
 800b362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b366:	461f      	mov	r7, r3
 800b368:	898b      	ldrh	r3, [r1, #12]
 800b36a:	05db      	lsls	r3, r3, #23
 800b36c:	4605      	mov	r5, r0
 800b36e:	460c      	mov	r4, r1
 800b370:	4616      	mov	r6, r2
 800b372:	d505      	bpl.n	800b380 <__swrite+0x1e>
 800b374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b378:	2302      	movs	r3, #2
 800b37a:	2200      	movs	r2, #0
 800b37c:	f000 f8d4 	bl	800b528 <_lseek_r>
 800b380:	89a3      	ldrh	r3, [r4, #12]
 800b382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b386:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b38a:	81a3      	strh	r3, [r4, #12]
 800b38c:	4632      	mov	r2, r6
 800b38e:	463b      	mov	r3, r7
 800b390:	4628      	mov	r0, r5
 800b392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b396:	f000 b8eb 	b.w	800b570 <_write_r>

0800b39a <__sseek>:
 800b39a:	b510      	push	{r4, lr}
 800b39c:	460c      	mov	r4, r1
 800b39e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3a2:	f000 f8c1 	bl	800b528 <_lseek_r>
 800b3a6:	1c43      	adds	r3, r0, #1
 800b3a8:	89a3      	ldrh	r3, [r4, #12]
 800b3aa:	bf15      	itete	ne
 800b3ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3b6:	81a3      	strheq	r3, [r4, #12]
 800b3b8:	bf18      	it	ne
 800b3ba:	81a3      	strhne	r3, [r4, #12]
 800b3bc:	bd10      	pop	{r4, pc}

0800b3be <__sclose>:
 800b3be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3c2:	f000 b8a1 	b.w	800b508 <_close_r>

0800b3c6 <__swbuf_r>:
 800b3c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3c8:	460e      	mov	r6, r1
 800b3ca:	4614      	mov	r4, r2
 800b3cc:	4605      	mov	r5, r0
 800b3ce:	b118      	cbz	r0, 800b3d8 <__swbuf_r+0x12>
 800b3d0:	6a03      	ldr	r3, [r0, #32]
 800b3d2:	b90b      	cbnz	r3, 800b3d8 <__swbuf_r+0x12>
 800b3d4:	f7ff fef0 	bl	800b1b8 <__sinit>
 800b3d8:	69a3      	ldr	r3, [r4, #24]
 800b3da:	60a3      	str	r3, [r4, #8]
 800b3dc:	89a3      	ldrh	r3, [r4, #12]
 800b3de:	071a      	lsls	r2, r3, #28
 800b3e0:	d525      	bpl.n	800b42e <__swbuf_r+0x68>
 800b3e2:	6923      	ldr	r3, [r4, #16]
 800b3e4:	b31b      	cbz	r3, 800b42e <__swbuf_r+0x68>
 800b3e6:	6823      	ldr	r3, [r4, #0]
 800b3e8:	6922      	ldr	r2, [r4, #16]
 800b3ea:	1a98      	subs	r0, r3, r2
 800b3ec:	6963      	ldr	r3, [r4, #20]
 800b3ee:	b2f6      	uxtb	r6, r6
 800b3f0:	4283      	cmp	r3, r0
 800b3f2:	4637      	mov	r7, r6
 800b3f4:	dc04      	bgt.n	800b400 <__swbuf_r+0x3a>
 800b3f6:	4621      	mov	r1, r4
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	f001 feed 	bl	800d1d8 <_fflush_r>
 800b3fe:	b9e0      	cbnz	r0, 800b43a <__swbuf_r+0x74>
 800b400:	68a3      	ldr	r3, [r4, #8]
 800b402:	3b01      	subs	r3, #1
 800b404:	60a3      	str	r3, [r4, #8]
 800b406:	6823      	ldr	r3, [r4, #0]
 800b408:	1c5a      	adds	r2, r3, #1
 800b40a:	6022      	str	r2, [r4, #0]
 800b40c:	701e      	strb	r6, [r3, #0]
 800b40e:	6962      	ldr	r2, [r4, #20]
 800b410:	1c43      	adds	r3, r0, #1
 800b412:	429a      	cmp	r2, r3
 800b414:	d004      	beq.n	800b420 <__swbuf_r+0x5a>
 800b416:	89a3      	ldrh	r3, [r4, #12]
 800b418:	07db      	lsls	r3, r3, #31
 800b41a:	d506      	bpl.n	800b42a <__swbuf_r+0x64>
 800b41c:	2e0a      	cmp	r6, #10
 800b41e:	d104      	bne.n	800b42a <__swbuf_r+0x64>
 800b420:	4621      	mov	r1, r4
 800b422:	4628      	mov	r0, r5
 800b424:	f001 fed8 	bl	800d1d8 <_fflush_r>
 800b428:	b938      	cbnz	r0, 800b43a <__swbuf_r+0x74>
 800b42a:	4638      	mov	r0, r7
 800b42c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b42e:	4621      	mov	r1, r4
 800b430:	4628      	mov	r0, r5
 800b432:	f000 f805 	bl	800b440 <__swsetup_r>
 800b436:	2800      	cmp	r0, #0
 800b438:	d0d5      	beq.n	800b3e6 <__swbuf_r+0x20>
 800b43a:	f04f 37ff 	mov.w	r7, #4294967295
 800b43e:	e7f4      	b.n	800b42a <__swbuf_r+0x64>

0800b440 <__swsetup_r>:
 800b440:	b538      	push	{r3, r4, r5, lr}
 800b442:	4b2a      	ldr	r3, [pc, #168]	; (800b4ec <__swsetup_r+0xac>)
 800b444:	4605      	mov	r5, r0
 800b446:	6818      	ldr	r0, [r3, #0]
 800b448:	460c      	mov	r4, r1
 800b44a:	b118      	cbz	r0, 800b454 <__swsetup_r+0x14>
 800b44c:	6a03      	ldr	r3, [r0, #32]
 800b44e:	b90b      	cbnz	r3, 800b454 <__swsetup_r+0x14>
 800b450:	f7ff feb2 	bl	800b1b8 <__sinit>
 800b454:	89a3      	ldrh	r3, [r4, #12]
 800b456:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b45a:	0718      	lsls	r0, r3, #28
 800b45c:	d422      	bmi.n	800b4a4 <__swsetup_r+0x64>
 800b45e:	06d9      	lsls	r1, r3, #27
 800b460:	d407      	bmi.n	800b472 <__swsetup_r+0x32>
 800b462:	2309      	movs	r3, #9
 800b464:	602b      	str	r3, [r5, #0]
 800b466:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b46a:	81a3      	strh	r3, [r4, #12]
 800b46c:	f04f 30ff 	mov.w	r0, #4294967295
 800b470:	e034      	b.n	800b4dc <__swsetup_r+0x9c>
 800b472:	0758      	lsls	r0, r3, #29
 800b474:	d512      	bpl.n	800b49c <__swsetup_r+0x5c>
 800b476:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b478:	b141      	cbz	r1, 800b48c <__swsetup_r+0x4c>
 800b47a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b47e:	4299      	cmp	r1, r3
 800b480:	d002      	beq.n	800b488 <__swsetup_r+0x48>
 800b482:	4628      	mov	r0, r5
 800b484:	f000 ff18 	bl	800c2b8 <_free_r>
 800b488:	2300      	movs	r3, #0
 800b48a:	6363      	str	r3, [r4, #52]	; 0x34
 800b48c:	89a3      	ldrh	r3, [r4, #12]
 800b48e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b492:	81a3      	strh	r3, [r4, #12]
 800b494:	2300      	movs	r3, #0
 800b496:	6063      	str	r3, [r4, #4]
 800b498:	6923      	ldr	r3, [r4, #16]
 800b49a:	6023      	str	r3, [r4, #0]
 800b49c:	89a3      	ldrh	r3, [r4, #12]
 800b49e:	f043 0308 	orr.w	r3, r3, #8
 800b4a2:	81a3      	strh	r3, [r4, #12]
 800b4a4:	6923      	ldr	r3, [r4, #16]
 800b4a6:	b94b      	cbnz	r3, 800b4bc <__swsetup_r+0x7c>
 800b4a8:	89a3      	ldrh	r3, [r4, #12]
 800b4aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4b2:	d003      	beq.n	800b4bc <__swsetup_r+0x7c>
 800b4b4:	4621      	mov	r1, r4
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	f001 fedc 	bl	800d274 <__smakebuf_r>
 800b4bc:	89a0      	ldrh	r0, [r4, #12]
 800b4be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4c2:	f010 0301 	ands.w	r3, r0, #1
 800b4c6:	d00a      	beq.n	800b4de <__swsetup_r+0x9e>
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	60a3      	str	r3, [r4, #8]
 800b4cc:	6963      	ldr	r3, [r4, #20]
 800b4ce:	425b      	negs	r3, r3
 800b4d0:	61a3      	str	r3, [r4, #24]
 800b4d2:	6923      	ldr	r3, [r4, #16]
 800b4d4:	b943      	cbnz	r3, 800b4e8 <__swsetup_r+0xa8>
 800b4d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b4da:	d1c4      	bne.n	800b466 <__swsetup_r+0x26>
 800b4dc:	bd38      	pop	{r3, r4, r5, pc}
 800b4de:	0781      	lsls	r1, r0, #30
 800b4e0:	bf58      	it	pl
 800b4e2:	6963      	ldrpl	r3, [r4, #20]
 800b4e4:	60a3      	str	r3, [r4, #8]
 800b4e6:	e7f4      	b.n	800b4d2 <__swsetup_r+0x92>
 800b4e8:	2000      	movs	r0, #0
 800b4ea:	e7f7      	b.n	800b4dc <__swsetup_r+0x9c>
 800b4ec:	200000ac 	.word	0x200000ac

0800b4f0 <memset>:
 800b4f0:	4402      	add	r2, r0
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d100      	bne.n	800b4fa <memset+0xa>
 800b4f8:	4770      	bx	lr
 800b4fa:	f803 1b01 	strb.w	r1, [r3], #1
 800b4fe:	e7f9      	b.n	800b4f4 <memset+0x4>

0800b500 <_localeconv_r>:
 800b500:	4800      	ldr	r0, [pc, #0]	; (800b504 <_localeconv_r+0x4>)
 800b502:	4770      	bx	lr
 800b504:	200001a0 	.word	0x200001a0

0800b508 <_close_r>:
 800b508:	b538      	push	{r3, r4, r5, lr}
 800b50a:	4d06      	ldr	r5, [pc, #24]	; (800b524 <_close_r+0x1c>)
 800b50c:	2300      	movs	r3, #0
 800b50e:	4604      	mov	r4, r0
 800b510:	4608      	mov	r0, r1
 800b512:	602b      	str	r3, [r5, #0]
 800b514:	f7fd f9f2 	bl	80088fc <_close>
 800b518:	1c43      	adds	r3, r0, #1
 800b51a:	d102      	bne.n	800b522 <_close_r+0x1a>
 800b51c:	682b      	ldr	r3, [r5, #0]
 800b51e:	b103      	cbz	r3, 800b522 <_close_r+0x1a>
 800b520:	6023      	str	r3, [r4, #0]
 800b522:	bd38      	pop	{r3, r4, r5, pc}
 800b524:	20000878 	.word	0x20000878

0800b528 <_lseek_r>:
 800b528:	b538      	push	{r3, r4, r5, lr}
 800b52a:	4d07      	ldr	r5, [pc, #28]	; (800b548 <_lseek_r+0x20>)
 800b52c:	4604      	mov	r4, r0
 800b52e:	4608      	mov	r0, r1
 800b530:	4611      	mov	r1, r2
 800b532:	2200      	movs	r2, #0
 800b534:	602a      	str	r2, [r5, #0]
 800b536:	461a      	mov	r2, r3
 800b538:	f7fd fa04 	bl	8008944 <_lseek>
 800b53c:	1c43      	adds	r3, r0, #1
 800b53e:	d102      	bne.n	800b546 <_lseek_r+0x1e>
 800b540:	682b      	ldr	r3, [r5, #0]
 800b542:	b103      	cbz	r3, 800b546 <_lseek_r+0x1e>
 800b544:	6023      	str	r3, [r4, #0]
 800b546:	bd38      	pop	{r3, r4, r5, pc}
 800b548:	20000878 	.word	0x20000878

0800b54c <_read_r>:
 800b54c:	b538      	push	{r3, r4, r5, lr}
 800b54e:	4d07      	ldr	r5, [pc, #28]	; (800b56c <_read_r+0x20>)
 800b550:	4604      	mov	r4, r0
 800b552:	4608      	mov	r0, r1
 800b554:	4611      	mov	r1, r2
 800b556:	2200      	movs	r2, #0
 800b558:	602a      	str	r2, [r5, #0]
 800b55a:	461a      	mov	r2, r3
 800b55c:	f7fd f995 	bl	800888a <_read>
 800b560:	1c43      	adds	r3, r0, #1
 800b562:	d102      	bne.n	800b56a <_read_r+0x1e>
 800b564:	682b      	ldr	r3, [r5, #0]
 800b566:	b103      	cbz	r3, 800b56a <_read_r+0x1e>
 800b568:	6023      	str	r3, [r4, #0]
 800b56a:	bd38      	pop	{r3, r4, r5, pc}
 800b56c:	20000878 	.word	0x20000878

0800b570 <_write_r>:
 800b570:	b538      	push	{r3, r4, r5, lr}
 800b572:	4d07      	ldr	r5, [pc, #28]	; (800b590 <_write_r+0x20>)
 800b574:	4604      	mov	r4, r0
 800b576:	4608      	mov	r0, r1
 800b578:	4611      	mov	r1, r2
 800b57a:	2200      	movs	r2, #0
 800b57c:	602a      	str	r2, [r5, #0]
 800b57e:	461a      	mov	r2, r3
 800b580:	f7fd f9a0 	bl	80088c4 <_write>
 800b584:	1c43      	adds	r3, r0, #1
 800b586:	d102      	bne.n	800b58e <_write_r+0x1e>
 800b588:	682b      	ldr	r3, [r5, #0]
 800b58a:	b103      	cbz	r3, 800b58e <_write_r+0x1e>
 800b58c:	6023      	str	r3, [r4, #0]
 800b58e:	bd38      	pop	{r3, r4, r5, pc}
 800b590:	20000878 	.word	0x20000878

0800b594 <__errno>:
 800b594:	4b01      	ldr	r3, [pc, #4]	; (800b59c <__errno+0x8>)
 800b596:	6818      	ldr	r0, [r3, #0]
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	200000ac 	.word	0x200000ac

0800b5a0 <__libc_init_array>:
 800b5a0:	b570      	push	{r4, r5, r6, lr}
 800b5a2:	4d0d      	ldr	r5, [pc, #52]	; (800b5d8 <__libc_init_array+0x38>)
 800b5a4:	4c0d      	ldr	r4, [pc, #52]	; (800b5dc <__libc_init_array+0x3c>)
 800b5a6:	1b64      	subs	r4, r4, r5
 800b5a8:	10a4      	asrs	r4, r4, #2
 800b5aa:	2600      	movs	r6, #0
 800b5ac:	42a6      	cmp	r6, r4
 800b5ae:	d109      	bne.n	800b5c4 <__libc_init_array+0x24>
 800b5b0:	4d0b      	ldr	r5, [pc, #44]	; (800b5e0 <__libc_init_array+0x40>)
 800b5b2:	4c0c      	ldr	r4, [pc, #48]	; (800b5e4 <__libc_init_array+0x44>)
 800b5b4:	f001 ffda 	bl	800d56c <_init>
 800b5b8:	1b64      	subs	r4, r4, r5
 800b5ba:	10a4      	asrs	r4, r4, #2
 800b5bc:	2600      	movs	r6, #0
 800b5be:	42a6      	cmp	r6, r4
 800b5c0:	d105      	bne.n	800b5ce <__libc_init_array+0x2e>
 800b5c2:	bd70      	pop	{r4, r5, r6, pc}
 800b5c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5c8:	4798      	blx	r3
 800b5ca:	3601      	adds	r6, #1
 800b5cc:	e7ee      	b.n	800b5ac <__libc_init_array+0xc>
 800b5ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5d2:	4798      	blx	r3
 800b5d4:	3601      	adds	r6, #1
 800b5d6:	e7f2      	b.n	800b5be <__libc_init_array+0x1e>
 800b5d8:	08016e1c 	.word	0x08016e1c
 800b5dc:	08016e1c 	.word	0x08016e1c
 800b5e0:	08016e1c 	.word	0x08016e1c
 800b5e4:	08016e20 	.word	0x08016e20

0800b5e8 <__retarget_lock_init_recursive>:
 800b5e8:	4770      	bx	lr

0800b5ea <__retarget_lock_acquire_recursive>:
 800b5ea:	4770      	bx	lr

0800b5ec <__retarget_lock_release_recursive>:
 800b5ec:	4770      	bx	lr

0800b5ee <quorem>:
 800b5ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f2:	6903      	ldr	r3, [r0, #16]
 800b5f4:	690c      	ldr	r4, [r1, #16]
 800b5f6:	42a3      	cmp	r3, r4
 800b5f8:	4607      	mov	r7, r0
 800b5fa:	db7b      	blt.n	800b6f4 <quorem+0x106>
 800b5fc:	3c01      	subs	r4, #1
 800b5fe:	f101 0814 	add.w	r8, r1, #20
 800b602:	f100 0514 	add.w	r5, r0, #20
 800b606:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b60a:	9301      	str	r3, [sp, #4]
 800b60c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b610:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b614:	3301      	adds	r3, #1
 800b616:	429a      	cmp	r2, r3
 800b618:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b61c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b620:	fbb2 f6f3 	udiv	r6, r2, r3
 800b624:	d32e      	bcc.n	800b684 <quorem+0x96>
 800b626:	f04f 0e00 	mov.w	lr, #0
 800b62a:	4640      	mov	r0, r8
 800b62c:	46ac      	mov	ip, r5
 800b62e:	46f2      	mov	sl, lr
 800b630:	f850 2b04 	ldr.w	r2, [r0], #4
 800b634:	b293      	uxth	r3, r2
 800b636:	fb06 e303 	mla	r3, r6, r3, lr
 800b63a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b63e:	0c1a      	lsrs	r2, r3, #16
 800b640:	b29b      	uxth	r3, r3
 800b642:	fb06 220e 	mla	r2, r6, lr, r2
 800b646:	ebaa 0303 	sub.w	r3, sl, r3
 800b64a:	f8dc a000 	ldr.w	sl, [ip]
 800b64e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b652:	b292      	uxth	r2, r2
 800b654:	fa13 f38a 	uxtah	r3, r3, sl
 800b658:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b65c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b660:	b29b      	uxth	r3, r3
 800b662:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b666:	4581      	cmp	r9, r0
 800b668:	f84c 3b04 	str.w	r3, [ip], #4
 800b66c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b670:	d2de      	bcs.n	800b630 <quorem+0x42>
 800b672:	f855 300b 	ldr.w	r3, [r5, fp]
 800b676:	b92b      	cbnz	r3, 800b684 <quorem+0x96>
 800b678:	9b01      	ldr	r3, [sp, #4]
 800b67a:	3b04      	subs	r3, #4
 800b67c:	429d      	cmp	r5, r3
 800b67e:	461a      	mov	r2, r3
 800b680:	d32c      	bcc.n	800b6dc <quorem+0xee>
 800b682:	613c      	str	r4, [r7, #16]
 800b684:	4638      	mov	r0, r7
 800b686:	f001 f991 	bl	800c9ac <__mcmp>
 800b68a:	2800      	cmp	r0, #0
 800b68c:	db22      	blt.n	800b6d4 <quorem+0xe6>
 800b68e:	3601      	adds	r6, #1
 800b690:	4629      	mov	r1, r5
 800b692:	2000      	movs	r0, #0
 800b694:	f858 2b04 	ldr.w	r2, [r8], #4
 800b698:	f8d1 c000 	ldr.w	ip, [r1]
 800b69c:	b293      	uxth	r3, r2
 800b69e:	1ac3      	subs	r3, r0, r3
 800b6a0:	0c12      	lsrs	r2, r2, #16
 800b6a2:	fa13 f38c 	uxtah	r3, r3, ip
 800b6a6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b6aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6b4:	45c1      	cmp	r9, r8
 800b6b6:	f841 3b04 	str.w	r3, [r1], #4
 800b6ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b6be:	d2e9      	bcs.n	800b694 <quorem+0xa6>
 800b6c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6c8:	b922      	cbnz	r2, 800b6d4 <quorem+0xe6>
 800b6ca:	3b04      	subs	r3, #4
 800b6cc:	429d      	cmp	r5, r3
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	d30a      	bcc.n	800b6e8 <quorem+0xfa>
 800b6d2:	613c      	str	r4, [r7, #16]
 800b6d4:	4630      	mov	r0, r6
 800b6d6:	b003      	add	sp, #12
 800b6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6dc:	6812      	ldr	r2, [r2, #0]
 800b6de:	3b04      	subs	r3, #4
 800b6e0:	2a00      	cmp	r2, #0
 800b6e2:	d1ce      	bne.n	800b682 <quorem+0x94>
 800b6e4:	3c01      	subs	r4, #1
 800b6e6:	e7c9      	b.n	800b67c <quorem+0x8e>
 800b6e8:	6812      	ldr	r2, [r2, #0]
 800b6ea:	3b04      	subs	r3, #4
 800b6ec:	2a00      	cmp	r2, #0
 800b6ee:	d1f0      	bne.n	800b6d2 <quorem+0xe4>
 800b6f0:	3c01      	subs	r4, #1
 800b6f2:	e7eb      	b.n	800b6cc <quorem+0xde>
 800b6f4:	2000      	movs	r0, #0
 800b6f6:	e7ee      	b.n	800b6d6 <quorem+0xe8>

0800b6f8 <_dtoa_r>:
 800b6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6fc:	69c4      	ldr	r4, [r0, #28]
 800b6fe:	b099      	sub	sp, #100	; 0x64
 800b700:	4616      	mov	r6, r2
 800b702:	461f      	mov	r7, r3
 800b704:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b708:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b70c:	4605      	mov	r5, r0
 800b70e:	b974      	cbnz	r4, 800b72e <_dtoa_r+0x36>
 800b710:	2010      	movs	r0, #16
 800b712:	f000 fe1b 	bl	800c34c <malloc>
 800b716:	4602      	mov	r2, r0
 800b718:	61e8      	str	r0, [r5, #28]
 800b71a:	b920      	cbnz	r0, 800b726 <_dtoa_r+0x2e>
 800b71c:	4baa      	ldr	r3, [pc, #680]	; (800b9c8 <_dtoa_r+0x2d0>)
 800b71e:	21ef      	movs	r1, #239	; 0xef
 800b720:	48aa      	ldr	r0, [pc, #680]	; (800b9cc <_dtoa_r+0x2d4>)
 800b722:	f001 fe3d 	bl	800d3a0 <__assert_func>
 800b726:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b72a:	6004      	str	r4, [r0, #0]
 800b72c:	60c4      	str	r4, [r0, #12]
 800b72e:	69eb      	ldr	r3, [r5, #28]
 800b730:	6819      	ldr	r1, [r3, #0]
 800b732:	b151      	cbz	r1, 800b74a <_dtoa_r+0x52>
 800b734:	685a      	ldr	r2, [r3, #4]
 800b736:	604a      	str	r2, [r1, #4]
 800b738:	2301      	movs	r3, #1
 800b73a:	4093      	lsls	r3, r2
 800b73c:	608b      	str	r3, [r1, #8]
 800b73e:	4628      	mov	r0, r5
 800b740:	f000 fef8 	bl	800c534 <_Bfree>
 800b744:	69eb      	ldr	r3, [r5, #28]
 800b746:	2200      	movs	r2, #0
 800b748:	601a      	str	r2, [r3, #0]
 800b74a:	1e3b      	subs	r3, r7, #0
 800b74c:	bfb9      	ittee	lt
 800b74e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b752:	9305      	strlt	r3, [sp, #20]
 800b754:	2300      	movge	r3, #0
 800b756:	f8c8 3000 	strge.w	r3, [r8]
 800b75a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b75e:	4b9c      	ldr	r3, [pc, #624]	; (800b9d0 <_dtoa_r+0x2d8>)
 800b760:	bfbc      	itt	lt
 800b762:	2201      	movlt	r2, #1
 800b764:	f8c8 2000 	strlt.w	r2, [r8]
 800b768:	ea33 0309 	bics.w	r3, r3, r9
 800b76c:	d119      	bne.n	800b7a2 <_dtoa_r+0xaa>
 800b76e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b770:	f242 730f 	movw	r3, #9999	; 0x270f
 800b774:	6013      	str	r3, [r2, #0]
 800b776:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b77a:	4333      	orrs	r3, r6
 800b77c:	f000 8587 	beq.w	800c28e <_dtoa_r+0xb96>
 800b780:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b782:	b953      	cbnz	r3, 800b79a <_dtoa_r+0xa2>
 800b784:	4b93      	ldr	r3, [pc, #588]	; (800b9d4 <_dtoa_r+0x2dc>)
 800b786:	e023      	b.n	800b7d0 <_dtoa_r+0xd8>
 800b788:	4b93      	ldr	r3, [pc, #588]	; (800b9d8 <_dtoa_r+0x2e0>)
 800b78a:	9303      	str	r3, [sp, #12]
 800b78c:	3308      	adds	r3, #8
 800b78e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b790:	6013      	str	r3, [r2, #0]
 800b792:	9803      	ldr	r0, [sp, #12]
 800b794:	b019      	add	sp, #100	; 0x64
 800b796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b79a:	4b8e      	ldr	r3, [pc, #568]	; (800b9d4 <_dtoa_r+0x2dc>)
 800b79c:	9303      	str	r3, [sp, #12]
 800b79e:	3303      	adds	r3, #3
 800b7a0:	e7f5      	b.n	800b78e <_dtoa_r+0x96>
 800b7a2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b7a6:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b7aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	f7f5 f989 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7b6:	4680      	mov	r8, r0
 800b7b8:	b160      	cbz	r0, 800b7d4 <_dtoa_r+0xdc>
 800b7ba:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b7bc:	2301      	movs	r3, #1
 800b7be:	6013      	str	r3, [r2, #0]
 800b7c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	f000 8560 	beq.w	800c288 <_dtoa_r+0xb90>
 800b7c8:	4b84      	ldr	r3, [pc, #528]	; (800b9dc <_dtoa_r+0x2e4>)
 800b7ca:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b7cc:	6013      	str	r3, [r2, #0]
 800b7ce:	3b01      	subs	r3, #1
 800b7d0:	9303      	str	r3, [sp, #12]
 800b7d2:	e7de      	b.n	800b792 <_dtoa_r+0x9a>
 800b7d4:	ab16      	add	r3, sp, #88	; 0x58
 800b7d6:	9301      	str	r3, [sp, #4]
 800b7d8:	ab17      	add	r3, sp, #92	; 0x5c
 800b7da:	9300      	str	r3, [sp, #0]
 800b7dc:	4628      	mov	r0, r5
 800b7de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b7e2:	f001 f987 	bl	800caf4 <__d2b>
 800b7e6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b7ea:	4682      	mov	sl, r0
 800b7ec:	2c00      	cmp	r4, #0
 800b7ee:	d07d      	beq.n	800b8ec <_dtoa_r+0x1f4>
 800b7f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7f2:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b7f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b7fe:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b802:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b806:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b80a:	4619      	mov	r1, r3
 800b80c:	2200      	movs	r2, #0
 800b80e:	4b74      	ldr	r3, [pc, #464]	; (800b9e0 <_dtoa_r+0x2e8>)
 800b810:	f7f4 fd3a 	bl	8000288 <__aeabi_dsub>
 800b814:	a366      	add	r3, pc, #408	; (adr r3, 800b9b0 <_dtoa_r+0x2b8>)
 800b816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81a:	f7f4 feed 	bl	80005f8 <__aeabi_dmul>
 800b81e:	a366      	add	r3, pc, #408	; (adr r3, 800b9b8 <_dtoa_r+0x2c0>)
 800b820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b824:	f7f4 fd32 	bl	800028c <__adddf3>
 800b828:	4606      	mov	r6, r0
 800b82a:	4620      	mov	r0, r4
 800b82c:	460f      	mov	r7, r1
 800b82e:	f7f4 fe79 	bl	8000524 <__aeabi_i2d>
 800b832:	a363      	add	r3, pc, #396	; (adr r3, 800b9c0 <_dtoa_r+0x2c8>)
 800b834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b838:	f7f4 fede 	bl	80005f8 <__aeabi_dmul>
 800b83c:	4602      	mov	r2, r0
 800b83e:	460b      	mov	r3, r1
 800b840:	4630      	mov	r0, r6
 800b842:	4639      	mov	r1, r7
 800b844:	f7f4 fd22 	bl	800028c <__adddf3>
 800b848:	4606      	mov	r6, r0
 800b84a:	460f      	mov	r7, r1
 800b84c:	f7f5 f984 	bl	8000b58 <__aeabi_d2iz>
 800b850:	2200      	movs	r2, #0
 800b852:	4683      	mov	fp, r0
 800b854:	2300      	movs	r3, #0
 800b856:	4630      	mov	r0, r6
 800b858:	4639      	mov	r1, r7
 800b85a:	f7f5 f93f 	bl	8000adc <__aeabi_dcmplt>
 800b85e:	b148      	cbz	r0, 800b874 <_dtoa_r+0x17c>
 800b860:	4658      	mov	r0, fp
 800b862:	f7f4 fe5f 	bl	8000524 <__aeabi_i2d>
 800b866:	4632      	mov	r2, r6
 800b868:	463b      	mov	r3, r7
 800b86a:	f7f5 f92d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b86e:	b908      	cbnz	r0, 800b874 <_dtoa_r+0x17c>
 800b870:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b874:	f1bb 0f16 	cmp.w	fp, #22
 800b878:	d856      	bhi.n	800b928 <_dtoa_r+0x230>
 800b87a:	4b5a      	ldr	r3, [pc, #360]	; (800b9e4 <_dtoa_r+0x2ec>)
 800b87c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b884:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b888:	f7f5 f928 	bl	8000adc <__aeabi_dcmplt>
 800b88c:	2800      	cmp	r0, #0
 800b88e:	d04d      	beq.n	800b92c <_dtoa_r+0x234>
 800b890:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b894:	2300      	movs	r3, #0
 800b896:	930f      	str	r3, [sp, #60]	; 0x3c
 800b898:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b89a:	1b1b      	subs	r3, r3, r4
 800b89c:	1e5a      	subs	r2, r3, #1
 800b89e:	bf44      	itt	mi
 800b8a0:	f1c3 0901 	rsbmi	r9, r3, #1
 800b8a4:	2300      	movmi	r3, #0
 800b8a6:	9209      	str	r2, [sp, #36]	; 0x24
 800b8a8:	bf54      	ite	pl
 800b8aa:	f04f 0900 	movpl.w	r9, #0
 800b8ae:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b8b0:	f1bb 0f00 	cmp.w	fp, #0
 800b8b4:	db3c      	blt.n	800b930 <_dtoa_r+0x238>
 800b8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8b8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800b8bc:	445b      	add	r3, fp
 800b8be:	9309      	str	r3, [sp, #36]	; 0x24
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	930a      	str	r3, [sp, #40]	; 0x28
 800b8c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b8c6:	2b09      	cmp	r3, #9
 800b8c8:	d866      	bhi.n	800b998 <_dtoa_r+0x2a0>
 800b8ca:	2b05      	cmp	r3, #5
 800b8cc:	bfc4      	itt	gt
 800b8ce:	3b04      	subgt	r3, #4
 800b8d0:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b8d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b8d4:	f1a3 0302 	sub.w	r3, r3, #2
 800b8d8:	bfcc      	ite	gt
 800b8da:	2400      	movgt	r4, #0
 800b8dc:	2401      	movle	r4, #1
 800b8de:	2b03      	cmp	r3, #3
 800b8e0:	f200 8084 	bhi.w	800b9ec <_dtoa_r+0x2f4>
 800b8e4:	e8df f003 	tbb	[pc, r3]
 800b8e8:	5637392c 	.word	0x5637392c
 800b8ec:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b8f0:	441c      	add	r4, r3
 800b8f2:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b8f6:	2b20      	cmp	r3, #32
 800b8f8:	bfc1      	itttt	gt
 800b8fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b8fe:	fa09 f903 	lslgt.w	r9, r9, r3
 800b902:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800b906:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b90a:	bfd6      	itet	le
 800b90c:	f1c3 0320 	rsble	r3, r3, #32
 800b910:	ea49 0003 	orrgt.w	r0, r9, r3
 800b914:	fa06 f003 	lslle.w	r0, r6, r3
 800b918:	f7f4 fdf4 	bl	8000504 <__aeabi_ui2d>
 800b91c:	2201      	movs	r2, #1
 800b91e:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b922:	3c01      	subs	r4, #1
 800b924:	9213      	str	r2, [sp, #76]	; 0x4c
 800b926:	e770      	b.n	800b80a <_dtoa_r+0x112>
 800b928:	2301      	movs	r3, #1
 800b92a:	e7b4      	b.n	800b896 <_dtoa_r+0x19e>
 800b92c:	900f      	str	r0, [sp, #60]	; 0x3c
 800b92e:	e7b3      	b.n	800b898 <_dtoa_r+0x1a0>
 800b930:	f1cb 0300 	rsb	r3, fp, #0
 800b934:	930a      	str	r3, [sp, #40]	; 0x28
 800b936:	2300      	movs	r3, #0
 800b938:	eba9 090b 	sub.w	r9, r9, fp
 800b93c:	930e      	str	r3, [sp, #56]	; 0x38
 800b93e:	e7c1      	b.n	800b8c4 <_dtoa_r+0x1cc>
 800b940:	2300      	movs	r3, #0
 800b942:	930b      	str	r3, [sp, #44]	; 0x2c
 800b944:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b946:	2b00      	cmp	r3, #0
 800b948:	dc53      	bgt.n	800b9f2 <_dtoa_r+0x2fa>
 800b94a:	2301      	movs	r3, #1
 800b94c:	9306      	str	r3, [sp, #24]
 800b94e:	9308      	str	r3, [sp, #32]
 800b950:	461a      	mov	r2, r3
 800b952:	9223      	str	r2, [sp, #140]	; 0x8c
 800b954:	e00b      	b.n	800b96e <_dtoa_r+0x276>
 800b956:	2301      	movs	r3, #1
 800b958:	e7f3      	b.n	800b942 <_dtoa_r+0x24a>
 800b95a:	2300      	movs	r3, #0
 800b95c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b95e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b960:	445b      	add	r3, fp
 800b962:	9306      	str	r3, [sp, #24]
 800b964:	3301      	adds	r3, #1
 800b966:	2b01      	cmp	r3, #1
 800b968:	9308      	str	r3, [sp, #32]
 800b96a:	bfb8      	it	lt
 800b96c:	2301      	movlt	r3, #1
 800b96e:	69e8      	ldr	r0, [r5, #28]
 800b970:	2100      	movs	r1, #0
 800b972:	2204      	movs	r2, #4
 800b974:	f102 0614 	add.w	r6, r2, #20
 800b978:	429e      	cmp	r6, r3
 800b97a:	d93e      	bls.n	800b9fa <_dtoa_r+0x302>
 800b97c:	6041      	str	r1, [r0, #4]
 800b97e:	4628      	mov	r0, r5
 800b980:	f000 fd98 	bl	800c4b4 <_Balloc>
 800b984:	9003      	str	r0, [sp, #12]
 800b986:	2800      	cmp	r0, #0
 800b988:	d13a      	bne.n	800ba00 <_dtoa_r+0x308>
 800b98a:	4b17      	ldr	r3, [pc, #92]	; (800b9e8 <_dtoa_r+0x2f0>)
 800b98c:	4602      	mov	r2, r0
 800b98e:	f240 11af 	movw	r1, #431	; 0x1af
 800b992:	e6c5      	b.n	800b720 <_dtoa_r+0x28>
 800b994:	2301      	movs	r3, #1
 800b996:	e7e1      	b.n	800b95c <_dtoa_r+0x264>
 800b998:	2401      	movs	r4, #1
 800b99a:	2300      	movs	r3, #0
 800b99c:	9322      	str	r3, [sp, #136]	; 0x88
 800b99e:	940b      	str	r4, [sp, #44]	; 0x2c
 800b9a0:	f04f 33ff 	mov.w	r3, #4294967295
 800b9a4:	9306      	str	r3, [sp, #24]
 800b9a6:	9308      	str	r3, [sp, #32]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	2312      	movs	r3, #18
 800b9ac:	e7d1      	b.n	800b952 <_dtoa_r+0x25a>
 800b9ae:	bf00      	nop
 800b9b0:	636f4361 	.word	0x636f4361
 800b9b4:	3fd287a7 	.word	0x3fd287a7
 800b9b8:	8b60c8b3 	.word	0x8b60c8b3
 800b9bc:	3fc68a28 	.word	0x3fc68a28
 800b9c0:	509f79fb 	.word	0x509f79fb
 800b9c4:	3fd34413 	.word	0x3fd34413
 800b9c8:	08016ae1 	.word	0x08016ae1
 800b9cc:	08016af8 	.word	0x08016af8
 800b9d0:	7ff00000 	.word	0x7ff00000
 800b9d4:	08016add 	.word	0x08016add
 800b9d8:	08016ad4 	.word	0x08016ad4
 800b9dc:	08016ab1 	.word	0x08016ab1
 800b9e0:	3ff80000 	.word	0x3ff80000
 800b9e4:	08016be8 	.word	0x08016be8
 800b9e8:	08016b50 	.word	0x08016b50
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9f0:	e7d6      	b.n	800b9a0 <_dtoa_r+0x2a8>
 800b9f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b9f4:	9306      	str	r3, [sp, #24]
 800b9f6:	9308      	str	r3, [sp, #32]
 800b9f8:	e7b9      	b.n	800b96e <_dtoa_r+0x276>
 800b9fa:	3101      	adds	r1, #1
 800b9fc:	0052      	lsls	r2, r2, #1
 800b9fe:	e7b9      	b.n	800b974 <_dtoa_r+0x27c>
 800ba00:	69eb      	ldr	r3, [r5, #28]
 800ba02:	9a03      	ldr	r2, [sp, #12]
 800ba04:	601a      	str	r2, [r3, #0]
 800ba06:	9b08      	ldr	r3, [sp, #32]
 800ba08:	2b0e      	cmp	r3, #14
 800ba0a:	f200 80a8 	bhi.w	800bb5e <_dtoa_r+0x466>
 800ba0e:	2c00      	cmp	r4, #0
 800ba10:	f000 80a5 	beq.w	800bb5e <_dtoa_r+0x466>
 800ba14:	f1bb 0f00 	cmp.w	fp, #0
 800ba18:	dd34      	ble.n	800ba84 <_dtoa_r+0x38c>
 800ba1a:	4b9a      	ldr	r3, [pc, #616]	; (800bc84 <_dtoa_r+0x58c>)
 800ba1c:	f00b 020f 	and.w	r2, fp, #15
 800ba20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba24:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ba28:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ba2c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ba30:	ea4f 142b 	mov.w	r4, fp, asr #4
 800ba34:	d016      	beq.n	800ba64 <_dtoa_r+0x36c>
 800ba36:	4b94      	ldr	r3, [pc, #592]	; (800bc88 <_dtoa_r+0x590>)
 800ba38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ba3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ba40:	f7f4 ff04 	bl	800084c <__aeabi_ddiv>
 800ba44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba48:	f004 040f 	and.w	r4, r4, #15
 800ba4c:	2703      	movs	r7, #3
 800ba4e:	4e8e      	ldr	r6, [pc, #568]	; (800bc88 <_dtoa_r+0x590>)
 800ba50:	b954      	cbnz	r4, 800ba68 <_dtoa_r+0x370>
 800ba52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ba56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba5a:	f7f4 fef7 	bl	800084c <__aeabi_ddiv>
 800ba5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba62:	e029      	b.n	800bab8 <_dtoa_r+0x3c0>
 800ba64:	2702      	movs	r7, #2
 800ba66:	e7f2      	b.n	800ba4e <_dtoa_r+0x356>
 800ba68:	07e1      	lsls	r1, r4, #31
 800ba6a:	d508      	bpl.n	800ba7e <_dtoa_r+0x386>
 800ba6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ba70:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba74:	f7f4 fdc0 	bl	80005f8 <__aeabi_dmul>
 800ba78:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ba7c:	3701      	adds	r7, #1
 800ba7e:	1064      	asrs	r4, r4, #1
 800ba80:	3608      	adds	r6, #8
 800ba82:	e7e5      	b.n	800ba50 <_dtoa_r+0x358>
 800ba84:	f000 80a5 	beq.w	800bbd2 <_dtoa_r+0x4da>
 800ba88:	f1cb 0400 	rsb	r4, fp, #0
 800ba8c:	4b7d      	ldr	r3, [pc, #500]	; (800bc84 <_dtoa_r+0x58c>)
 800ba8e:	4e7e      	ldr	r6, [pc, #504]	; (800bc88 <_dtoa_r+0x590>)
 800ba90:	f004 020f 	and.w	r2, r4, #15
 800ba94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800baa0:	f7f4 fdaa 	bl	80005f8 <__aeabi_dmul>
 800baa4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800baa8:	1124      	asrs	r4, r4, #4
 800baaa:	2300      	movs	r3, #0
 800baac:	2702      	movs	r7, #2
 800baae:	2c00      	cmp	r4, #0
 800bab0:	f040 8084 	bne.w	800bbbc <_dtoa_r+0x4c4>
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d1d2      	bne.n	800ba5e <_dtoa_r+0x366>
 800bab8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800babc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bac0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	f000 8087 	beq.w	800bbd6 <_dtoa_r+0x4de>
 800bac8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bacc:	4b6f      	ldr	r3, [pc, #444]	; (800bc8c <_dtoa_r+0x594>)
 800bace:	2200      	movs	r2, #0
 800bad0:	f7f5 f804 	bl	8000adc <__aeabi_dcmplt>
 800bad4:	2800      	cmp	r0, #0
 800bad6:	d07e      	beq.n	800bbd6 <_dtoa_r+0x4de>
 800bad8:	9b08      	ldr	r3, [sp, #32]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d07b      	beq.n	800bbd6 <_dtoa_r+0x4de>
 800bade:	9b06      	ldr	r3, [sp, #24]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	dd38      	ble.n	800bb56 <_dtoa_r+0x45e>
 800bae4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bae8:	4b69      	ldr	r3, [pc, #420]	; (800bc90 <_dtoa_r+0x598>)
 800baea:	2200      	movs	r2, #0
 800baec:	f7f4 fd84 	bl	80005f8 <__aeabi_dmul>
 800baf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800baf4:	9c06      	ldr	r4, [sp, #24]
 800baf6:	f10b 38ff 	add.w	r8, fp, #4294967295
 800bafa:	3701      	adds	r7, #1
 800bafc:	4638      	mov	r0, r7
 800bafe:	f7f4 fd11 	bl	8000524 <__aeabi_i2d>
 800bb02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb06:	f7f4 fd77 	bl	80005f8 <__aeabi_dmul>
 800bb0a:	4b62      	ldr	r3, [pc, #392]	; (800bc94 <_dtoa_r+0x59c>)
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	f7f4 fbbd 	bl	800028c <__adddf3>
 800bb12:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bb16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bb1a:	9611      	str	r6, [sp, #68]	; 0x44
 800bb1c:	2c00      	cmp	r4, #0
 800bb1e:	d15d      	bne.n	800bbdc <_dtoa_r+0x4e4>
 800bb20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb24:	4b5c      	ldr	r3, [pc, #368]	; (800bc98 <_dtoa_r+0x5a0>)
 800bb26:	2200      	movs	r2, #0
 800bb28:	f7f4 fbae 	bl	8000288 <__aeabi_dsub>
 800bb2c:	4602      	mov	r2, r0
 800bb2e:	460b      	mov	r3, r1
 800bb30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bb34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bb36:	4633      	mov	r3, r6
 800bb38:	f7f4 ffee 	bl	8000b18 <__aeabi_dcmpgt>
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	f040 8295 	bne.w	800c06c <_dtoa_r+0x974>
 800bb42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb46:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bb48:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bb4c:	f7f4 ffc6 	bl	8000adc <__aeabi_dcmplt>
 800bb50:	2800      	cmp	r0, #0
 800bb52:	f040 8289 	bne.w	800c068 <_dtoa_r+0x970>
 800bb56:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800bb5a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bb5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	f2c0 8151 	blt.w	800be08 <_dtoa_r+0x710>
 800bb66:	f1bb 0f0e 	cmp.w	fp, #14
 800bb6a:	f300 814d 	bgt.w	800be08 <_dtoa_r+0x710>
 800bb6e:	4b45      	ldr	r3, [pc, #276]	; (800bc84 <_dtoa_r+0x58c>)
 800bb70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bb74:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bb78:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800bb7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	f280 80da 	bge.w	800bd38 <_dtoa_r+0x640>
 800bb84:	9b08      	ldr	r3, [sp, #32]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	f300 80d6 	bgt.w	800bd38 <_dtoa_r+0x640>
 800bb8c:	f040 826b 	bne.w	800c066 <_dtoa_r+0x96e>
 800bb90:	4b41      	ldr	r3, [pc, #260]	; (800bc98 <_dtoa_r+0x5a0>)
 800bb92:	2200      	movs	r2, #0
 800bb94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb98:	f7f4 fd2e 	bl	80005f8 <__aeabi_dmul>
 800bb9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bba0:	f7f4 ffb0 	bl	8000b04 <__aeabi_dcmpge>
 800bba4:	9c08      	ldr	r4, [sp, #32]
 800bba6:	4626      	mov	r6, r4
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	f040 8241 	bne.w	800c030 <_dtoa_r+0x938>
 800bbae:	9f03      	ldr	r7, [sp, #12]
 800bbb0:	2331      	movs	r3, #49	; 0x31
 800bbb2:	f807 3b01 	strb.w	r3, [r7], #1
 800bbb6:	f10b 0b01 	add.w	fp, fp, #1
 800bbba:	e23d      	b.n	800c038 <_dtoa_r+0x940>
 800bbbc:	07e2      	lsls	r2, r4, #31
 800bbbe:	d505      	bpl.n	800bbcc <_dtoa_r+0x4d4>
 800bbc0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bbc4:	f7f4 fd18 	bl	80005f8 <__aeabi_dmul>
 800bbc8:	3701      	adds	r7, #1
 800bbca:	2301      	movs	r3, #1
 800bbcc:	1064      	asrs	r4, r4, #1
 800bbce:	3608      	adds	r6, #8
 800bbd0:	e76d      	b.n	800baae <_dtoa_r+0x3b6>
 800bbd2:	2702      	movs	r7, #2
 800bbd4:	e770      	b.n	800bab8 <_dtoa_r+0x3c0>
 800bbd6:	9c08      	ldr	r4, [sp, #32]
 800bbd8:	46d8      	mov	r8, fp
 800bbda:	e78f      	b.n	800bafc <_dtoa_r+0x404>
 800bbdc:	9903      	ldr	r1, [sp, #12]
 800bbde:	4b29      	ldr	r3, [pc, #164]	; (800bc84 <_dtoa_r+0x58c>)
 800bbe0:	4421      	add	r1, r4
 800bbe2:	9112      	str	r1, [sp, #72]	; 0x48
 800bbe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bbe6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bbea:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800bbee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bbf2:	2900      	cmp	r1, #0
 800bbf4:	d054      	beq.n	800bca0 <_dtoa_r+0x5a8>
 800bbf6:	4929      	ldr	r1, [pc, #164]	; (800bc9c <_dtoa_r+0x5a4>)
 800bbf8:	2000      	movs	r0, #0
 800bbfa:	f7f4 fe27 	bl	800084c <__aeabi_ddiv>
 800bbfe:	463b      	mov	r3, r7
 800bc00:	4632      	mov	r2, r6
 800bc02:	f7f4 fb41 	bl	8000288 <__aeabi_dsub>
 800bc06:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bc0a:	9f03      	ldr	r7, [sp, #12]
 800bc0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc10:	f7f4 ffa2 	bl	8000b58 <__aeabi_d2iz>
 800bc14:	4604      	mov	r4, r0
 800bc16:	f7f4 fc85 	bl	8000524 <__aeabi_i2d>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc22:	f7f4 fb31 	bl	8000288 <__aeabi_dsub>
 800bc26:	3430      	adds	r4, #48	; 0x30
 800bc28:	4602      	mov	r2, r0
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bc30:	f807 4b01 	strb.w	r4, [r7], #1
 800bc34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bc38:	f7f4 ff50 	bl	8000adc <__aeabi_dcmplt>
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	d173      	bne.n	800bd28 <_dtoa_r+0x630>
 800bc40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc44:	4911      	ldr	r1, [pc, #68]	; (800bc8c <_dtoa_r+0x594>)
 800bc46:	2000      	movs	r0, #0
 800bc48:	f7f4 fb1e 	bl	8000288 <__aeabi_dsub>
 800bc4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bc50:	f7f4 ff44 	bl	8000adc <__aeabi_dcmplt>
 800bc54:	2800      	cmp	r0, #0
 800bc56:	f040 80b6 	bne.w	800bdc6 <_dtoa_r+0x6ce>
 800bc5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bc5c:	429f      	cmp	r7, r3
 800bc5e:	f43f af7a 	beq.w	800bb56 <_dtoa_r+0x45e>
 800bc62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bc66:	4b0a      	ldr	r3, [pc, #40]	; (800bc90 <_dtoa_r+0x598>)
 800bc68:	2200      	movs	r2, #0
 800bc6a:	f7f4 fcc5 	bl	80005f8 <__aeabi_dmul>
 800bc6e:	4b08      	ldr	r3, [pc, #32]	; (800bc90 <_dtoa_r+0x598>)
 800bc70:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bc74:	2200      	movs	r2, #0
 800bc76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc7a:	f7f4 fcbd 	bl	80005f8 <__aeabi_dmul>
 800bc7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc82:	e7c3      	b.n	800bc0c <_dtoa_r+0x514>
 800bc84:	08016be8 	.word	0x08016be8
 800bc88:	08016bc0 	.word	0x08016bc0
 800bc8c:	3ff00000 	.word	0x3ff00000
 800bc90:	40240000 	.word	0x40240000
 800bc94:	401c0000 	.word	0x401c0000
 800bc98:	40140000 	.word	0x40140000
 800bc9c:	3fe00000 	.word	0x3fe00000
 800bca0:	4630      	mov	r0, r6
 800bca2:	4639      	mov	r1, r7
 800bca4:	f7f4 fca8 	bl	80005f8 <__aeabi_dmul>
 800bca8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bcac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bcae:	9c03      	ldr	r4, [sp, #12]
 800bcb0:	9314      	str	r3, [sp, #80]	; 0x50
 800bcb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bcb6:	f7f4 ff4f 	bl	8000b58 <__aeabi_d2iz>
 800bcba:	9015      	str	r0, [sp, #84]	; 0x54
 800bcbc:	f7f4 fc32 	bl	8000524 <__aeabi_i2d>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bcc8:	f7f4 fade 	bl	8000288 <__aeabi_dsub>
 800bccc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bcce:	3330      	adds	r3, #48	; 0x30
 800bcd0:	f804 3b01 	strb.w	r3, [r4], #1
 800bcd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bcd6:	429c      	cmp	r4, r3
 800bcd8:	4606      	mov	r6, r0
 800bcda:	460f      	mov	r7, r1
 800bcdc:	f04f 0200 	mov.w	r2, #0
 800bce0:	d124      	bne.n	800bd2c <_dtoa_r+0x634>
 800bce2:	4bb0      	ldr	r3, [pc, #704]	; (800bfa4 <_dtoa_r+0x8ac>)
 800bce4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bce8:	f7f4 fad0 	bl	800028c <__adddf3>
 800bcec:	4602      	mov	r2, r0
 800bcee:	460b      	mov	r3, r1
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	4639      	mov	r1, r7
 800bcf4:	f7f4 ff10 	bl	8000b18 <__aeabi_dcmpgt>
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	d163      	bne.n	800bdc4 <_dtoa_r+0x6cc>
 800bcfc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bd00:	49a8      	ldr	r1, [pc, #672]	; (800bfa4 <_dtoa_r+0x8ac>)
 800bd02:	2000      	movs	r0, #0
 800bd04:	f7f4 fac0 	bl	8000288 <__aeabi_dsub>
 800bd08:	4602      	mov	r2, r0
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	4630      	mov	r0, r6
 800bd0e:	4639      	mov	r1, r7
 800bd10:	f7f4 fee4 	bl	8000adc <__aeabi_dcmplt>
 800bd14:	2800      	cmp	r0, #0
 800bd16:	f43f af1e 	beq.w	800bb56 <_dtoa_r+0x45e>
 800bd1a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800bd1c:	1e7b      	subs	r3, r7, #1
 800bd1e:	9314      	str	r3, [sp, #80]	; 0x50
 800bd20:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800bd24:	2b30      	cmp	r3, #48	; 0x30
 800bd26:	d0f8      	beq.n	800bd1a <_dtoa_r+0x622>
 800bd28:	46c3      	mov	fp, r8
 800bd2a:	e03b      	b.n	800bda4 <_dtoa_r+0x6ac>
 800bd2c:	4b9e      	ldr	r3, [pc, #632]	; (800bfa8 <_dtoa_r+0x8b0>)
 800bd2e:	f7f4 fc63 	bl	80005f8 <__aeabi_dmul>
 800bd32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd36:	e7bc      	b.n	800bcb2 <_dtoa_r+0x5ba>
 800bd38:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bd3c:	9f03      	ldr	r7, [sp, #12]
 800bd3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd42:	4640      	mov	r0, r8
 800bd44:	4649      	mov	r1, r9
 800bd46:	f7f4 fd81 	bl	800084c <__aeabi_ddiv>
 800bd4a:	f7f4 ff05 	bl	8000b58 <__aeabi_d2iz>
 800bd4e:	4604      	mov	r4, r0
 800bd50:	f7f4 fbe8 	bl	8000524 <__aeabi_i2d>
 800bd54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd58:	f7f4 fc4e 	bl	80005f8 <__aeabi_dmul>
 800bd5c:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800bd60:	4602      	mov	r2, r0
 800bd62:	460b      	mov	r3, r1
 800bd64:	4640      	mov	r0, r8
 800bd66:	4649      	mov	r1, r9
 800bd68:	f7f4 fa8e 	bl	8000288 <__aeabi_dsub>
 800bd6c:	f807 6b01 	strb.w	r6, [r7], #1
 800bd70:	9e03      	ldr	r6, [sp, #12]
 800bd72:	f8dd c020 	ldr.w	ip, [sp, #32]
 800bd76:	1bbe      	subs	r6, r7, r6
 800bd78:	45b4      	cmp	ip, r6
 800bd7a:	4602      	mov	r2, r0
 800bd7c:	460b      	mov	r3, r1
 800bd7e:	d136      	bne.n	800bdee <_dtoa_r+0x6f6>
 800bd80:	f7f4 fa84 	bl	800028c <__adddf3>
 800bd84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd88:	4680      	mov	r8, r0
 800bd8a:	4689      	mov	r9, r1
 800bd8c:	f7f4 fec4 	bl	8000b18 <__aeabi_dcmpgt>
 800bd90:	bb58      	cbnz	r0, 800bdea <_dtoa_r+0x6f2>
 800bd92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd96:	4640      	mov	r0, r8
 800bd98:	4649      	mov	r1, r9
 800bd9a:	f7f4 fe95 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd9e:	b108      	cbz	r0, 800bda4 <_dtoa_r+0x6ac>
 800bda0:	07e3      	lsls	r3, r4, #31
 800bda2:	d422      	bmi.n	800bdea <_dtoa_r+0x6f2>
 800bda4:	4651      	mov	r1, sl
 800bda6:	4628      	mov	r0, r5
 800bda8:	f000 fbc4 	bl	800c534 <_Bfree>
 800bdac:	2300      	movs	r3, #0
 800bdae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bdb0:	703b      	strb	r3, [r7, #0]
 800bdb2:	f10b 0301 	add.w	r3, fp, #1
 800bdb6:	6013      	str	r3, [r2, #0]
 800bdb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	f43f ace9 	beq.w	800b792 <_dtoa_r+0x9a>
 800bdc0:	601f      	str	r7, [r3, #0]
 800bdc2:	e4e6      	b.n	800b792 <_dtoa_r+0x9a>
 800bdc4:	4627      	mov	r7, r4
 800bdc6:	463b      	mov	r3, r7
 800bdc8:	461f      	mov	r7, r3
 800bdca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdce:	2a39      	cmp	r2, #57	; 0x39
 800bdd0:	d107      	bne.n	800bde2 <_dtoa_r+0x6ea>
 800bdd2:	9a03      	ldr	r2, [sp, #12]
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d1f7      	bne.n	800bdc8 <_dtoa_r+0x6d0>
 800bdd8:	9903      	ldr	r1, [sp, #12]
 800bdda:	2230      	movs	r2, #48	; 0x30
 800bddc:	f108 0801 	add.w	r8, r8, #1
 800bde0:	700a      	strb	r2, [r1, #0]
 800bde2:	781a      	ldrb	r2, [r3, #0]
 800bde4:	3201      	adds	r2, #1
 800bde6:	701a      	strb	r2, [r3, #0]
 800bde8:	e79e      	b.n	800bd28 <_dtoa_r+0x630>
 800bdea:	46d8      	mov	r8, fp
 800bdec:	e7eb      	b.n	800bdc6 <_dtoa_r+0x6ce>
 800bdee:	4b6e      	ldr	r3, [pc, #440]	; (800bfa8 <_dtoa_r+0x8b0>)
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f7f4 fc01 	bl	80005f8 <__aeabi_dmul>
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	4680      	mov	r8, r0
 800bdfc:	4689      	mov	r9, r1
 800bdfe:	f7f4 fe63 	bl	8000ac8 <__aeabi_dcmpeq>
 800be02:	2800      	cmp	r0, #0
 800be04:	d09b      	beq.n	800bd3e <_dtoa_r+0x646>
 800be06:	e7cd      	b.n	800bda4 <_dtoa_r+0x6ac>
 800be08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be0a:	2a00      	cmp	r2, #0
 800be0c:	f000 80c4 	beq.w	800bf98 <_dtoa_r+0x8a0>
 800be10:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800be12:	2a01      	cmp	r2, #1
 800be14:	f300 80a8 	bgt.w	800bf68 <_dtoa_r+0x870>
 800be18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800be1a:	2a00      	cmp	r2, #0
 800be1c:	f000 80a0 	beq.w	800bf60 <_dtoa_r+0x868>
 800be20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800be24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800be26:	464f      	mov	r7, r9
 800be28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be2a:	2101      	movs	r1, #1
 800be2c:	441a      	add	r2, r3
 800be2e:	4628      	mov	r0, r5
 800be30:	4499      	add	r9, r3
 800be32:	9209      	str	r2, [sp, #36]	; 0x24
 800be34:	f000 fc34 	bl	800c6a0 <__i2b>
 800be38:	4606      	mov	r6, r0
 800be3a:	b15f      	cbz	r7, 800be54 <_dtoa_r+0x75c>
 800be3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be3e:	2b00      	cmp	r3, #0
 800be40:	dd08      	ble.n	800be54 <_dtoa_r+0x75c>
 800be42:	42bb      	cmp	r3, r7
 800be44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be46:	bfa8      	it	ge
 800be48:	463b      	movge	r3, r7
 800be4a:	eba9 0903 	sub.w	r9, r9, r3
 800be4e:	1aff      	subs	r7, r7, r3
 800be50:	1ad3      	subs	r3, r2, r3
 800be52:	9309      	str	r3, [sp, #36]	; 0x24
 800be54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be56:	b1f3      	cbz	r3, 800be96 <_dtoa_r+0x79e>
 800be58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	f000 80a0 	beq.w	800bfa0 <_dtoa_r+0x8a8>
 800be60:	2c00      	cmp	r4, #0
 800be62:	dd10      	ble.n	800be86 <_dtoa_r+0x78e>
 800be64:	4631      	mov	r1, r6
 800be66:	4622      	mov	r2, r4
 800be68:	4628      	mov	r0, r5
 800be6a:	f000 fcd9 	bl	800c820 <__pow5mult>
 800be6e:	4652      	mov	r2, sl
 800be70:	4601      	mov	r1, r0
 800be72:	4606      	mov	r6, r0
 800be74:	4628      	mov	r0, r5
 800be76:	f000 fc29 	bl	800c6cc <__multiply>
 800be7a:	4651      	mov	r1, sl
 800be7c:	4680      	mov	r8, r0
 800be7e:	4628      	mov	r0, r5
 800be80:	f000 fb58 	bl	800c534 <_Bfree>
 800be84:	46c2      	mov	sl, r8
 800be86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be88:	1b1a      	subs	r2, r3, r4
 800be8a:	d004      	beq.n	800be96 <_dtoa_r+0x79e>
 800be8c:	4651      	mov	r1, sl
 800be8e:	4628      	mov	r0, r5
 800be90:	f000 fcc6 	bl	800c820 <__pow5mult>
 800be94:	4682      	mov	sl, r0
 800be96:	2101      	movs	r1, #1
 800be98:	4628      	mov	r0, r5
 800be9a:	f000 fc01 	bl	800c6a0 <__i2b>
 800be9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	4604      	mov	r4, r0
 800bea4:	f340 8082 	ble.w	800bfac <_dtoa_r+0x8b4>
 800bea8:	461a      	mov	r2, r3
 800beaa:	4601      	mov	r1, r0
 800beac:	4628      	mov	r0, r5
 800beae:	f000 fcb7 	bl	800c820 <__pow5mult>
 800beb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	4604      	mov	r4, r0
 800beb8:	dd7b      	ble.n	800bfb2 <_dtoa_r+0x8ba>
 800beba:	f04f 0800 	mov.w	r8, #0
 800bebe:	6923      	ldr	r3, [r4, #16]
 800bec0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bec4:	6918      	ldr	r0, [r3, #16]
 800bec6:	f000 fb9d 	bl	800c604 <__hi0bits>
 800beca:	f1c0 0020 	rsb	r0, r0, #32
 800bece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bed0:	4418      	add	r0, r3
 800bed2:	f010 001f 	ands.w	r0, r0, #31
 800bed6:	f000 8092 	beq.w	800bffe <_dtoa_r+0x906>
 800beda:	f1c0 0320 	rsb	r3, r0, #32
 800bede:	2b04      	cmp	r3, #4
 800bee0:	f340 8085 	ble.w	800bfee <_dtoa_r+0x8f6>
 800bee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bee6:	f1c0 001c 	rsb	r0, r0, #28
 800beea:	4403      	add	r3, r0
 800beec:	4481      	add	r9, r0
 800beee:	4407      	add	r7, r0
 800bef0:	9309      	str	r3, [sp, #36]	; 0x24
 800bef2:	f1b9 0f00 	cmp.w	r9, #0
 800bef6:	dd05      	ble.n	800bf04 <_dtoa_r+0x80c>
 800bef8:	4651      	mov	r1, sl
 800befa:	464a      	mov	r2, r9
 800befc:	4628      	mov	r0, r5
 800befe:	f000 fce9 	bl	800c8d4 <__lshift>
 800bf02:	4682      	mov	sl, r0
 800bf04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	dd05      	ble.n	800bf16 <_dtoa_r+0x81e>
 800bf0a:	4621      	mov	r1, r4
 800bf0c:	461a      	mov	r2, r3
 800bf0e:	4628      	mov	r0, r5
 800bf10:	f000 fce0 	bl	800c8d4 <__lshift>
 800bf14:	4604      	mov	r4, r0
 800bf16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d072      	beq.n	800c002 <_dtoa_r+0x90a>
 800bf1c:	4621      	mov	r1, r4
 800bf1e:	4650      	mov	r0, sl
 800bf20:	f000 fd44 	bl	800c9ac <__mcmp>
 800bf24:	2800      	cmp	r0, #0
 800bf26:	da6c      	bge.n	800c002 <_dtoa_r+0x90a>
 800bf28:	2300      	movs	r3, #0
 800bf2a:	4651      	mov	r1, sl
 800bf2c:	220a      	movs	r2, #10
 800bf2e:	4628      	mov	r0, r5
 800bf30:	f000 fb22 	bl	800c578 <__multadd>
 800bf34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf36:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bf3a:	4682      	mov	sl, r0
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	f000 81ad 	beq.w	800c29c <_dtoa_r+0xba4>
 800bf42:	2300      	movs	r3, #0
 800bf44:	4631      	mov	r1, r6
 800bf46:	220a      	movs	r2, #10
 800bf48:	4628      	mov	r0, r5
 800bf4a:	f000 fb15 	bl	800c578 <__multadd>
 800bf4e:	9b06      	ldr	r3, [sp, #24]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	4606      	mov	r6, r0
 800bf54:	f300 8093 	bgt.w	800c07e <_dtoa_r+0x986>
 800bf58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bf5a:	2b02      	cmp	r3, #2
 800bf5c:	dc59      	bgt.n	800c012 <_dtoa_r+0x91a>
 800bf5e:	e08e      	b.n	800c07e <_dtoa_r+0x986>
 800bf60:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bf62:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bf66:	e75d      	b.n	800be24 <_dtoa_r+0x72c>
 800bf68:	9b08      	ldr	r3, [sp, #32]
 800bf6a:	1e5c      	subs	r4, r3, #1
 800bf6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf6e:	42a3      	cmp	r3, r4
 800bf70:	bfbf      	itttt	lt
 800bf72:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bf74:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800bf76:	940a      	strlt	r4, [sp, #40]	; 0x28
 800bf78:	1ae3      	sublt	r3, r4, r3
 800bf7a:	bfb4      	ite	lt
 800bf7c:	18d2      	addlt	r2, r2, r3
 800bf7e:	1b1c      	subge	r4, r3, r4
 800bf80:	9b08      	ldr	r3, [sp, #32]
 800bf82:	bfbc      	itt	lt
 800bf84:	920e      	strlt	r2, [sp, #56]	; 0x38
 800bf86:	2400      	movlt	r4, #0
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	bfb5      	itete	lt
 800bf8c:	eba9 0703 	sublt.w	r7, r9, r3
 800bf90:	9b08      	ldrge	r3, [sp, #32]
 800bf92:	2300      	movlt	r3, #0
 800bf94:	464f      	movge	r7, r9
 800bf96:	e747      	b.n	800be28 <_dtoa_r+0x730>
 800bf98:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bf9a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800bf9c:	464f      	mov	r7, r9
 800bf9e:	e74c      	b.n	800be3a <_dtoa_r+0x742>
 800bfa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bfa2:	e773      	b.n	800be8c <_dtoa_r+0x794>
 800bfa4:	3fe00000 	.word	0x3fe00000
 800bfa8:	40240000 	.word	0x40240000
 800bfac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	dc18      	bgt.n	800bfe4 <_dtoa_r+0x8ec>
 800bfb2:	9b04      	ldr	r3, [sp, #16]
 800bfb4:	b9b3      	cbnz	r3, 800bfe4 <_dtoa_r+0x8ec>
 800bfb6:	9b05      	ldr	r3, [sp, #20]
 800bfb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bfbc:	b993      	cbnz	r3, 800bfe4 <_dtoa_r+0x8ec>
 800bfbe:	9b05      	ldr	r3, [sp, #20]
 800bfc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bfc4:	0d1b      	lsrs	r3, r3, #20
 800bfc6:	051b      	lsls	r3, r3, #20
 800bfc8:	b17b      	cbz	r3, 800bfea <_dtoa_r+0x8f2>
 800bfca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfcc:	3301      	adds	r3, #1
 800bfce:	f109 0901 	add.w	r9, r9, #1
 800bfd2:	9309      	str	r3, [sp, #36]	; 0x24
 800bfd4:	f04f 0801 	mov.w	r8, #1
 800bfd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	f47f af6f 	bne.w	800bebe <_dtoa_r+0x7c6>
 800bfe0:	2001      	movs	r0, #1
 800bfe2:	e774      	b.n	800bece <_dtoa_r+0x7d6>
 800bfe4:	f04f 0800 	mov.w	r8, #0
 800bfe8:	e7f6      	b.n	800bfd8 <_dtoa_r+0x8e0>
 800bfea:	4698      	mov	r8, r3
 800bfec:	e7f4      	b.n	800bfd8 <_dtoa_r+0x8e0>
 800bfee:	d080      	beq.n	800bef2 <_dtoa_r+0x7fa>
 800bff0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bff2:	331c      	adds	r3, #28
 800bff4:	441a      	add	r2, r3
 800bff6:	4499      	add	r9, r3
 800bff8:	441f      	add	r7, r3
 800bffa:	9209      	str	r2, [sp, #36]	; 0x24
 800bffc:	e779      	b.n	800bef2 <_dtoa_r+0x7fa>
 800bffe:	4603      	mov	r3, r0
 800c000:	e7f6      	b.n	800bff0 <_dtoa_r+0x8f8>
 800c002:	9b08      	ldr	r3, [sp, #32]
 800c004:	2b00      	cmp	r3, #0
 800c006:	dc34      	bgt.n	800c072 <_dtoa_r+0x97a>
 800c008:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c00a:	2b02      	cmp	r3, #2
 800c00c:	dd31      	ble.n	800c072 <_dtoa_r+0x97a>
 800c00e:	9b08      	ldr	r3, [sp, #32]
 800c010:	9306      	str	r3, [sp, #24]
 800c012:	9b06      	ldr	r3, [sp, #24]
 800c014:	b963      	cbnz	r3, 800c030 <_dtoa_r+0x938>
 800c016:	4621      	mov	r1, r4
 800c018:	2205      	movs	r2, #5
 800c01a:	4628      	mov	r0, r5
 800c01c:	f000 faac 	bl	800c578 <__multadd>
 800c020:	4601      	mov	r1, r0
 800c022:	4604      	mov	r4, r0
 800c024:	4650      	mov	r0, sl
 800c026:	f000 fcc1 	bl	800c9ac <__mcmp>
 800c02a:	2800      	cmp	r0, #0
 800c02c:	f73f adbf 	bgt.w	800bbae <_dtoa_r+0x4b6>
 800c030:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c032:	9f03      	ldr	r7, [sp, #12]
 800c034:	ea6f 0b03 	mvn.w	fp, r3
 800c038:	f04f 0800 	mov.w	r8, #0
 800c03c:	4621      	mov	r1, r4
 800c03e:	4628      	mov	r0, r5
 800c040:	f000 fa78 	bl	800c534 <_Bfree>
 800c044:	2e00      	cmp	r6, #0
 800c046:	f43f aead 	beq.w	800bda4 <_dtoa_r+0x6ac>
 800c04a:	f1b8 0f00 	cmp.w	r8, #0
 800c04e:	d005      	beq.n	800c05c <_dtoa_r+0x964>
 800c050:	45b0      	cmp	r8, r6
 800c052:	d003      	beq.n	800c05c <_dtoa_r+0x964>
 800c054:	4641      	mov	r1, r8
 800c056:	4628      	mov	r0, r5
 800c058:	f000 fa6c 	bl	800c534 <_Bfree>
 800c05c:	4631      	mov	r1, r6
 800c05e:	4628      	mov	r0, r5
 800c060:	f000 fa68 	bl	800c534 <_Bfree>
 800c064:	e69e      	b.n	800bda4 <_dtoa_r+0x6ac>
 800c066:	2400      	movs	r4, #0
 800c068:	4626      	mov	r6, r4
 800c06a:	e7e1      	b.n	800c030 <_dtoa_r+0x938>
 800c06c:	46c3      	mov	fp, r8
 800c06e:	4626      	mov	r6, r4
 800c070:	e59d      	b.n	800bbae <_dtoa_r+0x4b6>
 800c072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c074:	2b00      	cmp	r3, #0
 800c076:	f000 80c8 	beq.w	800c20a <_dtoa_r+0xb12>
 800c07a:	9b08      	ldr	r3, [sp, #32]
 800c07c:	9306      	str	r3, [sp, #24]
 800c07e:	2f00      	cmp	r7, #0
 800c080:	dd05      	ble.n	800c08e <_dtoa_r+0x996>
 800c082:	4631      	mov	r1, r6
 800c084:	463a      	mov	r2, r7
 800c086:	4628      	mov	r0, r5
 800c088:	f000 fc24 	bl	800c8d4 <__lshift>
 800c08c:	4606      	mov	r6, r0
 800c08e:	f1b8 0f00 	cmp.w	r8, #0
 800c092:	d05b      	beq.n	800c14c <_dtoa_r+0xa54>
 800c094:	6871      	ldr	r1, [r6, #4]
 800c096:	4628      	mov	r0, r5
 800c098:	f000 fa0c 	bl	800c4b4 <_Balloc>
 800c09c:	4607      	mov	r7, r0
 800c09e:	b928      	cbnz	r0, 800c0ac <_dtoa_r+0x9b4>
 800c0a0:	4b82      	ldr	r3, [pc, #520]	; (800c2ac <_dtoa_r+0xbb4>)
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c0a8:	f7ff bb3a 	b.w	800b720 <_dtoa_r+0x28>
 800c0ac:	6932      	ldr	r2, [r6, #16]
 800c0ae:	3202      	adds	r2, #2
 800c0b0:	0092      	lsls	r2, r2, #2
 800c0b2:	f106 010c 	add.w	r1, r6, #12
 800c0b6:	300c      	adds	r0, #12
 800c0b8:	f001 f964 	bl	800d384 <memcpy>
 800c0bc:	2201      	movs	r2, #1
 800c0be:	4639      	mov	r1, r7
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	f000 fc07 	bl	800c8d4 <__lshift>
 800c0c6:	9b03      	ldr	r3, [sp, #12]
 800c0c8:	9a03      	ldr	r2, [sp, #12]
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	9308      	str	r3, [sp, #32]
 800c0ce:	9b06      	ldr	r3, [sp, #24]
 800c0d0:	4413      	add	r3, r2
 800c0d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c0d4:	9b04      	ldr	r3, [sp, #16]
 800c0d6:	f003 0301 	and.w	r3, r3, #1
 800c0da:	46b0      	mov	r8, r6
 800c0dc:	930a      	str	r3, [sp, #40]	; 0x28
 800c0de:	4606      	mov	r6, r0
 800c0e0:	9b08      	ldr	r3, [sp, #32]
 800c0e2:	4621      	mov	r1, r4
 800c0e4:	3b01      	subs	r3, #1
 800c0e6:	4650      	mov	r0, sl
 800c0e8:	9304      	str	r3, [sp, #16]
 800c0ea:	f7ff fa80 	bl	800b5ee <quorem>
 800c0ee:	4641      	mov	r1, r8
 800c0f0:	9006      	str	r0, [sp, #24]
 800c0f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c0f6:	4650      	mov	r0, sl
 800c0f8:	f000 fc58 	bl	800c9ac <__mcmp>
 800c0fc:	4632      	mov	r2, r6
 800c0fe:	9009      	str	r0, [sp, #36]	; 0x24
 800c100:	4621      	mov	r1, r4
 800c102:	4628      	mov	r0, r5
 800c104:	f000 fc6e 	bl	800c9e4 <__mdiff>
 800c108:	68c2      	ldr	r2, [r0, #12]
 800c10a:	4607      	mov	r7, r0
 800c10c:	bb02      	cbnz	r2, 800c150 <_dtoa_r+0xa58>
 800c10e:	4601      	mov	r1, r0
 800c110:	4650      	mov	r0, sl
 800c112:	f000 fc4b 	bl	800c9ac <__mcmp>
 800c116:	4602      	mov	r2, r0
 800c118:	4639      	mov	r1, r7
 800c11a:	4628      	mov	r0, r5
 800c11c:	920c      	str	r2, [sp, #48]	; 0x30
 800c11e:	f000 fa09 	bl	800c534 <_Bfree>
 800c122:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c124:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c126:	9f08      	ldr	r7, [sp, #32]
 800c128:	ea43 0102 	orr.w	r1, r3, r2
 800c12c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c12e:	4319      	orrs	r1, r3
 800c130:	d110      	bne.n	800c154 <_dtoa_r+0xa5c>
 800c132:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c136:	d029      	beq.n	800c18c <_dtoa_r+0xa94>
 800c138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	dd02      	ble.n	800c144 <_dtoa_r+0xa4c>
 800c13e:	9b06      	ldr	r3, [sp, #24]
 800c140:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c144:	9b04      	ldr	r3, [sp, #16]
 800c146:	f883 9000 	strb.w	r9, [r3]
 800c14a:	e777      	b.n	800c03c <_dtoa_r+0x944>
 800c14c:	4630      	mov	r0, r6
 800c14e:	e7ba      	b.n	800c0c6 <_dtoa_r+0x9ce>
 800c150:	2201      	movs	r2, #1
 800c152:	e7e1      	b.n	800c118 <_dtoa_r+0xa20>
 800c154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c156:	2b00      	cmp	r3, #0
 800c158:	db04      	blt.n	800c164 <_dtoa_r+0xa6c>
 800c15a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c15c:	430b      	orrs	r3, r1
 800c15e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c160:	430b      	orrs	r3, r1
 800c162:	d120      	bne.n	800c1a6 <_dtoa_r+0xaae>
 800c164:	2a00      	cmp	r2, #0
 800c166:	dded      	ble.n	800c144 <_dtoa_r+0xa4c>
 800c168:	4651      	mov	r1, sl
 800c16a:	2201      	movs	r2, #1
 800c16c:	4628      	mov	r0, r5
 800c16e:	f000 fbb1 	bl	800c8d4 <__lshift>
 800c172:	4621      	mov	r1, r4
 800c174:	4682      	mov	sl, r0
 800c176:	f000 fc19 	bl	800c9ac <__mcmp>
 800c17a:	2800      	cmp	r0, #0
 800c17c:	dc03      	bgt.n	800c186 <_dtoa_r+0xa8e>
 800c17e:	d1e1      	bne.n	800c144 <_dtoa_r+0xa4c>
 800c180:	f019 0f01 	tst.w	r9, #1
 800c184:	d0de      	beq.n	800c144 <_dtoa_r+0xa4c>
 800c186:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c18a:	d1d8      	bne.n	800c13e <_dtoa_r+0xa46>
 800c18c:	9a04      	ldr	r2, [sp, #16]
 800c18e:	2339      	movs	r3, #57	; 0x39
 800c190:	7013      	strb	r3, [r2, #0]
 800c192:	463b      	mov	r3, r7
 800c194:	461f      	mov	r7, r3
 800c196:	3b01      	subs	r3, #1
 800c198:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c19c:	2a39      	cmp	r2, #57	; 0x39
 800c19e:	d06c      	beq.n	800c27a <_dtoa_r+0xb82>
 800c1a0:	3201      	adds	r2, #1
 800c1a2:	701a      	strb	r2, [r3, #0]
 800c1a4:	e74a      	b.n	800c03c <_dtoa_r+0x944>
 800c1a6:	2a00      	cmp	r2, #0
 800c1a8:	dd07      	ble.n	800c1ba <_dtoa_r+0xac2>
 800c1aa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c1ae:	d0ed      	beq.n	800c18c <_dtoa_r+0xa94>
 800c1b0:	9a04      	ldr	r2, [sp, #16]
 800c1b2:	f109 0301 	add.w	r3, r9, #1
 800c1b6:	7013      	strb	r3, [r2, #0]
 800c1b8:	e740      	b.n	800c03c <_dtoa_r+0x944>
 800c1ba:	9b08      	ldr	r3, [sp, #32]
 800c1bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c1be:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d043      	beq.n	800c24e <_dtoa_r+0xb56>
 800c1c6:	4651      	mov	r1, sl
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	220a      	movs	r2, #10
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	f000 f9d3 	bl	800c578 <__multadd>
 800c1d2:	45b0      	cmp	r8, r6
 800c1d4:	4682      	mov	sl, r0
 800c1d6:	f04f 0300 	mov.w	r3, #0
 800c1da:	f04f 020a 	mov.w	r2, #10
 800c1de:	4641      	mov	r1, r8
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	d107      	bne.n	800c1f4 <_dtoa_r+0xafc>
 800c1e4:	f000 f9c8 	bl	800c578 <__multadd>
 800c1e8:	4680      	mov	r8, r0
 800c1ea:	4606      	mov	r6, r0
 800c1ec:	9b08      	ldr	r3, [sp, #32]
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	9308      	str	r3, [sp, #32]
 800c1f2:	e775      	b.n	800c0e0 <_dtoa_r+0x9e8>
 800c1f4:	f000 f9c0 	bl	800c578 <__multadd>
 800c1f8:	4631      	mov	r1, r6
 800c1fa:	4680      	mov	r8, r0
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	220a      	movs	r2, #10
 800c200:	4628      	mov	r0, r5
 800c202:	f000 f9b9 	bl	800c578 <__multadd>
 800c206:	4606      	mov	r6, r0
 800c208:	e7f0      	b.n	800c1ec <_dtoa_r+0xaf4>
 800c20a:	9b08      	ldr	r3, [sp, #32]
 800c20c:	9306      	str	r3, [sp, #24]
 800c20e:	9f03      	ldr	r7, [sp, #12]
 800c210:	4621      	mov	r1, r4
 800c212:	4650      	mov	r0, sl
 800c214:	f7ff f9eb 	bl	800b5ee <quorem>
 800c218:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c21c:	9b03      	ldr	r3, [sp, #12]
 800c21e:	f807 9b01 	strb.w	r9, [r7], #1
 800c222:	1afa      	subs	r2, r7, r3
 800c224:	9b06      	ldr	r3, [sp, #24]
 800c226:	4293      	cmp	r3, r2
 800c228:	dd07      	ble.n	800c23a <_dtoa_r+0xb42>
 800c22a:	4651      	mov	r1, sl
 800c22c:	2300      	movs	r3, #0
 800c22e:	220a      	movs	r2, #10
 800c230:	4628      	mov	r0, r5
 800c232:	f000 f9a1 	bl	800c578 <__multadd>
 800c236:	4682      	mov	sl, r0
 800c238:	e7ea      	b.n	800c210 <_dtoa_r+0xb18>
 800c23a:	9b06      	ldr	r3, [sp, #24]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	bfc8      	it	gt
 800c240:	461f      	movgt	r7, r3
 800c242:	9b03      	ldr	r3, [sp, #12]
 800c244:	bfd8      	it	le
 800c246:	2701      	movle	r7, #1
 800c248:	441f      	add	r7, r3
 800c24a:	f04f 0800 	mov.w	r8, #0
 800c24e:	4651      	mov	r1, sl
 800c250:	2201      	movs	r2, #1
 800c252:	4628      	mov	r0, r5
 800c254:	f000 fb3e 	bl	800c8d4 <__lshift>
 800c258:	4621      	mov	r1, r4
 800c25a:	4682      	mov	sl, r0
 800c25c:	f000 fba6 	bl	800c9ac <__mcmp>
 800c260:	2800      	cmp	r0, #0
 800c262:	dc96      	bgt.n	800c192 <_dtoa_r+0xa9a>
 800c264:	d102      	bne.n	800c26c <_dtoa_r+0xb74>
 800c266:	f019 0f01 	tst.w	r9, #1
 800c26a:	d192      	bne.n	800c192 <_dtoa_r+0xa9a>
 800c26c:	463b      	mov	r3, r7
 800c26e:	461f      	mov	r7, r3
 800c270:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c274:	2a30      	cmp	r2, #48	; 0x30
 800c276:	d0fa      	beq.n	800c26e <_dtoa_r+0xb76>
 800c278:	e6e0      	b.n	800c03c <_dtoa_r+0x944>
 800c27a:	9a03      	ldr	r2, [sp, #12]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d189      	bne.n	800c194 <_dtoa_r+0xa9c>
 800c280:	f10b 0b01 	add.w	fp, fp, #1
 800c284:	2331      	movs	r3, #49	; 0x31
 800c286:	e796      	b.n	800c1b6 <_dtoa_r+0xabe>
 800c288:	4b09      	ldr	r3, [pc, #36]	; (800c2b0 <_dtoa_r+0xbb8>)
 800c28a:	f7ff baa1 	b.w	800b7d0 <_dtoa_r+0xd8>
 800c28e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c290:	2b00      	cmp	r3, #0
 800c292:	f47f aa79 	bne.w	800b788 <_dtoa_r+0x90>
 800c296:	4b07      	ldr	r3, [pc, #28]	; (800c2b4 <_dtoa_r+0xbbc>)
 800c298:	f7ff ba9a 	b.w	800b7d0 <_dtoa_r+0xd8>
 800c29c:	9b06      	ldr	r3, [sp, #24]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	dcb5      	bgt.n	800c20e <_dtoa_r+0xb16>
 800c2a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c2a4:	2b02      	cmp	r3, #2
 800c2a6:	f73f aeb4 	bgt.w	800c012 <_dtoa_r+0x91a>
 800c2aa:	e7b0      	b.n	800c20e <_dtoa_r+0xb16>
 800c2ac:	08016b50 	.word	0x08016b50
 800c2b0:	08016ab0 	.word	0x08016ab0
 800c2b4:	08016ad4 	.word	0x08016ad4

0800c2b8 <_free_r>:
 800c2b8:	b538      	push	{r3, r4, r5, lr}
 800c2ba:	4605      	mov	r5, r0
 800c2bc:	2900      	cmp	r1, #0
 800c2be:	d041      	beq.n	800c344 <_free_r+0x8c>
 800c2c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2c4:	1f0c      	subs	r4, r1, #4
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	bfb8      	it	lt
 800c2ca:	18e4      	addlt	r4, r4, r3
 800c2cc:	f000 f8e6 	bl	800c49c <__malloc_lock>
 800c2d0:	4a1d      	ldr	r2, [pc, #116]	; (800c348 <_free_r+0x90>)
 800c2d2:	6813      	ldr	r3, [r2, #0]
 800c2d4:	b933      	cbnz	r3, 800c2e4 <_free_r+0x2c>
 800c2d6:	6063      	str	r3, [r4, #4]
 800c2d8:	6014      	str	r4, [r2, #0]
 800c2da:	4628      	mov	r0, r5
 800c2dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2e0:	f000 b8e2 	b.w	800c4a8 <__malloc_unlock>
 800c2e4:	42a3      	cmp	r3, r4
 800c2e6:	d908      	bls.n	800c2fa <_free_r+0x42>
 800c2e8:	6820      	ldr	r0, [r4, #0]
 800c2ea:	1821      	adds	r1, r4, r0
 800c2ec:	428b      	cmp	r3, r1
 800c2ee:	bf01      	itttt	eq
 800c2f0:	6819      	ldreq	r1, [r3, #0]
 800c2f2:	685b      	ldreq	r3, [r3, #4]
 800c2f4:	1809      	addeq	r1, r1, r0
 800c2f6:	6021      	streq	r1, [r4, #0]
 800c2f8:	e7ed      	b.n	800c2d6 <_free_r+0x1e>
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	b10b      	cbz	r3, 800c304 <_free_r+0x4c>
 800c300:	42a3      	cmp	r3, r4
 800c302:	d9fa      	bls.n	800c2fa <_free_r+0x42>
 800c304:	6811      	ldr	r1, [r2, #0]
 800c306:	1850      	adds	r0, r2, r1
 800c308:	42a0      	cmp	r0, r4
 800c30a:	d10b      	bne.n	800c324 <_free_r+0x6c>
 800c30c:	6820      	ldr	r0, [r4, #0]
 800c30e:	4401      	add	r1, r0
 800c310:	1850      	adds	r0, r2, r1
 800c312:	4283      	cmp	r3, r0
 800c314:	6011      	str	r1, [r2, #0]
 800c316:	d1e0      	bne.n	800c2da <_free_r+0x22>
 800c318:	6818      	ldr	r0, [r3, #0]
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	6053      	str	r3, [r2, #4]
 800c31e:	4408      	add	r0, r1
 800c320:	6010      	str	r0, [r2, #0]
 800c322:	e7da      	b.n	800c2da <_free_r+0x22>
 800c324:	d902      	bls.n	800c32c <_free_r+0x74>
 800c326:	230c      	movs	r3, #12
 800c328:	602b      	str	r3, [r5, #0]
 800c32a:	e7d6      	b.n	800c2da <_free_r+0x22>
 800c32c:	6820      	ldr	r0, [r4, #0]
 800c32e:	1821      	adds	r1, r4, r0
 800c330:	428b      	cmp	r3, r1
 800c332:	bf04      	itt	eq
 800c334:	6819      	ldreq	r1, [r3, #0]
 800c336:	685b      	ldreq	r3, [r3, #4]
 800c338:	6063      	str	r3, [r4, #4]
 800c33a:	bf04      	itt	eq
 800c33c:	1809      	addeq	r1, r1, r0
 800c33e:	6021      	streq	r1, [r4, #0]
 800c340:	6054      	str	r4, [r2, #4]
 800c342:	e7ca      	b.n	800c2da <_free_r+0x22>
 800c344:	bd38      	pop	{r3, r4, r5, pc}
 800c346:	bf00      	nop
 800c348:	20000880 	.word	0x20000880

0800c34c <malloc>:
 800c34c:	4b02      	ldr	r3, [pc, #8]	; (800c358 <malloc+0xc>)
 800c34e:	4601      	mov	r1, r0
 800c350:	6818      	ldr	r0, [r3, #0]
 800c352:	f000 b823 	b.w	800c39c <_malloc_r>
 800c356:	bf00      	nop
 800c358:	200000ac 	.word	0x200000ac

0800c35c <sbrk_aligned>:
 800c35c:	b570      	push	{r4, r5, r6, lr}
 800c35e:	4e0e      	ldr	r6, [pc, #56]	; (800c398 <sbrk_aligned+0x3c>)
 800c360:	460c      	mov	r4, r1
 800c362:	6831      	ldr	r1, [r6, #0]
 800c364:	4605      	mov	r5, r0
 800c366:	b911      	cbnz	r1, 800c36e <sbrk_aligned+0x12>
 800c368:	f000 fffc 	bl	800d364 <_sbrk_r>
 800c36c:	6030      	str	r0, [r6, #0]
 800c36e:	4621      	mov	r1, r4
 800c370:	4628      	mov	r0, r5
 800c372:	f000 fff7 	bl	800d364 <_sbrk_r>
 800c376:	1c43      	adds	r3, r0, #1
 800c378:	d00a      	beq.n	800c390 <sbrk_aligned+0x34>
 800c37a:	1cc4      	adds	r4, r0, #3
 800c37c:	f024 0403 	bic.w	r4, r4, #3
 800c380:	42a0      	cmp	r0, r4
 800c382:	d007      	beq.n	800c394 <sbrk_aligned+0x38>
 800c384:	1a21      	subs	r1, r4, r0
 800c386:	4628      	mov	r0, r5
 800c388:	f000 ffec 	bl	800d364 <_sbrk_r>
 800c38c:	3001      	adds	r0, #1
 800c38e:	d101      	bne.n	800c394 <sbrk_aligned+0x38>
 800c390:	f04f 34ff 	mov.w	r4, #4294967295
 800c394:	4620      	mov	r0, r4
 800c396:	bd70      	pop	{r4, r5, r6, pc}
 800c398:	20000884 	.word	0x20000884

0800c39c <_malloc_r>:
 800c39c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3a0:	1ccd      	adds	r5, r1, #3
 800c3a2:	f025 0503 	bic.w	r5, r5, #3
 800c3a6:	3508      	adds	r5, #8
 800c3a8:	2d0c      	cmp	r5, #12
 800c3aa:	bf38      	it	cc
 800c3ac:	250c      	movcc	r5, #12
 800c3ae:	2d00      	cmp	r5, #0
 800c3b0:	4607      	mov	r7, r0
 800c3b2:	db01      	blt.n	800c3b8 <_malloc_r+0x1c>
 800c3b4:	42a9      	cmp	r1, r5
 800c3b6:	d905      	bls.n	800c3c4 <_malloc_r+0x28>
 800c3b8:	230c      	movs	r3, #12
 800c3ba:	603b      	str	r3, [r7, #0]
 800c3bc:	2600      	movs	r6, #0
 800c3be:	4630      	mov	r0, r6
 800c3c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c498 <_malloc_r+0xfc>
 800c3c8:	f000 f868 	bl	800c49c <__malloc_lock>
 800c3cc:	f8d8 3000 	ldr.w	r3, [r8]
 800c3d0:	461c      	mov	r4, r3
 800c3d2:	bb5c      	cbnz	r4, 800c42c <_malloc_r+0x90>
 800c3d4:	4629      	mov	r1, r5
 800c3d6:	4638      	mov	r0, r7
 800c3d8:	f7ff ffc0 	bl	800c35c <sbrk_aligned>
 800c3dc:	1c43      	adds	r3, r0, #1
 800c3de:	4604      	mov	r4, r0
 800c3e0:	d155      	bne.n	800c48e <_malloc_r+0xf2>
 800c3e2:	f8d8 4000 	ldr.w	r4, [r8]
 800c3e6:	4626      	mov	r6, r4
 800c3e8:	2e00      	cmp	r6, #0
 800c3ea:	d145      	bne.n	800c478 <_malloc_r+0xdc>
 800c3ec:	2c00      	cmp	r4, #0
 800c3ee:	d048      	beq.n	800c482 <_malloc_r+0xe6>
 800c3f0:	6823      	ldr	r3, [r4, #0]
 800c3f2:	4631      	mov	r1, r6
 800c3f4:	4638      	mov	r0, r7
 800c3f6:	eb04 0903 	add.w	r9, r4, r3
 800c3fa:	f000 ffb3 	bl	800d364 <_sbrk_r>
 800c3fe:	4581      	cmp	r9, r0
 800c400:	d13f      	bne.n	800c482 <_malloc_r+0xe6>
 800c402:	6821      	ldr	r1, [r4, #0]
 800c404:	1a6d      	subs	r5, r5, r1
 800c406:	4629      	mov	r1, r5
 800c408:	4638      	mov	r0, r7
 800c40a:	f7ff ffa7 	bl	800c35c <sbrk_aligned>
 800c40e:	3001      	adds	r0, #1
 800c410:	d037      	beq.n	800c482 <_malloc_r+0xe6>
 800c412:	6823      	ldr	r3, [r4, #0]
 800c414:	442b      	add	r3, r5
 800c416:	6023      	str	r3, [r4, #0]
 800c418:	f8d8 3000 	ldr.w	r3, [r8]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d038      	beq.n	800c492 <_malloc_r+0xf6>
 800c420:	685a      	ldr	r2, [r3, #4]
 800c422:	42a2      	cmp	r2, r4
 800c424:	d12b      	bne.n	800c47e <_malloc_r+0xe2>
 800c426:	2200      	movs	r2, #0
 800c428:	605a      	str	r2, [r3, #4]
 800c42a:	e00f      	b.n	800c44c <_malloc_r+0xb0>
 800c42c:	6822      	ldr	r2, [r4, #0]
 800c42e:	1b52      	subs	r2, r2, r5
 800c430:	d41f      	bmi.n	800c472 <_malloc_r+0xd6>
 800c432:	2a0b      	cmp	r2, #11
 800c434:	d917      	bls.n	800c466 <_malloc_r+0xca>
 800c436:	1961      	adds	r1, r4, r5
 800c438:	42a3      	cmp	r3, r4
 800c43a:	6025      	str	r5, [r4, #0]
 800c43c:	bf18      	it	ne
 800c43e:	6059      	strne	r1, [r3, #4]
 800c440:	6863      	ldr	r3, [r4, #4]
 800c442:	bf08      	it	eq
 800c444:	f8c8 1000 	streq.w	r1, [r8]
 800c448:	5162      	str	r2, [r4, r5]
 800c44a:	604b      	str	r3, [r1, #4]
 800c44c:	4638      	mov	r0, r7
 800c44e:	f104 060b 	add.w	r6, r4, #11
 800c452:	f000 f829 	bl	800c4a8 <__malloc_unlock>
 800c456:	f026 0607 	bic.w	r6, r6, #7
 800c45a:	1d23      	adds	r3, r4, #4
 800c45c:	1af2      	subs	r2, r6, r3
 800c45e:	d0ae      	beq.n	800c3be <_malloc_r+0x22>
 800c460:	1b9b      	subs	r3, r3, r6
 800c462:	50a3      	str	r3, [r4, r2]
 800c464:	e7ab      	b.n	800c3be <_malloc_r+0x22>
 800c466:	42a3      	cmp	r3, r4
 800c468:	6862      	ldr	r2, [r4, #4]
 800c46a:	d1dd      	bne.n	800c428 <_malloc_r+0x8c>
 800c46c:	f8c8 2000 	str.w	r2, [r8]
 800c470:	e7ec      	b.n	800c44c <_malloc_r+0xb0>
 800c472:	4623      	mov	r3, r4
 800c474:	6864      	ldr	r4, [r4, #4]
 800c476:	e7ac      	b.n	800c3d2 <_malloc_r+0x36>
 800c478:	4634      	mov	r4, r6
 800c47a:	6876      	ldr	r6, [r6, #4]
 800c47c:	e7b4      	b.n	800c3e8 <_malloc_r+0x4c>
 800c47e:	4613      	mov	r3, r2
 800c480:	e7cc      	b.n	800c41c <_malloc_r+0x80>
 800c482:	230c      	movs	r3, #12
 800c484:	603b      	str	r3, [r7, #0]
 800c486:	4638      	mov	r0, r7
 800c488:	f000 f80e 	bl	800c4a8 <__malloc_unlock>
 800c48c:	e797      	b.n	800c3be <_malloc_r+0x22>
 800c48e:	6025      	str	r5, [r4, #0]
 800c490:	e7dc      	b.n	800c44c <_malloc_r+0xb0>
 800c492:	605b      	str	r3, [r3, #4]
 800c494:	deff      	udf	#255	; 0xff
 800c496:	bf00      	nop
 800c498:	20000880 	.word	0x20000880

0800c49c <__malloc_lock>:
 800c49c:	4801      	ldr	r0, [pc, #4]	; (800c4a4 <__malloc_lock+0x8>)
 800c49e:	f7ff b8a4 	b.w	800b5ea <__retarget_lock_acquire_recursive>
 800c4a2:	bf00      	nop
 800c4a4:	2000087c 	.word	0x2000087c

0800c4a8 <__malloc_unlock>:
 800c4a8:	4801      	ldr	r0, [pc, #4]	; (800c4b0 <__malloc_unlock+0x8>)
 800c4aa:	f7ff b89f 	b.w	800b5ec <__retarget_lock_release_recursive>
 800c4ae:	bf00      	nop
 800c4b0:	2000087c 	.word	0x2000087c

0800c4b4 <_Balloc>:
 800c4b4:	b570      	push	{r4, r5, r6, lr}
 800c4b6:	69c6      	ldr	r6, [r0, #28]
 800c4b8:	4604      	mov	r4, r0
 800c4ba:	460d      	mov	r5, r1
 800c4bc:	b976      	cbnz	r6, 800c4dc <_Balloc+0x28>
 800c4be:	2010      	movs	r0, #16
 800c4c0:	f7ff ff44 	bl	800c34c <malloc>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	61e0      	str	r0, [r4, #28]
 800c4c8:	b920      	cbnz	r0, 800c4d4 <_Balloc+0x20>
 800c4ca:	4b18      	ldr	r3, [pc, #96]	; (800c52c <_Balloc+0x78>)
 800c4cc:	4818      	ldr	r0, [pc, #96]	; (800c530 <_Balloc+0x7c>)
 800c4ce:	216b      	movs	r1, #107	; 0x6b
 800c4d0:	f000 ff66 	bl	800d3a0 <__assert_func>
 800c4d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4d8:	6006      	str	r6, [r0, #0]
 800c4da:	60c6      	str	r6, [r0, #12]
 800c4dc:	69e6      	ldr	r6, [r4, #28]
 800c4de:	68f3      	ldr	r3, [r6, #12]
 800c4e0:	b183      	cbz	r3, 800c504 <_Balloc+0x50>
 800c4e2:	69e3      	ldr	r3, [r4, #28]
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c4ea:	b9b8      	cbnz	r0, 800c51c <_Balloc+0x68>
 800c4ec:	2101      	movs	r1, #1
 800c4ee:	fa01 f605 	lsl.w	r6, r1, r5
 800c4f2:	1d72      	adds	r2, r6, #5
 800c4f4:	0092      	lsls	r2, r2, #2
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	f000 ff70 	bl	800d3dc <_calloc_r>
 800c4fc:	b160      	cbz	r0, 800c518 <_Balloc+0x64>
 800c4fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c502:	e00e      	b.n	800c522 <_Balloc+0x6e>
 800c504:	2221      	movs	r2, #33	; 0x21
 800c506:	2104      	movs	r1, #4
 800c508:	4620      	mov	r0, r4
 800c50a:	f000 ff67 	bl	800d3dc <_calloc_r>
 800c50e:	69e3      	ldr	r3, [r4, #28]
 800c510:	60f0      	str	r0, [r6, #12]
 800c512:	68db      	ldr	r3, [r3, #12]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d1e4      	bne.n	800c4e2 <_Balloc+0x2e>
 800c518:	2000      	movs	r0, #0
 800c51a:	bd70      	pop	{r4, r5, r6, pc}
 800c51c:	6802      	ldr	r2, [r0, #0]
 800c51e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c522:	2300      	movs	r3, #0
 800c524:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c528:	e7f7      	b.n	800c51a <_Balloc+0x66>
 800c52a:	bf00      	nop
 800c52c:	08016ae1 	.word	0x08016ae1
 800c530:	08016b61 	.word	0x08016b61

0800c534 <_Bfree>:
 800c534:	b570      	push	{r4, r5, r6, lr}
 800c536:	69c6      	ldr	r6, [r0, #28]
 800c538:	4605      	mov	r5, r0
 800c53a:	460c      	mov	r4, r1
 800c53c:	b976      	cbnz	r6, 800c55c <_Bfree+0x28>
 800c53e:	2010      	movs	r0, #16
 800c540:	f7ff ff04 	bl	800c34c <malloc>
 800c544:	4602      	mov	r2, r0
 800c546:	61e8      	str	r0, [r5, #28]
 800c548:	b920      	cbnz	r0, 800c554 <_Bfree+0x20>
 800c54a:	4b09      	ldr	r3, [pc, #36]	; (800c570 <_Bfree+0x3c>)
 800c54c:	4809      	ldr	r0, [pc, #36]	; (800c574 <_Bfree+0x40>)
 800c54e:	218f      	movs	r1, #143	; 0x8f
 800c550:	f000 ff26 	bl	800d3a0 <__assert_func>
 800c554:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c558:	6006      	str	r6, [r0, #0]
 800c55a:	60c6      	str	r6, [r0, #12]
 800c55c:	b13c      	cbz	r4, 800c56e <_Bfree+0x3a>
 800c55e:	69eb      	ldr	r3, [r5, #28]
 800c560:	6862      	ldr	r2, [r4, #4]
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c568:	6021      	str	r1, [r4, #0]
 800c56a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c56e:	bd70      	pop	{r4, r5, r6, pc}
 800c570:	08016ae1 	.word	0x08016ae1
 800c574:	08016b61 	.word	0x08016b61

0800c578 <__multadd>:
 800c578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c57c:	690d      	ldr	r5, [r1, #16]
 800c57e:	4607      	mov	r7, r0
 800c580:	460c      	mov	r4, r1
 800c582:	461e      	mov	r6, r3
 800c584:	f101 0c14 	add.w	ip, r1, #20
 800c588:	2000      	movs	r0, #0
 800c58a:	f8dc 3000 	ldr.w	r3, [ip]
 800c58e:	b299      	uxth	r1, r3
 800c590:	fb02 6101 	mla	r1, r2, r1, r6
 800c594:	0c1e      	lsrs	r6, r3, #16
 800c596:	0c0b      	lsrs	r3, r1, #16
 800c598:	fb02 3306 	mla	r3, r2, r6, r3
 800c59c:	b289      	uxth	r1, r1
 800c59e:	3001      	adds	r0, #1
 800c5a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c5a4:	4285      	cmp	r5, r0
 800c5a6:	f84c 1b04 	str.w	r1, [ip], #4
 800c5aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c5ae:	dcec      	bgt.n	800c58a <__multadd+0x12>
 800c5b0:	b30e      	cbz	r6, 800c5f6 <__multadd+0x7e>
 800c5b2:	68a3      	ldr	r3, [r4, #8]
 800c5b4:	42ab      	cmp	r3, r5
 800c5b6:	dc19      	bgt.n	800c5ec <__multadd+0x74>
 800c5b8:	6861      	ldr	r1, [r4, #4]
 800c5ba:	4638      	mov	r0, r7
 800c5bc:	3101      	adds	r1, #1
 800c5be:	f7ff ff79 	bl	800c4b4 <_Balloc>
 800c5c2:	4680      	mov	r8, r0
 800c5c4:	b928      	cbnz	r0, 800c5d2 <__multadd+0x5a>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	4b0c      	ldr	r3, [pc, #48]	; (800c5fc <__multadd+0x84>)
 800c5ca:	480d      	ldr	r0, [pc, #52]	; (800c600 <__multadd+0x88>)
 800c5cc:	21ba      	movs	r1, #186	; 0xba
 800c5ce:	f000 fee7 	bl	800d3a0 <__assert_func>
 800c5d2:	6922      	ldr	r2, [r4, #16]
 800c5d4:	3202      	adds	r2, #2
 800c5d6:	f104 010c 	add.w	r1, r4, #12
 800c5da:	0092      	lsls	r2, r2, #2
 800c5dc:	300c      	adds	r0, #12
 800c5de:	f000 fed1 	bl	800d384 <memcpy>
 800c5e2:	4621      	mov	r1, r4
 800c5e4:	4638      	mov	r0, r7
 800c5e6:	f7ff ffa5 	bl	800c534 <_Bfree>
 800c5ea:	4644      	mov	r4, r8
 800c5ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c5f0:	3501      	adds	r5, #1
 800c5f2:	615e      	str	r6, [r3, #20]
 800c5f4:	6125      	str	r5, [r4, #16]
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5fc:	08016b50 	.word	0x08016b50
 800c600:	08016b61 	.word	0x08016b61

0800c604 <__hi0bits>:
 800c604:	0c02      	lsrs	r2, r0, #16
 800c606:	0412      	lsls	r2, r2, #16
 800c608:	4603      	mov	r3, r0
 800c60a:	b9ca      	cbnz	r2, 800c640 <__hi0bits+0x3c>
 800c60c:	0403      	lsls	r3, r0, #16
 800c60e:	2010      	movs	r0, #16
 800c610:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c614:	bf04      	itt	eq
 800c616:	021b      	lsleq	r3, r3, #8
 800c618:	3008      	addeq	r0, #8
 800c61a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c61e:	bf04      	itt	eq
 800c620:	011b      	lsleq	r3, r3, #4
 800c622:	3004      	addeq	r0, #4
 800c624:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c628:	bf04      	itt	eq
 800c62a:	009b      	lsleq	r3, r3, #2
 800c62c:	3002      	addeq	r0, #2
 800c62e:	2b00      	cmp	r3, #0
 800c630:	db05      	blt.n	800c63e <__hi0bits+0x3a>
 800c632:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c636:	f100 0001 	add.w	r0, r0, #1
 800c63a:	bf08      	it	eq
 800c63c:	2020      	moveq	r0, #32
 800c63e:	4770      	bx	lr
 800c640:	2000      	movs	r0, #0
 800c642:	e7e5      	b.n	800c610 <__hi0bits+0xc>

0800c644 <__lo0bits>:
 800c644:	6803      	ldr	r3, [r0, #0]
 800c646:	4602      	mov	r2, r0
 800c648:	f013 0007 	ands.w	r0, r3, #7
 800c64c:	d00b      	beq.n	800c666 <__lo0bits+0x22>
 800c64e:	07d9      	lsls	r1, r3, #31
 800c650:	d421      	bmi.n	800c696 <__lo0bits+0x52>
 800c652:	0798      	lsls	r0, r3, #30
 800c654:	bf49      	itett	mi
 800c656:	085b      	lsrmi	r3, r3, #1
 800c658:	089b      	lsrpl	r3, r3, #2
 800c65a:	2001      	movmi	r0, #1
 800c65c:	6013      	strmi	r3, [r2, #0]
 800c65e:	bf5c      	itt	pl
 800c660:	6013      	strpl	r3, [r2, #0]
 800c662:	2002      	movpl	r0, #2
 800c664:	4770      	bx	lr
 800c666:	b299      	uxth	r1, r3
 800c668:	b909      	cbnz	r1, 800c66e <__lo0bits+0x2a>
 800c66a:	0c1b      	lsrs	r3, r3, #16
 800c66c:	2010      	movs	r0, #16
 800c66e:	b2d9      	uxtb	r1, r3
 800c670:	b909      	cbnz	r1, 800c676 <__lo0bits+0x32>
 800c672:	3008      	adds	r0, #8
 800c674:	0a1b      	lsrs	r3, r3, #8
 800c676:	0719      	lsls	r1, r3, #28
 800c678:	bf04      	itt	eq
 800c67a:	091b      	lsreq	r3, r3, #4
 800c67c:	3004      	addeq	r0, #4
 800c67e:	0799      	lsls	r1, r3, #30
 800c680:	bf04      	itt	eq
 800c682:	089b      	lsreq	r3, r3, #2
 800c684:	3002      	addeq	r0, #2
 800c686:	07d9      	lsls	r1, r3, #31
 800c688:	d403      	bmi.n	800c692 <__lo0bits+0x4e>
 800c68a:	085b      	lsrs	r3, r3, #1
 800c68c:	f100 0001 	add.w	r0, r0, #1
 800c690:	d003      	beq.n	800c69a <__lo0bits+0x56>
 800c692:	6013      	str	r3, [r2, #0]
 800c694:	4770      	bx	lr
 800c696:	2000      	movs	r0, #0
 800c698:	4770      	bx	lr
 800c69a:	2020      	movs	r0, #32
 800c69c:	4770      	bx	lr
	...

0800c6a0 <__i2b>:
 800c6a0:	b510      	push	{r4, lr}
 800c6a2:	460c      	mov	r4, r1
 800c6a4:	2101      	movs	r1, #1
 800c6a6:	f7ff ff05 	bl	800c4b4 <_Balloc>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	b928      	cbnz	r0, 800c6ba <__i2b+0x1a>
 800c6ae:	4b05      	ldr	r3, [pc, #20]	; (800c6c4 <__i2b+0x24>)
 800c6b0:	4805      	ldr	r0, [pc, #20]	; (800c6c8 <__i2b+0x28>)
 800c6b2:	f240 1145 	movw	r1, #325	; 0x145
 800c6b6:	f000 fe73 	bl	800d3a0 <__assert_func>
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	6144      	str	r4, [r0, #20]
 800c6be:	6103      	str	r3, [r0, #16]
 800c6c0:	bd10      	pop	{r4, pc}
 800c6c2:	bf00      	nop
 800c6c4:	08016b50 	.word	0x08016b50
 800c6c8:	08016b61 	.word	0x08016b61

0800c6cc <__multiply>:
 800c6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d0:	4691      	mov	r9, r2
 800c6d2:	690a      	ldr	r2, [r1, #16]
 800c6d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	bfb8      	it	lt
 800c6dc:	460b      	movlt	r3, r1
 800c6de:	460c      	mov	r4, r1
 800c6e0:	bfbc      	itt	lt
 800c6e2:	464c      	movlt	r4, r9
 800c6e4:	4699      	movlt	r9, r3
 800c6e6:	6927      	ldr	r7, [r4, #16]
 800c6e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c6ec:	68a3      	ldr	r3, [r4, #8]
 800c6ee:	6861      	ldr	r1, [r4, #4]
 800c6f0:	eb07 060a 	add.w	r6, r7, sl
 800c6f4:	42b3      	cmp	r3, r6
 800c6f6:	b085      	sub	sp, #20
 800c6f8:	bfb8      	it	lt
 800c6fa:	3101      	addlt	r1, #1
 800c6fc:	f7ff feda 	bl	800c4b4 <_Balloc>
 800c700:	b930      	cbnz	r0, 800c710 <__multiply+0x44>
 800c702:	4602      	mov	r2, r0
 800c704:	4b44      	ldr	r3, [pc, #272]	; (800c818 <__multiply+0x14c>)
 800c706:	4845      	ldr	r0, [pc, #276]	; (800c81c <__multiply+0x150>)
 800c708:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c70c:	f000 fe48 	bl	800d3a0 <__assert_func>
 800c710:	f100 0514 	add.w	r5, r0, #20
 800c714:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c718:	462b      	mov	r3, r5
 800c71a:	2200      	movs	r2, #0
 800c71c:	4543      	cmp	r3, r8
 800c71e:	d321      	bcc.n	800c764 <__multiply+0x98>
 800c720:	f104 0314 	add.w	r3, r4, #20
 800c724:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c728:	f109 0314 	add.w	r3, r9, #20
 800c72c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c730:	9202      	str	r2, [sp, #8]
 800c732:	1b3a      	subs	r2, r7, r4
 800c734:	3a15      	subs	r2, #21
 800c736:	f022 0203 	bic.w	r2, r2, #3
 800c73a:	3204      	adds	r2, #4
 800c73c:	f104 0115 	add.w	r1, r4, #21
 800c740:	428f      	cmp	r7, r1
 800c742:	bf38      	it	cc
 800c744:	2204      	movcc	r2, #4
 800c746:	9201      	str	r2, [sp, #4]
 800c748:	9a02      	ldr	r2, [sp, #8]
 800c74a:	9303      	str	r3, [sp, #12]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d80c      	bhi.n	800c76a <__multiply+0x9e>
 800c750:	2e00      	cmp	r6, #0
 800c752:	dd03      	ble.n	800c75c <__multiply+0x90>
 800c754:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d05a      	beq.n	800c812 <__multiply+0x146>
 800c75c:	6106      	str	r6, [r0, #16]
 800c75e:	b005      	add	sp, #20
 800c760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c764:	f843 2b04 	str.w	r2, [r3], #4
 800c768:	e7d8      	b.n	800c71c <__multiply+0x50>
 800c76a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c76e:	f1ba 0f00 	cmp.w	sl, #0
 800c772:	d023      	beq.n	800c7bc <__multiply+0xf0>
 800c774:	f104 0e14 	add.w	lr, r4, #20
 800c778:	46a9      	mov	r9, r5
 800c77a:	f04f 0c00 	mov.w	ip, #0
 800c77e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c782:	f8d9 1000 	ldr.w	r1, [r9]
 800c786:	fa1f fb82 	uxth.w	fp, r2
 800c78a:	b289      	uxth	r1, r1
 800c78c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c790:	4461      	add	r1, ip
 800c792:	f8d9 c000 	ldr.w	ip, [r9]
 800c796:	0c12      	lsrs	r2, r2, #16
 800c798:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c79c:	fb0a c202 	mla	r2, sl, r2, ip
 800c7a0:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c7a4:	b289      	uxth	r1, r1
 800c7a6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c7aa:	4577      	cmp	r7, lr
 800c7ac:	f849 1b04 	str.w	r1, [r9], #4
 800c7b0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c7b4:	d8e3      	bhi.n	800c77e <__multiply+0xb2>
 800c7b6:	9a01      	ldr	r2, [sp, #4]
 800c7b8:	f845 c002 	str.w	ip, [r5, r2]
 800c7bc:	9a03      	ldr	r2, [sp, #12]
 800c7be:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c7c2:	3304      	adds	r3, #4
 800c7c4:	f1b9 0f00 	cmp.w	r9, #0
 800c7c8:	d021      	beq.n	800c80e <__multiply+0x142>
 800c7ca:	6829      	ldr	r1, [r5, #0]
 800c7cc:	f104 0c14 	add.w	ip, r4, #20
 800c7d0:	46ae      	mov	lr, r5
 800c7d2:	f04f 0a00 	mov.w	sl, #0
 800c7d6:	f8bc b000 	ldrh.w	fp, [ip]
 800c7da:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c7de:	fb09 220b 	mla	r2, r9, fp, r2
 800c7e2:	4452      	add	r2, sl
 800c7e4:	b289      	uxth	r1, r1
 800c7e6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c7ea:	f84e 1b04 	str.w	r1, [lr], #4
 800c7ee:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c7f2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c7f6:	f8be 1000 	ldrh.w	r1, [lr]
 800c7fa:	fb09 110a 	mla	r1, r9, sl, r1
 800c7fe:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c802:	4567      	cmp	r7, ip
 800c804:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c808:	d8e5      	bhi.n	800c7d6 <__multiply+0x10a>
 800c80a:	9a01      	ldr	r2, [sp, #4]
 800c80c:	50a9      	str	r1, [r5, r2]
 800c80e:	3504      	adds	r5, #4
 800c810:	e79a      	b.n	800c748 <__multiply+0x7c>
 800c812:	3e01      	subs	r6, #1
 800c814:	e79c      	b.n	800c750 <__multiply+0x84>
 800c816:	bf00      	nop
 800c818:	08016b50 	.word	0x08016b50
 800c81c:	08016b61 	.word	0x08016b61

0800c820 <__pow5mult>:
 800c820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c824:	4615      	mov	r5, r2
 800c826:	f012 0203 	ands.w	r2, r2, #3
 800c82a:	4606      	mov	r6, r0
 800c82c:	460f      	mov	r7, r1
 800c82e:	d007      	beq.n	800c840 <__pow5mult+0x20>
 800c830:	4c25      	ldr	r4, [pc, #148]	; (800c8c8 <__pow5mult+0xa8>)
 800c832:	3a01      	subs	r2, #1
 800c834:	2300      	movs	r3, #0
 800c836:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c83a:	f7ff fe9d 	bl	800c578 <__multadd>
 800c83e:	4607      	mov	r7, r0
 800c840:	10ad      	asrs	r5, r5, #2
 800c842:	d03d      	beq.n	800c8c0 <__pow5mult+0xa0>
 800c844:	69f4      	ldr	r4, [r6, #28]
 800c846:	b97c      	cbnz	r4, 800c868 <__pow5mult+0x48>
 800c848:	2010      	movs	r0, #16
 800c84a:	f7ff fd7f 	bl	800c34c <malloc>
 800c84e:	4602      	mov	r2, r0
 800c850:	61f0      	str	r0, [r6, #28]
 800c852:	b928      	cbnz	r0, 800c860 <__pow5mult+0x40>
 800c854:	4b1d      	ldr	r3, [pc, #116]	; (800c8cc <__pow5mult+0xac>)
 800c856:	481e      	ldr	r0, [pc, #120]	; (800c8d0 <__pow5mult+0xb0>)
 800c858:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c85c:	f000 fda0 	bl	800d3a0 <__assert_func>
 800c860:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c864:	6004      	str	r4, [r0, #0]
 800c866:	60c4      	str	r4, [r0, #12]
 800c868:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c86c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c870:	b94c      	cbnz	r4, 800c886 <__pow5mult+0x66>
 800c872:	f240 2171 	movw	r1, #625	; 0x271
 800c876:	4630      	mov	r0, r6
 800c878:	f7ff ff12 	bl	800c6a0 <__i2b>
 800c87c:	2300      	movs	r3, #0
 800c87e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c882:	4604      	mov	r4, r0
 800c884:	6003      	str	r3, [r0, #0]
 800c886:	f04f 0900 	mov.w	r9, #0
 800c88a:	07eb      	lsls	r3, r5, #31
 800c88c:	d50a      	bpl.n	800c8a4 <__pow5mult+0x84>
 800c88e:	4639      	mov	r1, r7
 800c890:	4622      	mov	r2, r4
 800c892:	4630      	mov	r0, r6
 800c894:	f7ff ff1a 	bl	800c6cc <__multiply>
 800c898:	4639      	mov	r1, r7
 800c89a:	4680      	mov	r8, r0
 800c89c:	4630      	mov	r0, r6
 800c89e:	f7ff fe49 	bl	800c534 <_Bfree>
 800c8a2:	4647      	mov	r7, r8
 800c8a4:	106d      	asrs	r5, r5, #1
 800c8a6:	d00b      	beq.n	800c8c0 <__pow5mult+0xa0>
 800c8a8:	6820      	ldr	r0, [r4, #0]
 800c8aa:	b938      	cbnz	r0, 800c8bc <__pow5mult+0x9c>
 800c8ac:	4622      	mov	r2, r4
 800c8ae:	4621      	mov	r1, r4
 800c8b0:	4630      	mov	r0, r6
 800c8b2:	f7ff ff0b 	bl	800c6cc <__multiply>
 800c8b6:	6020      	str	r0, [r4, #0]
 800c8b8:	f8c0 9000 	str.w	r9, [r0]
 800c8bc:	4604      	mov	r4, r0
 800c8be:	e7e4      	b.n	800c88a <__pow5mult+0x6a>
 800c8c0:	4638      	mov	r0, r7
 800c8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8c6:	bf00      	nop
 800c8c8:	08016cb0 	.word	0x08016cb0
 800c8cc:	08016ae1 	.word	0x08016ae1
 800c8d0:	08016b61 	.word	0x08016b61

0800c8d4 <__lshift>:
 800c8d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8d8:	460c      	mov	r4, r1
 800c8da:	6849      	ldr	r1, [r1, #4]
 800c8dc:	6923      	ldr	r3, [r4, #16]
 800c8de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c8e2:	68a3      	ldr	r3, [r4, #8]
 800c8e4:	4607      	mov	r7, r0
 800c8e6:	4691      	mov	r9, r2
 800c8e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c8ec:	f108 0601 	add.w	r6, r8, #1
 800c8f0:	42b3      	cmp	r3, r6
 800c8f2:	db0b      	blt.n	800c90c <__lshift+0x38>
 800c8f4:	4638      	mov	r0, r7
 800c8f6:	f7ff fddd 	bl	800c4b4 <_Balloc>
 800c8fa:	4605      	mov	r5, r0
 800c8fc:	b948      	cbnz	r0, 800c912 <__lshift+0x3e>
 800c8fe:	4602      	mov	r2, r0
 800c900:	4b28      	ldr	r3, [pc, #160]	; (800c9a4 <__lshift+0xd0>)
 800c902:	4829      	ldr	r0, [pc, #164]	; (800c9a8 <__lshift+0xd4>)
 800c904:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c908:	f000 fd4a 	bl	800d3a0 <__assert_func>
 800c90c:	3101      	adds	r1, #1
 800c90e:	005b      	lsls	r3, r3, #1
 800c910:	e7ee      	b.n	800c8f0 <__lshift+0x1c>
 800c912:	2300      	movs	r3, #0
 800c914:	f100 0114 	add.w	r1, r0, #20
 800c918:	f100 0210 	add.w	r2, r0, #16
 800c91c:	4618      	mov	r0, r3
 800c91e:	4553      	cmp	r3, sl
 800c920:	db33      	blt.n	800c98a <__lshift+0xb6>
 800c922:	6920      	ldr	r0, [r4, #16]
 800c924:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c928:	f104 0314 	add.w	r3, r4, #20
 800c92c:	f019 091f 	ands.w	r9, r9, #31
 800c930:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c934:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c938:	d02b      	beq.n	800c992 <__lshift+0xbe>
 800c93a:	f1c9 0e20 	rsb	lr, r9, #32
 800c93e:	468a      	mov	sl, r1
 800c940:	2200      	movs	r2, #0
 800c942:	6818      	ldr	r0, [r3, #0]
 800c944:	fa00 f009 	lsl.w	r0, r0, r9
 800c948:	4310      	orrs	r0, r2
 800c94a:	f84a 0b04 	str.w	r0, [sl], #4
 800c94e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c952:	459c      	cmp	ip, r3
 800c954:	fa22 f20e 	lsr.w	r2, r2, lr
 800c958:	d8f3      	bhi.n	800c942 <__lshift+0x6e>
 800c95a:	ebac 0304 	sub.w	r3, ip, r4
 800c95e:	3b15      	subs	r3, #21
 800c960:	f023 0303 	bic.w	r3, r3, #3
 800c964:	3304      	adds	r3, #4
 800c966:	f104 0015 	add.w	r0, r4, #21
 800c96a:	4584      	cmp	ip, r0
 800c96c:	bf38      	it	cc
 800c96e:	2304      	movcc	r3, #4
 800c970:	50ca      	str	r2, [r1, r3]
 800c972:	b10a      	cbz	r2, 800c978 <__lshift+0xa4>
 800c974:	f108 0602 	add.w	r6, r8, #2
 800c978:	3e01      	subs	r6, #1
 800c97a:	4638      	mov	r0, r7
 800c97c:	612e      	str	r6, [r5, #16]
 800c97e:	4621      	mov	r1, r4
 800c980:	f7ff fdd8 	bl	800c534 <_Bfree>
 800c984:	4628      	mov	r0, r5
 800c986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c98a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c98e:	3301      	adds	r3, #1
 800c990:	e7c5      	b.n	800c91e <__lshift+0x4a>
 800c992:	3904      	subs	r1, #4
 800c994:	f853 2b04 	ldr.w	r2, [r3], #4
 800c998:	f841 2f04 	str.w	r2, [r1, #4]!
 800c99c:	459c      	cmp	ip, r3
 800c99e:	d8f9      	bhi.n	800c994 <__lshift+0xc0>
 800c9a0:	e7ea      	b.n	800c978 <__lshift+0xa4>
 800c9a2:	bf00      	nop
 800c9a4:	08016b50 	.word	0x08016b50
 800c9a8:	08016b61 	.word	0x08016b61

0800c9ac <__mcmp>:
 800c9ac:	690a      	ldr	r2, [r1, #16]
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	6900      	ldr	r0, [r0, #16]
 800c9b2:	1a80      	subs	r0, r0, r2
 800c9b4:	b530      	push	{r4, r5, lr}
 800c9b6:	d10d      	bne.n	800c9d4 <__mcmp+0x28>
 800c9b8:	3314      	adds	r3, #20
 800c9ba:	3114      	adds	r1, #20
 800c9bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c9c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c9c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c9c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c9cc:	4295      	cmp	r5, r2
 800c9ce:	d002      	beq.n	800c9d6 <__mcmp+0x2a>
 800c9d0:	d304      	bcc.n	800c9dc <__mcmp+0x30>
 800c9d2:	2001      	movs	r0, #1
 800c9d4:	bd30      	pop	{r4, r5, pc}
 800c9d6:	42a3      	cmp	r3, r4
 800c9d8:	d3f4      	bcc.n	800c9c4 <__mcmp+0x18>
 800c9da:	e7fb      	b.n	800c9d4 <__mcmp+0x28>
 800c9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c9e0:	e7f8      	b.n	800c9d4 <__mcmp+0x28>
	...

0800c9e4 <__mdiff>:
 800c9e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e8:	460d      	mov	r5, r1
 800c9ea:	4607      	mov	r7, r0
 800c9ec:	4611      	mov	r1, r2
 800c9ee:	4628      	mov	r0, r5
 800c9f0:	4614      	mov	r4, r2
 800c9f2:	f7ff ffdb 	bl	800c9ac <__mcmp>
 800c9f6:	1e06      	subs	r6, r0, #0
 800c9f8:	d111      	bne.n	800ca1e <__mdiff+0x3a>
 800c9fa:	4631      	mov	r1, r6
 800c9fc:	4638      	mov	r0, r7
 800c9fe:	f7ff fd59 	bl	800c4b4 <_Balloc>
 800ca02:	4602      	mov	r2, r0
 800ca04:	b928      	cbnz	r0, 800ca12 <__mdiff+0x2e>
 800ca06:	4b39      	ldr	r3, [pc, #228]	; (800caec <__mdiff+0x108>)
 800ca08:	f240 2137 	movw	r1, #567	; 0x237
 800ca0c:	4838      	ldr	r0, [pc, #224]	; (800caf0 <__mdiff+0x10c>)
 800ca0e:	f000 fcc7 	bl	800d3a0 <__assert_func>
 800ca12:	2301      	movs	r3, #1
 800ca14:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ca18:	4610      	mov	r0, r2
 800ca1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca1e:	bfa4      	itt	ge
 800ca20:	4623      	movge	r3, r4
 800ca22:	462c      	movge	r4, r5
 800ca24:	4638      	mov	r0, r7
 800ca26:	6861      	ldr	r1, [r4, #4]
 800ca28:	bfa6      	itte	ge
 800ca2a:	461d      	movge	r5, r3
 800ca2c:	2600      	movge	r6, #0
 800ca2e:	2601      	movlt	r6, #1
 800ca30:	f7ff fd40 	bl	800c4b4 <_Balloc>
 800ca34:	4602      	mov	r2, r0
 800ca36:	b918      	cbnz	r0, 800ca40 <__mdiff+0x5c>
 800ca38:	4b2c      	ldr	r3, [pc, #176]	; (800caec <__mdiff+0x108>)
 800ca3a:	f240 2145 	movw	r1, #581	; 0x245
 800ca3e:	e7e5      	b.n	800ca0c <__mdiff+0x28>
 800ca40:	6927      	ldr	r7, [r4, #16]
 800ca42:	60c6      	str	r6, [r0, #12]
 800ca44:	692e      	ldr	r6, [r5, #16]
 800ca46:	f104 0014 	add.w	r0, r4, #20
 800ca4a:	f105 0914 	add.w	r9, r5, #20
 800ca4e:	f102 0e14 	add.w	lr, r2, #20
 800ca52:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 800ca56:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ca5a:	3410      	adds	r4, #16
 800ca5c:	46f2      	mov	sl, lr
 800ca5e:	2100      	movs	r1, #0
 800ca60:	f859 3b04 	ldr.w	r3, [r9], #4
 800ca64:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800ca68:	fa11 f88b 	uxtah	r8, r1, fp
 800ca6c:	b299      	uxth	r1, r3
 800ca6e:	0c1b      	lsrs	r3, r3, #16
 800ca70:	eba8 0801 	sub.w	r8, r8, r1
 800ca74:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ca78:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ca7c:	fa1f f888 	uxth.w	r8, r8
 800ca80:	1419      	asrs	r1, r3, #16
 800ca82:	454e      	cmp	r6, r9
 800ca84:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ca88:	f84a 3b04 	str.w	r3, [sl], #4
 800ca8c:	d8e8      	bhi.n	800ca60 <__mdiff+0x7c>
 800ca8e:	1b73      	subs	r3, r6, r5
 800ca90:	3b15      	subs	r3, #21
 800ca92:	f023 0303 	bic.w	r3, r3, #3
 800ca96:	3304      	adds	r3, #4
 800ca98:	3515      	adds	r5, #21
 800ca9a:	42ae      	cmp	r6, r5
 800ca9c:	bf38      	it	cc
 800ca9e:	2304      	movcc	r3, #4
 800caa0:	4418      	add	r0, r3
 800caa2:	4473      	add	r3, lr
 800caa4:	469e      	mov	lr, r3
 800caa6:	4606      	mov	r6, r0
 800caa8:	4566      	cmp	r6, ip
 800caaa:	d30e      	bcc.n	800caca <__mdiff+0xe6>
 800caac:	f10c 0103 	add.w	r1, ip, #3
 800cab0:	1a09      	subs	r1, r1, r0
 800cab2:	f021 0103 	bic.w	r1, r1, #3
 800cab6:	3803      	subs	r0, #3
 800cab8:	4584      	cmp	ip, r0
 800caba:	bf38      	it	cc
 800cabc:	2100      	movcc	r1, #0
 800cabe:	440b      	add	r3, r1
 800cac0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cac4:	b179      	cbz	r1, 800cae6 <__mdiff+0x102>
 800cac6:	6117      	str	r7, [r2, #16]
 800cac8:	e7a6      	b.n	800ca18 <__mdiff+0x34>
 800caca:	f856 8b04 	ldr.w	r8, [r6], #4
 800cace:	fa11 f488 	uxtah	r4, r1, r8
 800cad2:	1425      	asrs	r5, r4, #16
 800cad4:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800cad8:	b2a4      	uxth	r4, r4
 800cada:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800cade:	f84e 4b04 	str.w	r4, [lr], #4
 800cae2:	1429      	asrs	r1, r5, #16
 800cae4:	e7e0      	b.n	800caa8 <__mdiff+0xc4>
 800cae6:	3f01      	subs	r7, #1
 800cae8:	e7ea      	b.n	800cac0 <__mdiff+0xdc>
 800caea:	bf00      	nop
 800caec:	08016b50 	.word	0x08016b50
 800caf0:	08016b61 	.word	0x08016b61

0800caf4 <__d2b>:
 800caf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800caf6:	2101      	movs	r1, #1
 800caf8:	9e08      	ldr	r6, [sp, #32]
 800cafa:	4617      	mov	r7, r2
 800cafc:	461c      	mov	r4, r3
 800cafe:	f7ff fcd9 	bl	800c4b4 <_Balloc>
 800cb02:	4605      	mov	r5, r0
 800cb04:	b930      	cbnz	r0, 800cb14 <__d2b+0x20>
 800cb06:	4602      	mov	r2, r0
 800cb08:	4b23      	ldr	r3, [pc, #140]	; (800cb98 <__d2b+0xa4>)
 800cb0a:	4824      	ldr	r0, [pc, #144]	; (800cb9c <__d2b+0xa8>)
 800cb0c:	f240 310f 	movw	r1, #783	; 0x30f
 800cb10:	f000 fc46 	bl	800d3a0 <__assert_func>
 800cb14:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800cb18:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800cb1c:	bb24      	cbnz	r4, 800cb68 <__d2b+0x74>
 800cb1e:	2f00      	cmp	r7, #0
 800cb20:	9301      	str	r3, [sp, #4]
 800cb22:	d026      	beq.n	800cb72 <__d2b+0x7e>
 800cb24:	4668      	mov	r0, sp
 800cb26:	9700      	str	r7, [sp, #0]
 800cb28:	f7ff fd8c 	bl	800c644 <__lo0bits>
 800cb2c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cb30:	b1e8      	cbz	r0, 800cb6e <__d2b+0x7a>
 800cb32:	f1c0 0320 	rsb	r3, r0, #32
 800cb36:	fa02 f303 	lsl.w	r3, r2, r3
 800cb3a:	430b      	orrs	r3, r1
 800cb3c:	40c2      	lsrs	r2, r0
 800cb3e:	616b      	str	r3, [r5, #20]
 800cb40:	9201      	str	r2, [sp, #4]
 800cb42:	9b01      	ldr	r3, [sp, #4]
 800cb44:	61ab      	str	r3, [r5, #24]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	bf14      	ite	ne
 800cb4a:	2102      	movne	r1, #2
 800cb4c:	2101      	moveq	r1, #1
 800cb4e:	6129      	str	r1, [r5, #16]
 800cb50:	b1bc      	cbz	r4, 800cb82 <__d2b+0x8e>
 800cb52:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800cb56:	4404      	add	r4, r0
 800cb58:	6034      	str	r4, [r6, #0]
 800cb5a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cb5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb60:	6018      	str	r0, [r3, #0]
 800cb62:	4628      	mov	r0, r5
 800cb64:	b003      	add	sp, #12
 800cb66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb6c:	e7d7      	b.n	800cb1e <__d2b+0x2a>
 800cb6e:	6169      	str	r1, [r5, #20]
 800cb70:	e7e7      	b.n	800cb42 <__d2b+0x4e>
 800cb72:	a801      	add	r0, sp, #4
 800cb74:	f7ff fd66 	bl	800c644 <__lo0bits>
 800cb78:	9b01      	ldr	r3, [sp, #4]
 800cb7a:	616b      	str	r3, [r5, #20]
 800cb7c:	3020      	adds	r0, #32
 800cb7e:	2101      	movs	r1, #1
 800cb80:	e7e5      	b.n	800cb4e <__d2b+0x5a>
 800cb82:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800cb86:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb8a:	6030      	str	r0, [r6, #0]
 800cb8c:	6918      	ldr	r0, [r3, #16]
 800cb8e:	f7ff fd39 	bl	800c604 <__hi0bits>
 800cb92:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800cb96:	e7e2      	b.n	800cb5e <__d2b+0x6a>
 800cb98:	08016b50 	.word	0x08016b50
 800cb9c:	08016b61 	.word	0x08016b61

0800cba0 <__ssputs_r>:
 800cba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cba4:	688e      	ldr	r6, [r1, #8]
 800cba6:	461f      	mov	r7, r3
 800cba8:	42be      	cmp	r6, r7
 800cbaa:	680b      	ldr	r3, [r1, #0]
 800cbac:	4682      	mov	sl, r0
 800cbae:	460c      	mov	r4, r1
 800cbb0:	4690      	mov	r8, r2
 800cbb2:	d82c      	bhi.n	800cc0e <__ssputs_r+0x6e>
 800cbb4:	898a      	ldrh	r2, [r1, #12]
 800cbb6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cbba:	d026      	beq.n	800cc0a <__ssputs_r+0x6a>
 800cbbc:	6965      	ldr	r5, [r4, #20]
 800cbbe:	6909      	ldr	r1, [r1, #16]
 800cbc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cbc4:	eba3 0901 	sub.w	r9, r3, r1
 800cbc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cbcc:	1c7b      	adds	r3, r7, #1
 800cbce:	444b      	add	r3, r9
 800cbd0:	106d      	asrs	r5, r5, #1
 800cbd2:	429d      	cmp	r5, r3
 800cbd4:	bf38      	it	cc
 800cbd6:	461d      	movcc	r5, r3
 800cbd8:	0553      	lsls	r3, r2, #21
 800cbda:	d527      	bpl.n	800cc2c <__ssputs_r+0x8c>
 800cbdc:	4629      	mov	r1, r5
 800cbde:	f7ff fbdd 	bl	800c39c <_malloc_r>
 800cbe2:	4606      	mov	r6, r0
 800cbe4:	b360      	cbz	r0, 800cc40 <__ssputs_r+0xa0>
 800cbe6:	6921      	ldr	r1, [r4, #16]
 800cbe8:	464a      	mov	r2, r9
 800cbea:	f000 fbcb 	bl	800d384 <memcpy>
 800cbee:	89a3      	ldrh	r3, [r4, #12]
 800cbf0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cbf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbf8:	81a3      	strh	r3, [r4, #12]
 800cbfa:	6126      	str	r6, [r4, #16]
 800cbfc:	6165      	str	r5, [r4, #20]
 800cbfe:	444e      	add	r6, r9
 800cc00:	eba5 0509 	sub.w	r5, r5, r9
 800cc04:	6026      	str	r6, [r4, #0]
 800cc06:	60a5      	str	r5, [r4, #8]
 800cc08:	463e      	mov	r6, r7
 800cc0a:	42be      	cmp	r6, r7
 800cc0c:	d900      	bls.n	800cc10 <__ssputs_r+0x70>
 800cc0e:	463e      	mov	r6, r7
 800cc10:	6820      	ldr	r0, [r4, #0]
 800cc12:	4632      	mov	r2, r6
 800cc14:	4641      	mov	r1, r8
 800cc16:	f000 fb69 	bl	800d2ec <memmove>
 800cc1a:	68a3      	ldr	r3, [r4, #8]
 800cc1c:	1b9b      	subs	r3, r3, r6
 800cc1e:	60a3      	str	r3, [r4, #8]
 800cc20:	6823      	ldr	r3, [r4, #0]
 800cc22:	4433      	add	r3, r6
 800cc24:	6023      	str	r3, [r4, #0]
 800cc26:	2000      	movs	r0, #0
 800cc28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc2c:	462a      	mov	r2, r5
 800cc2e:	f000 fbfb 	bl	800d428 <_realloc_r>
 800cc32:	4606      	mov	r6, r0
 800cc34:	2800      	cmp	r0, #0
 800cc36:	d1e0      	bne.n	800cbfa <__ssputs_r+0x5a>
 800cc38:	6921      	ldr	r1, [r4, #16]
 800cc3a:	4650      	mov	r0, sl
 800cc3c:	f7ff fb3c 	bl	800c2b8 <_free_r>
 800cc40:	230c      	movs	r3, #12
 800cc42:	f8ca 3000 	str.w	r3, [sl]
 800cc46:	89a3      	ldrh	r3, [r4, #12]
 800cc48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc4c:	81a3      	strh	r3, [r4, #12]
 800cc4e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc52:	e7e9      	b.n	800cc28 <__ssputs_r+0x88>

0800cc54 <_svfiprintf_r>:
 800cc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc58:	4698      	mov	r8, r3
 800cc5a:	898b      	ldrh	r3, [r1, #12]
 800cc5c:	061b      	lsls	r3, r3, #24
 800cc5e:	b09d      	sub	sp, #116	; 0x74
 800cc60:	4607      	mov	r7, r0
 800cc62:	460d      	mov	r5, r1
 800cc64:	4614      	mov	r4, r2
 800cc66:	d50e      	bpl.n	800cc86 <_svfiprintf_r+0x32>
 800cc68:	690b      	ldr	r3, [r1, #16]
 800cc6a:	b963      	cbnz	r3, 800cc86 <_svfiprintf_r+0x32>
 800cc6c:	2140      	movs	r1, #64	; 0x40
 800cc6e:	f7ff fb95 	bl	800c39c <_malloc_r>
 800cc72:	6028      	str	r0, [r5, #0]
 800cc74:	6128      	str	r0, [r5, #16]
 800cc76:	b920      	cbnz	r0, 800cc82 <_svfiprintf_r+0x2e>
 800cc78:	230c      	movs	r3, #12
 800cc7a:	603b      	str	r3, [r7, #0]
 800cc7c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc80:	e0d0      	b.n	800ce24 <_svfiprintf_r+0x1d0>
 800cc82:	2340      	movs	r3, #64	; 0x40
 800cc84:	616b      	str	r3, [r5, #20]
 800cc86:	2300      	movs	r3, #0
 800cc88:	9309      	str	r3, [sp, #36]	; 0x24
 800cc8a:	2320      	movs	r3, #32
 800cc8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc90:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc94:	2330      	movs	r3, #48	; 0x30
 800cc96:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ce3c <_svfiprintf_r+0x1e8>
 800cc9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc9e:	f04f 0901 	mov.w	r9, #1
 800cca2:	4623      	mov	r3, r4
 800cca4:	469a      	mov	sl, r3
 800cca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccaa:	b10a      	cbz	r2, 800ccb0 <_svfiprintf_r+0x5c>
 800ccac:	2a25      	cmp	r2, #37	; 0x25
 800ccae:	d1f9      	bne.n	800cca4 <_svfiprintf_r+0x50>
 800ccb0:	ebba 0b04 	subs.w	fp, sl, r4
 800ccb4:	d00b      	beq.n	800ccce <_svfiprintf_r+0x7a>
 800ccb6:	465b      	mov	r3, fp
 800ccb8:	4622      	mov	r2, r4
 800ccba:	4629      	mov	r1, r5
 800ccbc:	4638      	mov	r0, r7
 800ccbe:	f7ff ff6f 	bl	800cba0 <__ssputs_r>
 800ccc2:	3001      	adds	r0, #1
 800ccc4:	f000 80a9 	beq.w	800ce1a <_svfiprintf_r+0x1c6>
 800ccc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccca:	445a      	add	r2, fp
 800cccc:	9209      	str	r2, [sp, #36]	; 0x24
 800ccce:	f89a 3000 	ldrb.w	r3, [sl]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	f000 80a1 	beq.w	800ce1a <_svfiprintf_r+0x1c6>
 800ccd8:	2300      	movs	r3, #0
 800ccda:	f04f 32ff 	mov.w	r2, #4294967295
 800ccde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cce2:	f10a 0a01 	add.w	sl, sl, #1
 800cce6:	9304      	str	r3, [sp, #16]
 800cce8:	9307      	str	r3, [sp, #28]
 800ccea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ccee:	931a      	str	r3, [sp, #104]	; 0x68
 800ccf0:	4654      	mov	r4, sl
 800ccf2:	2205      	movs	r2, #5
 800ccf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccf8:	4850      	ldr	r0, [pc, #320]	; (800ce3c <_svfiprintf_r+0x1e8>)
 800ccfa:	f7f3 fa69 	bl	80001d0 <memchr>
 800ccfe:	9a04      	ldr	r2, [sp, #16]
 800cd00:	b9d8      	cbnz	r0, 800cd3a <_svfiprintf_r+0xe6>
 800cd02:	06d0      	lsls	r0, r2, #27
 800cd04:	bf44      	itt	mi
 800cd06:	2320      	movmi	r3, #32
 800cd08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd0c:	0711      	lsls	r1, r2, #28
 800cd0e:	bf44      	itt	mi
 800cd10:	232b      	movmi	r3, #43	; 0x2b
 800cd12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd16:	f89a 3000 	ldrb.w	r3, [sl]
 800cd1a:	2b2a      	cmp	r3, #42	; 0x2a
 800cd1c:	d015      	beq.n	800cd4a <_svfiprintf_r+0xf6>
 800cd1e:	9a07      	ldr	r2, [sp, #28]
 800cd20:	4654      	mov	r4, sl
 800cd22:	2000      	movs	r0, #0
 800cd24:	f04f 0c0a 	mov.w	ip, #10
 800cd28:	4621      	mov	r1, r4
 800cd2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd2e:	3b30      	subs	r3, #48	; 0x30
 800cd30:	2b09      	cmp	r3, #9
 800cd32:	d94d      	bls.n	800cdd0 <_svfiprintf_r+0x17c>
 800cd34:	b1b0      	cbz	r0, 800cd64 <_svfiprintf_r+0x110>
 800cd36:	9207      	str	r2, [sp, #28]
 800cd38:	e014      	b.n	800cd64 <_svfiprintf_r+0x110>
 800cd3a:	eba0 0308 	sub.w	r3, r0, r8
 800cd3e:	fa09 f303 	lsl.w	r3, r9, r3
 800cd42:	4313      	orrs	r3, r2
 800cd44:	9304      	str	r3, [sp, #16]
 800cd46:	46a2      	mov	sl, r4
 800cd48:	e7d2      	b.n	800ccf0 <_svfiprintf_r+0x9c>
 800cd4a:	9b03      	ldr	r3, [sp, #12]
 800cd4c:	1d19      	adds	r1, r3, #4
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	9103      	str	r1, [sp, #12]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	bfbb      	ittet	lt
 800cd56:	425b      	neglt	r3, r3
 800cd58:	f042 0202 	orrlt.w	r2, r2, #2
 800cd5c:	9307      	strge	r3, [sp, #28]
 800cd5e:	9307      	strlt	r3, [sp, #28]
 800cd60:	bfb8      	it	lt
 800cd62:	9204      	strlt	r2, [sp, #16]
 800cd64:	7823      	ldrb	r3, [r4, #0]
 800cd66:	2b2e      	cmp	r3, #46	; 0x2e
 800cd68:	d10c      	bne.n	800cd84 <_svfiprintf_r+0x130>
 800cd6a:	7863      	ldrb	r3, [r4, #1]
 800cd6c:	2b2a      	cmp	r3, #42	; 0x2a
 800cd6e:	d134      	bne.n	800cdda <_svfiprintf_r+0x186>
 800cd70:	9b03      	ldr	r3, [sp, #12]
 800cd72:	1d1a      	adds	r2, r3, #4
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	9203      	str	r2, [sp, #12]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	bfb8      	it	lt
 800cd7c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd80:	3402      	adds	r4, #2
 800cd82:	9305      	str	r3, [sp, #20]
 800cd84:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800ce40 <_svfiprintf_r+0x1ec>
 800cd88:	7821      	ldrb	r1, [r4, #0]
 800cd8a:	2203      	movs	r2, #3
 800cd8c:	4650      	mov	r0, sl
 800cd8e:	f7f3 fa1f 	bl	80001d0 <memchr>
 800cd92:	b138      	cbz	r0, 800cda4 <_svfiprintf_r+0x150>
 800cd94:	9b04      	ldr	r3, [sp, #16]
 800cd96:	eba0 000a 	sub.w	r0, r0, sl
 800cd9a:	2240      	movs	r2, #64	; 0x40
 800cd9c:	4082      	lsls	r2, r0
 800cd9e:	4313      	orrs	r3, r2
 800cda0:	3401      	adds	r4, #1
 800cda2:	9304      	str	r3, [sp, #16]
 800cda4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cda8:	4826      	ldr	r0, [pc, #152]	; (800ce44 <_svfiprintf_r+0x1f0>)
 800cdaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdae:	2206      	movs	r2, #6
 800cdb0:	f7f3 fa0e 	bl	80001d0 <memchr>
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	d038      	beq.n	800ce2a <_svfiprintf_r+0x1d6>
 800cdb8:	4b23      	ldr	r3, [pc, #140]	; (800ce48 <_svfiprintf_r+0x1f4>)
 800cdba:	bb1b      	cbnz	r3, 800ce04 <_svfiprintf_r+0x1b0>
 800cdbc:	9b03      	ldr	r3, [sp, #12]
 800cdbe:	3307      	adds	r3, #7
 800cdc0:	f023 0307 	bic.w	r3, r3, #7
 800cdc4:	3308      	adds	r3, #8
 800cdc6:	9303      	str	r3, [sp, #12]
 800cdc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdca:	4433      	add	r3, r6
 800cdcc:	9309      	str	r3, [sp, #36]	; 0x24
 800cdce:	e768      	b.n	800cca2 <_svfiprintf_r+0x4e>
 800cdd0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdd4:	460c      	mov	r4, r1
 800cdd6:	2001      	movs	r0, #1
 800cdd8:	e7a6      	b.n	800cd28 <_svfiprintf_r+0xd4>
 800cdda:	2300      	movs	r3, #0
 800cddc:	3401      	adds	r4, #1
 800cdde:	9305      	str	r3, [sp, #20]
 800cde0:	4619      	mov	r1, r3
 800cde2:	f04f 0c0a 	mov.w	ip, #10
 800cde6:	4620      	mov	r0, r4
 800cde8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdec:	3a30      	subs	r2, #48	; 0x30
 800cdee:	2a09      	cmp	r2, #9
 800cdf0:	d903      	bls.n	800cdfa <_svfiprintf_r+0x1a6>
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d0c6      	beq.n	800cd84 <_svfiprintf_r+0x130>
 800cdf6:	9105      	str	r1, [sp, #20]
 800cdf8:	e7c4      	b.n	800cd84 <_svfiprintf_r+0x130>
 800cdfa:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdfe:	4604      	mov	r4, r0
 800ce00:	2301      	movs	r3, #1
 800ce02:	e7f0      	b.n	800cde6 <_svfiprintf_r+0x192>
 800ce04:	ab03      	add	r3, sp, #12
 800ce06:	9300      	str	r3, [sp, #0]
 800ce08:	462a      	mov	r2, r5
 800ce0a:	4b10      	ldr	r3, [pc, #64]	; (800ce4c <_svfiprintf_r+0x1f8>)
 800ce0c:	a904      	add	r1, sp, #16
 800ce0e:	4638      	mov	r0, r7
 800ce10:	f7fd fd8a 	bl	800a928 <_printf_float>
 800ce14:	1c42      	adds	r2, r0, #1
 800ce16:	4606      	mov	r6, r0
 800ce18:	d1d6      	bne.n	800cdc8 <_svfiprintf_r+0x174>
 800ce1a:	89ab      	ldrh	r3, [r5, #12]
 800ce1c:	065b      	lsls	r3, r3, #25
 800ce1e:	f53f af2d 	bmi.w	800cc7c <_svfiprintf_r+0x28>
 800ce22:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce24:	b01d      	add	sp, #116	; 0x74
 800ce26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce2a:	ab03      	add	r3, sp, #12
 800ce2c:	9300      	str	r3, [sp, #0]
 800ce2e:	462a      	mov	r2, r5
 800ce30:	4b06      	ldr	r3, [pc, #24]	; (800ce4c <_svfiprintf_r+0x1f8>)
 800ce32:	a904      	add	r1, sp, #16
 800ce34:	4638      	mov	r0, r7
 800ce36:	f7fe f811 	bl	800ae5c <_printf_i>
 800ce3a:	e7eb      	b.n	800ce14 <_svfiprintf_r+0x1c0>
 800ce3c:	08016cbc 	.word	0x08016cbc
 800ce40:	08016cc2 	.word	0x08016cc2
 800ce44:	08016cc6 	.word	0x08016cc6
 800ce48:	0800a929 	.word	0x0800a929
 800ce4c:	0800cba1 	.word	0x0800cba1

0800ce50 <__sfputc_r>:
 800ce50:	6893      	ldr	r3, [r2, #8]
 800ce52:	3b01      	subs	r3, #1
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	b410      	push	{r4}
 800ce58:	6093      	str	r3, [r2, #8]
 800ce5a:	da07      	bge.n	800ce6c <__sfputc_r+0x1c>
 800ce5c:	6994      	ldr	r4, [r2, #24]
 800ce5e:	42a3      	cmp	r3, r4
 800ce60:	db01      	blt.n	800ce66 <__sfputc_r+0x16>
 800ce62:	290a      	cmp	r1, #10
 800ce64:	d102      	bne.n	800ce6c <__sfputc_r+0x1c>
 800ce66:	bc10      	pop	{r4}
 800ce68:	f7fe baad 	b.w	800b3c6 <__swbuf_r>
 800ce6c:	6813      	ldr	r3, [r2, #0]
 800ce6e:	1c58      	adds	r0, r3, #1
 800ce70:	6010      	str	r0, [r2, #0]
 800ce72:	7019      	strb	r1, [r3, #0]
 800ce74:	4608      	mov	r0, r1
 800ce76:	bc10      	pop	{r4}
 800ce78:	4770      	bx	lr

0800ce7a <__sfputs_r>:
 800ce7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce7c:	4606      	mov	r6, r0
 800ce7e:	460f      	mov	r7, r1
 800ce80:	4614      	mov	r4, r2
 800ce82:	18d5      	adds	r5, r2, r3
 800ce84:	42ac      	cmp	r4, r5
 800ce86:	d101      	bne.n	800ce8c <__sfputs_r+0x12>
 800ce88:	2000      	movs	r0, #0
 800ce8a:	e007      	b.n	800ce9c <__sfputs_r+0x22>
 800ce8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce90:	463a      	mov	r2, r7
 800ce92:	4630      	mov	r0, r6
 800ce94:	f7ff ffdc 	bl	800ce50 <__sfputc_r>
 800ce98:	1c43      	adds	r3, r0, #1
 800ce9a:	d1f3      	bne.n	800ce84 <__sfputs_r+0xa>
 800ce9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cea0 <_vfiprintf_r>:
 800cea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cea4:	460d      	mov	r5, r1
 800cea6:	b09d      	sub	sp, #116	; 0x74
 800cea8:	4614      	mov	r4, r2
 800ceaa:	4698      	mov	r8, r3
 800ceac:	4606      	mov	r6, r0
 800ceae:	b118      	cbz	r0, 800ceb8 <_vfiprintf_r+0x18>
 800ceb0:	6a03      	ldr	r3, [r0, #32]
 800ceb2:	b90b      	cbnz	r3, 800ceb8 <_vfiprintf_r+0x18>
 800ceb4:	f7fe f980 	bl	800b1b8 <__sinit>
 800ceb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ceba:	07d9      	lsls	r1, r3, #31
 800cebc:	d405      	bmi.n	800ceca <_vfiprintf_r+0x2a>
 800cebe:	89ab      	ldrh	r3, [r5, #12]
 800cec0:	059a      	lsls	r2, r3, #22
 800cec2:	d402      	bmi.n	800ceca <_vfiprintf_r+0x2a>
 800cec4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cec6:	f7fe fb90 	bl	800b5ea <__retarget_lock_acquire_recursive>
 800ceca:	89ab      	ldrh	r3, [r5, #12]
 800cecc:	071b      	lsls	r3, r3, #28
 800cece:	d501      	bpl.n	800ced4 <_vfiprintf_r+0x34>
 800ced0:	692b      	ldr	r3, [r5, #16]
 800ced2:	b99b      	cbnz	r3, 800cefc <_vfiprintf_r+0x5c>
 800ced4:	4629      	mov	r1, r5
 800ced6:	4630      	mov	r0, r6
 800ced8:	f7fe fab2 	bl	800b440 <__swsetup_r>
 800cedc:	b170      	cbz	r0, 800cefc <_vfiprintf_r+0x5c>
 800cede:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cee0:	07dc      	lsls	r4, r3, #31
 800cee2:	d504      	bpl.n	800ceee <_vfiprintf_r+0x4e>
 800cee4:	f04f 30ff 	mov.w	r0, #4294967295
 800cee8:	b01d      	add	sp, #116	; 0x74
 800ceea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceee:	89ab      	ldrh	r3, [r5, #12]
 800cef0:	0598      	lsls	r0, r3, #22
 800cef2:	d4f7      	bmi.n	800cee4 <_vfiprintf_r+0x44>
 800cef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cef6:	f7fe fb79 	bl	800b5ec <__retarget_lock_release_recursive>
 800cefa:	e7f3      	b.n	800cee4 <_vfiprintf_r+0x44>
 800cefc:	2300      	movs	r3, #0
 800cefe:	9309      	str	r3, [sp, #36]	; 0x24
 800cf00:	2320      	movs	r3, #32
 800cf02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf06:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf0a:	2330      	movs	r3, #48	; 0x30
 800cf0c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d0c0 <_vfiprintf_r+0x220>
 800cf10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf14:	f04f 0901 	mov.w	r9, #1
 800cf18:	4623      	mov	r3, r4
 800cf1a:	469a      	mov	sl, r3
 800cf1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf20:	b10a      	cbz	r2, 800cf26 <_vfiprintf_r+0x86>
 800cf22:	2a25      	cmp	r2, #37	; 0x25
 800cf24:	d1f9      	bne.n	800cf1a <_vfiprintf_r+0x7a>
 800cf26:	ebba 0b04 	subs.w	fp, sl, r4
 800cf2a:	d00b      	beq.n	800cf44 <_vfiprintf_r+0xa4>
 800cf2c:	465b      	mov	r3, fp
 800cf2e:	4622      	mov	r2, r4
 800cf30:	4629      	mov	r1, r5
 800cf32:	4630      	mov	r0, r6
 800cf34:	f7ff ffa1 	bl	800ce7a <__sfputs_r>
 800cf38:	3001      	adds	r0, #1
 800cf3a:	f000 80a9 	beq.w	800d090 <_vfiprintf_r+0x1f0>
 800cf3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf40:	445a      	add	r2, fp
 800cf42:	9209      	str	r2, [sp, #36]	; 0x24
 800cf44:	f89a 3000 	ldrb.w	r3, [sl]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f000 80a1 	beq.w	800d090 <_vfiprintf_r+0x1f0>
 800cf4e:	2300      	movs	r3, #0
 800cf50:	f04f 32ff 	mov.w	r2, #4294967295
 800cf54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf58:	f10a 0a01 	add.w	sl, sl, #1
 800cf5c:	9304      	str	r3, [sp, #16]
 800cf5e:	9307      	str	r3, [sp, #28]
 800cf60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf64:	931a      	str	r3, [sp, #104]	; 0x68
 800cf66:	4654      	mov	r4, sl
 800cf68:	2205      	movs	r2, #5
 800cf6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf6e:	4854      	ldr	r0, [pc, #336]	; (800d0c0 <_vfiprintf_r+0x220>)
 800cf70:	f7f3 f92e 	bl	80001d0 <memchr>
 800cf74:	9a04      	ldr	r2, [sp, #16]
 800cf76:	b9d8      	cbnz	r0, 800cfb0 <_vfiprintf_r+0x110>
 800cf78:	06d1      	lsls	r1, r2, #27
 800cf7a:	bf44      	itt	mi
 800cf7c:	2320      	movmi	r3, #32
 800cf7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf82:	0713      	lsls	r3, r2, #28
 800cf84:	bf44      	itt	mi
 800cf86:	232b      	movmi	r3, #43	; 0x2b
 800cf88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf8c:	f89a 3000 	ldrb.w	r3, [sl]
 800cf90:	2b2a      	cmp	r3, #42	; 0x2a
 800cf92:	d015      	beq.n	800cfc0 <_vfiprintf_r+0x120>
 800cf94:	9a07      	ldr	r2, [sp, #28]
 800cf96:	4654      	mov	r4, sl
 800cf98:	2000      	movs	r0, #0
 800cf9a:	f04f 0c0a 	mov.w	ip, #10
 800cf9e:	4621      	mov	r1, r4
 800cfa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfa4:	3b30      	subs	r3, #48	; 0x30
 800cfa6:	2b09      	cmp	r3, #9
 800cfa8:	d94d      	bls.n	800d046 <_vfiprintf_r+0x1a6>
 800cfaa:	b1b0      	cbz	r0, 800cfda <_vfiprintf_r+0x13a>
 800cfac:	9207      	str	r2, [sp, #28]
 800cfae:	e014      	b.n	800cfda <_vfiprintf_r+0x13a>
 800cfb0:	eba0 0308 	sub.w	r3, r0, r8
 800cfb4:	fa09 f303 	lsl.w	r3, r9, r3
 800cfb8:	4313      	orrs	r3, r2
 800cfba:	9304      	str	r3, [sp, #16]
 800cfbc:	46a2      	mov	sl, r4
 800cfbe:	e7d2      	b.n	800cf66 <_vfiprintf_r+0xc6>
 800cfc0:	9b03      	ldr	r3, [sp, #12]
 800cfc2:	1d19      	adds	r1, r3, #4
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	9103      	str	r1, [sp, #12]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	bfbb      	ittet	lt
 800cfcc:	425b      	neglt	r3, r3
 800cfce:	f042 0202 	orrlt.w	r2, r2, #2
 800cfd2:	9307      	strge	r3, [sp, #28]
 800cfd4:	9307      	strlt	r3, [sp, #28]
 800cfd6:	bfb8      	it	lt
 800cfd8:	9204      	strlt	r2, [sp, #16]
 800cfda:	7823      	ldrb	r3, [r4, #0]
 800cfdc:	2b2e      	cmp	r3, #46	; 0x2e
 800cfde:	d10c      	bne.n	800cffa <_vfiprintf_r+0x15a>
 800cfe0:	7863      	ldrb	r3, [r4, #1]
 800cfe2:	2b2a      	cmp	r3, #42	; 0x2a
 800cfe4:	d134      	bne.n	800d050 <_vfiprintf_r+0x1b0>
 800cfe6:	9b03      	ldr	r3, [sp, #12]
 800cfe8:	1d1a      	adds	r2, r3, #4
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	9203      	str	r2, [sp, #12]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	bfb8      	it	lt
 800cff2:	f04f 33ff 	movlt.w	r3, #4294967295
 800cff6:	3402      	adds	r4, #2
 800cff8:	9305      	str	r3, [sp, #20]
 800cffa:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d0c4 <_vfiprintf_r+0x224>
 800cffe:	7821      	ldrb	r1, [r4, #0]
 800d000:	2203      	movs	r2, #3
 800d002:	4650      	mov	r0, sl
 800d004:	f7f3 f8e4 	bl	80001d0 <memchr>
 800d008:	b138      	cbz	r0, 800d01a <_vfiprintf_r+0x17a>
 800d00a:	9b04      	ldr	r3, [sp, #16]
 800d00c:	eba0 000a 	sub.w	r0, r0, sl
 800d010:	2240      	movs	r2, #64	; 0x40
 800d012:	4082      	lsls	r2, r0
 800d014:	4313      	orrs	r3, r2
 800d016:	3401      	adds	r4, #1
 800d018:	9304      	str	r3, [sp, #16]
 800d01a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d01e:	482a      	ldr	r0, [pc, #168]	; (800d0c8 <_vfiprintf_r+0x228>)
 800d020:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d024:	2206      	movs	r2, #6
 800d026:	f7f3 f8d3 	bl	80001d0 <memchr>
 800d02a:	2800      	cmp	r0, #0
 800d02c:	d03f      	beq.n	800d0ae <_vfiprintf_r+0x20e>
 800d02e:	4b27      	ldr	r3, [pc, #156]	; (800d0cc <_vfiprintf_r+0x22c>)
 800d030:	bb1b      	cbnz	r3, 800d07a <_vfiprintf_r+0x1da>
 800d032:	9b03      	ldr	r3, [sp, #12]
 800d034:	3307      	adds	r3, #7
 800d036:	f023 0307 	bic.w	r3, r3, #7
 800d03a:	3308      	adds	r3, #8
 800d03c:	9303      	str	r3, [sp, #12]
 800d03e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d040:	443b      	add	r3, r7
 800d042:	9309      	str	r3, [sp, #36]	; 0x24
 800d044:	e768      	b.n	800cf18 <_vfiprintf_r+0x78>
 800d046:	fb0c 3202 	mla	r2, ip, r2, r3
 800d04a:	460c      	mov	r4, r1
 800d04c:	2001      	movs	r0, #1
 800d04e:	e7a6      	b.n	800cf9e <_vfiprintf_r+0xfe>
 800d050:	2300      	movs	r3, #0
 800d052:	3401      	adds	r4, #1
 800d054:	9305      	str	r3, [sp, #20]
 800d056:	4619      	mov	r1, r3
 800d058:	f04f 0c0a 	mov.w	ip, #10
 800d05c:	4620      	mov	r0, r4
 800d05e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d062:	3a30      	subs	r2, #48	; 0x30
 800d064:	2a09      	cmp	r2, #9
 800d066:	d903      	bls.n	800d070 <_vfiprintf_r+0x1d0>
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d0c6      	beq.n	800cffa <_vfiprintf_r+0x15a>
 800d06c:	9105      	str	r1, [sp, #20]
 800d06e:	e7c4      	b.n	800cffa <_vfiprintf_r+0x15a>
 800d070:	fb0c 2101 	mla	r1, ip, r1, r2
 800d074:	4604      	mov	r4, r0
 800d076:	2301      	movs	r3, #1
 800d078:	e7f0      	b.n	800d05c <_vfiprintf_r+0x1bc>
 800d07a:	ab03      	add	r3, sp, #12
 800d07c:	9300      	str	r3, [sp, #0]
 800d07e:	462a      	mov	r2, r5
 800d080:	4b13      	ldr	r3, [pc, #76]	; (800d0d0 <_vfiprintf_r+0x230>)
 800d082:	a904      	add	r1, sp, #16
 800d084:	4630      	mov	r0, r6
 800d086:	f7fd fc4f 	bl	800a928 <_printf_float>
 800d08a:	4607      	mov	r7, r0
 800d08c:	1c78      	adds	r0, r7, #1
 800d08e:	d1d6      	bne.n	800d03e <_vfiprintf_r+0x19e>
 800d090:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d092:	07d9      	lsls	r1, r3, #31
 800d094:	d405      	bmi.n	800d0a2 <_vfiprintf_r+0x202>
 800d096:	89ab      	ldrh	r3, [r5, #12]
 800d098:	059a      	lsls	r2, r3, #22
 800d09a:	d402      	bmi.n	800d0a2 <_vfiprintf_r+0x202>
 800d09c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d09e:	f7fe faa5 	bl	800b5ec <__retarget_lock_release_recursive>
 800d0a2:	89ab      	ldrh	r3, [r5, #12]
 800d0a4:	065b      	lsls	r3, r3, #25
 800d0a6:	f53f af1d 	bmi.w	800cee4 <_vfiprintf_r+0x44>
 800d0aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0ac:	e71c      	b.n	800cee8 <_vfiprintf_r+0x48>
 800d0ae:	ab03      	add	r3, sp, #12
 800d0b0:	9300      	str	r3, [sp, #0]
 800d0b2:	462a      	mov	r2, r5
 800d0b4:	4b06      	ldr	r3, [pc, #24]	; (800d0d0 <_vfiprintf_r+0x230>)
 800d0b6:	a904      	add	r1, sp, #16
 800d0b8:	4630      	mov	r0, r6
 800d0ba:	f7fd fecf 	bl	800ae5c <_printf_i>
 800d0be:	e7e4      	b.n	800d08a <_vfiprintf_r+0x1ea>
 800d0c0:	08016cbc 	.word	0x08016cbc
 800d0c4:	08016cc2 	.word	0x08016cc2
 800d0c8:	08016cc6 	.word	0x08016cc6
 800d0cc:	0800a929 	.word	0x0800a929
 800d0d0:	0800ce7b 	.word	0x0800ce7b

0800d0d4 <__sflush_r>:
 800d0d4:	898a      	ldrh	r2, [r1, #12]
 800d0d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0d8:	4605      	mov	r5, r0
 800d0da:	0710      	lsls	r0, r2, #28
 800d0dc:	460c      	mov	r4, r1
 800d0de:	d457      	bmi.n	800d190 <__sflush_r+0xbc>
 800d0e0:	684b      	ldr	r3, [r1, #4]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	dc04      	bgt.n	800d0f0 <__sflush_r+0x1c>
 800d0e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	dc01      	bgt.n	800d0f0 <__sflush_r+0x1c>
 800d0ec:	2000      	movs	r0, #0
 800d0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0f2:	2e00      	cmp	r6, #0
 800d0f4:	d0fa      	beq.n	800d0ec <__sflush_r+0x18>
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d0fc:	682f      	ldr	r7, [r5, #0]
 800d0fe:	6a21      	ldr	r1, [r4, #32]
 800d100:	602b      	str	r3, [r5, #0]
 800d102:	d032      	beq.n	800d16a <__sflush_r+0x96>
 800d104:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d106:	89a3      	ldrh	r3, [r4, #12]
 800d108:	075a      	lsls	r2, r3, #29
 800d10a:	d505      	bpl.n	800d118 <__sflush_r+0x44>
 800d10c:	6863      	ldr	r3, [r4, #4]
 800d10e:	1ac0      	subs	r0, r0, r3
 800d110:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d112:	b10b      	cbz	r3, 800d118 <__sflush_r+0x44>
 800d114:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d116:	1ac0      	subs	r0, r0, r3
 800d118:	2300      	movs	r3, #0
 800d11a:	4602      	mov	r2, r0
 800d11c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d11e:	6a21      	ldr	r1, [r4, #32]
 800d120:	4628      	mov	r0, r5
 800d122:	47b0      	blx	r6
 800d124:	1c43      	adds	r3, r0, #1
 800d126:	89a3      	ldrh	r3, [r4, #12]
 800d128:	d106      	bne.n	800d138 <__sflush_r+0x64>
 800d12a:	6829      	ldr	r1, [r5, #0]
 800d12c:	291d      	cmp	r1, #29
 800d12e:	d82b      	bhi.n	800d188 <__sflush_r+0xb4>
 800d130:	4a28      	ldr	r2, [pc, #160]	; (800d1d4 <__sflush_r+0x100>)
 800d132:	410a      	asrs	r2, r1
 800d134:	07d6      	lsls	r6, r2, #31
 800d136:	d427      	bmi.n	800d188 <__sflush_r+0xb4>
 800d138:	2200      	movs	r2, #0
 800d13a:	6062      	str	r2, [r4, #4]
 800d13c:	04d9      	lsls	r1, r3, #19
 800d13e:	6922      	ldr	r2, [r4, #16]
 800d140:	6022      	str	r2, [r4, #0]
 800d142:	d504      	bpl.n	800d14e <__sflush_r+0x7a>
 800d144:	1c42      	adds	r2, r0, #1
 800d146:	d101      	bne.n	800d14c <__sflush_r+0x78>
 800d148:	682b      	ldr	r3, [r5, #0]
 800d14a:	b903      	cbnz	r3, 800d14e <__sflush_r+0x7a>
 800d14c:	6560      	str	r0, [r4, #84]	; 0x54
 800d14e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d150:	602f      	str	r7, [r5, #0]
 800d152:	2900      	cmp	r1, #0
 800d154:	d0ca      	beq.n	800d0ec <__sflush_r+0x18>
 800d156:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d15a:	4299      	cmp	r1, r3
 800d15c:	d002      	beq.n	800d164 <__sflush_r+0x90>
 800d15e:	4628      	mov	r0, r5
 800d160:	f7ff f8aa 	bl	800c2b8 <_free_r>
 800d164:	2000      	movs	r0, #0
 800d166:	6360      	str	r0, [r4, #52]	; 0x34
 800d168:	e7c1      	b.n	800d0ee <__sflush_r+0x1a>
 800d16a:	2301      	movs	r3, #1
 800d16c:	4628      	mov	r0, r5
 800d16e:	47b0      	blx	r6
 800d170:	1c41      	adds	r1, r0, #1
 800d172:	d1c8      	bne.n	800d106 <__sflush_r+0x32>
 800d174:	682b      	ldr	r3, [r5, #0]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d0c5      	beq.n	800d106 <__sflush_r+0x32>
 800d17a:	2b1d      	cmp	r3, #29
 800d17c:	d001      	beq.n	800d182 <__sflush_r+0xae>
 800d17e:	2b16      	cmp	r3, #22
 800d180:	d101      	bne.n	800d186 <__sflush_r+0xb2>
 800d182:	602f      	str	r7, [r5, #0]
 800d184:	e7b2      	b.n	800d0ec <__sflush_r+0x18>
 800d186:	89a3      	ldrh	r3, [r4, #12]
 800d188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d18c:	81a3      	strh	r3, [r4, #12]
 800d18e:	e7ae      	b.n	800d0ee <__sflush_r+0x1a>
 800d190:	690f      	ldr	r7, [r1, #16]
 800d192:	2f00      	cmp	r7, #0
 800d194:	d0aa      	beq.n	800d0ec <__sflush_r+0x18>
 800d196:	0793      	lsls	r3, r2, #30
 800d198:	680e      	ldr	r6, [r1, #0]
 800d19a:	bf08      	it	eq
 800d19c:	694b      	ldreq	r3, [r1, #20]
 800d19e:	600f      	str	r7, [r1, #0]
 800d1a0:	bf18      	it	ne
 800d1a2:	2300      	movne	r3, #0
 800d1a4:	1bf6      	subs	r6, r6, r7
 800d1a6:	608b      	str	r3, [r1, #8]
 800d1a8:	2e00      	cmp	r6, #0
 800d1aa:	dd9f      	ble.n	800d0ec <__sflush_r+0x18>
 800d1ac:	6a21      	ldr	r1, [r4, #32]
 800d1ae:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d1b2:	4633      	mov	r3, r6
 800d1b4:	463a      	mov	r2, r7
 800d1b6:	4628      	mov	r0, r5
 800d1b8:	47e0      	blx	ip
 800d1ba:	2800      	cmp	r0, #0
 800d1bc:	dc06      	bgt.n	800d1cc <__sflush_r+0xf8>
 800d1be:	89a3      	ldrh	r3, [r4, #12]
 800d1c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1c4:	81a3      	strh	r3, [r4, #12]
 800d1c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d1ca:	e790      	b.n	800d0ee <__sflush_r+0x1a>
 800d1cc:	4407      	add	r7, r0
 800d1ce:	1a36      	subs	r6, r6, r0
 800d1d0:	e7ea      	b.n	800d1a8 <__sflush_r+0xd4>
 800d1d2:	bf00      	nop
 800d1d4:	dfbffffe 	.word	0xdfbffffe

0800d1d8 <_fflush_r>:
 800d1d8:	b538      	push	{r3, r4, r5, lr}
 800d1da:	690b      	ldr	r3, [r1, #16]
 800d1dc:	4605      	mov	r5, r0
 800d1de:	460c      	mov	r4, r1
 800d1e0:	b913      	cbnz	r3, 800d1e8 <_fflush_r+0x10>
 800d1e2:	2500      	movs	r5, #0
 800d1e4:	4628      	mov	r0, r5
 800d1e6:	bd38      	pop	{r3, r4, r5, pc}
 800d1e8:	b118      	cbz	r0, 800d1f2 <_fflush_r+0x1a>
 800d1ea:	6a03      	ldr	r3, [r0, #32]
 800d1ec:	b90b      	cbnz	r3, 800d1f2 <_fflush_r+0x1a>
 800d1ee:	f7fd ffe3 	bl	800b1b8 <__sinit>
 800d1f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d0f3      	beq.n	800d1e2 <_fflush_r+0xa>
 800d1fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d1fc:	07d0      	lsls	r0, r2, #31
 800d1fe:	d404      	bmi.n	800d20a <_fflush_r+0x32>
 800d200:	0599      	lsls	r1, r3, #22
 800d202:	d402      	bmi.n	800d20a <_fflush_r+0x32>
 800d204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d206:	f7fe f9f0 	bl	800b5ea <__retarget_lock_acquire_recursive>
 800d20a:	4628      	mov	r0, r5
 800d20c:	4621      	mov	r1, r4
 800d20e:	f7ff ff61 	bl	800d0d4 <__sflush_r>
 800d212:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d214:	07da      	lsls	r2, r3, #31
 800d216:	4605      	mov	r5, r0
 800d218:	d4e4      	bmi.n	800d1e4 <_fflush_r+0xc>
 800d21a:	89a3      	ldrh	r3, [r4, #12]
 800d21c:	059b      	lsls	r3, r3, #22
 800d21e:	d4e1      	bmi.n	800d1e4 <_fflush_r+0xc>
 800d220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d222:	f7fe f9e3 	bl	800b5ec <__retarget_lock_release_recursive>
 800d226:	e7dd      	b.n	800d1e4 <_fflush_r+0xc>

0800d228 <__swhatbuf_r>:
 800d228:	b570      	push	{r4, r5, r6, lr}
 800d22a:	460c      	mov	r4, r1
 800d22c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d230:	2900      	cmp	r1, #0
 800d232:	b096      	sub	sp, #88	; 0x58
 800d234:	4615      	mov	r5, r2
 800d236:	461e      	mov	r6, r3
 800d238:	da0d      	bge.n	800d256 <__swhatbuf_r+0x2e>
 800d23a:	89a3      	ldrh	r3, [r4, #12]
 800d23c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d240:	f04f 0100 	mov.w	r1, #0
 800d244:	bf0c      	ite	eq
 800d246:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d24a:	2340      	movne	r3, #64	; 0x40
 800d24c:	2000      	movs	r0, #0
 800d24e:	6031      	str	r1, [r6, #0]
 800d250:	602b      	str	r3, [r5, #0]
 800d252:	b016      	add	sp, #88	; 0x58
 800d254:	bd70      	pop	{r4, r5, r6, pc}
 800d256:	466a      	mov	r2, sp
 800d258:	f000 f862 	bl	800d320 <_fstat_r>
 800d25c:	2800      	cmp	r0, #0
 800d25e:	dbec      	blt.n	800d23a <__swhatbuf_r+0x12>
 800d260:	9901      	ldr	r1, [sp, #4]
 800d262:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d266:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d26a:	4259      	negs	r1, r3
 800d26c:	4159      	adcs	r1, r3
 800d26e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d272:	e7eb      	b.n	800d24c <__swhatbuf_r+0x24>

0800d274 <__smakebuf_r>:
 800d274:	898b      	ldrh	r3, [r1, #12]
 800d276:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d278:	079d      	lsls	r5, r3, #30
 800d27a:	4606      	mov	r6, r0
 800d27c:	460c      	mov	r4, r1
 800d27e:	d507      	bpl.n	800d290 <__smakebuf_r+0x1c>
 800d280:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d284:	6023      	str	r3, [r4, #0]
 800d286:	6123      	str	r3, [r4, #16]
 800d288:	2301      	movs	r3, #1
 800d28a:	6163      	str	r3, [r4, #20]
 800d28c:	b002      	add	sp, #8
 800d28e:	bd70      	pop	{r4, r5, r6, pc}
 800d290:	ab01      	add	r3, sp, #4
 800d292:	466a      	mov	r2, sp
 800d294:	f7ff ffc8 	bl	800d228 <__swhatbuf_r>
 800d298:	9900      	ldr	r1, [sp, #0]
 800d29a:	4605      	mov	r5, r0
 800d29c:	4630      	mov	r0, r6
 800d29e:	f7ff f87d 	bl	800c39c <_malloc_r>
 800d2a2:	b948      	cbnz	r0, 800d2b8 <__smakebuf_r+0x44>
 800d2a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2a8:	059a      	lsls	r2, r3, #22
 800d2aa:	d4ef      	bmi.n	800d28c <__smakebuf_r+0x18>
 800d2ac:	f023 0303 	bic.w	r3, r3, #3
 800d2b0:	f043 0302 	orr.w	r3, r3, #2
 800d2b4:	81a3      	strh	r3, [r4, #12]
 800d2b6:	e7e3      	b.n	800d280 <__smakebuf_r+0xc>
 800d2b8:	89a3      	ldrh	r3, [r4, #12]
 800d2ba:	6020      	str	r0, [r4, #0]
 800d2bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2c0:	81a3      	strh	r3, [r4, #12]
 800d2c2:	9b00      	ldr	r3, [sp, #0]
 800d2c4:	6163      	str	r3, [r4, #20]
 800d2c6:	9b01      	ldr	r3, [sp, #4]
 800d2c8:	6120      	str	r0, [r4, #16]
 800d2ca:	b15b      	cbz	r3, 800d2e4 <__smakebuf_r+0x70>
 800d2cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2d0:	4630      	mov	r0, r6
 800d2d2:	f000 f837 	bl	800d344 <_isatty_r>
 800d2d6:	b128      	cbz	r0, 800d2e4 <__smakebuf_r+0x70>
 800d2d8:	89a3      	ldrh	r3, [r4, #12]
 800d2da:	f023 0303 	bic.w	r3, r3, #3
 800d2de:	f043 0301 	orr.w	r3, r3, #1
 800d2e2:	81a3      	strh	r3, [r4, #12]
 800d2e4:	89a3      	ldrh	r3, [r4, #12]
 800d2e6:	431d      	orrs	r5, r3
 800d2e8:	81a5      	strh	r5, [r4, #12]
 800d2ea:	e7cf      	b.n	800d28c <__smakebuf_r+0x18>

0800d2ec <memmove>:
 800d2ec:	4288      	cmp	r0, r1
 800d2ee:	b510      	push	{r4, lr}
 800d2f0:	eb01 0402 	add.w	r4, r1, r2
 800d2f4:	d902      	bls.n	800d2fc <memmove+0x10>
 800d2f6:	4284      	cmp	r4, r0
 800d2f8:	4623      	mov	r3, r4
 800d2fa:	d807      	bhi.n	800d30c <memmove+0x20>
 800d2fc:	1e43      	subs	r3, r0, #1
 800d2fe:	42a1      	cmp	r1, r4
 800d300:	d008      	beq.n	800d314 <memmove+0x28>
 800d302:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d306:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d30a:	e7f8      	b.n	800d2fe <memmove+0x12>
 800d30c:	4402      	add	r2, r0
 800d30e:	4601      	mov	r1, r0
 800d310:	428a      	cmp	r2, r1
 800d312:	d100      	bne.n	800d316 <memmove+0x2a>
 800d314:	bd10      	pop	{r4, pc}
 800d316:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d31a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d31e:	e7f7      	b.n	800d310 <memmove+0x24>

0800d320 <_fstat_r>:
 800d320:	b538      	push	{r3, r4, r5, lr}
 800d322:	4d07      	ldr	r5, [pc, #28]	; (800d340 <_fstat_r+0x20>)
 800d324:	2300      	movs	r3, #0
 800d326:	4604      	mov	r4, r0
 800d328:	4608      	mov	r0, r1
 800d32a:	4611      	mov	r1, r2
 800d32c:	602b      	str	r3, [r5, #0]
 800d32e:	f7fb faf0 	bl	8008912 <_fstat>
 800d332:	1c43      	adds	r3, r0, #1
 800d334:	d102      	bne.n	800d33c <_fstat_r+0x1c>
 800d336:	682b      	ldr	r3, [r5, #0]
 800d338:	b103      	cbz	r3, 800d33c <_fstat_r+0x1c>
 800d33a:	6023      	str	r3, [r4, #0]
 800d33c:	bd38      	pop	{r3, r4, r5, pc}
 800d33e:	bf00      	nop
 800d340:	20000878 	.word	0x20000878

0800d344 <_isatty_r>:
 800d344:	b538      	push	{r3, r4, r5, lr}
 800d346:	4d06      	ldr	r5, [pc, #24]	; (800d360 <_isatty_r+0x1c>)
 800d348:	2300      	movs	r3, #0
 800d34a:	4604      	mov	r4, r0
 800d34c:	4608      	mov	r0, r1
 800d34e:	602b      	str	r3, [r5, #0]
 800d350:	f7fb faee 	bl	8008930 <_isatty>
 800d354:	1c43      	adds	r3, r0, #1
 800d356:	d102      	bne.n	800d35e <_isatty_r+0x1a>
 800d358:	682b      	ldr	r3, [r5, #0]
 800d35a:	b103      	cbz	r3, 800d35e <_isatty_r+0x1a>
 800d35c:	6023      	str	r3, [r4, #0]
 800d35e:	bd38      	pop	{r3, r4, r5, pc}
 800d360:	20000878 	.word	0x20000878

0800d364 <_sbrk_r>:
 800d364:	b538      	push	{r3, r4, r5, lr}
 800d366:	4d06      	ldr	r5, [pc, #24]	; (800d380 <_sbrk_r+0x1c>)
 800d368:	2300      	movs	r3, #0
 800d36a:	4604      	mov	r4, r0
 800d36c:	4608      	mov	r0, r1
 800d36e:	602b      	str	r3, [r5, #0]
 800d370:	f7fb faf4 	bl	800895c <_sbrk>
 800d374:	1c43      	adds	r3, r0, #1
 800d376:	d102      	bne.n	800d37e <_sbrk_r+0x1a>
 800d378:	682b      	ldr	r3, [r5, #0]
 800d37a:	b103      	cbz	r3, 800d37e <_sbrk_r+0x1a>
 800d37c:	6023      	str	r3, [r4, #0]
 800d37e:	bd38      	pop	{r3, r4, r5, pc}
 800d380:	20000878 	.word	0x20000878

0800d384 <memcpy>:
 800d384:	440a      	add	r2, r1
 800d386:	4291      	cmp	r1, r2
 800d388:	f100 33ff 	add.w	r3, r0, #4294967295
 800d38c:	d100      	bne.n	800d390 <memcpy+0xc>
 800d38e:	4770      	bx	lr
 800d390:	b510      	push	{r4, lr}
 800d392:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d396:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d39a:	4291      	cmp	r1, r2
 800d39c:	d1f9      	bne.n	800d392 <memcpy+0xe>
 800d39e:	bd10      	pop	{r4, pc}

0800d3a0 <__assert_func>:
 800d3a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d3a2:	4614      	mov	r4, r2
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	4b09      	ldr	r3, [pc, #36]	; (800d3cc <__assert_func+0x2c>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4605      	mov	r5, r0
 800d3ac:	68d8      	ldr	r0, [r3, #12]
 800d3ae:	b14c      	cbz	r4, 800d3c4 <__assert_func+0x24>
 800d3b0:	4b07      	ldr	r3, [pc, #28]	; (800d3d0 <__assert_func+0x30>)
 800d3b2:	9100      	str	r1, [sp, #0]
 800d3b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d3b8:	4906      	ldr	r1, [pc, #24]	; (800d3d4 <__assert_func+0x34>)
 800d3ba:	462b      	mov	r3, r5
 800d3bc:	f000 f870 	bl	800d4a0 <fiprintf>
 800d3c0:	f000 f880 	bl	800d4c4 <abort>
 800d3c4:	4b04      	ldr	r3, [pc, #16]	; (800d3d8 <__assert_func+0x38>)
 800d3c6:	461c      	mov	r4, r3
 800d3c8:	e7f3      	b.n	800d3b2 <__assert_func+0x12>
 800d3ca:	bf00      	nop
 800d3cc:	200000ac 	.word	0x200000ac
 800d3d0:	08016cd7 	.word	0x08016cd7
 800d3d4:	08016ce4 	.word	0x08016ce4
 800d3d8:	08016d12 	.word	0x08016d12

0800d3dc <_calloc_r>:
 800d3dc:	b570      	push	{r4, r5, r6, lr}
 800d3de:	fba1 5402 	umull	r5, r4, r1, r2
 800d3e2:	b934      	cbnz	r4, 800d3f2 <_calloc_r+0x16>
 800d3e4:	4629      	mov	r1, r5
 800d3e6:	f7fe ffd9 	bl	800c39c <_malloc_r>
 800d3ea:	4606      	mov	r6, r0
 800d3ec:	b928      	cbnz	r0, 800d3fa <_calloc_r+0x1e>
 800d3ee:	4630      	mov	r0, r6
 800d3f0:	bd70      	pop	{r4, r5, r6, pc}
 800d3f2:	220c      	movs	r2, #12
 800d3f4:	6002      	str	r2, [r0, #0]
 800d3f6:	2600      	movs	r6, #0
 800d3f8:	e7f9      	b.n	800d3ee <_calloc_r+0x12>
 800d3fa:	462a      	mov	r2, r5
 800d3fc:	4621      	mov	r1, r4
 800d3fe:	f7fe f877 	bl	800b4f0 <memset>
 800d402:	e7f4      	b.n	800d3ee <_calloc_r+0x12>

0800d404 <__ascii_mbtowc>:
 800d404:	b082      	sub	sp, #8
 800d406:	b901      	cbnz	r1, 800d40a <__ascii_mbtowc+0x6>
 800d408:	a901      	add	r1, sp, #4
 800d40a:	b142      	cbz	r2, 800d41e <__ascii_mbtowc+0x1a>
 800d40c:	b14b      	cbz	r3, 800d422 <__ascii_mbtowc+0x1e>
 800d40e:	7813      	ldrb	r3, [r2, #0]
 800d410:	600b      	str	r3, [r1, #0]
 800d412:	7812      	ldrb	r2, [r2, #0]
 800d414:	1e10      	subs	r0, r2, #0
 800d416:	bf18      	it	ne
 800d418:	2001      	movne	r0, #1
 800d41a:	b002      	add	sp, #8
 800d41c:	4770      	bx	lr
 800d41e:	4610      	mov	r0, r2
 800d420:	e7fb      	b.n	800d41a <__ascii_mbtowc+0x16>
 800d422:	f06f 0001 	mvn.w	r0, #1
 800d426:	e7f8      	b.n	800d41a <__ascii_mbtowc+0x16>

0800d428 <_realloc_r>:
 800d428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d42c:	4680      	mov	r8, r0
 800d42e:	4614      	mov	r4, r2
 800d430:	460e      	mov	r6, r1
 800d432:	b921      	cbnz	r1, 800d43e <_realloc_r+0x16>
 800d434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d438:	4611      	mov	r1, r2
 800d43a:	f7fe bfaf 	b.w	800c39c <_malloc_r>
 800d43e:	b92a      	cbnz	r2, 800d44c <_realloc_r+0x24>
 800d440:	f7fe ff3a 	bl	800c2b8 <_free_r>
 800d444:	4625      	mov	r5, r4
 800d446:	4628      	mov	r0, r5
 800d448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d44c:	f000 f841 	bl	800d4d2 <_malloc_usable_size_r>
 800d450:	4284      	cmp	r4, r0
 800d452:	4607      	mov	r7, r0
 800d454:	d802      	bhi.n	800d45c <_realloc_r+0x34>
 800d456:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d45a:	d812      	bhi.n	800d482 <_realloc_r+0x5a>
 800d45c:	4621      	mov	r1, r4
 800d45e:	4640      	mov	r0, r8
 800d460:	f7fe ff9c 	bl	800c39c <_malloc_r>
 800d464:	4605      	mov	r5, r0
 800d466:	2800      	cmp	r0, #0
 800d468:	d0ed      	beq.n	800d446 <_realloc_r+0x1e>
 800d46a:	42bc      	cmp	r4, r7
 800d46c:	4622      	mov	r2, r4
 800d46e:	4631      	mov	r1, r6
 800d470:	bf28      	it	cs
 800d472:	463a      	movcs	r2, r7
 800d474:	f7ff ff86 	bl	800d384 <memcpy>
 800d478:	4631      	mov	r1, r6
 800d47a:	4640      	mov	r0, r8
 800d47c:	f7fe ff1c 	bl	800c2b8 <_free_r>
 800d480:	e7e1      	b.n	800d446 <_realloc_r+0x1e>
 800d482:	4635      	mov	r5, r6
 800d484:	e7df      	b.n	800d446 <_realloc_r+0x1e>

0800d486 <__ascii_wctomb>:
 800d486:	4603      	mov	r3, r0
 800d488:	4608      	mov	r0, r1
 800d48a:	b141      	cbz	r1, 800d49e <__ascii_wctomb+0x18>
 800d48c:	2aff      	cmp	r2, #255	; 0xff
 800d48e:	d904      	bls.n	800d49a <__ascii_wctomb+0x14>
 800d490:	228a      	movs	r2, #138	; 0x8a
 800d492:	601a      	str	r2, [r3, #0]
 800d494:	f04f 30ff 	mov.w	r0, #4294967295
 800d498:	4770      	bx	lr
 800d49a:	700a      	strb	r2, [r1, #0]
 800d49c:	2001      	movs	r0, #1
 800d49e:	4770      	bx	lr

0800d4a0 <fiprintf>:
 800d4a0:	b40e      	push	{r1, r2, r3}
 800d4a2:	b503      	push	{r0, r1, lr}
 800d4a4:	4601      	mov	r1, r0
 800d4a6:	ab03      	add	r3, sp, #12
 800d4a8:	4805      	ldr	r0, [pc, #20]	; (800d4c0 <fiprintf+0x20>)
 800d4aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4ae:	6800      	ldr	r0, [r0, #0]
 800d4b0:	9301      	str	r3, [sp, #4]
 800d4b2:	f7ff fcf5 	bl	800cea0 <_vfiprintf_r>
 800d4b6:	b002      	add	sp, #8
 800d4b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4bc:	b003      	add	sp, #12
 800d4be:	4770      	bx	lr
 800d4c0:	200000ac 	.word	0x200000ac

0800d4c4 <abort>:
 800d4c4:	b508      	push	{r3, lr}
 800d4c6:	2006      	movs	r0, #6
 800d4c8:	f000 f834 	bl	800d534 <raise>
 800d4cc:	2001      	movs	r0, #1
 800d4ce:	f7fb f9d2 	bl	8008876 <_exit>

0800d4d2 <_malloc_usable_size_r>:
 800d4d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4d6:	1f18      	subs	r0, r3, #4
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	bfbc      	itt	lt
 800d4dc:	580b      	ldrlt	r3, [r1, r0]
 800d4de:	18c0      	addlt	r0, r0, r3
 800d4e0:	4770      	bx	lr

0800d4e2 <_raise_r>:
 800d4e2:	291f      	cmp	r1, #31
 800d4e4:	b538      	push	{r3, r4, r5, lr}
 800d4e6:	4604      	mov	r4, r0
 800d4e8:	460d      	mov	r5, r1
 800d4ea:	d904      	bls.n	800d4f6 <_raise_r+0x14>
 800d4ec:	2316      	movs	r3, #22
 800d4ee:	6003      	str	r3, [r0, #0]
 800d4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d4f4:	bd38      	pop	{r3, r4, r5, pc}
 800d4f6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d4f8:	b112      	cbz	r2, 800d500 <_raise_r+0x1e>
 800d4fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d4fe:	b94b      	cbnz	r3, 800d514 <_raise_r+0x32>
 800d500:	4620      	mov	r0, r4
 800d502:	f000 f831 	bl	800d568 <_getpid_r>
 800d506:	462a      	mov	r2, r5
 800d508:	4601      	mov	r1, r0
 800d50a:	4620      	mov	r0, r4
 800d50c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d510:	f000 b818 	b.w	800d544 <_kill_r>
 800d514:	2b01      	cmp	r3, #1
 800d516:	d00a      	beq.n	800d52e <_raise_r+0x4c>
 800d518:	1c59      	adds	r1, r3, #1
 800d51a:	d103      	bne.n	800d524 <_raise_r+0x42>
 800d51c:	2316      	movs	r3, #22
 800d51e:	6003      	str	r3, [r0, #0]
 800d520:	2001      	movs	r0, #1
 800d522:	e7e7      	b.n	800d4f4 <_raise_r+0x12>
 800d524:	2400      	movs	r4, #0
 800d526:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d52a:	4628      	mov	r0, r5
 800d52c:	4798      	blx	r3
 800d52e:	2000      	movs	r0, #0
 800d530:	e7e0      	b.n	800d4f4 <_raise_r+0x12>
	...

0800d534 <raise>:
 800d534:	4b02      	ldr	r3, [pc, #8]	; (800d540 <raise+0xc>)
 800d536:	4601      	mov	r1, r0
 800d538:	6818      	ldr	r0, [r3, #0]
 800d53a:	f7ff bfd2 	b.w	800d4e2 <_raise_r>
 800d53e:	bf00      	nop
 800d540:	200000ac 	.word	0x200000ac

0800d544 <_kill_r>:
 800d544:	b538      	push	{r3, r4, r5, lr}
 800d546:	4d07      	ldr	r5, [pc, #28]	; (800d564 <_kill_r+0x20>)
 800d548:	2300      	movs	r3, #0
 800d54a:	4604      	mov	r4, r0
 800d54c:	4608      	mov	r0, r1
 800d54e:	4611      	mov	r1, r2
 800d550:	602b      	str	r3, [r5, #0]
 800d552:	f7fb f980 	bl	8008856 <_kill>
 800d556:	1c43      	adds	r3, r0, #1
 800d558:	d102      	bne.n	800d560 <_kill_r+0x1c>
 800d55a:	682b      	ldr	r3, [r5, #0]
 800d55c:	b103      	cbz	r3, 800d560 <_kill_r+0x1c>
 800d55e:	6023      	str	r3, [r4, #0]
 800d560:	bd38      	pop	{r3, r4, r5, pc}
 800d562:	bf00      	nop
 800d564:	20000878 	.word	0x20000878

0800d568 <_getpid_r>:
 800d568:	f7fb b96e 	b.w	8008848 <_getpid>

0800d56c <_init>:
 800d56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d56e:	bf00      	nop
 800d570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d572:	bc08      	pop	{r3}
 800d574:	469e      	mov	lr, r3
 800d576:	4770      	bx	lr

0800d578 <_fini>:
 800d578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d57a:	bf00      	nop
 800d57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d57e:	bc08      	pop	{r3}
 800d580:	469e      	mov	lr, r3
 800d582:	4770      	bx	lr
